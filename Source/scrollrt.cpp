// Address range: 0xae540 - 0xae550
int32_t ClearCursor(int32_t a1)
{
	// 0xae540
	*(int32_t *)(g23 - 0x4bb4) = 0;
	*(int32_t *)(g23 - 0x4bc4) = 0;
	return g34;
}

// Address range: 0xae550 - 0xae610
int32_t scrollrt_draw_cursor_back_buffer(int32_t a1)
{
	int32_t v1 = g10; // 0xae554
	if (*(int32_t *)(g23 - 0x4bb4) == 0) {
		// 0xae5f4
		g10 = v1;
		return g34;
	}
	int32_t v2 = *(int32_t *)(g23 - 0x4bb0);                    // 0xae574
	int32_t v3 = *(int32_t *)(g23 - 0x7804);                    // 0xae578
	int32_t v4 = *(int32_t *)(g23 - 0x4bac);                    // 0xae580
	int32_t v5 = *(int32_t *)(g23 - 0x5884);                    // 0xae58c
	int32_t v6 = *(int32_t *)(g23 - 0x4bb8);                    // 0xae590
	int32_t v7 = v4 + 768 * v2 + 0x1e000 + 64 + *(int32_t *)v3; // 0xae59c
	int32_t v8 = v6 - 1;                                        // r29
	int32_t v9 = g23;                                           // 0xae5e0
	if (v6 == 0) {
		// 0xae5cc
		g37 = *(int32_t *)(v9 - 0x4bb4);
		g34 = *(int32_t *)(v9 - 0x4bb8);
		*(int32_t *)(v9 - 0x4bbc) = *(int32_t *)(v9 - 0x4bac);
		*(int32_t *)(g23 - 0x4bc0) = *(int32_t *)(v9 - 0x4bb0);
		*(int32_t *)(g23 - 0x4bc4) = g37;
		*(int32_t *)(g23 - 0x4bc8) = g34;
		*(int32_t *)(g23 - 0x4bb4) = 0;
		// branch -> 0xae5f4
		// 0xae5f4
		g10 = v1;
		return g34;
	}
	function_e09bc((int16_t *)v7, v5, *(int32_t *)(g23 - 0x4bb4));
	v9 = g23;
	while (v8 != 0) {
		// 0xae5a4
		v8--;
		v5 += *(int32_t *)(g23 - 0x4bb4);
		v7 += 768;
		function_e09bc((int16_t *)v7, v5, *(int32_t *)(g23 - 0x4bb4));
		v9 = g23;
		// continue -> 0xae5a4
	}
	// 0xae5cc
	g37 = *(int32_t *)(v9 - 0x4bb4);
	g34 = *(int32_t *)(v9 - 0x4bb8);
	*(int32_t *)(v9 - 0x4bbc) = *(int32_t *)(v9 - 0x4bac);
	*(int32_t *)(g23 - 0x4bc0) = *(int32_t *)(v9 - 0x4bb0);
	*(int32_t *)(g23 - 0x4bc4) = g37;
	*(int32_t *)(g23 - 0x4bc8) = g34;
	*(int32_t *)(g23 - 0x4bb4) = 0;
	// branch -> 0xae5f4
	// 0xae5f4
	g10 = v1;
	return g34;
}

// Address range: 0xae610 - 0xae8b4
int32_t scrollrt_draw_cursor_item(int32_t a1)
{
	int32_t v1 = g10;                        // 0xae614
	int32_t v2 = *(int32_t *)(g23 - 0x7744); // 0xae618
	g35 = v2;
	g30 = *(int32_t *)(g23 - 0x7634);
	g31 = *(int32_t *)(g23 - 0x77a8);
	int32_t v3 = *(int32_t *)(g23 - 0x7654); // 0xae624
	g32 = v3;
	int32_t v4 = *(int32_t *)(g23 - 0x7650); // 0xae628
	g33 = v4;
	g36 = *(int32_t *)(g23 - 0x7804);
	if (*(int32_t *)v2 < 1 || *(int32_t *)v4 == 0 || *(int32_t *)v3 == 0) {
		// 0xae8a0
		g10 = v1;
		return g34;
	}
	int32_t v5 = *(int32_t *)*(int32_t *)(g23 - 0x76a8); // 0xae664
	g34 = v5;
	int32_t v6 = v5 - 1; // 0xae668
	g29 = v6;
	if (v6 > -1) {
		// 0xae67c
		if (v6 > 639) {
			// 0xae8a0
			g10 = v1;
			return g34;
		}
	} else {
		// 0xae674
		g29 = 0;
		v6 = 0;
		// branch -> 0xae684
	}
	int32_t v7 = *(int32_t *)*(int32_t *)(g23 - 0x76ac); // 0xae688
	g34 = v7;
	int32_t v8 = v7 - 1; // 0xae68c
	g28 = v8;
	if (v8 > -1) {
		// 0xae6a0
		if (v8 > 479) {
			// 0xae8a0
			g10 = v1;
			return g34;
		}
	} else {
		// 0xae698
		g28 = 0;
		// branch -> 0xae6a8
	}
	// 0xae6a8
	*(int32_t *)(g23 - 0x4bac) = v6;
	*(int32_t *)(g23 - 0x4bb4) = *(int32_t *)g33 + 1 + g29;
	int32_t *v9 = (int32_t *)(g23 - 0x4bb4); // 0xae6bc
	int32_t v10 = g23;                       // 0xae6d0
	if (*v9 >= 640) {
		// 0xae6c8
		*v9 = 639;
		v10 = g23;
		// branch -> 0xae6d0
	}
	int32_t v11 = __asm_rlwinm(*(int32_t *)(v10 - 0x4bac), 0, 0, 29); // r3
	*(int32_t *)(g23 - 0x4bb0) = g28;
	*(int32_t *)(g23 - 0x4bac) = v11;
	*(int32_t *)(g23 - 0x4bb4) = *(int32_t *)(v10 - 0x4bb4) | 3;
	int32_t *v12 = (int32_t *)(g23 - 0x4bb4); // 0xae6f0
	*v12 = *v12 + 1 - *(int32_t *)(g23 - 0x4bac);
	*(int32_t *)(g23 - 0x4bb8) = *(int32_t *)g32 + 1 + g28;
	int32_t *v13 = (int32_t *)(g23 - 0x4bb8); // 0xae710
	int32_t v14 = g23;                        // 0xae738
	if (*v13 >= 480) {
		// 0xae71c
		*v13 = 479;
		v14 = g23;
		// branch -> 0xae724
	}
	int32_t v15 = *(int32_t *)(v14 - 0x4bb0); // 0xae724
	int32_t *v16 = (int32_t *)(v14 - 0x4bb8); // 0xae728
	int32_t v17 = *(int32_t *)(v14 - 0x4bac); // 0xae738
	*v16 = *v16 + 1 - v15;
	int32_t v18 = *(int32_t *)(g23 - 0x5884); // 0xae744
	g26 = v18;
	int32_t v19 = *(int32_t *)(g23 - 0x4bb8);                     // 0xae750
	int32_t v20 = *(int32_t *)g36 + 64 + v17 + 768 * (v15 + 160); // 0xae758
	g27 = v20;
	g25 = v19 - 1;
	int32_t v21 = g23; // 0xae79c
	if (v19 != 0) {
		function_e09bc((int16_t *)v18, v20, *(int32_t *)(g23 - 0x4bb4));
		int32_t v22 = g27 + 768; // 0xae774
		g27 = v22;
		int32_t v23 = g26 + *(int32_t *)(g23 - 0x4bb4); // 0xae778
		g26 = v23;
		while (g25 != 0) {
			// 0xae760
			g25--;
			function_e09bc((int16_t *)v23, v22, *(int32_t *)(g23 - 0x4bb4));
			v22 = g27 + 768;
			g27 = v22;
			v23 = g26 + *(int32_t *)(g23 - 0x4bb4);
			g26 = v23;
			// continue -> 0xae760
		}
		// 0xae77c
		v21 = g23;
		// branch -> 0xae788
	}
	int32_t v24 = *(int32_t *)g33; // 0xae78c
	g41 = v24;
	int32_t v25 = *(int32_t *)(*(int32_t *)(v21 - 0x7698) + 2560); // 0xae794
	int32_t v26 = *(int32_t *)(v21 - 0x7808);                      // 0xae79c
	*(int32_t *)v26 = *(int32_t *)g36 + -2 - v24 + v25;
	int32_t v27 = *(int32_t *)g35; // 0xae7ac
	g40 = v27;
	if (v27 < 12) {
		// 0xae878
		g39 = v27;
		int32_t v28 = g41; // 0xae880
		g40 = v28;
		int32_t v29 = *(int32_t *)g32 + 160 + g28; // 0xae890
		g37 = v29;
		g41 = 0;
		g42 = 8;
		g34 = function_4e4c8(g29 + 65, v29, *(int32_t *)g30, v27, v28, 0, 8);
		// branch -> 0xae8a0
		// 0xae8a0
		g10 = v1;
		return g34;
	}
	// 0xae7b8
	g25 = 197;
	int32_t v30 = g31 + 0x55ec * *(int32_t *)*(int32_t *)(g23 - 0x77ac); // 0xae7c8
	int32_t v31 = 197;                                                   // 0xae7f416
	if (*(char *)(v30 + 0x5410) != 0) {
		// 0xae7d8
		g25 = 181;
		v31 = 181;
		// branch -> 0xae7dc
	}
	if (*(int32_t *)(v30 + 0x5538) == 0) {
		// 0xae7ec
		g25 = 229;
		v31 = 229;
		// branch -> 0xae7f0
	}
	int32_t v32 = g29 + 65; // 0xae7fc
	g37 = v32;
	g42 = 0;
	int32_t v33 = *(int32_t *)g32 + 160 + g28; // 0xae808
	g38 = v33;
	g13 = 8;
	CelDrawHdrClrHL(v31 % 256, v32, v33, *(int32_t *)g30, 0);
	int32_t v34 = g29 + 65;        // 0xae84c
	int32_t v35 = *(int32_t *)g30; // 0xae850
	g41 = 0;
	int32_t v36 = g28 + *(int32_t *)g32; // 0xae858
	int32_t v37 = *(int32_t *)g35;       // 0xae85c
	g39 = v37;
	g42 = 8;
	int32_t v38 = *(int32_t *)g33; // 0xae864
	g40 = v38;
	if (g25 == 229) {
		// 0xae848
		g13 = 1;
		g34 = function_4eb3c(v34, v36 + 160, v35, v37, v38, 0, 8);
		// branch -> 0xae8a0
	} else {
		int32_t v39 = v36 + 160; // 0xae83c
		g37 = v39;
		g34 = function_4e4c8(v34, v39, v35, v37, v38, 0, 8);
		// branch -> 0xae8a0
	}
	// 0xae8a0
	g10 = v1;
	return g34;
}

// Address range: 0xae8b4 - 0xaeb58
int32_t DrawMissile(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7)
{
	int32_t v1 = g10; // 0xae8b8
	g24 = a1;
	int32_t v2 = *(int32_t *)(g23 - 0x7594); // 0xae8c0
	g25 = a2;
	int32_t v3 = *(int32_t *)(g23 - 0x7668); // 0xae8c8
	g35 = v3;
	g26 = a3;
	int32_t v4 = *(int32_t *)(g23 - 0x7664); // 0xae8d0
	g36 = v4;
	g27 = a4;
	g28 = a5;
	g29 = a6;
	g30 = a7;
	char v5 = *(char *)(*(int32_t *)v2 + a2 + 112 * a1); // 0xae8f8
	int32_t result5 = v5;                                // 0xae8fc
	if (v5 == -1) {
		int32_t v6 = *(int32_t *)(g23 - 0x7660); // 0xae908
		g33 = v6;
		g31 = 0;
		if (*(int32_t *)v3 > 0) {
			int32_t result3 = result5; // 0xaeb5420
			int32_t v7 = 0;            // 0xaea3413
			int32_t result4;           // 0xaeb5419
			while (true) {
				uint32_t v8 = *(int32_t *)v6; // 0xae914
				if (v8 <= 124) {
					int32_t v9 = g36 + 180 * v8; // 0xae924
					g32 = v9;
					result4 = result3;
					int32_t v10 = v3; // 0xaea38
					int32_t v11;      // 0xaea30
					int32_t v12;      // 0xaea34
					if (*(int32_t *)(v9 + 4) == g24) {
						// 0xae934
						if (*(int32_t *)(v9 + 8) == g25) {
							// 0xae940
							if (*(int32_t *)(v9 + 108) == g30) {
								// 0xae94c
								if (*(int32_t *)(v9 + 100) != 0) {
									// 0xae958
									g34 = v9 + 64;
									int32_t v13 = function_c9b28(); // 0xae95c
									g22 = v13;
									int32_t v14 = g32; // 0xae968
									if (v13 == 0) {
										int32_t result = function_c9b70((int32_t *)(v14 + 64)); // 0xae96c
										// branch -> 0xaeb44
										// 0xaeb44
										g10 = v1;
										return result;
									}
									uint32_t v15 = *(int32_t *)(v14 + 96); // 0xae974
									g11 = v15;
									int32_t result2; // 0xae9a8
									if (v15 < 1) {
										// 0xae9a4
										result2 = function_c9b70((int32_t *)(v14 + 64));
										// branch -> 0xaeb44
										// 0xaeb44
										g10 = v1;
										return result2;
									}
									// 0xae980
									if (function_4d794(v13) > 50) {
										// 0xae980
										// branch -> 0xae9a4
										// 0xae9a4
										result2 = function_c9b70((int32_t *)(g32 + 64));
										// branch -> 0xaeb44
										// 0xaeb44
										g10 = v1;
										return result2;
									}
									int32_t v16 = function_4d794(g22);     // 0xae994
									int32_t v17 = g32;                     // 0xae998
									uint32_t v18 = *(int32_t *)(v17 + 96); // 0xae998
									if (v18 <= v16) {
										int32_t v19 = *(int32_t *)(v17 + 112);                               // 0xae9b0
										int32_t v20 = g27 + *(int32_t *)(v17 + 16);                          // 0xae9c8
										int32_t v21 = *(int32_t *)(v17 + 12) - *(int32_t *)(v17 + 84) + g26; // 0xae9cc
										if (v19 == 0) {
											int32_t v22 = *(int32_t *)(v17 + 80); // 0xaea14
											int32_t v23 = v17 + 64;               // 0xaea18
											int32_t v24 = g28;                    // 0xaea1c
											int32_t v25 = g29;                    // 0xaea20
											if (*(int32_t *)(v17 + 104) == 0) {
												// 0xaea14
												function_503bc(v21, v20, v23, v18, v22, v24, v25);
												// branch -> 0xaea28
											} else {
												// 0xae9fc
												function_50650(v21, v20, v23, v18, v22, v24, v25);
												// branch -> 0xaea28
											}
										lab_0xaea28:
											// 0xaea28
											result4 = function_c9b70((int32_t *)(g32 + 64));
											v10 = g35;
											// branch -> 0xaea30
										lab_0xaea30:
											// 0xaea30
											v11 = g33 + 4;
											g33 = v11;
											v12 = g31 + 1;
											g31 = v12;
											if (v12 >= *(int32_t *)v10) {
												// break -> 0xaeb44
												break;
											}
											result3 = result4;
											v3 = v10;
											v7 = v12;
											v6 = v11;
											// continue -> 0xae914
											continue;
										} else {
											// 0xae9d4
											g13 = v19 + 3;
											function_5053c(v21, v20, v17 + 64, v18, *(int32_t *)(v17 + 80), g28, g29);
											// branch -> 0xaea28
											goto lab_0xaea28;
										}
									}
									// 0xae9a4
									result2 = function_c9b70((int32_t *)(v17 + 64));
									// branch -> 0xaeb44
									// 0xaeb44
									g10 = v1;
									return result2;
								}
								result4 = result3;
								v10 = v3;
							} else {
								result4 = result3;
								v10 = v3;
							}
						} else {
							result4 = result3;
							v10 = v3;
						}
					}
					// 0xaea30
					v11 = v6 + 4;
					g33 = v11;
					v12 = v7 + 1;
					g31 = v12;
					if (v12 >= *(int32_t *)v10) {
						// break -> 0xaeb44
						break;
					}
					result3 = result4;
					v3 = v10;
					v7 = v12;
					v6 = v11;
					// continue -> 0xae914
					continue;
				}
				// 0xaeb44
				g10 = v1;
				return result3;
			}
			// 0xaeb44
			g10 = v1;
			return result4;
		}
	} else {
		int32_t v26 = 180 * result5 - 180 + v4; // 0xaea50
		g24 = v26;
		if (*(int32_t *)(v26 + 108) == a7) {
			// 0xaea60
			if (*(int32_t *)(v26 + 100) == 0) {
				// 0xaeb44
				g10 = v1;
				return result5;
			}
			// 0xaea6c
			g34 = v26 + 64;
			int32_t v27 = function_c9b28(); // 0xaea70
			g25 = v27;
			int32_t v28 = g24; // 0xaea7c
			int32_t result8;   // 0xaeb54
			if (v27 == 0) {
				// 0xaea7c
				result8 = function_c9b70((int32_t *)(v28 + 64));
				// branch -> 0xaeb44
			} else {
				uint32_t v29 = *(int32_t *)(v28 + 96); // 0xaea88
				g11 = v29;
				if (v29 >= 1) {
					// 0xaea94
					int32_t v30; // 0xaeab8
					if (function_4d794(v27) > 50) {
						// 0xaea94
						v30 = g24;
						// branch -> 0xaeab8
					} else {
						int32_t v31 = function_4d794(g25);     // 0xaeaa8
						int32_t v32 = g24;                     // 0xaeaac
						uint32_t v33 = *(int32_t *)(v32 + 96); // 0xaeaac
						if (v33 <= v31) {
							int32_t v34 = *(int32_t *)(v32 + 112);                               // 0xaeac4
							int32_t v35 = g27 + *(int32_t *)(v32 + 16);                          // 0xaeadc
							int32_t v36 = *(int32_t *)(v32 + 12) - *(int32_t *)(v32 + 84) + g26; // 0xaeae0
							int32_t result6;                                                     // 0xaeb40
							if (v34 != 0) {
								// 0xaeae8
								g13 = v34 + 3;
								function_5053c(v36, v35, v32 + 64, v33, *(int32_t *)(v32 + 80), g28, g29);
								// branch -> 0xaeb3c
								// 0xaeb3c
								result6 = function_c9b70((int32_t *)(g24 + 64));
								// branch -> 0xaeb44
								// 0xaeb44
								g10 = v1;
								return result6;
							}
							int32_t v37 = *(int32_t *)(v32 + 80); // 0xaeb28
							int32_t v38 = v32 + 64;               // 0xaeb2c
							int32_t v39 = g28;                    // 0xaeb30
							int32_t v40 = g29;                    // 0xaeb34
							if (*(int32_t *)(v32 + 104) == 0) {
								// 0xaeb28
								function_503bc(v36, v35, v38, v33, v37, v39, v40);
								// branch -> 0xaeb3c
							} else {
								// 0xaeb10
								function_50650(v36, v35, v38, v33, v37, v39, v40);
								// branch -> 0xaeb3c
							}
							// 0xaeb3c
							result6 = function_c9b70((int32_t *)(g24 + 64));
							// branch -> 0xaeb44
							// 0xaeb44
							g10 = v1;
							return result6;
						}
						v30 = v32;
					}
					int32_t result7 = function_c9b70((int32_t *)(v30 + 64)); // 0xaeabc
					// branch -> 0xaeb44
					// 0xaeb44
					g10 = v1;
					return result7;
				}
				// 0xaeab8
				result8 = function_c9b70((int32_t *)(v28 + 64));
				// branch -> 0xaeb44
			}
			// 0xaeb44
			g10 = v1;
			return result8;
		}
	}
	// 0xaeb44
	g10 = v1;
	return result5;
}

// Address range: 0xaeb58 - 0xaedfc
int32_t function_aeb58(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7)
{
	int32_t v1 = g10; // 0xaeb5c
	g24 = a1;
	int32_t v2 = *(int32_t *)(g23 - 0x7594); // 0xaeb64
	g25 = a2;
	int32_t v3 = *(int32_t *)(g23 - 0x7668); // 0xaeb6c
	g35 = v3;
	g26 = a3;
	int32_t v4 = *(int32_t *)(g23 - 0x7664); // 0xaeb74
	g36 = v4;
	g27 = a4;
	g28 = a5;
	g29 = a6;
	g30 = a7;
	char v5 = *(char *)(*(int32_t *)v2 + a2 + 112 * a1); // 0xaeb9c
	int32_t result5 = v5;                                // 0xaeba0
	if (v5 == -1) {
		int32_t v6 = *(int32_t *)(g23 - 0x7660); // 0xaebac
		g33 = v6;
		g31 = 0;
		if (*(int32_t *)v3 > 0) {
			int32_t result3 = result5; // 0xaedf820
			int32_t v7 = 0;            // 0xaecd813
			int32_t result4;           // 0xaedf819
			while (true) {
				uint32_t v8 = *(int32_t *)v6; // 0xaebb8
				if (v8 <= 124) {
					int32_t v9 = g36 + 180 * v8; // 0xaebc8
					g32 = v9;
					result4 = result3;
					int32_t v10 = v3; // 0xaecdc
					int32_t v11;      // 0xaecd4
					int32_t v12;      // 0xaecd8
					if (*(int32_t *)(v9 + 4) == g24) {
						// 0xaebd8
						if (*(int32_t *)(v9 + 8) == g25) {
							// 0xaebe4
							if (*(int32_t *)(v9 + 108) == g30) {
								// 0xaebf0
								if (*(int32_t *)(v9 + 100) != 0) {
									// 0xaebfc
									g34 = v9 + 64;
									int32_t v13 = function_c9b28(); // 0xaec00
									g22 = v13;
									int32_t v14 = g32; // 0xaec0c
									if (v13 == 0) {
										int32_t result = function_c9b70((int32_t *)(v14 + 64)); // 0xaec10
										// branch -> 0xaede8
										// 0xaede8
										g10 = v1;
										return result;
									}
									uint32_t v15 = *(int32_t *)(v14 + 96); // 0xaec18
									g11 = v15;
									int32_t result2; // 0xaec4c
									if (v15 < 1) {
										// 0xaec48
										result2 = function_c9b70((int32_t *)(v14 + 64));
										// branch -> 0xaede8
										// 0xaede8
										g10 = v1;
										return result2;
									}
									// 0xaec24
									if (function_4d794(v13) > 50) {
										// 0xaec24
										// branch -> 0xaec48
										// 0xaec48
										result2 = function_c9b70((int32_t *)(g32 + 64));
										// branch -> 0xaede8
										// 0xaede8
										g10 = v1;
										return result2;
									}
									int32_t v16 = function_4d794(g22);     // 0xaec38
									int32_t v17 = g32;                     // 0xaec3c
									uint32_t v18 = *(int32_t *)(v17 + 96); // 0xaec3c
									if (v18 <= v16) {
										int32_t v19 = *(int32_t *)(v17 + 112);                               // 0xaec54
										int32_t v20 = g27 + *(int32_t *)(v17 + 16);                          // 0xaec6c
										int32_t v21 = *(int32_t *)(v17 + 12) - *(int32_t *)(v17 + 84) + g26; // 0xaec70
										if (v19 == 0) {
											int32_t v22 = *(int32_t *)(v17 + 80); // 0xaecb8
											int32_t v23 = v17 + 64;               // 0xaecbc
											int32_t v24 = g28;                    // 0xaecc0
											int32_t v25 = g29;                    // 0xaecc4
											if (*(int32_t *)(v17 + 104) == 0) {
												// 0xaecb8
												Cl2DecodeFrm4(v21, v20, v23, v18, v22, v24, v25);
												// branch -> 0xaeccc
											} else {
												// 0xaeca0
												Cl2DecodeFrm6(v21, v20, v23, v18, v22, v24, v25);
												// branch -> 0xaeccc
											}
										lab_0xaeccc:
											// 0xaeccc
											result4 = function_c9b70((int32_t *)(g32 + 64));
											v10 = g35;
											// branch -> 0xaecd4
										lab_0xaecd4:
											// 0xaecd4
											v11 = g33 + 4;
											g33 = v11;
											v12 = g31 + 1;
											g31 = v12;
											if (v12 >= *(int32_t *)v10) {
												// break -> 0xaede8
												break;
											}
											result3 = result4;
											v3 = v10;
											v7 = v12;
											v6 = v11;
											// continue -> 0xaebb8
											continue;
										} else {
											// 0xaec78
											g13 = v19 + 3;
											Cl2DecodeFrm5(v21, v20, v17 + 64, v18, *(int32_t *)(v17 + 80), g28, g29);
											// branch -> 0xaeccc
											goto lab_0xaeccc;
										}
									}
									// 0xaec48
									result2 = function_c9b70((int32_t *)(v17 + 64));
									// branch -> 0xaede8
									// 0xaede8
									g10 = v1;
									return result2;
								}
								result4 = result3;
								v10 = v3;
							} else {
								result4 = result3;
								v10 = v3;
							}
						} else {
							result4 = result3;
							v10 = v3;
						}
					}
					// 0xaecd4
					v11 = v6 + 4;
					g33 = v11;
					v12 = v7 + 1;
					g31 = v12;
					if (v12 >= *(int32_t *)v10) {
						// break -> 0xaede8
						break;
					}
					result3 = result4;
					v3 = v10;
					v7 = v12;
					v6 = v11;
					// continue -> 0xaebb8
					continue;
				}
				// 0xaede8
				g10 = v1;
				return result3;
			}
			// 0xaede8
			g10 = v1;
			return result4;
		}
	} else {
		int32_t v26 = 180 * result5 - 180 + v4; // 0xaecf4
		g24 = v26;
		if (*(int32_t *)(v26 + 108) == a7) {
			// 0xaed04
			if (*(int32_t *)(v26 + 100) == 0) {
				// 0xaede8
				g10 = v1;
				return result5;
			}
			// 0xaed10
			g34 = v26 + 64;
			int32_t v27 = function_c9b28(); // 0xaed14
			g25 = v27;
			int32_t v28 = g24; // 0xaed20
			int32_t result8;   // 0xaedf8
			if (v27 == 0) {
				// 0xaed20
				result8 = function_c9b70((int32_t *)(v28 + 64));
				// branch -> 0xaede8
			} else {
				uint32_t v29 = *(int32_t *)(v28 + 96); // 0xaed2c
				g11 = v29;
				if (v29 >= 1) {
					// 0xaed38
					int32_t v30; // 0xaed5c
					if (function_4d794(v27) > 50) {
						// 0xaed38
						v30 = g24;
						// branch -> 0xaed5c
					} else {
						int32_t v31 = function_4d794(g25);     // 0xaed4c
						int32_t v32 = g24;                     // 0xaed50
						uint32_t v33 = *(int32_t *)(v32 + 96); // 0xaed50
						if (v33 <= v31) {
							int32_t v34 = *(int32_t *)(v32 + 112);                               // 0xaed68
							int32_t v35 = g27 + *(int32_t *)(v32 + 16);                          // 0xaed80
							int32_t v36 = *(int32_t *)(v32 + 12) - *(int32_t *)(v32 + 84) + g26; // 0xaed84
							int32_t result6;                                                     // 0xaede4
							if (v34 != 0) {
								// 0xaed8c
								g13 = v34 + 3;
								Cl2DecodeFrm5(v36, v35, v32 + 64, v33, *(int32_t *)(v32 + 80), g28, g29);
								// branch -> 0xaede0
								// 0xaede0
								result6 = function_c9b70((int32_t *)(g24 + 64));
								// branch -> 0xaede8
								// 0xaede8
								g10 = v1;
								return result6;
							}
							int32_t v37 = *(int32_t *)(v32 + 80); // 0xaedcc
							int32_t v38 = v32 + 64;               // 0xaedd0
							int32_t v39 = g28;                    // 0xaedd4
							int32_t v40 = g29;                    // 0xaedd8
							if (*(int32_t *)(v32 + 104) == 0) {
								// 0xaedcc
								Cl2DecodeFrm4(v36, v35, v38, v33, v37, v39, v40);
								// branch -> 0xaede0
							} else {
								// 0xaedb4
								Cl2DecodeFrm6(v36, v35, v38, v33, v37, v39, v40);
								// branch -> 0xaede0
							}
							// 0xaede0
							result6 = function_c9b70((int32_t *)(g24 + 64));
							// branch -> 0xaede8
							// 0xaede8
							g10 = v1;
							return result6;
						}
						v30 = v32;
					}
					int32_t result7 = function_c9b70((int32_t *)(v30 + 64)); // 0xaed60
					// branch -> 0xaede8
					// 0xaede8
					g10 = v1;
					return result7;
				}
				// 0xaed5c
				result8 = function_c9b70((int32_t *)(v28 + 64));
				// branch -> 0xaede8
			}
			// 0xaede8
			g10 = v1;
			return result8;
		}
	}
	// 0xaede8
	g10 = v1;
	return result5;
}

// Address range: 0xaedfc - 0xaefc4
int32_t function_aedfc(int32_t result, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7)
{
	int32_t v1 = g10;                        // 0xaee00
	int32_t v2 = *(int32_t *)(g23 - 0x7754); // 0xaee08
	g36 = v2;
	g25 = result;
	g26 = a2;
	g28 = a3;
	g29 = a4;
	g30 = a6;
	g31 = a7;
	if (a5 > 199) {
		// 0xaefb0
		g10 = v1;
		return result;
	}
	int32_t v3 = 232 * a5; // 0xaee30
	g33 = v3;
	int32_t v4 = v3 + 84 + v2; // 0xaee38
	g35 = v4;
	g34 = v4;
	int32_t v5 = function_c9b28(); // 0xaee40
	g27 = v5;
	int32_t result2; // 0xaefc0
	if (v5 == 0) {
		// 0xaee4c
		result2 = function_c9b70((int32_t *)g35);
		// branch -> 0xaefb0
	} else {
		int32_t v6 = g33 + g36 + 104; // 0xaee5c
		uint32_t v7 = *(int32_t *)v6; // 0xaee5c
		g11 = v7;
		g32 = v6;
		if (v7 >= 1) {
			// 0xaee68
			if (function_4d794(v5) <= 50) {
				// 0xaee78
				if (*(int32_t *)g32 <= function_4d794(g27)) {
					int32_t v8 = *(int32_t *)*(int32_t *)(g23 - 0x779c); // 0xaeea0
					unsigned char v9 = *(char *)(g26 + 112 * g25 + v8);  // 0xaeea8
					int32_t v10 = g33 + g36;                             // 0xaeeb4
					if (__asm_rlwinm_((int32_t)v9, 0, 25, 25) == 0) {
						int32_t v11 = g31;                                         // 0xaeec8
						int32_t v12 = *(int32_t *)(*(int32_t *)(v10 + 224) + 492); // 0xaeecc
						g13 = 1;
						function_5053c(g28, g29, g35, v12, g30, v11, v11);
						result2 = function_c9b70((int32_t *)g35);
						// branch -> 0xaefb0
					} else {
						// 0xaeee8
						g13 = 0;
						int32_t v13 = 0; // 0xaef4c3
						if (*(char *)(v10 + 192) != 0) {
							int32_t v14 = (int32_t) * (char *)(v10 + 193) + 4; // 0xaef00
							g13 = v14;
							v13 = v14;
							// branch -> 0xaef04
						}
						if (*(int32_t *)(v10 + 4) == 15) {
							// 0xaef14
							g13 = 2;
							v13 = 2;
							// branch -> 0xaef18
						}
						int32_t v15 = *(int32_t *)(g23 - 0x77ac); // 0xaef18
						int32_t v16 = *(int32_t *)(g23 - 0x77a8); // 0xaef1c
						int32_t v17 = v13;                        // 0xaef4c
						if (*(int32_t *)(0x55ec * *(int32_t *)v15 + v16 + 460) != 0) {
							// 0xaef38
							if (*(int32_t *)*(int32_t *)(g23 - 0x7290) >= 9) {
								// 0xaef48
								g13 = 1;
								v17 = 1;
								// branch -> 0xaef4c
							} else {
								v17 = v13;
							}
						}
						int32_t v18 = *(int32_t *)g32;         // 0xaef84
						int32_t v19 = *(int32_t *)(v10 + 224); // 0xaef88
						int32_t v20 = g28;                     // 0xaef8c
						int32_t v21 = g29;                     // 0xaef90
						if ((0x1000000 * v17 || 0xffffff) < 0x1ffffff) {
							// 0xaef80
							function_50650(v20, v21, g35, v18, *(int32_t *)(v19 + 492), g30, g31);
							// branch -> 0xaefa8
						} else {
							// 0xaef54
							function_5053c(v20, v21, g35, v18, *(int32_t *)(v19 + 492), g30, g31);
							// branch -> 0xaefa8
						}
						// 0xaefa8
						result2 = function_c9b70((int32_t *)g35);
						// branch -> 0xaefb0
					}
					// 0xaefb0
					g10 = v1;
					return result2;
				}
			}
		}
		// 0xaee8c
		result2 = function_c9b70((int32_t *)g35);
		// branch -> 0xaefb0
	}
	// 0xaefb0
	g10 = v1;
	return result2;
}

// Address range: 0xaefc4 - 0xaf18c
int32_t function_aefc4(int32_t result, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7)
{
	int32_t v1 = g10;                        // 0xaefc8
	int32_t v2 = *(int32_t *)(g23 - 0x7754); // 0xaefd0
	g36 = v2;
	g25 = result;
	g26 = a2;
	g28 = a3;
	g29 = a4;
	g30 = a6;
	g31 = a7;
	if (a5 > 199) {
		// 0xaf178
		g10 = v1;
		return result;
	}
	int32_t v3 = 232 * a5; // 0xaeff8
	g33 = v3;
	int32_t v4 = v3 + 84 + v2; // 0xaf000
	g35 = v4;
	g34 = v4;
	int32_t v5 = function_c9b28(); // 0xaf008
	g27 = v5;
	int32_t result2; // 0xaf188
	if (v5 == 0) {
		// 0xaf014
		result2 = function_c9b70((int32_t *)g35);
		// branch -> 0xaf178
	} else {
		int32_t v6 = g33 + g36 + 104; // 0xaf024
		uint32_t v7 = *(int32_t *)v6; // 0xaf024
		g11 = v7;
		g32 = v6;
		if (v7 >= 1) {
			// 0xaf030
			if (function_4d794(v5) <= 50) {
				// 0xaf040
				if (*(int32_t *)g32 <= function_4d794(g27)) {
					int32_t v8 = *(int32_t *)*(int32_t *)(g23 - 0x779c); // 0xaf068
					unsigned char v9 = *(char *)(g26 + 112 * g25 + v8);  // 0xaf070
					int32_t v10 = g33 + g36;                             // 0xaf07c
					if (__asm_rlwinm_((int32_t)v9, 0, 25, 25) == 0) {
						int32_t v11 = g31;                                         // 0xaf090
						int32_t v12 = *(int32_t *)(*(int32_t *)(v10 + 224) + 492); // 0xaf094
						g13 = 1;
						Cl2DecodeFrm5(g28, g29, g35, v12, g30, v11, v11);
						result2 = function_c9b70((int32_t *)g35);
						// branch -> 0xaf178
					} else {
						// 0xaf0b0
						g13 = 0;
						int32_t v13 = 0; // 0xaf1143
						if (*(char *)(v10 + 192) != 0) {
							int32_t v14 = (int32_t) * (char *)(v10 + 193) + 4; // 0xaf0c8
							g13 = v14;
							v13 = v14;
							// branch -> 0xaf0cc
						}
						if (*(int32_t *)(v10 + 4) == 15) {
							// 0xaf0dc
							g13 = 2;
							v13 = 2;
							// branch -> 0xaf0e0
						}
						int32_t v15 = *(int32_t *)(g23 - 0x77ac); // 0xaf0e0
						int32_t v16 = *(int32_t *)(g23 - 0x77a8); // 0xaf0e4
						int32_t v17 = v13;                        // 0xaf114
						if (*(int32_t *)(0x55ec * *(int32_t *)v15 + v16 + 460) != 0) {
							// 0xaf100
							if (*(int32_t *)*(int32_t *)(g23 - 0x7290) >= 9) {
								// 0xaf110
								g13 = 1;
								v17 = 1;
								// branch -> 0xaf114
							} else {
								v17 = v13;
							}
						}
						int32_t v18 = *(int32_t *)g32;         // 0xaf14c
						int32_t v19 = *(int32_t *)(v10 + 224); // 0xaf150
						int32_t v20 = g28;                     // 0xaf154
						int32_t v21 = g29;                     // 0xaf158
						if ((0x1000000 * v17 || 0xffffff) < 0x1ffffff) {
							// 0xaf148
							Cl2DecodeFrm6(v20, v21, g35, v18, *(int32_t *)(v19 + 492), g30, g31);
							// branch -> 0xaf170
						} else {
							// 0xaf11c
							Cl2DecodeFrm5(v20, v21, g35, v18, *(int32_t *)(v19 + 492), g30, g31);
							// branch -> 0xaf170
						}
						// 0xaf170
						result2 = function_c9b70((int32_t *)g35);
						// branch -> 0xaf178
					}
					// 0xaf178
					g10 = v1;
					return result2;
				}
			}
		}
		// 0xaf054
		result2 = function_c9b70((int32_t *)g35);
		// branch -> 0xaf178
	}
	// 0xaf178
	g10 = v1;
	return result2;
}

// Address range: 0xaf18c - 0xaf440
int32_t function_af18c(int32_t result, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7, int32_t a8, int32_t a9)
{
	int32_t v1 = g10;                        // 0xaf190
	int32_t v2 = *(int32_t *)(g23 - 0x779c); // 0xaf194
	g33 = v2;
	int32_t v3 = 112 * a2; // 0xaf198
	g30 = v3;
	g31 = *(int32_t *)(g23 - 0x761c);
	g32 = *(int32_t *)(g23 - 0x7290);
	g22 = a4;
	g21 = a3;
	g35 = *(int32_t *)(g23 - 0x77ac);
	g20 = result;
	g36 = *(int32_t *)(g23 - 0x77a8);
	g24 = a5;
	g25 = a6;
	g26 = a7;
	g27 = g13;
	int32_t v4 = *(int32_t *)v2; // 0xaf1d4
	g28 = a8;
	g29 = a9;
	int32_t *v5;
	int32_t v6;        // 0xaf228
	int32_t v7;        // 0xaf234
	int32_t v8;        // 0xaf248
	int32_t v9;        // 0xaf250
	int32_t v10;       // 0xaf270
	int32_t v11;       // 0xaf2a0
	int32_t v12;       // 0xaf2e4
	int32_t v13;       // 0xaf380
	int32_t v14;       // 0xaf404
	int32_t v15;       // 0xaf29c
	int32_t v16;       // 0xaf2cc
	int32_t v17;       // 0xaf2f4
	int32_t v18;       // 0xaf368
	int32_t v19;       // 0xaf390
	int32_t v20;       // 0xaf3ac
	int32_t v21;       // 0xaf3ec
	int32_t v22;       // 0xaf414
	unsigned char v23; // 0xaf314
	if (__asm_rlwinm_((int32_t) * (char *)(v4 + a3 + v3), 0, 25, 25) == 0) {
		int32_t v24 = g36 + 0x55ec * *(int32_t *)g35; // 0xaf1f4
		result = v24;
		if (*(int32_t *)(v24 + 460) == 0) {
			int32_t v25 = *(int32_t *)(g23 - 0x77d8); // 0xaf204
			result = v25;
			if (*(char *)v25 == 0) {
				int32_t v26 = *(int32_t *)(g23 - 0x77e4); // 0xaf214
				result = v26;
				if (*(char *)v26 == 0) {
					// 0xaf228
					v6 = g25;
					if (v6 != 0) {
						// 0xaf230
						g34 = v6;
						v7 = function_c9b28();
						g19 = function_4d794(v7);
						result = function_c9b70((int32_t *)g25);
						v8 = g26;
						if (v8 >= 1) {
							// 0xaf250
							v9 = g19;
							if (v9 <= 50) {
								// 0xaf258
								if (v8 <= v9) {
									// 0xaf264
									v10 = g20;
									v11 = v10;
									if (v10 == (int32_t) * (char *)*(int32_t *)(g23 - 0x775c)) {
										// 0xaf278
										g13 = g29;
										function_50478(165, g22, g24, g25, v8, g27, g28);
										v11 = g20;
										// branch -> 0xaf29c
									}
									// 0xaf29c
									v15 = *(int32_t *)g35;
									if (v11 == v15) {
										// 0xaf2a8
										function_503bc(g22, g24, g25, g26, g27, g28, g29);
										v16 = g36 + 0x55ec * g20;
										result = v16;
										if (*(char *)(v16 + 0x5594) != 0) {
											// 0xaf2dc
											v12 = g31;
											v17 = g22 + *(int32_t *)(v16 + 148) - *(int32_t *)(v12 + 2936);
											result = function_503bc(v17, g24, v12 + 2712, 1, *(int32_t *)(v12 + 2872), g28, g29);
											// branch -> 0xaf42c
										}
									} else {
										// 0xaf30c
										v23 = *(char *)(g21 + g30 + *(int32_t *)g33);
										if (__asm_rlwinm_((int32_t)v23, 0, 25, 25) != 0) {
											// 0xaf320
											v5 = (int32_t *)g32;
											if (*(int32_t *)(g36 + 0x55ec * v15 + 460) != 0) {
												// 0xaf334
												if (*v5 >= 9) {
													// 0xaf340
													g13 = 1;
													function_5053c(g22, g24, g25, g26, g27, g28, g29);
													v18 = g36 + 0x55ec * g20;
													result = v18;
													if (*(char *)(v18 + 0x5594) != 0) {
														// 0xaf378
														v13 = g31;
														v19 = g22 + *(int32_t *)(v18 + 148) - *(int32_t *)(v13 + 2936);
														g13 = 1;
														result = function_5053c(v19, g24, v13 + 2712, 1, *(int32_t *)(v13 + 2872), g28, g29);
														// branch -> 0xaf42c
													}
													// 0xaf42c
													g10 = v1;
													return result;
												}
											}
											// 0xaf3ac
											v20 = *v5;
											g19 = v20;
											*v5 = v20 > 4 ? v20 - 5 : 0;
											function_50650(g22, g24, g25, g26, g27, g28, g29);
											v21 = g36 + 0x55ec * g20;
											result = v21;
											if (*(char *)(v21 + 0x5594) != 0) {
												// 0xaf3fc
												v14 = g31;
												v22 = g22 + *(int32_t *)(v21 + 148) - *(int32_t *)(v14 + 2936);
												result = function_50650(v22, g24, v14 + 2712, 1, *(int32_t *)(v14 + 2872), g28, g29);
												// branch -> 0xaf428
											}
											// 0xaf428
											*(int32_t *)g32 = g19;
											// branch -> 0xaf42c
											// 0xaf42c
											g10 = v1;
											return result;
										}
										// 0xaf340
										g13 = 1;
										function_5053c(g22, g24, g25, g26, g27, g28, g29);
										v18 = g36 + 0x55ec * g20;
										result = v18;
										if (*(char *)(v18 + 0x5594) != 0) {
											// 0xaf378
											v13 = g31;
											v19 = g22 + *(int32_t *)(v18 + 148) - *(int32_t *)(v13 + 2936);
											g13 = 1;
											result = function_5053c(v19, g24, v13 + 2712, 1, *(int32_t *)(v13 + 2872), g28, g29);
											// branch -> 0xaf42c
										}
									}
									// 0xaf42c
									g10 = v1;
									return result;
								}
							}
						}
					}
				}
			}
			// 0xaf42c
			g10 = v1;
			return result;
		}
	}
	// 0xaf228
	v6 = g25;
	if (v6 == 0) {
		// 0xaf42c
		g10 = v1;
		return result;
	}
	// 0xaf230
	g34 = v6;
	v7 = function_c9b28();
	g19 = function_4d794(v7);
	result = function_c9b70((int32_t *)g25);
	v8 = g26;
	if (v8 < 1) {
		// 0xaf42c
		g10 = v1;
		return result;
	}
	// 0xaf250
	v9 = g19;
	if (v9 > 50 || v8 > v9) {
		// 0xaf42c
		g10 = v1;
		return result;
	}
	// 0xaf264
	v10 = g20;
	v11 = v10;
	if (v10 == (int32_t) * (char *)*(int32_t *)(g23 - 0x775c)) {
		// 0xaf278
		g13 = g29;
		function_50478(165, g22, g24, g25, v8, g27, g28);
		v11 = g20;
		// branch -> 0xaf29c
	}
	// 0xaf29c
	v15 = *(int32_t *)g35;
	if (v11 == v15) {
		// 0xaf2a8
		function_503bc(g22, g24, g25, g26, g27, g28, g29);
		v16 = g36 + 0x55ec * g20;
		result = v16;
		if (*(char *)(v16 + 0x5594) != 0) {
			// 0xaf2dc
			v12 = g31;
			v17 = g22 + *(int32_t *)(v16 + 148) - *(int32_t *)(v12 + 2936);
			result = function_503bc(v17, g24, v12 + 2712, 1, *(int32_t *)(v12 + 2872), g28, g29);
			// branch -> 0xaf42c
		}
		// 0xaf42c
		g10 = v1;
		return result;
	}
	// 0xaf30c
	v23 = *(char *)(g21 + g30 + *(int32_t *)g33);
	if (__asm_rlwinm_((int32_t)v23, 0, 25, 25) == 0) {
		// 0xaf340
		g13 = 1;
		function_5053c(g22, g24, g25, g26, g27, g28, g29);
		v18 = g36 + 0x55ec * g20;
		result = v18;
		if (*(char *)(v18 + 0x5594) != 0) {
			// 0xaf378
			v13 = g31;
			v19 = g22 + *(int32_t *)(v18 + 148) - *(int32_t *)(v13 + 2936);
			g13 = 1;
			result = function_5053c(v19, g24, v13 + 2712, 1, *(int32_t *)(v13 + 2872), g28, g29);
			// branch -> 0xaf42c
		}
		// 0xaf42c
		g10 = v1;
		return result;
	}
	// 0xaf320
	v5 = (int32_t *)g32;
	if (*(int32_t *)(g36 + 0x55ec * v15 + 460) != 0) {
		// 0xaf334
		if (*v5 >= 9) {
			// 0xaf340
			g13 = 1;
			function_5053c(g22, g24, g25, g26, g27, g28, g29);
			v18 = g36 + 0x55ec * g20;
			result = v18;
			if (*(char *)(v18 + 0x5594) != 0) {
				// 0xaf378
				v13 = g31;
				v19 = g22 + *(int32_t *)(v18 + 148) - *(int32_t *)(v13 + 2936);
				g13 = 1;
				result = function_5053c(v19, g24, v13 + 2712, 1, *(int32_t *)(v13 + 2872), g28, g29);
				// branch -> 0xaf42c
			}
			// 0xaf42c
			g10 = v1;
			return result;
		}
	}
	// 0xaf3ac
	v20 = *v5;
	g19 = v20;
	*v5 = v20 > 4 ? v20 - 5 : 0;
	function_50650(g22, g24, g25, g26, g27, g28, g29);
	v21 = g36 + 0x55ec * g20;
	result = v21;
	if (*(char *)(v21 + 0x5594) != 0) {
		// 0xaf3fc
		v14 = g31;
		v22 = g22 + *(int32_t *)(v21 + 148) - *(int32_t *)(v14 + 2936);
		result = function_50650(v22, g24, v14 + 2712, 1, *(int32_t *)(v14 + 2872), g28, g29);
		// branch -> 0xaf428
	}
	// 0xaf428
	*(int32_t *)g32 = g19;
	// branch -> 0xaf42c
	// 0xaf42c
	g10 = v1;
	return result;
}

// Address range: 0xaf440 - 0xaf6d0
int32_t function_af440(int32_t result, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7, int32_t a8, int32_t a9)
{
	int32_t v1 = g10;                        // 0xaf444
	int32_t v2 = *(int32_t *)(g23 - 0x779c); // 0xaf448
	g33 = v2;
	int32_t v3 = 112 * a2; // 0xaf44c
	g30 = v3;
	g31 = *(int32_t *)(g23 - 0x761c);
	g32 = *(int32_t *)(g23 - 0x7290);
	g22 = a4;
	g21 = a3;
	g35 = *(int32_t *)(g23 - 0x77ac);
	g20 = result;
	g36 = *(int32_t *)(g23 - 0x77a8);
	g24 = a5;
	g25 = a6;
	g26 = a7;
	g27 = g13;
	g28 = a8;
	unsigned char v4 = *(char *)(*(int32_t *)v2 + a3 + v3); // 0xaf490
	g29 = a9;
	int32_t *v5;
	int32_t v6;        // 0xaf4b8
	int32_t v7;        // 0xaf4c4
	uint32_t v8;       // 0xaf4d8
	uint32_t v9;       // 0xaf4e0
	int32_t v10;       // 0xaf500
	int32_t v11;       // 0xaf530
	int32_t v12;       // 0xaf574
	int32_t v13;       // 0xaf610
	int32_t v14;       // 0xaf694
	int32_t v15;       // 0xaf52c
	int32_t v16;       // 0xaf55c
	int32_t v17;       // 0xaf584
	int32_t v18;       // 0xaf5f8
	int32_t v19;       // 0xaf620
	int32_t v20;       // 0xaf63c
	int32_t v21;       // 0xaf67c
	int32_t v22;       // 0xaf6a4
	unsigned char v23; // 0xaf5a4
	if (__asm_rlwinm_((int32_t)v4, 0, 25, 25) != 0) {
		// 0xaf4b8
		v6 = g25;
		if (v6 == 0) {
			// 0xaf6bc
			g10 = v1;
			return result;
		}
		// 0xaf4c0
		g34 = v6;
		v7 = function_c9b28();
		g19 = function_4d794(v7);
		result = function_c9b70((int32_t *)g25);
		v8 = g26;
		if (v8 < 1) {
			// 0xaf6bc
			g10 = v1;
			return result;
		}
		// 0xaf4e0
		v9 = g19;
		if (v9 > 50 || v8 > v9) {
			// 0xaf6bc
			g10 = v1;
			return result;
		}
		// 0xaf4f4
		v10 = g20;
		v11 = v10;
		if (v10 == (int32_t) * (char *)*(int32_t *)(g23 - 0x775c)) {
			// 0xaf508
			g13 = g29;
			function_507f4(165, g22, g24, g25, v8, g27, g28);
			v11 = g20;
			// branch -> 0xaf52c
		}
		// 0xaf52c
		v15 = *(int32_t *)g35;
		if (v11 == v15) {
			// 0xaf538
			Cl2DecodeFrm4(g22, g24, g25, g26, g27, g28, g29);
			v16 = g36 + 0x55ec * g20;
			result = v16;
			if (*(char *)(v16 + 0x5594) != 0) {
				// 0xaf56c
				v12 = g31;
				v17 = g22 + *(int32_t *)(v16 + 148) - *(int32_t *)(v12 + 2936);
				result = Cl2DecodeFrm4(v17, g24, v12 + 2712, 1, *(int32_t *)(v12 + 2872), g28, g29);
				// branch -> 0xaf6bc
			}
		} else {
			// 0xaf59c
			v23 = *(char *)(g21 + g30 + *(int32_t *)g33);
			if (__asm_rlwinm_((int32_t)v23, 0, 25, 25) != 0) {
				// 0xaf5b0
				v5 = (int32_t *)g32;
				if (*(int32_t *)(g36 + 0x55ec * v15 + 460) != 0) {
					// 0xaf5c4
					if (*v5 >= 9) {
						// 0xaf5d0
						g13 = 1;
						Cl2DecodeFrm5(g22, g24, g25, g26, g27, g28, g29);
						v18 = g36 + 0x55ec * g20;
						result = v18;
						if (*(char *)(v18 + 0x5594) != 0) {
							// 0xaf608
							v13 = g31;
							v19 = g22 + *(int32_t *)(v18 + 148) - *(int32_t *)(v13 + 2936);
							g13 = 1;
							result = Cl2DecodeFrm5(v19, g24, v13 + 2712, 1, *(int32_t *)(v13 + 2872), g28, g29);
							// branch -> 0xaf6bc
						}
						// 0xaf6bc
						g10 = v1;
						return result;
					}
				}
				// 0xaf63c
				v20 = *v5;
				g19 = v20;
				*v5 = v20 > 4 ? v20 - 5 : 0;
				Cl2DecodeFrm6(g22, g24, g25, g26, g27, g28, g29);
				v21 = g36 + 0x55ec * g20;
				result = v21;
				if (*(char *)(v21 + 0x5594) != 0) {
					// 0xaf68c
					v14 = g31;
					v22 = g22 + *(int32_t *)(v21 + 148) - *(int32_t *)(v14 + 2936);
					result = Cl2DecodeFrm6(v22, g24, v14 + 2712, 1, *(int32_t *)(v14 + 2872), g28, g29);
					// branch -> 0xaf6b8
				}
				// 0xaf6b8
				*(int32_t *)g32 = g19;
				// branch -> 0xaf6bc
				// 0xaf6bc
				g10 = v1;
				return result;
			}
			// 0xaf5d0
			g13 = 1;
			Cl2DecodeFrm5(g22, g24, g25, g26, g27, g28, g29);
			v18 = g36 + 0x55ec * g20;
			result = v18;
			if (*(char *)(v18 + 0x5594) != 0) {
				// 0xaf608
				v13 = g31;
				v19 = g22 + *(int32_t *)(v18 + 148) - *(int32_t *)(v13 + 2936);
				g13 = 1;
				result = Cl2DecodeFrm5(v19, g24, v13 + 2712, 1, *(int32_t *)(v13 + 2872), g28, g29);
				// branch -> 0xaf6bc
			}
		}
		// 0xaf6bc
		g10 = v1;
		return result;
	}
	int32_t v24 = g36 + 0x55ec * *(int32_t *)g35; // 0xaf4a8
	result = v24;
	if (*(int32_t *)(v24 + 460) == 0) {
		// 0xaf6bc
		g10 = v1;
		return result;
	}
	// 0xaf4b8
	v6 = g25;
	if (v6 == 0) {
		// 0xaf6bc
		g10 = v1;
		return result;
	}
	// 0xaf4c0
	g34 = v6;
	v7 = function_c9b28();
	g19 = function_4d794(v7);
	result = function_c9b70((int32_t *)g25);
	v8 = g26;
	if (v8 < 1) {
		// 0xaf6bc
		g10 = v1;
		return result;
	}
	// 0xaf4e0
	v9 = g19;
	if (v9 > 50 || v8 > v9) {
		// 0xaf6bc
		g10 = v1;
		return result;
	}
	// 0xaf4f4
	v10 = g20;
	v11 = v10;
	if (v10 == (int32_t) * (char *)*(int32_t *)(g23 - 0x775c)) {
		// 0xaf508
		g13 = g29;
		function_507f4(165, g22, g24, g25, v8, g27, g28);
		v11 = g20;
		// branch -> 0xaf52c
	}
	// 0xaf52c
	v15 = *(int32_t *)g35;
	if (v11 == v15) {
		// 0xaf538
		Cl2DecodeFrm4(g22, g24, g25, g26, g27, g28, g29);
		v16 = g36 + 0x55ec * g20;
		result = v16;
		if (*(char *)(v16 + 0x5594) != 0) {
			// 0xaf56c
			v12 = g31;
			v17 = g22 + *(int32_t *)(v16 + 148) - *(int32_t *)(v12 + 2936);
			result = Cl2DecodeFrm4(v17, g24, v12 + 2712, 1, *(int32_t *)(v12 + 2872), g28, g29);
			// branch -> 0xaf6bc
		}
	} else {
		// 0xaf59c
		v23 = *(char *)(g21 + g30 + *(int32_t *)g33);
		if (__asm_rlwinm_((int32_t)v23, 0, 25, 25) != 0) {
			// 0xaf5b0
			v5 = (int32_t *)g32;
			if (*(int32_t *)(g36 + 0x55ec * v15 + 460) != 0) {
				// 0xaf5c4
				if (*v5 >= 9) {
					// 0xaf5d0
					g13 = 1;
					Cl2DecodeFrm5(g22, g24, g25, g26, g27, g28, g29);
					v18 = g36 + 0x55ec * g20;
					result = v18;
					if (*(char *)(v18 + 0x5594) != 0) {
						// 0xaf608
						v13 = g31;
						v19 = g22 + *(int32_t *)(v18 + 148) - *(int32_t *)(v13 + 2936);
						g13 = 1;
						result = Cl2DecodeFrm5(v19, g24, v13 + 2712, 1, *(int32_t *)(v13 + 2872), g28, g29);
						// branch -> 0xaf6bc
					}
					// 0xaf6bc
					g10 = v1;
					return result;
				}
			}
			// 0xaf63c
			v20 = *v5;
			g19 = v20;
			*v5 = v20 > 4 ? v20 - 5 : 0;
			Cl2DecodeFrm6(g22, g24, g25, g26, g27, g28, g29);
			v21 = g36 + 0x55ec * g20;
			result = v21;
			if (*(char *)(v21 + 0x5594) != 0) {
				// 0xaf68c
				v14 = g31;
				v22 = g22 + *(int32_t *)(v21 + 148) - *(int32_t *)(v14 + 2936);
				result = Cl2DecodeFrm6(v22, g24, v14 + 2712, 1, *(int32_t *)(v14 + 2872), g28, g29);
				// branch -> 0xaf6b8
			}
			// 0xaf6b8
			*(int32_t *)g32 = g19;
			// branch -> 0xaf6bc
			// 0xaf6bc
			g10 = v1;
			return result;
		}
		// 0xaf5d0
		g13 = 1;
		Cl2DecodeFrm5(g22, g24, g25, g26, g27, g28, g29);
		v18 = g36 + 0x55ec * g20;
		result = v18;
		if (*(char *)(v18 + 0x5594) != 0) {
			// 0xaf608
			v13 = g31;
			v19 = g22 + *(int32_t *)(v18 + 148) - *(int32_t *)(v13 + 2936);
			g13 = 1;
			result = Cl2DecodeFrm5(v19, g24, v13 + 2712, 1, *(int32_t *)(v13 + 2872), g28, g29);
			// branch -> 0xaf6bc
		}
	}
	// 0xaf6bc
	g10 = v1;
	return result;
}

// Address range: 0xaf6d0 - 0xaf84c
int32_t function_af6d0(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7)
{
	int32_t v1 = g10; // 0xaf6d4
	g33 = *(int32_t *)(g23 - 0x77e4);
	g35 = *(int32_t *)(g23 - 0x779c);
	g25 = a1;
	g26 = a2;
	g27 = a3;
	g28 = a4;
	g29 = a5;
	g30 = a6;
	*(int32_t *)(g23 - 0x4bcc) = *(int32_t *)(g23 + (a7 == 0 ? -0x588c : -0x5888));
	g32 = *(int32_t *)(g23 - 0x77a8);
	int32_t v2 = *(int32_t *)g35; // 0xaf720
	int32_t v3 = g26 + 112 * g25; // 0xaf724
	g36 = v3;
	g31 = 0;
	int32_t v4 = __asm_rlwinm((int32_t) * (char *)(v3 + v2), 0, 30, 28); // 0xaf730
	*(char *)(g36 + v2) = (char)v4;
	int32_t v5 = g32; // 0xaf738
	// branch -> 0xaf738
	int32_t result3;
	while (true) {
		// 0xaf738
		g34 = *(int32_t *)(v5 + 124);
		int32_t v6 = function_c9b28(); // 0xaf73c
		int32_t v7 = g32;              // 0xaf740
		if (*(char *)(v7 + 29) != 0) {
			// 0xaf74c
			if (*(int32_t *)(v7 + 404) == 0) {
				// 0xaf758
				if (*(int32_t *)(v7 + 52) == (int32_t) * (char *)g33) {
					// 0xaf768
					if (*(int32_t *)(v7 + 56) == g25) {
						int32_t v8 = *(int32_t *)(v7 + 60); // 0xaf774
						g11 = v8;
						if (v8 == g26) {
							// 0xaf78c
							if (v6 == 0) {
								int32_t result = function_c9b70((int32_t *)*(int32_t *)(v7 + 124)); // 0xaf798
								// branch -> 0xaf838
								// 0xaf838
								g10 = v1;
								return result;
							}
							uint32_t v9 = function_4d794(v6);       // 0xaf7a0
							int32_t v10 = g32;                      // 0xaf7a4
							uint32_t v11 = *(int32_t *)(v10 + 140); // 0xaf7a4
							if (v11 >= 1) {
								// 0xaf7b0
								if (v9 <= 50) {
									// 0xaf7b8
									if (v11 <= v9) {
										// 0xaf7cc
										g34 = g31;
										char *v12 = (char *)(g36 + *(int32_t *)g35); // 0xaf7d8
										*v12 = *v12 | 4;
										g15 = *(int32_t *)(g23 - 0x4bcc);
										CurrentProc();
										result3 = function_c9b70((int32_t *)*(int32_t *)(g32 + 124));
										// branch -> 0xaf828
									lab_0xaf828:;
										int32_t v13 = g31 + 1; // 0xaf828
										g31 = v13;
										int32_t v14 = g32 + 0x55ec; // 0xaf82c
										g32 = v14;
										if (v13 >= 4) {
											// break -> 0xaf838
											break;
										}
										v5 = v14;
										// continue -> 0xaf738
										continue;
									}
								}
							}
							int32_t result2 = function_c9b70((int32_t *)*(int32_t *)(v10 + 124)); // 0xaf7c4
							// branch -> 0xaf838
							// 0xaf838
							g10 = v1;
							return result2;
						}
					}
				}
			}
		}
		// 0xaf780
		result3 = function_c9b70((int32_t *)*(int32_t *)(v7 + 124));
		// branch -> 0xaf828
		goto lab_0xaf828;
	}
	// 0xaf838
	g10 = v1;
	return result3;
}

// Address range: 0xaf84c - 0xafa48
int32_t DrawObject(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7)
{
	int32_t v1 = g10;                        // 0xaf850
	int32_t v2 = *(int32_t *)(g23 - 0x7684); // 0xaf854
	g31 = a6;
	int32_t v3 = *(int32_t *)(g23 - 0x7688); // 0xaf85c
	g36 = v3;
	g32 = a7;
	char v4 = *(char *)(*(int32_t *)v2 + a2 + 112 * a1); // 0xaf878
	int32_t v5 = v4;                                     // 0xaf87c
	int32_t v6;                                          // 0xaf934
	int32_t v7;                                          // 0xaf9ac
	int32_t v8;                                          // 0xaf9b0
	int32_t v9;                                          // 0xaf9b4
	int32_t v10;                                         // 0xafa18
	int32_t v11;                                         // 0xafa20
	int32_t v12;                                         // 0xafa24
	int32_t result3;                                     // 0xafa44
	int32_t v13;                                         // 0xaf928
	int32_t v14;                                         // 0xaf930
	int32_t v15;                                         // 0xaf950
	int32_t v16;                                         // 0xaf970
	int32_t result2;                                     // 0xafa30
	int32_t v17;                                         // 0xaf8c0
	uint32_t v18;                                        // 0xaf974
	int32_t v19;                                         // 0xaf9c4
	int32_t v20;                                         // 0xafa00
	int32_t v21;                                         // 0xafa14
	uint32_t v22;                                        // 0xaf950
	int32_t v23;                                         // 0xaf9a8
	int32_t v24;                                         // 0xaf9e4
	int32_t v25;                                         // 0xafa1c
	if (v4 < 1) {
		// 0xaf8b4
		v17 = 0x1000000 * (-1 - v5) / 0x1000000;
		int32_t v26 = 120 * v17 + v3; // 0xaf8c8
		if (a5 == *(int32_t *)(v26 + 68)) {
			// 0xaf8d8
			g31 = 0;
			g32 = 8;
			int32_t v27 = *(int32_t *)(v26 + 4) - a1; // 0xaf8e8
			int32_t v28 = *(int32_t *)(v26 + 8) - a2; // 0xaf8ec
			int32_t result = 16 * v28;                // 0xaf8fc
			g35 = a3 - *(int32_t *)(v26 + 44) + 32 * v27 - 32 * v28;
			g33 = result + 16 * v27 + a4;
			// branch -> 0xaf918
			// 0xaf918
			if (v17 % 256 > 126) {
				// 0xafa34
				g10 = v1;
				return result;
			}
			// 0xaf924
			g30 = v17;
			v13 = 120 * v17;
			g28 = v13;
			v14 = v13 + v3 + 20;
			g34 = *(int32_t *)v14;
			g29 = v14;
			v6 = function_c9948();
			g26 = v6;
			if (v6 == 0) {
				// 0xaf940
				result3 = function_c9acc(*(int32_t *)g29);
				// branch -> 0xafa34
			} else {
				// 0xaf94c
				v15 = g28 + g36 + 36;
				v22 = *(int32_t *)v15;
				g11 = v22;
				g27 = v15;
				if (v22 >= 1) {
					// 0xaf95c
					if (function_4d794(v6) <= 50) {
						// 0xaf96c
						v16 = function_4d794(g26);
						v18 = *(int32_t *)g27;
						g40 = v18;
						if (v18 <= v16) {
							// 0xaf98c
							if (g30 == (int32_t) * (char *)*(int32_t *)(g23 - 0x774c)) {
								// 0xaf9a0
								v23 = *(int32_t *)(g28 + g36 + 40);
								g41 = v23;
								v7 = g35;
								g37 = v7;
								v8 = g33;
								g38 = v8;
								v9 = g31;
								g42 = v9;
								g13 = g32;
								CelDecodeClr(194, v7, v8, *(int32_t *)g29, v18, v23, v9);
								// branch -> 0xaf9c4
							}
							// 0xaf9c4
							v19 = g28 + g36;
							if (*(int32_t *)(v19 + 12) != 0) {
								// 0xaf9d4
								v24 = *(int32_t *)(v19 + 40);
								CelDecodeHdrLightOnly(g35, g33, *(int32_t *)g29, *(int32_t *)g27, v24, g31, g32);
								// branch -> 0xafa2c
								// 0xafa2c
								result2 = function_c9acc(*(int32_t *)g29);
								// branch -> 0xafa34
								// 0xafa34
								g10 = v1;
								return result2;
							}
							// 0xaf9f8
							v20 = *(int32_t *)g29;
							if (g26 == 0) {
								// 0xafa00
								result3 = function_c9acc(v20);
								// branch -> 0xafa34
							} else {
								// 0xafa0c
								v21 = *(int32_t *)g27;
								g39 = v21;
								v10 = g33;
								g37 = v10;
								v25 = *(int32_t *)(v19 + 40);
								g40 = v25;
								v11 = g31;
								g41 = v11;
								v12 = g32;
								g42 = v12;
								CelDrawHdrOnly(g35, v10, v20, v21, v25, v11, v12);
								// branch -> 0xafa2c
								// 0xafa2c
								result3 = function_c9acc(*(int32_t *)g29);
								// branch -> 0xafa34
							}
							// 0xafa34
							g10 = v1;
							return result3;
						}
					}
				}
				// 0xaf980
				result3 = function_c9acc(*(int32_t *)g29);
				// branch -> 0xafa34
			}
			// 0xafa34
			g10 = v1;
			return result3;
		}
		result3 = a1;
	} else {
		int32_t v29 = (0x1000000 * v5 - 0x1000000) / 0x1000000; // 0xaf88c
		int32_t result4 = 120 * v29 + v3;                       // 0xaf894
		if (a5 == *(int32_t *)(result4 + 68)) {
			// 0xaf8a4
			g33 = a4;
			g35 = a3 - *(int32_t *)(result4 + 44);
			v17 = v29;
			// branch -> 0xaf918
			// 0xaf918
			if (v17 % 256 > 126) {
				// 0xafa34
				g10 = v1;
				return result4;
			}
			// 0xaf924
			g30 = v17;
			v13 = 120 * v17;
			g28 = v13;
			v14 = v13 + v3 + 20;
			g34 = *(int32_t *)v14;
			g29 = v14;
			v6 = function_c9948();
			g26 = v6;
			if (v6 == 0) {
				// 0xaf940
				result3 = function_c9acc(*(int32_t *)g29);
				// branch -> 0xafa34
			} else {
				// 0xaf94c
				v15 = g28 + g36 + 36;
				v22 = *(int32_t *)v15;
				g11 = v22;
				g27 = v15;
				if (v22 >= 1) {
					// 0xaf95c
					if (function_4d794(v6) <= 50) {
						// 0xaf96c
						v16 = function_4d794(g26);
						v18 = *(int32_t *)g27;
						g40 = v18;
						if (v18 <= v16) {
							// 0xaf98c
							if (g30 == (int32_t) * (char *)*(int32_t *)(g23 - 0x774c)) {
								// 0xaf9a0
								v23 = *(int32_t *)(g28 + g36 + 40);
								g41 = v23;
								v7 = g35;
								g37 = v7;
								v8 = g33;
								g38 = v8;
								v9 = g31;
								g42 = v9;
								g13 = g32;
								CelDecodeClr(194, v7, v8, *(int32_t *)g29, v18, v23, v9);
								// branch -> 0xaf9c4
							}
							// 0xaf9c4
							v19 = g28 + g36;
							if (*(int32_t *)(v19 + 12) != 0) {
								// 0xaf9d4
								v24 = *(int32_t *)(v19 + 40);
								CelDecodeHdrLightOnly(g35, g33, *(int32_t *)g29, *(int32_t *)g27, v24, g31, g32);
								// branch -> 0xafa2c
								// 0xafa2c
								result2 = function_c9acc(*(int32_t *)g29);
								// branch -> 0xafa34
								// 0xafa34
								g10 = v1;
								return result2;
							}
							// 0xaf9f8
							v20 = *(int32_t *)g29;
							if (g26 == 0) {
								// 0xafa00
								result3 = function_c9acc(v20);
								// branch -> 0xafa34
							} else {
								// 0xafa0c
								v21 = *(int32_t *)g27;
								g39 = v21;
								v10 = g33;
								g37 = v10;
								v25 = *(int32_t *)(v19 + 40);
								g40 = v25;
								v11 = g31;
								g41 = v11;
								v12 = g32;
								g42 = v12;
								CelDrawHdrOnly(g35, v10, v20, v21, v25, v11, v12);
								// branch -> 0xafa2c
								// 0xafa2c
								result3 = function_c9acc(*(int32_t *)g29);
								// branch -> 0xafa34
							}
							// 0xafa34
							g10 = v1;
							return result3;
						}
					}
				}
				// 0xaf980
				result3 = function_c9acc(*(int32_t *)g29);
				// branch -> 0xafa34
			}
			// 0xafa34
			g10 = v1;
			return result3;
		}
		result3 = result4;
	}
	// 0xafa34
	g10 = v1;
	return result3;
}

// Address range: 0xafa48 - 0xafc30
int32_t function_afa48(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7)
{
	int32_t v1 = g10;                        // 0xafa4c
	int32_t v2 = *(int32_t *)(g23 - 0x7684); // 0xafa50
	g31 = a6;
	int32_t v3 = *(int32_t *)(g23 - 0x7688); // 0xafa58
	g36 = v3;
	g32 = a7;
	char v4 = *(char *)(*(int32_t *)v2 + a2 + 112 * a1); // 0xafa74
	int32_t v5 = v4;                                     // 0xafa78
	int32_t v6;                                          // 0xafb30
	int32_t v7;                                          // 0xafb70
	int32_t v8;                                          // 0xafba8
	int32_t v9;                                          // 0xafbac
	int32_t v10;                                         // 0xafbf8
	int32_t v11;                                         // 0xafbfc
	int32_t v12;                                         // 0xafc00
	int32_t v13;                                         // 0xafc08
	int32_t v14;                                         // 0xafc0c
	int32_t result3;                                     // 0xafc2c
	int32_t v15;                                         // 0xafb24
	int32_t v16;                                         // 0xafb2c
	int32_t v17;                                         // 0xafb4c
	int32_t v18;                                         // 0xafb6c
	int32_t result2;                                     // 0xafc18
	int32_t v19;                                         // 0xafabc
	uint32_t v20;                                        // 0xafb70
	int32_t v21;                                         // 0xafbc0
	int32_t v22;                                         // 0xafbf4
	int32_t v23;                                         // 0xafbfc
	uint32_t v24;                                        // 0xafb4c
	int32_t v25;                                         // 0xafc04
	if (v4 < 1) {
		// 0xafab0
		v19 = 0x1000000 * (-1 - v5) / 0x1000000;
		int32_t v26 = 120 * v19 + v3; // 0xafac4
		if (a5 == *(int32_t *)(v26 + 68)) {
			// 0xafad4
			g31 = 0;
			g32 = 8;
			int32_t v27 = *(int32_t *)(v26 + 4) - a1; // 0xafae4
			int32_t v28 = *(int32_t *)(v26 + 8) - a2; // 0xafae8
			int32_t result = 16 * v28;                // 0xafaf8
			g35 = a3 - *(int32_t *)(v26 + 44) + 32 * v27 - 32 * v28;
			g33 = result + 16 * v27 + a4;
			// branch -> 0xafb14
			// 0xafb14
			if (v19 % 256 > 126) {
				// 0xafc1c
				g10 = v1;
				return result;
			}
			// 0xafb20
			g30 = v19;
			v15 = 120 * v19;
			g28 = v15;
			v16 = v15 + v3 + 20;
			g34 = *(int32_t *)v16;
			g29 = v16;
			v6 = function_c9948();
			g26 = v6;
			if (v6 == 0) {
				// 0xafb3c
				result3 = function_c9acc(*(int32_t *)g29);
				// branch -> 0xafc1c
			} else {
				// 0xafb48
				v17 = g28 + g36 + 36;
				v24 = *(int32_t *)v17;
				g11 = v24;
				g27 = v17;
				if (v24 >= 1) {
					// 0xafb58
					if (function_4d794(v6) <= 50) {
						// 0xafb68
						v18 = function_4d794(g26);
						v7 = g27;
						v20 = *(int32_t *)v7;
						g40 = v20;
						if (v20 <= v18) {
							// 0xafb88
							v11 = v7;
							if (g30 == (int32_t) * (char *)*(int32_t *)(g23 - 0x774c)) {
								// 0xafb9c
								g41 = *(int32_t *)(g28 + g36 + 40);
								v8 = g35;
								g37 = v8;
								v9 = g33;
								g38 = v9;
								g42 = g31;
								g13 = g32;
								CelDrawHdrClrHL(194, v8, v9, *(int32_t *)g29, v20);
								v11 = g27;
								// branch -> 0xafbc0
							}
							// 0xafbc0
							v21 = g28 + g36;
							v22 = *(int32_t *)g29;
							v10 = g35;
							v23 = *(int32_t *)v11;
							g39 = v23;
							v12 = g33;
							g37 = v12;
							v25 = *(int32_t *)(v21 + 40);
							g40 = v25;
							v13 = g31;
							g41 = v13;
							v14 = g32;
							g42 = v14;
							if (*(int32_t *)(v21 + 12) == 0) {
								// 0xafbf4
								function_4e4c8(v10, v12, v22, v23, v25, v13, v14);
								// branch -> 0xafc14
							} else {
								// 0xafbd0
								function_4e998(v10, v12, v22, v23, v25, v13, v14);
								// branch -> 0xafc14
							}
							// 0xafc14
							result2 = function_c9acc(*(int32_t *)g29);
							// branch -> 0xafc1c
							// 0xafc1c
							g10 = v1;
							return result2;
						}
					}
				}
				// 0xafb7c
				result3 = function_c9acc(*(int32_t *)g29);
				// branch -> 0xafc1c
			}
			// 0xafc1c
			g10 = v1;
			return result3;
		}
		result3 = a1;
	} else {
		int32_t v29 = (0x1000000 * v5 - 0x1000000) / 0x1000000; // 0xafa88
		int32_t result4 = 120 * v29 + v3;                       // 0xafa90
		if (a5 == *(int32_t *)(result4 + 68)) {
			// 0xafaa0
			g33 = a4;
			g35 = a3 - *(int32_t *)(result4 + 44);
			v19 = v29;
			// branch -> 0xafb14
			// 0xafb14
			if (v19 % 256 > 126) {
				// 0xafc1c
				g10 = v1;
				return result4;
			}
			// 0xafb20
			g30 = v19;
			v15 = 120 * v19;
			g28 = v15;
			v16 = v15 + v3 + 20;
			g34 = *(int32_t *)v16;
			g29 = v16;
			v6 = function_c9948();
			g26 = v6;
			if (v6 == 0) {
				// 0xafb3c
				result3 = function_c9acc(*(int32_t *)g29);
				// branch -> 0xafc1c
			} else {
				// 0xafb48
				v17 = g28 + g36 + 36;
				v24 = *(int32_t *)v17;
				g11 = v24;
				g27 = v17;
				if (v24 >= 1) {
					// 0xafb58
					if (function_4d794(v6) <= 50) {
						// 0xafb68
						v18 = function_4d794(g26);
						v7 = g27;
						v20 = *(int32_t *)v7;
						g40 = v20;
						if (v20 <= v18) {
							// 0xafb88
							v11 = v7;
							if (g30 == (int32_t) * (char *)*(int32_t *)(g23 - 0x774c)) {
								// 0xafb9c
								g41 = *(int32_t *)(g28 + g36 + 40);
								v8 = g35;
								g37 = v8;
								v9 = g33;
								g38 = v9;
								g42 = g31;
								g13 = g32;
								CelDrawHdrClrHL(194, v8, v9, *(int32_t *)g29, v20);
								v11 = g27;
								// branch -> 0xafbc0
							}
							// 0xafbc0
							v21 = g28 + g36;
							v22 = *(int32_t *)g29;
							v10 = g35;
							v23 = *(int32_t *)v11;
							g39 = v23;
							v12 = g33;
							g37 = v12;
							v25 = *(int32_t *)(v21 + 40);
							g40 = v25;
							v13 = g31;
							g41 = v13;
							v14 = g32;
							g42 = v14;
							if (*(int32_t *)(v21 + 12) == 0) {
								// 0xafbf4
								function_4e4c8(v10, v12, v22, v23, v25, v13, v14);
								// branch -> 0xafc14
							} else {
								// 0xafbd0
								function_4e998(v10, v12, v22, v23, v25, v13, v14);
								// branch -> 0xafc14
							}
							// 0xafc14
							result2 = function_c9acc(*(int32_t *)g29);
							// branch -> 0xafc1c
							// 0xafc1c
							g10 = v1;
							return result2;
						}
					}
				}
				// 0xafb7c
				result3 = function_c9acc(*(int32_t *)g29);
				// branch -> 0xafc1c
			}
			// 0xafc1c
			g10 = v1;
			return result3;
		}
		result3 = result4;
	}
	// 0xafc1c
	g10 = v1;
	return result3;
}

// Address range: 0xafc30 - 0xafdd4
int32_t function_afc30(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5)
{
	int32_t v1 = g10;                        // 0xafc34
	int32_t v2 = *(int32_t *)(g23 - 0x6f48); // 0xafc48
	g30 = *(int32_t *)(g23 - 0x7250);
	g31 = *(int32_t *)(g23 - 0x6f50);
	g32 = *(int32_t *)(g23 - 0x6f4c);
	int32_t v3 = *(int32_t *)(g23 - 0x758c);             // 0xafc7c
	int32_t v4 = *(int32_t *)*(int32_t *)(g23 - 0x757c); // 0xafc84
	int16_t v5 = *(int16_t *)(v4 + 2 * a3 + 224 * a2);   // 0xafc90
	int32_t v6 = a3 + 112 * a2;                          // r9
	int32_t v7 = *(int32_t *)(g23 - 0x7588);             // 0xafca0
	*(int32_t *)v2 = (int32_t)v5;
	g37 = a3;
	char v8 = *(char *)(v6 + *(int32_t *)v3); // 0xafcb4
	g34 = a2;
	*(int32_t *)*(int32_t *)(g23 - 0x7290) = (int32_t)v8;
	char v9 = *(char *)(v6 + *(int32_t *)v7);                                   // 0xafccc
	unsigned char v10 = *(char *)(*(int32_t *)(g23 - 0x7230) + *(int32_t *)v2); // 0xafcd0
	char v11 = *(char *)(*(int32_t *)(g23 - 0x7268) + (int32_t)v9);             // 0xafcd8
	*(int32_t *)*(int32_t *)(g23 - 0x7294) = (int32_t)(v11 & v10);
	int32_t v12 = function_52378(); // 0xafce4
	*(char *)g32 = 1;
	int32_t v13 = 32 * v12 + *(int32_t *)*(int32_t *)(g23 - 0x7584); // 0xafcfc
	int32_t v14 = v13;                                               // r17
	uint16_t v15 = *(int16_t *)v13;                                  // 0xafd00
	*(int32_t *)g31 = (int32_t)v15;
	if (v15 != 0) {
		// 0xafd10
		function_d8e58(a1);
		// branch -> 0xafd18
	}
	// 0xafd18
	*(char *)g32 = 2;
	uint16_t v16 = *(int16_t *)(v14 + 2); // 0xafd20
	*(int32_t *)g31 = (int32_t)v16;
	if (v16 != 0) {
		// 0xafd30
		function_d8e58(a1 + 32);
		// branch -> 0xafd38
	}
	// 0xafd38
	v14 += 4;
	*(char *)g32 = 0;
	int32_t v17 = 2; // r16
	int32_t result;  // 0xafdb0
	if (*(int32_t *)g30 > 2) {
		int32_t v18 = a1;  // 0xafd54
		int32_t v19 = v14; // 0xafd50
		// branch -> 0xafd50
		while (true) {
			uint16_t v20 = *(int16_t *)v19; // 0xafd50
			g32 = v18 - 0x6000;
			*(int32_t *)g31 = (int32_t)v20;
			if (v20 != 0) {
				// 0xafd64
				function_d8e58(g32);
				// branch -> 0xafd6c
			}
			uint16_t v21 = *(int16_t *)(v14 + 2); // 0xafd6c
			*(int32_t *)g31 = (int32_t)v21;
			if (v21 != 0) {
				// 0xafd7c
				function_d8e58(g32 + 32);
				// branch -> 0xafd84
			}
			int32_t v22 = v14 + 4; // 0xafd84
			v14 = v22;
			int32_t v23 = v17 + 2; // 0xafd88
			v17 = v23;
			if (v23 >= *(int32_t *)g30) {
				// 0xafd8c
				// branch -> 0xafd98
				// 0xafd98
				result = scrollrt_draw_clipped_dungeon(a1, a2, a3, a4, a5, 0);
				*(int32_t *)g36 = g29;
				*(int32_t *)g35 = g28;
				*(int32_t *)g33 = g27;
				g10 = v1;
				return result;
			}
			// 0xafd84
			v18 = g32;
			v19 = v22;
			// branch -> 0xafd50
		}
	}
	// 0xafd98
	result = scrollrt_draw_clipped_dungeon(a1, a2, a3, a4, a5, 0);
	*(int32_t *)g36 = g29;
	*(int32_t *)g35 = g28;
	*(int32_t *)g33 = g27;
	g10 = v1;
	return result;
}

// Address range: 0xafdd4 - 0xb0690
int32_t scrollrt_draw_clipped_dungeon(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6)
{
	g32 = a2;
	int32_t v1 = g10; // 0xafddc
	g35 = a3;
	int32_t v2 = 112 * a2; // 0xafdec
	g33 = a4;
	int32_t v3 = 224 * a2; // 0xafdfc
	g36 = a5;
	g20 = a6;
	g19 = *(int32_t *)(g23 - 0x77a8);
	int32_t v4 = a3 + v2;                                // 0xafe24
	int32_t v5 = *(int32_t *)*(int32_t *)(g23 - 0x7680); // 0xafe2c
	int32_t v6 = 2 * a3;                                 // 0xafe30
	int32_t v7 = *(int32_t *)*(int32_t *)(g23 - 0x767c); // 0xafe34
	int32_t v8 = *(int32_t *)*(int32_t *)(g23 - 0x7630); // 0xafe4c
	g31 = v8;
	int32_t v9 = *(int32_t *)*(int32_t *)(g23 - 0x7684); // 0xafe50
	g27 = v9;
	int32_t v10 = v5 + v2 + a3; // 0xafe54
	g22 = v10;
	int32_t v11 = *(int32_t *)*(int32_t *)(g23 - 0x768c); // 0xafe58
	g29 = a1;
	g17 = (int32_t) * (int16_t *)(v7 + v6 + v3);
	char v12 = *(char *)(*(int32_t *)*(int32_t *)(g23 - 0x7598) + v4); // 0xafe74
	char v13 = *(char *)(*(int32_t *)*(int32_t *)(g23 - 0x779c) + v4); // 0xafe78
	int32_t v14 = v13;                                                 // 0xafe78
	g24 = v14;
	g26 = (int32_t) * (char *)(v8 + v4);
	g16 = (int32_t) * (char *)(v9 + v4);
	g25 = (int32_t) * (char *)(v11 + v4);
	g18 = (int32_t) * (char *)(v5 + v4);
	char v15 = *(char *)(*(int32_t *)*(int32_t *)(g23 - 0x7588) + v4); // 0xafe8c
	g28 = *(int32_t *)(g23 - 0x6f54);
	char v16 = *(char *)(v10 - 1); // 0xafe98
	g21 = (int32_t) * (int16_t *)(v7 + v3 + v6 - 2);
	int32_t v17;       // r26
	int32_t v18;       // 0xafed4
	int32_t v19;       // 0xaff34
	int32_t v20;       // 0xaff4c
	int32_t v21;       // 0xaff64
	int32_t v22;       // 0xaffa0
	int32_t v23;       // 0xaffe8
	int32_t v24;       // 0xaffec
	int32_t v25;       // 0xafff0
	uint32_t v26;      // 0xb0030
	int32_t v27;       // 0xb0064
	int32_t v28;       // 0xb0070
	int32_t v29;       // 0xb00a0
	int32_t v30;       // 0xb00ac
	int32_t v31;       // 0xb00e0
	int32_t v32;       // 0xb00f8
	int32_t v33;       // 0xb0104
	uint32_t v34;      // 0xb0200
	int32_t v35;       // 0xb0278
	int32_t v36;       // 0xaff28
	int32_t v37;       // 0xaff48
	int32_t v38;       // 0xaff9c
	int32_t v39;       // 0xb0030
	int32_t v40;       // 0xb0040
	int32_t v41;       // 0xb009c
	int32_t v42;       // 0xb0134
	int32_t v43;       // 0xb031c
	int32_t v44;       // 0xb0328
	int32_t v45;       // 0xaff28
	int32_t v46;       // 0xaff58
	int32_t v47;       // 0xb0030
	int32_t v48;       // 0xb0048
	int32_t v49;       // 0xb00cc
	int32_t v50;       // 0xb011c
	int32_t v51;       // 0xb0148
	int32_t v52;       // 0xb0164
	int32_t v53;       // 0xb016c
	uint32_t v54;      // 0xb0214
	int32_t v55;       // 0xb0228
	int32_t v56;       // 0xb0338
	int32_t v57;       // 0xb0350
	int32_t v58;       // 0xb035c
	int32_t v59;       // 0xaff0c
	int32_t v60;       // 0xaff14
	uint32_t v61;      // 0xaff7c
	uint32_t v62;      // 0xaffa0
	unsigned char v63; // 0xaffb8
	int32_t v64;       // 0xaffe4
	uint32_t v65;      // 0xb007c
	uint32_t v66;      // 0xb00a0
	int32_t v67;       // 0xb00fc
	int32_t v68;       // 0xb0104
	int32_t v69;       // 0xb017c
	int32_t v70;       // 0xb0190
	int32_t v71;       // 0xb01e4
	int32_t v72;       // 0xb0238
	int32_t v73;       // 0xb0288
	int32_t v74;       // 0xb0370
	int32_t v75;       // 0xb0384
	int32_t v76;       // 0xb03d8
	if (*(int32_t *)*(int32_t *)(g23 - 0x7608) != 0) {
		// 0xafeac
		if (__asm_rlwinm_(v14, 0, 25, 25) != 0) {
			// 0xafeb4
			function_4e5b4(g29, *(int32_t *)*(int32_t *)(g23 - 0x760c), 1, 64, 0, 8);
			// branch -> 0xafed4
		}
		// 0xafed4
		v18 = g23;
		v19 = v18;
		if (*(int32_t *)*(int32_t *)(v18 - 0x70e4) != 0) {
			// 0xafee4
			if (v13 % 2 != 0) {
				// 0xafeec
				function_aeb58(g32, g35, g33, g36, 0, 8, 1);
				v19 = g23;
				// branch -> 0xaff0c
			} else {
				v19 = v18;
			}
		}
		// 0xaff0c
		v59 = *(int32_t *)(v19 - 0x70cc);
		v60 = *(int32_t *)(v19 - 0x7290);
		if (*(int32_t *)v60 < (int32_t) * (char *)v59) {
			// 0xaff28
			v36 = 0x1000000 * g26;
			v45 = v36 / 0x1000000;
			if ((v36 || 0xffffff) >= 0x1ffffff) {
				// 0xaff30
				g31 = *(int32_t *)(v19 - 0x7614) + 80 * (v45 % 32) - 80;
				v37 = __asm_rlwinm(v45, 27, 29, 31);
				v20 = g31;
				v46 = v20 + 0x1000000 * v37 / 0x200000;
				g30 = v46;
				g34 = v46;
				g26 = g33 - *(int32_t *)(v20 + 72);
				v21 = function_c9b28();
				g27 = v21;
				int32_t v77;   // 0xb0460
				int32_t v78;   // 0xb050c
				uint32_t v79;  // 0xb0548
				int32_t v80;   // 0xb057c
				int32_t v81;   // 0xb0588
				int32_t v82;   // 0xb05b8
				int32_t v83;   // 0xb05e0
				int32_t v84;   // 0xb05f8
				int32_t v85;   // 0xb0610
				int32_t v86;   // 0xb061c
				int32_t v87;   // 0xb0548
				int32_t v88;   // 0xb0558
				int32_t v89;   // 0xb05b4
				uint32_t v90;  // 0xb03fc
				int32_t v91;   // 0xb0410
				int32_t v92;   // 0xb0548
				int32_t v93;   // 0xb0560
				int32_t v94;   // 0xb05e4
				int32_t v95;   // 0xb0420
				int32_t v96;   // 0xb0470
				int32_t v97;   // 0xb050c
				int32_t v98;   // 0xb0514
				uint32_t v99;  // 0xb0594
				uint32_t v100; // 0xb05b8
				int32_t v101;  // 0xb0614
				int32_t v102;  // 0xb061c
				if (v21 == 0) {
					// 0xaff70
					function_c9b70((int32_t *)g30);
					// branch -> 0xb0008
				} else {
					// 0xaff7c
					v61 = *(int32_t *)(g31 + 64);
					g11 = v61;
					if (v61 >= 1) {
						// 0xaff88
						if (function_4d794(v21) <= 50) {
							// 0xaff98
							v38 = function_4d794(g27);
							v22 = g31;
							v62 = *(int32_t *)(v22 + 64);
							if (v62 <= v38) {
								// 0xaffb8
								v63 = *(char *)(v22 + 76);
								g13 = v63;
								v64 = *(int32_t *)(v22 + 68);
								v23 = g26;
								v24 = g36;
								v25 = g30;
								if (v63 == 0) {
									// 0xaffe4
									Cl2DecodeFrm6(v23, v24, v25, v62, v64, 0, 8);
									// branch -> 0xb0000
								} else {
									// 0xaffc4
									Cl2DecodeFrm5(v23, v24, v25, v62, v64, 0, 8);
									// branch -> 0xb0000
								}
								// 0xb0000
								function_c9b70((int32_t *)g30);
								// branch -> 0xb0008
								// 0xb0008
								if ((0x1000000 * g16 || 0xffffff) >= 0x1ffffff) {
									// 0xb0010
									function_afa48(g32, g35, g33, g36, 1, 0, 8);
									// branch -> 0xb0030
								}
								// 0xb0030
								v26 = g25;
								v39 = 0x1000000 * v26;
								v47 = v39 / 0x1000000;
								int32_t v103; // 0xb05c4
								if ((v39 || 0xffffff) >= 0x1ffffff) {
									// 0xb0038
									v40 = v47 - 1;
									g26 = v40;
									v48 = *(int32_t *)(g23 - 0x7690) + 368 * v40;
									g31 = v48;
									if (*(int32_t *)(v48 + 52) == 0) {
										// 0xb0058
										if (v26 <= 127) {
											// 0xb0060
											g34 = *(int32_t *)(v48 + 24);
											v27 = function_c9948();
											v17 = v27;
											v28 = g31;
											if (v27 == 0) {
												// 0xb0070
												function_c9acc(*(int32_t *)(v28 + 24));
												// branch -> 0xb011c
											} else {
												// 0xb007c
												v65 = *(int32_t *)(v28 + 32);
												g11 = v65;
												v30 = v28;
												if (v65 >= 1) {
													// 0xb0088
													int32_t v104;   // r3
													int32_t v105;   // 0xb0648
													int32_t result; // 0xb068c
													int32_t v106;   // 0xb0220
													int32_t v107;   // 0xb0408
													int32_t v108;   // 0xb055c
													int32_t v109;   // 0xb05c8
													int32_t v110;   // 0xb0630
													int32_t v111;   // 0xb01f0
													int32_t v112;   // 0xb03e4
													int32_t v113;   // 0xb051c
													int32_t v114;   // 0xb0670
													int32_t v115;   // 0xb0178
													int32_t v116;   // 0xb036c
													int32_t v117;   // 0xb0648
													int32_t v118;   // 0xb0654
													if (function_4d794(v27) > 50) {
														// 0xb0088
														v30 = g31;
														// branch -> 0xb00ac
													} else {
														// 0xb0098
														v41 = function_4d794(v17);
														v29 = g31;
														v66 = *(int32_t *)(v29 + 32);
														g40 = v66;
														if (v66 <= v41) {
															// 0xb00b8
															v49 = g33 - *(int32_t *)(v29 + 40);
															g27 = v49;
															v32 = v49;
															v33 = v29;
															if (g26 == (int32_t) * (char *)*(int32_t *)(g23 - 0x7748)) {
																// 0xb00d4
																g37 = v49;
																g41 = *(int32_t *)(v29 + 36);
																v31 = g36;
																g38 = v31;
																g42 = 0;
																g13 = 8;
																CelDrawHdrClrHL(181, v49, v31, *(int32_t *)(v29 + 24), v66);
																v32 = g27;
																v33 = g31;
																// branch -> 0xb00f4
															}
															// 0xb00f4
															v67 = *(int32_t *)(v33 + 32);
															v68 = *(int32_t *)(v33 + 36);
															function_4e998(v32, g36, *(int32_t *)(v33 + 24), v67, v68, 0, 8);
															v104 = function_c9acc(*(int32_t *)(g31 + 24));
															// branch -> 0xb011c
															// 0xb011c
															v50 = v13;
															g30 = v50;
															if (__asm_rlwinm_(v50, 0, 26, 26) != 0) {
																// 0xb0128
																v42 = -1 - (int32_t)v16;
																v104 = v42;
																if (v42 <= 3) {
																	// 0xb0140
																	v51 = g19 + 0x55ec * v42;
																	v52 = g36 + *(int32_t *)(v51 + 100);
																	v53 = g33 + *(int32_t *)(v51 + 96) - *(int32_t *)(v51 + 148);
																	v115 = *(int32_t *)(v51 + 124);
																	v69 = *(int32_t *)(v51 + 140);
																	g13 = *(int32_t *)(v51 + 144);
																	v104 = function_af440(v42, g32, g35 - 1, v53, v52, v115, v69, 0, 8);
																	if (g20 != 0) {
																		// 0xb0190
																		v70 = *(int32_t *)(g31 + 152);
																		if (v70 != 0) {
																			// 0xb019c
																			if (v70 == 2) {
																				// 0xb01a4
																				function_afc30(g29 - 0x3060, g32 - 2, g35 + 1, g33 - 96, g36 - 16);
																				// branch -> 0xb01bc
																			}
																			// 0xb01bc
																			v104 = function_afc30(g29 - 64, g32 - 1, g35 + 1, g33 - 64, g36);
																			// branch -> 0xb01d4
																		}
																	}
																}
															}
															// 0xb01d4
															if (__asm_rlwinm_(v50, 0, 27, 27) == 0) {
																// 0xb02f4
																if (__asm_rlwinm_(v50, 0, 29, 29) != 0) {
																	// 0xb02fc
																	v104 = function_af6d0(g32, g35, g33, g36, 0, 8, 1);
																	// branch -> 0xb031c
																}
																// 0xb031c
																v43 = 0x1000000 * g18;
																if (v43 >= 0 && (v43 || 0xffffff) >= 0x1ffffff) {
																	// 0xb0324
																	v44 = v43 / 0x1000000 - 1;
																	v104 = v44;
																	if (v44 <= 3) {
																		// 0xb0334
																		v56 = g19 + 0x55ec * v44;
																		v57 = g36 + *(int32_t *)(v56 + 100);
																		v58 = g33 + *(int32_t *)(v56 + 96) - *(int32_t *)(v56 + 148);
																		v116 = *(int32_t *)(v56 + 124);
																		v74 = *(int32_t *)(v56 + 140);
																		g13 = *(int32_t *)(v56 + 144);
																		v104 = function_af440(v44, g32, g35, v58, v57, v116, v74, 0, 8);
																		if (g20 != 0) {
																			// 0xb0384
																			v75 = *(int32_t *)(g31 + 152);
																			if (v75 != 0) {
																				// 0xb0390
																				if (v75 == 2) {
																					// 0xb0398
																					function_afc30(g29 - 0x3060, g32 - 2, g35 + 1, g33 - 96, g36 - 16);
																					// branch -> 0xb03b0
																				}
																				// 0xb03b0
																				v104 = function_afc30(g29 - 64, g32 - 1, g35 + 1, g33 - 64, g36);
																				// branch -> 0xb03c8
																			}
																		}
																	}
																}
																// 0xb03c8
																if (g17 < 1) {
																	// 0xb04dc
																	if (v50 % 2 != 0) {
																		// 0xb04e4
																		v104 = function_aeb58(g32, g35, g33, g36, 0, 8, 0);
																		// branch -> 0xb0504
																	}
																	// 0xb0504
																	if ((0x1000000 * g16 || 0xffffff) >= 0x1ffffff) {
																		// 0xb050c
																		v78 = g23;
																		v113 = *(int32_t *)*(int32_t *)(v78 - 0x7290);
																		v104 = v113;
																		if (v113 < (int32_t) * (char *)*(int32_t *)(v78 - 0x70cc)) {
																			// 0xb0528
																			v104 = function_afa48(g32, g35, g33, g36, 0, 0, 8);
																			// branch -> 0xb0548
																		}
																	}
																	// 0xb0548
																	v79 = g25;
																	v87 = 0x1000000 * v79;
																	if ((v87 || 0xffffff) >= 0x1ffffff) {
																		// 0xb0550
																		v88 = v87 / 0x1000000 - 1;
																		g27 = v88;
																		v108 = 368 * v88;
																		v104 = v108;
																		v93 = *(int32_t *)(g23 - 0x7690) + v108;
																		g32 = v93;
																		if (*(int32_t *)(v93 + 52) != 0) {
																			// 0xb0570
																			if (v79 <= 127) {
																				// 0xb0578
																				g34 = *(int32_t *)(v93 + 24);
																				v80 = function_c9948();
																				g28 = v80;
																				v81 = g32;
																				if (v80 == 0) {
																					// 0xb0588
																					v104 = function_c9acc(*(int32_t *)(v81 + 24));
																					// branch -> 0xb0634
																				} else {
																					// 0xb0594
																					v99 = *(int32_t *)(v81 + 32);
																					g11 = v99;
																					if (v99 >= 1) {
																						// 0xb05a0
																						if (function_4d794(v80) > 50) {
																							// 0xb05a0
																							v103 = g32;
																							// branch -> 0xb05c4
																						} else {
																							// 0xb05b0
																							v89 = function_4d794(g28);
																							v82 = g32;
																							v100 = *(int32_t *)(v82 + 32);
																							g40 = v100;
																							if (v100 <= v89) {
																								// 0xb05d0
																								v83 = g27;
																								v94 = g33 - *(int32_t *)(v82 + 40);
																								g27 = v94;
																								v85 = v94;
																								v86 = v82;
																								if (v83 == (int32_t) * (char *)*(int32_t *)(g23 - 0x7748)) {
																									// 0xb05ec
																									g37 = v94;
																									g41 = *(int32_t *)(v82 + 36);
																									v84 = g36;
																									g38 = v84;
																									g42 = 0;
																									g13 = 8;
																									CelDrawHdrClrHL(181, v94, v84, *(int32_t *)(v82 + 24), v100);
																									v85 = g27;
																									v86 = g32;
																									// branch -> 0xb060c
																								}
																								// 0xb060c
																								v101 = *(int32_t *)(v86 + 32);
																								v102 = *(int32_t *)(v86 + 36);
																								function_4e998(v85, g36, *(int32_t *)(v86 + 24), v101, v102, 0, 8);
																								v110 = function_c9acc(*(int32_t *)(g32 + 24));
																								// branch -> 0xb0634
																								// 0xb0634
																								if (v12 == 0) {
																									// 0xb0634
																									result = v110;
																									// branch -> 0xb067c
																								} else {
																									// 0xb0640
																									v105 = g23;
																									v117 = *(int32_t *)(v105 - 0x7268);
																									v118 = (int32_t) * (char *)(v117 + (int32_t)v15);
																									*(int32_t *)*(int32_t *)(v105 - 0x7294) = v118;
																									v114 = *(int32_t *)*(int32_t *)(v105 - 0x7574);
																									result = function_4ea70(g29, v114, (int32_t)v12, 64, 0, 8);
																									// branch -> 0xb067c
																								}
																								// 0xb067c
																								g10 = v1;
																								return result;
																							}
																							v103 = v82;
																						}
																						// 0xb05c4
																						v109 = function_c9acc(*(int32_t *)(v103 + 24));
																						// branch -> 0xb0634
																						// 0xb0634
																						if (v12 == 0) {
																							// 0xb0634
																							result = v109;
																							// branch -> 0xb067c
																						} else {
																							// 0xb0640
																							v105 = g23;
																							v117 = *(int32_t *)(v105 - 0x7268);
																							v118 = (int32_t) * (char *)(v117 + (int32_t)v15);
																							*(int32_t *)*(int32_t *)(v105 - 0x7294) = v118;
																							v114 = *(int32_t *)*(int32_t *)(v105 - 0x7574);
																							result = function_4ea70(g29, v114, (int32_t)v12, 64, 0, 8);
																							// branch -> 0xb067c
																						}
																						// 0xb067c
																						g10 = v1;
																						return result;
																					}
																					// 0xb05c4
																					v104 = function_c9acc(*(int32_t *)(v81 + 24));
																					// branch -> 0xb0634
																				}
																				// 0xb0634
																				if (v12 == 0) {
																					// 0xb0634
																					result = v104;
																					// branch -> 0xb067c
																				} else {
																					// 0xb0640
																					v105 = g23;
																					v117 = *(int32_t *)(v105 - 0x7268);
																					v118 = (int32_t) * (char *)(v117 + (int32_t)v15);
																					*(int32_t *)*(int32_t *)(v105 - 0x7294) = v118;
																					v114 = *(int32_t *)*(int32_t *)(v105 - 0x7574);
																					result = function_4ea70(g29, v114, (int32_t)v12, 64, 0, 8);
																					// branch -> 0xb067c
																				}
																				// 0xb067c
																				g10 = v1;
																				return result;
																			}
																		}
																	}
																	// 0xb0634
																	if (v12 == 0) {
																		// 0xb0634
																		result = v104;
																		// branch -> 0xb067c
																	} else {
																		// 0xb0640
																		v105 = g23;
																		v117 = *(int32_t *)(v105 - 0x7268);
																		v118 = (int32_t) * (char *)(v117 + (int32_t)v15);
																		*(int32_t *)*(int32_t *)(v105 - 0x7294) = v118;
																		v114 = *(int32_t *)*(int32_t *)(v105 - 0x7574);
																		result = function_4ea70(g29, v114, (int32_t)v12, 64, 0, 8);
																		// branch -> 0xb067c
																	}
																	// 0xb067c
																	g10 = v1;
																	return result;
																}
																// 0xb03d0
																if (__asm_rlwinm_(v50, 0, 25, 25) == 0) {
																	// 0xb03d8
																	v112 = g19 + 0x55ec * *(int32_t *)*(int32_t *)(g23 - 0x77ac);
																	v104 = v112;
																	if (*(int32_t *)(v112 + 460) != 0) {
																		// 0xb03f4
																		*(int32_t *)g28 = g17 - 1;
																		v90 = *(int32_t *)g28;
																		if (v90 <= 199) {
																			// 0xb0408
																			v107 = 232 * v90;
																			v104 = v107;
																			v91 = *(int32_t *)(g23 - 0x7754) + v107;
																			g31 = v91;
																			if (*(int32_t *)(v91 + 160) % 2 == 0) {
																				// 0xb0420
																				v95 = *(int32_t *)(v91 + 224);
																				if (v95 != 0) {
																					// 0xb042c
																					g34 = v91 + 84;
																					g27 = g36 + *(int32_t *)(v91 + 60);
																					g26 = g33 + *(int32_t *)(v91 + 56) - *(int32_t *)(v95 + 496);
																					function_c9b28();
																					if (*(int32_t *)g28 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
																						// 0xb0460
																						v77 = g31;
																						v96 = *(int32_t *)(*(int32_t *)(v77 + 224) + 492);
																						g13 = 8;
																						function_507f4(233, g26, g27, v77 + 84, *(int32_t *)(v77 + 104), v96, 0);
																						// branch -> 0xb0488
																					}
																					// 0xb0488
																					function_c9b70((int32_t *)(g31 + 84));
																					v104 = function_aefc4(g32, g35, g26, g27, *(int32_t *)g28, 0, 8);
																					if (g20 != 0) {
																						// 0xb04b8
																						if (*(int32_t *)(g31 + 108) != 0) {
																							// 0xb04c4
																							v104 = function_afc30(g29 - 64, g32 - 1, g35 + 1, g33 - 64, g36);
																							// branch -> 0xb04dc
																						}
																					}
																				}
																			}
																		}
																	}
																} else {
																	// 0xb03f4
																	*(int32_t *)g28 = g17 - 1;
																	v90 = *(int32_t *)g28;
																	if (v90 <= 199) {
																		// 0xb0408
																		v107 = 232 * v90;
																		v104 = v107;
																		v91 = *(int32_t *)(g23 - 0x7754) + v107;
																		g31 = v91;
																		if (*(int32_t *)(v91 + 160) % 2 == 0) {
																			// 0xb0420
																			v95 = *(int32_t *)(v91 + 224);
																			if (v95 != 0) {
																				// 0xb042c
																				g34 = v91 + 84;
																				g27 = g36 + *(int32_t *)(v91 + 60);
																				g26 = g33 + *(int32_t *)(v91 + 56) - *(int32_t *)(v95 + 496);
																				function_c9b28();
																				if (*(int32_t *)g28 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
																					// 0xb0460
																					v77 = g31;
																					v96 = *(int32_t *)(*(int32_t *)(v77 + 224) + 492);
																					g13 = 8;
																					function_507f4(233, g26, g27, v77 + 84, *(int32_t *)(v77 + 104), v96, 0);
																					// branch -> 0xb0488
																				}
																				// 0xb0488
																				function_c9b70((int32_t *)(g31 + 84));
																				v104 = function_aefc4(g32, g35, g26, g27, *(int32_t *)g28, 0, 8);
																				if (g20 != 0) {
																					// 0xb04b8
																					if (*(int32_t *)(g31 + 108) != 0) {
																						// 0xb04c4
																						v104 = function_afc30(g29 - 64, g32 - 1, g35 + 1, g33 - 64, g36);
																						// branch -> 0xb04dc
																					}
																				}
																			}
																		}
																	}
																}
																// 0xb04dc
																if (v50 % 2 != 0) {
																	// 0xb04e4
																	v104 = function_aeb58(g32, g35, g33, g36, 0, 8, 0);
																	// branch -> 0xb0504
																}
																// 0xb0504
																if ((0x1000000 * g16 || 0xffffff) >= 0x1ffffff) {
																	// 0xb050c
																	v78 = g23;
																	v113 = *(int32_t *)*(int32_t *)(v78 - 0x7290);
																	v104 = v113;
																	if (v113 < (int32_t) * (char *)*(int32_t *)(v78 - 0x70cc)) {
																		// 0xb0528
																		v104 = function_afa48(g32, g35, g33, g36, 0, 0, 8);
																		// branch -> 0xb0548
																	}
																}
																// 0xb0548
																v79 = g25;
																v87 = 0x1000000 * v79;
																if ((v87 || 0xffffff) >= 0x1ffffff) {
																	// 0xb0550
																	v88 = v87 / 0x1000000 - 1;
																	g27 = v88;
																	v108 = 368 * v88;
																	v104 = v108;
																	v93 = *(int32_t *)(g23 - 0x7690) + v108;
																	g32 = v93;
																	if (*(int32_t *)(v93 + 52) != 0) {
																		// 0xb0570
																		if (v79 <= 127) {
																			// 0xb0578
																			g34 = *(int32_t *)(v93 + 24);
																			v80 = function_c9948();
																			g28 = v80;
																			v81 = g32;
																			if (v80 == 0) {
																				// 0xb0588
																				v104 = function_c9acc(*(int32_t *)(v81 + 24));
																				// branch -> 0xb0634
																			} else {
																				// 0xb0594
																				v99 = *(int32_t *)(v81 + 32);
																				g11 = v99;
																				if (v99 >= 1) {
																					// 0xb05a0
																					if (function_4d794(v80) > 50) {
																						// 0xb05a0
																						v103 = g32;
																						// branch -> 0xb05c4
																					} else {
																						// 0xb05b0
																						v89 = function_4d794(g28);
																						v82 = g32;
																						v100 = *(int32_t *)(v82 + 32);
																						g40 = v100;
																						if (v100 <= v89) {
																							// 0xb05d0
																							v83 = g27;
																							v94 = g33 - *(int32_t *)(v82 + 40);
																							g27 = v94;
																							v85 = v94;
																							v86 = v82;
																							if (v83 == (int32_t) * (char *)*(int32_t *)(g23 - 0x7748)) {
																								// 0xb05ec
																								g37 = v94;
																								g41 = *(int32_t *)(v82 + 36);
																								v84 = g36;
																								g38 = v84;
																								g42 = 0;
																								g13 = 8;
																								CelDrawHdrClrHL(181, v94, v84, *(int32_t *)(v82 + 24), v100);
																								v85 = g27;
																								v86 = g32;
																								// branch -> 0xb060c
																							}
																							// 0xb060c
																							v101 = *(int32_t *)(v86 + 32);
																							v102 = *(int32_t *)(v86 + 36);
																							function_4e998(v85, g36, *(int32_t *)(v86 + 24), v101, v102, 0, 8);
																							v110 = function_c9acc(*(int32_t *)(g32 + 24));
																							// branch -> 0xb0634
																							// 0xb0634
																							if (v12 == 0) {
																								// 0xb0634
																								result = v110;
																								// branch -> 0xb067c
																							} else {
																								// 0xb0640
																								v105 = g23;
																								v117 = *(int32_t *)(v105 - 0x7268);
																								v118 = (int32_t) * (char *)(v117 + (int32_t)v15);
																								*(int32_t *)*(int32_t *)(v105 - 0x7294) = v118;
																								v114 = *(int32_t *)*(int32_t *)(v105 - 0x7574);
																								result = function_4ea70(g29, v114, (int32_t)v12, 64, 0, 8);
																								// branch -> 0xb067c
																							}
																							// 0xb067c
																							g10 = v1;
																							return result;
																						}
																						v103 = v82;
																					}
																					// 0xb05c4
																					v109 = function_c9acc(*(int32_t *)(v103 + 24));
																					// branch -> 0xb0634
																					// 0xb0634
																					if (v12 == 0) {
																						// 0xb0634
																						result = v109;
																						// branch -> 0xb067c
																					} else {
																						// 0xb0640
																						v105 = g23;
																						v117 = *(int32_t *)(v105 - 0x7268);
																						v118 = (int32_t) * (char *)(v117 + (int32_t)v15);
																						*(int32_t *)*(int32_t *)(v105 - 0x7294) = v118;
																						v114 = *(int32_t *)*(int32_t *)(v105 - 0x7574);
																						result = function_4ea70(g29, v114, (int32_t)v12, 64, 0, 8);
																						// branch -> 0xb067c
																					}
																					// 0xb067c
																					g10 = v1;
																					return result;
																				}
																				// 0xb05c4
																				v104 = function_c9acc(*(int32_t *)(v81 + 24));
																				// branch -> 0xb0634
																			}
																			// 0xb0634
																			if (v12 == 0) {
																				// 0xb0634
																				result = v104;
																				// branch -> 0xb067c
																			} else {
																				// 0xb0640
																				v105 = g23;
																				v117 = *(int32_t *)(v105 - 0x7268);
																				v118 = (int32_t) * (char *)(v117 + (int32_t)v15);
																				*(int32_t *)*(int32_t *)(v105 - 0x7294) = v118;
																				v114 = *(int32_t *)*(int32_t *)(v105 - 0x7574);
																				result = function_4ea70(g29, v114, (int32_t)v12, 64, 0, 8);
																				// branch -> 0xb067c
																			}
																			// 0xb067c
																			g10 = v1;
																			return result;
																		}
																	}
																}
																// 0xb0634
																if (v12 == 0) {
																	// 0xb0634
																	result = v104;
																	// branch -> 0xb067c
																} else {
																	// 0xb0640
																	v105 = g23;
																	v117 = *(int32_t *)(v105 - 0x7268);
																	v118 = (int32_t) * (char *)(v117 + (int32_t)v15);
																	*(int32_t *)*(int32_t *)(v105 - 0x7294) = v118;
																	v114 = *(int32_t *)*(int32_t *)(v105 - 0x7574);
																	result = function_4ea70(g29, v114, (int32_t)v12, 64, 0, 8);
																	// branch -> 0xb067c
																}
																// 0xb067c
																g10 = v1;
																return result;
															}
															// 0xb01dc
															if (__asm_rlwinm_(v50, 0, 25, 25) == 0) {
																// 0xb01e4
																v111 = g19 + 0x55ec * *(int32_t *)*(int32_t *)(g23 - 0x77ac);
																v104 = v111;
																if (*(int32_t *)(v111 + 460) != 0) {
																	// 0xb0200
																	v34 = g21;
																	if (v34 <= 0xffffffff) {
																		// 0xb0208
																		*(int32_t *)g28 = -1 - v34;
																		v54 = *(int32_t *)g28;
																		if (v54 <= 199) {
																			// 0xb0220
																			v106 = 232 * v54;
																			v104 = v106;
																			v55 = *(int32_t *)(g23 - 0x7754) + v106;
																			g31 = v55;
																			if (*(int32_t *)(v55 + 160) % 2 == 0) {
																				// 0xb0238
																				v72 = *(int32_t *)(v55 + 224);
																				if (v72 != 0) {
																					// 0xb0244
																					g34 = v55 + 84;
																					g27 = g36 + *(int32_t *)(v55 + 60);
																					g26 = g33 + *(int32_t *)(v55 + 56) - *(int32_t *)(v72 + 496);
																					function_c9b28();
																					if (*(int32_t *)g28 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
																						// 0xb0278
																						v35 = g31;
																						v73 = *(int32_t *)(*(int32_t *)(v35 + 224) + 492);
																						g13 = 8;
																						function_507f4(233, g26, g27, v35 + 84, *(int32_t *)(v35 + 104), v73, 0);
																						// branch -> 0xb02a0
																					}
																					// 0xb02a0
																					function_c9b70((int32_t *)(g31 + 84));
																					v104 = function_aefc4(g32, g35, g26, g27, *(int32_t *)g28, 0, 8);
																					if (g20 != 0) {
																						// 0xb02d0
																						if (*(int32_t *)(g31 + 108) != 0) {
																							// 0xb02dc
																							v104 = function_afc30(g29 - 64, g32 - 1, g35 + 1, g33 - 64, g36);
																							// branch -> 0xb02f4
																						}
																					}
																				}
																			}
																		}
																	}
																}
															} else {
																// 0xb0200
																v34 = g21;
																if (v34 <= 0xffffffff) {
																	// 0xb0208
																	*(int32_t *)g28 = -1 - v34;
																	v54 = *(int32_t *)g28;
																	if (v54 <= 199) {
																		// 0xb0220
																		v106 = 232 * v54;
																		v104 = v106;
																		v55 = *(int32_t *)(g23 - 0x7754) + v106;
																		g31 = v55;
																		if (*(int32_t *)(v55 + 160) % 2 == 0) {
																			// 0xb0238
																			v72 = *(int32_t *)(v55 + 224);
																			if (v72 != 0) {
																				// 0xb0244
																				g34 = v55 + 84;
																				g27 = g36 + *(int32_t *)(v55 + 60);
																				g26 = g33 + *(int32_t *)(v55 + 56) - *(int32_t *)(v72 + 496);
																				function_c9b28();
																				if (*(int32_t *)g28 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
																					// 0xb0278
																					v35 = g31;
																					v73 = *(int32_t *)(*(int32_t *)(v35 + 224) + 492);
																					g13 = 8;
																					function_507f4(233, g26, g27, v35 + 84, *(int32_t *)(v35 + 104), v73, 0);
																					// branch -> 0xb02a0
																				}
																				// 0xb02a0
																				function_c9b70((int32_t *)(g31 + 84));
																				v104 = function_aefc4(g32, g35, g26, g27, *(int32_t *)g28, 0, 8);
																				if (g20 != 0) {
																					// 0xb02d0
																					if (*(int32_t *)(g31 + 108) != 0) {
																						// 0xb02dc
																						v104 = function_afc30(g29 - 64, g32 - 1, g35 + 1, g33 - 64, g36);
																						// branch -> 0xb02f4
																					}
																				}
																			}
																		}
																	}
																}
															}
															// 0xb02f4
															if (__asm_rlwinm_(v50, 0, 29, 29) != 0) {
																// 0xb02fc
																v104 = function_af6d0(g32, g35, g33, g36, 0, 8, 1);
																// branch -> 0xb031c
															}
															// 0xb031c
															v43 = 0x1000000 * g18;
															if (v43 >= 0 && (v43 || 0xffffff) >= 0x1ffffff) {
																// 0xb0324
																v44 = v43 / 0x1000000 - 1;
																v104 = v44;
																if (v44 <= 3) {
																	// 0xb0334
																	v56 = g19 + 0x55ec * v44;
																	v57 = g36 + *(int32_t *)(v56 + 100);
																	v58 = g33 + *(int32_t *)(v56 + 96) - *(int32_t *)(v56 + 148);
																	v116 = *(int32_t *)(v56 + 124);
																	v74 = *(int32_t *)(v56 + 140);
																	g13 = *(int32_t *)(v56 + 144);
																	v104 = function_af440(v44, g32, g35, v58, v57, v116, v74, 0, 8);
																	if (g20 != 0) {
																		// 0xb0384
																		v75 = *(int32_t *)(g31 + 152);
																		if (v75 != 0) {
																			// 0xb0390
																			if (v75 == 2) {
																				// 0xb0398
																				function_afc30(g29 - 0x3060, g32 - 2, g35 + 1, g33 - 96, g36 - 16);
																				// branch -> 0xb03b0
																			}
																			// 0xb03b0
																			v104 = function_afc30(g29 - 64, g32 - 1, g35 + 1, g33 - 64, g36);
																			// branch -> 0xb03c8
																		}
																	}
																}
															}
															// 0xb03c8
															if (g17 < 1) {
																// 0xb04dc
																if (v50 % 2 != 0) {
																	// 0xb04e4
																	v104 = function_aeb58(g32, g35, g33, g36, 0, 8, 0);
																	// branch -> 0xb0504
																}
																// 0xb0504
																if ((0x1000000 * g16 || 0xffffff) >= 0x1ffffff) {
																	// 0xb050c
																	v78 = g23;
																	v113 = *(int32_t *)*(int32_t *)(v78 - 0x7290);
																	v104 = v113;
																	if (v113 < (int32_t) * (char *)*(int32_t *)(v78 - 0x70cc)) {
																		// 0xb0528
																		v104 = function_afa48(g32, g35, g33, g36, 0, 0, 8);
																		// branch -> 0xb0548
																	}
																}
																// 0xb0548
																v79 = g25;
																v87 = 0x1000000 * v79;
																if ((v87 || 0xffffff) >= 0x1ffffff) {
																	// 0xb0550
																	v88 = v87 / 0x1000000 - 1;
																	g27 = v88;
																	v108 = 368 * v88;
																	v104 = v108;
																	v93 = *(int32_t *)(g23 - 0x7690) + v108;
																	g32 = v93;
																	if (*(int32_t *)(v93 + 52) != 0) {
																		// 0xb0570
																		if (v79 <= 127) {
																			// 0xb0578
																			g34 = *(int32_t *)(v93 + 24);
																			v80 = function_c9948();
																			g28 = v80;
																			v81 = g32;
																			if (v80 == 0) {
																				// 0xb0588
																				v104 = function_c9acc(*(int32_t *)(v81 + 24));
																				// branch -> 0xb0634
																			} else {
																				// 0xb0594
																				v99 = *(int32_t *)(v81 + 32);
																				g11 = v99;
																				if (v99 >= 1) {
																					// 0xb05a0
																					if (function_4d794(v80) > 50) {
																						// 0xb05a0
																						v103 = g32;
																						// branch -> 0xb05c4
																					} else {
																						// 0xb05b0
																						v89 = function_4d794(g28);
																						v82 = g32;
																						v100 = *(int32_t *)(v82 + 32);
																						g40 = v100;
																						if (v100 <= v89) {
																							// 0xb05d0
																							v83 = g27;
																							v94 = g33 - *(int32_t *)(v82 + 40);
																							g27 = v94;
																							v85 = v94;
																							v86 = v82;
																							if (v83 == (int32_t) * (char *)*(int32_t *)(g23 - 0x7748)) {
																								// 0xb05ec
																								g37 = v94;
																								g41 = *(int32_t *)(v82 + 36);
																								v84 = g36;
																								g38 = v84;
																								g42 = 0;
																								g13 = 8;
																								CelDrawHdrClrHL(181, v94, v84, *(int32_t *)(v82 + 24), v100);
																								v85 = g27;
																								v86 = g32;
																								// branch -> 0xb060c
																							}
																							// 0xb060c
																							v101 = *(int32_t *)(v86 + 32);
																							v102 = *(int32_t *)(v86 + 36);
																							function_4e998(v85, g36, *(int32_t *)(v86 + 24), v101, v102, 0, 8);
																							v110 = function_c9acc(*(int32_t *)(g32 + 24));
																							// branch -> 0xb0634
																							// 0xb0634
																							if (v12 == 0) {
																								// 0xb0634
																								result = v110;
																								// branch -> 0xb067c
																							} else {
																								// 0xb0640
																								v105 = g23;
																								v117 = *(int32_t *)(v105 - 0x7268);
																								v118 = (int32_t) * (char *)(v117 + (int32_t)v15);
																								*(int32_t *)*(int32_t *)(v105 - 0x7294) = v118;
																								v114 = *(int32_t *)*(int32_t *)(v105 - 0x7574);
																								result = function_4ea70(g29, v114, (int32_t)v12, 64, 0, 8);
																								// branch -> 0xb067c
																							}
																							// 0xb067c
																							g10 = v1;
																							return result;
																						}
																						v103 = v82;
																					}
																					// 0xb05c4
																					v109 = function_c9acc(*(int32_t *)(v103 + 24));
																					// branch -> 0xb0634
																					// 0xb0634
																					if (v12 == 0) {
																						// 0xb0634
																						result = v109;
																						// branch -> 0xb067c
																					} else {
																						// 0xb0640
																						v105 = g23;
																						v117 = *(int32_t *)(v105 - 0x7268);
																						v118 = (int32_t) * (char *)(v117 + (int32_t)v15);
																						*(int32_t *)*(int32_t *)(v105 - 0x7294) = v118;
																						v114 = *(int32_t *)*(int32_t *)(v105 - 0x7574);
																						result = function_4ea70(g29, v114, (int32_t)v12, 64, 0, 8);
																						// branch -> 0xb067c
																					}
																					// 0xb067c
																					g10 = v1;
																					return result;
																				}
																				// 0xb05c4
																				v104 = function_c9acc(*(int32_t *)(v81 + 24));
																				// branch -> 0xb0634
																			}
																			// 0xb0634
																			if (v12 == 0) {
																				// 0xb0634
																				result = v104;
																				// branch -> 0xb067c
																			} else {
																				// 0xb0640
																				v105 = g23;
																				v117 = *(int32_t *)(v105 - 0x7268);
																				v118 = (int32_t) * (char *)(v117 + (int32_t)v15);
																				*(int32_t *)*(int32_t *)(v105 - 0x7294) = v118;
																				v114 = *(int32_t *)*(int32_t *)(v105 - 0x7574);
																				result = function_4ea70(g29, v114, (int32_t)v12, 64, 0, 8);
																				// branch -> 0xb067c
																			}
																			// 0xb067c
																			g10 = v1;
																			return result;
																		}
																	}
																}
																// 0xb0634
																if (v12 == 0) {
																	// 0xb0634
																	result = v104;
																	// branch -> 0xb067c
																} else {
																	// 0xb0640
																	v105 = g23;
																	v117 = *(int32_t *)(v105 - 0x7268);
																	v118 = (int32_t) * (char *)(v117 + (int32_t)v15);
																	*(int32_t *)*(int32_t *)(v105 - 0x7294) = v118;
																	v114 = *(int32_t *)*(int32_t *)(v105 - 0x7574);
																	result = function_4ea70(g29, v114, (int32_t)v12, 64, 0, 8);
																	// branch -> 0xb067c
																}
																// 0xb067c
																g10 = v1;
																return result;
															}
															// 0xb03d0
															if (__asm_rlwinm_(v50, 0, 25, 25) == 0) {
																// 0xb03d8
																v112 = g19 + 0x55ec * *(int32_t *)*(int32_t *)(g23 - 0x77ac);
																v104 = v112;
																if (*(int32_t *)(v112 + 460) != 0) {
																	// 0xb03f4
																	*(int32_t *)g28 = g17 - 1;
																	v90 = *(int32_t *)g28;
																	if (v90 <= 199) {
																		// 0xb0408
																		v107 = 232 * v90;
																		v104 = v107;
																		v91 = *(int32_t *)(g23 - 0x7754) + v107;
																		g31 = v91;
																		if (*(int32_t *)(v91 + 160) % 2 == 0) {
																			// 0xb0420
																			v95 = *(int32_t *)(v91 + 224);
																			if (v95 != 0) {
																				// 0xb042c
																				g34 = v91 + 84;
																				g27 = g36 + *(int32_t *)(v91 + 60);
																				g26 = g33 + *(int32_t *)(v91 + 56) - *(int32_t *)(v95 + 496);
																				function_c9b28();
																				if (*(int32_t *)g28 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
																					// 0xb0460
																					v77 = g31;
																					v96 = *(int32_t *)(*(int32_t *)(v77 + 224) + 492);
																					g13 = 8;
																					function_507f4(233, g26, g27, v77 + 84, *(int32_t *)(v77 + 104), v96, 0);
																					// branch -> 0xb0488
																				}
																				// 0xb0488
																				function_c9b70((int32_t *)(g31 + 84));
																				v104 = function_aefc4(g32, g35, g26, g27, *(int32_t *)g28, 0, 8);
																				if (g20 != 0) {
																					// 0xb04b8
																					if (*(int32_t *)(g31 + 108) != 0) {
																						// 0xb04c4
																						v104 = function_afc30(g29 - 64, g32 - 1, g35 + 1, g33 - 64, g36);
																						// branch -> 0xb04dc
																					}
																				}
																			}
																		}
																	}
																}
															} else {
																// 0xb03f4
																*(int32_t *)g28 = g17 - 1;
																v90 = *(int32_t *)g28;
																if (v90 <= 199) {
																	// 0xb0408
																	v107 = 232 * v90;
																	v104 = v107;
																	v91 = *(int32_t *)(g23 - 0x7754) + v107;
																	g31 = v91;
																	if (*(int32_t *)(v91 + 160) % 2 == 0) {
																		// 0xb0420
																		v95 = *(int32_t *)(v91 + 224);
																		if (v95 != 0) {
																			// 0xb042c
																			g34 = v91 + 84;
																			g27 = g36 + *(int32_t *)(v91 + 60);
																			g26 = g33 + *(int32_t *)(v91 + 56) - *(int32_t *)(v95 + 496);
																			function_c9b28();
																			if (*(int32_t *)g28 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
																				// 0xb0460
																				v77 = g31;
																				v96 = *(int32_t *)(*(int32_t *)(v77 + 224) + 492);
																				g13 = 8;
																				function_507f4(233, g26, g27, v77 + 84, *(int32_t *)(v77 + 104), v96, 0);
																				// branch -> 0xb0488
																			}
																			// 0xb0488
																			function_c9b70((int32_t *)(g31 + 84));
																			v104 = function_aefc4(g32, g35, g26, g27, *(int32_t *)g28, 0, 8);
																			if (g20 != 0) {
																				// 0xb04b8
																				if (*(int32_t *)(g31 + 108) != 0) {
																					// 0xb04c4
																					v104 = function_afc30(g29 - 64, g32 - 1, g35 + 1, g33 - 64, g36);
																					// branch -> 0xb04dc
																				}
																			}
																		}
																	}
																}
															}
															// 0xb04dc
															if (v50 % 2 != 0) {
																// 0xb04e4
																v104 = function_aeb58(g32, g35, g33, g36, 0, 8, 0);
																// branch -> 0xb0504
															}
															// 0xb0504
															if ((0x1000000 * g16 || 0xffffff) >= 0x1ffffff) {
																// 0xb050c
																v78 = g23;
																v113 = *(int32_t *)*(int32_t *)(v78 - 0x7290);
																v104 = v113;
																if (v113 < (int32_t) * (char *)*(int32_t *)(v78 - 0x70cc)) {
																	// 0xb0528
																	v104 = function_afa48(g32, g35, g33, g36, 0, 0, 8);
																	// branch -> 0xb0548
																}
															}
															// 0xb0548
															v79 = g25;
															v87 = 0x1000000 * v79;
															if ((v87 || 0xffffff) >= 0x1ffffff) {
																// 0xb0550
																v88 = v87 / 0x1000000 - 1;
																g27 = v88;
																v108 = 368 * v88;
																v104 = v108;
																v93 = *(int32_t *)(g23 - 0x7690) + v108;
																g32 = v93;
																if (*(int32_t *)(v93 + 52) != 0) {
																	// 0xb0570
																	if (v79 <= 127) {
																		// 0xb0578
																		g34 = *(int32_t *)(v93 + 24);
																		v80 = function_c9948();
																		g28 = v80;
																		v81 = g32;
																		if (v80 == 0) {
																			// 0xb0588
																			v104 = function_c9acc(*(int32_t *)(v81 + 24));
																			// branch -> 0xb0634
																		} else {
																			// 0xb0594
																			v99 = *(int32_t *)(v81 + 32);
																			g11 = v99;
																			if (v99 >= 1) {
																				// 0xb05a0
																				if (function_4d794(v80) > 50) {
																					// 0xb05a0
																					v103 = g32;
																					// branch -> 0xb05c4
																				} else {
																					// 0xb05b0
																					v89 = function_4d794(g28);
																					v82 = g32;
																					v100 = *(int32_t *)(v82 + 32);
																					g40 = v100;
																					if (v100 <= v89) {
																						// 0xb05d0
																						v83 = g27;
																						v94 = g33 - *(int32_t *)(v82 + 40);
																						g27 = v94;
																						v85 = v94;
																						v86 = v82;
																						if (v83 == (int32_t) * (char *)*(int32_t *)(g23 - 0x7748)) {
																							// 0xb05ec
																							g37 = v94;
																							g41 = *(int32_t *)(v82 + 36);
																							v84 = g36;
																							g38 = v84;
																							g42 = 0;
																							g13 = 8;
																							CelDrawHdrClrHL(181, v94, v84, *(int32_t *)(v82 + 24), v100);
																							v85 = g27;
																							v86 = g32;
																							// branch -> 0xb060c
																						}
																						// 0xb060c
																						v101 = *(int32_t *)(v86 + 32);
																						v102 = *(int32_t *)(v86 + 36);
																						function_4e998(v85, g36, *(int32_t *)(v86 + 24), v101, v102, 0, 8);
																						v110 = function_c9acc(*(int32_t *)(g32 + 24));
																						// branch -> 0xb0634
																						// 0xb0634
																						if (v12 == 0) {
																							// 0xb0634
																							result = v110;
																							// branch -> 0xb067c
																						} else {
																							// 0xb0640
																							v105 = g23;
																							v117 = *(int32_t *)(v105 - 0x7268);
																							v118 = (int32_t) * (char *)(v117 + (int32_t)v15);
																							*(int32_t *)*(int32_t *)(v105 - 0x7294) = v118;
																							v114 = *(int32_t *)*(int32_t *)(v105 - 0x7574);
																							result = function_4ea70(g29, v114, (int32_t)v12, 64, 0, 8);
																							// branch -> 0xb067c
																						}
																						// 0xb067c
																						g10 = v1;
																						return result;
																					}
																					v103 = v82;
																				}
																				// 0xb05c4
																				v109 = function_c9acc(*(int32_t *)(v103 + 24));
																				// branch -> 0xb0634
																				// 0xb0634
																				if (v12 == 0) {
																					// 0xb0634
																					result = v109;
																					// branch -> 0xb067c
																				} else {
																					// 0xb0640
																					v105 = g23;
																					v117 = *(int32_t *)(v105 - 0x7268);
																					v118 = (int32_t) * (char *)(v117 + (int32_t)v15);
																					*(int32_t *)*(int32_t *)(v105 - 0x7294) = v118;
																					v114 = *(int32_t *)*(int32_t *)(v105 - 0x7574);
																					result = function_4ea70(g29, v114, (int32_t)v12, 64, 0, 8);
																					// branch -> 0xb067c
																				}
																				// 0xb067c
																				g10 = v1;
																				return result;
																			}
																			// 0xb05c4
																			v104 = function_c9acc(*(int32_t *)(v81 + 24));
																			// branch -> 0xb0634
																		}
																		// 0xb0634
																		if (v12 == 0) {
																			// 0xb0634
																			result = v104;
																			// branch -> 0xb067c
																		} else {
																			// 0xb0640
																			v105 = g23;
																			v117 = *(int32_t *)(v105 - 0x7268);
																			v118 = (int32_t) * (char *)(v117 + (int32_t)v15);
																			*(int32_t *)*(int32_t *)(v105 - 0x7294) = v118;
																			v114 = *(int32_t *)*(int32_t *)(v105 - 0x7574);
																			result = function_4ea70(g29, v114, (int32_t)v12, 64, 0, 8);
																			// branch -> 0xb067c
																		}
																		// 0xb067c
																		g10 = v1;
																		return result;
																	}
																}
															}
															// 0xb0634
															if (v12 == 0) {
																// 0xb0634
																result = v104;
																// branch -> 0xb067c
															} else {
																// 0xb0640
																v105 = g23;
																v117 = *(int32_t *)(v105 - 0x7268);
																v118 = (int32_t) * (char *)(v117 + (int32_t)v15);
																*(int32_t *)*(int32_t *)(v105 - 0x7294) = v118;
																v114 = *(int32_t *)*(int32_t *)(v105 - 0x7574);
																result = function_4ea70(g29, v114, (int32_t)v12, 64, 0, 8);
																// branch -> 0xb067c
															}
															// 0xb067c
															g10 = v1;
															return result;
														}
														v30 = v29;
													}
													// 0xb00ac
													v104 = function_c9acc(*(int32_t *)(v30 + 24));
													// branch -> 0xb011c
													// 0xb011c
													v50 = v13;
													g30 = v50;
													if (__asm_rlwinm_(v50, 0, 26, 26) != 0) {
														// 0xb0128
														v42 = -1 - (int32_t)v16;
														v104 = v42;
														if (v42 <= 3) {
															// 0xb0140
															v51 = g19 + 0x55ec * v42;
															v52 = g36 + *(int32_t *)(v51 + 100);
															v53 = g33 + *(int32_t *)(v51 + 96) - *(int32_t *)(v51 + 148);
															v115 = *(int32_t *)(v51 + 124);
															v69 = *(int32_t *)(v51 + 140);
															g13 = *(int32_t *)(v51 + 144);
															v104 = function_af440(v42, g32, g35 - 1, v53, v52, v115, v69, 0, 8);
															if (g20 != 0) {
																// 0xb0190
																v70 = *(int32_t *)(g31 + 152);
																if (v70 != 0) {
																	// 0xb019c
																	if (v70 == 2) {
																		// 0xb01a4
																		function_afc30(g29 - 0x3060, g32 - 2, g35 + 1, g33 - 96, g36 - 16);
																		// branch -> 0xb01bc
																	}
																	// 0xb01bc
																	v104 = function_afc30(g29 - 64, g32 - 1, g35 + 1, g33 - 64, g36);
																	// branch -> 0xb01d4
																}
															}
														}
													}
													// 0xb01d4
													if (__asm_rlwinm_(v50, 0, 27, 27) != 0) {
														// 0xb01dc
														if (__asm_rlwinm_(v50, 0, 25, 25) == 0) {
															// 0xb01e4
															v111 = g19 + 0x55ec * *(int32_t *)*(int32_t *)(g23 - 0x77ac);
															v104 = v111;
															if (*(int32_t *)(v111 + 460) != 0) {
																// 0xb0200
																v34 = g21;
																if (v34 <= 0xffffffff) {
																	// 0xb0208
																	*(int32_t *)g28 = -1 - v34;
																	v54 = *(int32_t *)g28;
																	if (v54 <= 199) {
																		// 0xb0220
																		v106 = 232 * v54;
																		v104 = v106;
																		v55 = *(int32_t *)(g23 - 0x7754) + v106;
																		g31 = v55;
																		if (*(int32_t *)(v55 + 160) % 2 == 0) {
																			// 0xb0238
																			v72 = *(int32_t *)(v55 + 224);
																			if (v72 != 0) {
																				// 0xb0244
																				g34 = v55 + 84;
																				g27 = g36 + *(int32_t *)(v55 + 60);
																				g26 = g33 + *(int32_t *)(v55 + 56) - *(int32_t *)(v72 + 496);
																				function_c9b28();
																				if (*(int32_t *)g28 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
																					// 0xb0278
																					v35 = g31;
																					v73 = *(int32_t *)(*(int32_t *)(v35 + 224) + 492);
																					g13 = 8;
																					function_507f4(233, g26, g27, v35 + 84, *(int32_t *)(v35 + 104), v73, 0);
																					// branch -> 0xb02a0
																				}
																				// 0xb02a0
																				function_c9b70((int32_t *)(g31 + 84));
																				v104 = function_aefc4(g32, g35, g26, g27, *(int32_t *)g28, 0, 8);
																				if (g20 != 0) {
																					// 0xb02d0
																					if (*(int32_t *)(g31 + 108) != 0) {
																						// 0xb02dc
																						v104 = function_afc30(g29 - 64, g32 - 1, g35 + 1, g33 - 64, g36);
																						// branch -> 0xb02f4
																					}
																				}
																			}
																		}
																	}
																}
															}
														} else {
															// 0xb0200
															v34 = g21;
															if (v34 <= 0xffffffff) {
																// 0xb0208
																*(int32_t *)g28 = -1 - v34;
																v54 = *(int32_t *)g28;
																if (v54 <= 199) {
																	// 0xb0220
																	v106 = 232 * v54;
																	v104 = v106;
																	v55 = *(int32_t *)(g23 - 0x7754) + v106;
																	g31 = v55;
																	if (*(int32_t *)(v55 + 160) % 2 == 0) {
																		// 0xb0238
																		v72 = *(int32_t *)(v55 + 224);
																		if (v72 != 0) {
																			// 0xb0244
																			g34 = v55 + 84;
																			g27 = g36 + *(int32_t *)(v55 + 60);
																			g26 = g33 + *(int32_t *)(v55 + 56) - *(int32_t *)(v72 + 496);
																			function_c9b28();
																			if (*(int32_t *)g28 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
																				// 0xb0278
																				v35 = g31;
																				v73 = *(int32_t *)(*(int32_t *)(v35 + 224) + 492);
																				g13 = 8;
																				function_507f4(233, g26, g27, v35 + 84, *(int32_t *)(v35 + 104), v73, 0);
																				// branch -> 0xb02a0
																			}
																			// 0xb02a0
																			function_c9b70((int32_t *)(g31 + 84));
																			v104 = function_aefc4(g32, g35, g26, g27, *(int32_t *)g28, 0, 8);
																			if (g20 != 0) {
																				// 0xb02d0
																				if (*(int32_t *)(g31 + 108) != 0) {
																					// 0xb02dc
																					v104 = function_afc30(g29 - 64, g32 - 1, g35 + 1, g33 - 64, g36);
																					// branch -> 0xb02f4
																				}
																			}
																		}
																	}
																}
															}
														}
														// 0xb02f4
														if (__asm_rlwinm_(v50, 0, 29, 29) != 0) {
															// 0xb02fc
															v104 = function_af6d0(g32, g35, g33, g36, 0, 8, 1);
															// branch -> 0xb031c
														}
														// 0xb031c
														v43 = 0x1000000 * g18;
														if (v43 >= 0 && (v43 || 0xffffff) >= 0x1ffffff) {
															// 0xb0324
															v44 = v43 / 0x1000000 - 1;
															v104 = v44;
															if (v44 <= 3) {
																// 0xb0334
																v56 = g19 + 0x55ec * v44;
																v57 = g36 + *(int32_t *)(v56 + 100);
																v58 = g33 + *(int32_t *)(v56 + 96) - *(int32_t *)(v56 + 148);
																v116 = *(int32_t *)(v56 + 124);
																v74 = *(int32_t *)(v56 + 140);
																g13 = *(int32_t *)(v56 + 144);
																v104 = function_af440(v44, g32, g35, v58, v57, v116, v74, 0, 8);
																if (g20 != 0) {
																	// 0xb0384
																	v75 = *(int32_t *)(g31 + 152);
																	if (v75 != 0) {
																		// 0xb0390
																		if (v75 == 2) {
																			// 0xb0398
																			function_afc30(g29 - 0x3060, g32 - 2, g35 + 1, g33 - 96, g36 - 16);
																			// branch -> 0xb03b0
																		}
																		// 0xb03b0
																		v104 = function_afc30(g29 - 64, g32 - 1, g35 + 1, g33 - 64, g36);
																		// branch -> 0xb03c8
																	}
																}
															}
														}
														// 0xb03c8
														if (g17 < 1) {
															// 0xb04dc
															if (v50 % 2 != 0) {
																// 0xb04e4
																v104 = function_aeb58(g32, g35, g33, g36, 0, 8, 0);
																// branch -> 0xb0504
															}
															// 0xb0504
															if ((0x1000000 * g16 || 0xffffff) >= 0x1ffffff) {
																// 0xb050c
																v78 = g23;
																v113 = *(int32_t *)*(int32_t *)(v78 - 0x7290);
																v104 = v113;
																if (v113 < (int32_t) * (char *)*(int32_t *)(v78 - 0x70cc)) {
																	// 0xb0528
																	v104 = function_afa48(g32, g35, g33, g36, 0, 0, 8);
																	// branch -> 0xb0548
																}
															}
															// 0xb0548
															v79 = g25;
															v87 = 0x1000000 * v79;
															if ((v87 || 0xffffff) >= 0x1ffffff) {
																// 0xb0550
																v88 = v87 / 0x1000000 - 1;
																g27 = v88;
																v108 = 368 * v88;
																v104 = v108;
																v93 = *(int32_t *)(g23 - 0x7690) + v108;
																g32 = v93;
																if (*(int32_t *)(v93 + 52) != 0) {
																	// 0xb0570
																	if (v79 <= 127) {
																		// 0xb0578
																		g34 = *(int32_t *)(v93 + 24);
																		v80 = function_c9948();
																		g28 = v80;
																		v81 = g32;
																		if (v80 == 0) {
																			// 0xb0588
																			v104 = function_c9acc(*(int32_t *)(v81 + 24));
																			// branch -> 0xb0634
																		} else {
																			// 0xb0594
																			v99 = *(int32_t *)(v81 + 32);
																			g11 = v99;
																			if (v99 >= 1) {
																				// 0xb05a0
																				if (function_4d794(v80) > 50) {
																					// 0xb05a0
																					v103 = g32;
																					// branch -> 0xb05c4
																				} else {
																					// 0xb05b0
																					v89 = function_4d794(g28);
																					v82 = g32;
																					v100 = *(int32_t *)(v82 + 32);
																					g40 = v100;
																					if (v100 <= v89) {
																						// 0xb05d0
																						v83 = g27;
																						v94 = g33 - *(int32_t *)(v82 + 40);
																						g27 = v94;
																						v85 = v94;
																						v86 = v82;
																						if (v83 == (int32_t) * (char *)*(int32_t *)(g23 - 0x7748)) {
																							// 0xb05ec
																							g37 = v94;
																							g41 = *(int32_t *)(v82 + 36);
																							v84 = g36;
																							g38 = v84;
																							g42 = 0;
																							g13 = 8;
																							CelDrawHdrClrHL(181, v94, v84, *(int32_t *)(v82 + 24), v100);
																							v85 = g27;
																							v86 = g32;
																							// branch -> 0xb060c
																						}
																						// 0xb060c
																						v101 = *(int32_t *)(v86 + 32);
																						v102 = *(int32_t *)(v86 + 36);
																						function_4e998(v85, g36, *(int32_t *)(v86 + 24), v101, v102, 0, 8);
																						v110 = function_c9acc(*(int32_t *)(g32 + 24));
																						// branch -> 0xb0634
																						// 0xb0634
																						if (v12 == 0) {
																							// 0xb0634
																							result = v110;
																							// branch -> 0xb067c
																						} else {
																							// 0xb0640
																							v105 = g23;
																							v117 = *(int32_t *)(v105 - 0x7268);
																							v118 = (int32_t) * (char *)(v117 + (int32_t)v15);
																							*(int32_t *)*(int32_t *)(v105 - 0x7294) = v118;
																							v114 = *(int32_t *)*(int32_t *)(v105 - 0x7574);
																							result = function_4ea70(g29, v114, (int32_t)v12, 64, 0, 8);
																							// branch -> 0xb067c
																						}
																						// 0xb067c
																						g10 = v1;
																						return result;
																					}
																					v103 = v82;
																				}
																				// 0xb05c4
																				v109 = function_c9acc(*(int32_t *)(v103 + 24));
																				// branch -> 0xb0634
																				// 0xb0634
																				if (v12 == 0) {
																					// 0xb0634
																					result = v109;
																					// branch -> 0xb067c
																				} else {
																					// 0xb0640
																					v105 = g23;
																					v117 = *(int32_t *)(v105 - 0x7268);
																					v118 = (int32_t) * (char *)(v117 + (int32_t)v15);
																					*(int32_t *)*(int32_t *)(v105 - 0x7294) = v118;
																					v114 = *(int32_t *)*(int32_t *)(v105 - 0x7574);
																					result = function_4ea70(g29, v114, (int32_t)v12, 64, 0, 8);
																					// branch -> 0xb067c
																				}
																				// 0xb067c
																				g10 = v1;
																				return result;
																			}
																			// 0xb05c4
																			v104 = function_c9acc(*(int32_t *)(v81 + 24));
																			// branch -> 0xb0634
																		}
																		// 0xb0634
																		if (v12 == 0) {
																			// 0xb0634
																			result = v104;
																			// branch -> 0xb067c
																		} else {
																			// 0xb0640
																			v105 = g23;
																			v117 = *(int32_t *)(v105 - 0x7268);
																			v118 = (int32_t) * (char *)(v117 + (int32_t)v15);
																			*(int32_t *)*(int32_t *)(v105 - 0x7294) = v118;
																			v114 = *(int32_t *)*(int32_t *)(v105 - 0x7574);
																			result = function_4ea70(g29, v114, (int32_t)v12, 64, 0, 8);
																			// branch -> 0xb067c
																		}
																		// 0xb067c
																		g10 = v1;
																		return result;
																	}
																}
															}
															// 0xb0634
															if (v12 == 0) {
																// 0xb0634
																result = v104;
																// branch -> 0xb067c
															} else {
																// 0xb0640
																v105 = g23;
																v117 = *(int32_t *)(v105 - 0x7268);
																v118 = (int32_t) * (char *)(v117 + (int32_t)v15);
																*(int32_t *)*(int32_t *)(v105 - 0x7294) = v118;
																v114 = *(int32_t *)*(int32_t *)(v105 - 0x7574);
																result = function_4ea70(g29, v114, (int32_t)v12, 64, 0, 8);
																// branch -> 0xb067c
															}
															// 0xb067c
															g10 = v1;
															return result;
														}
														// 0xb03d0
														if (__asm_rlwinm_(v50, 0, 25, 25) == 0) {
															// 0xb03d8
															v112 = g19 + 0x55ec * *(int32_t *)*(int32_t *)(g23 - 0x77ac);
															v104 = v112;
															if (*(int32_t *)(v112 + 460) != 0) {
																// 0xb03f4
																*(int32_t *)g28 = g17 - 1;
																v90 = *(int32_t *)g28;
																if (v90 <= 199) {
																	// 0xb0408
																	v107 = 232 * v90;
																	v104 = v107;
																	v91 = *(int32_t *)(g23 - 0x7754) + v107;
																	g31 = v91;
																	if (*(int32_t *)(v91 + 160) % 2 == 0) {
																		// 0xb0420
																		v95 = *(int32_t *)(v91 + 224);
																		if (v95 != 0) {
																			// 0xb042c
																			g34 = v91 + 84;
																			g27 = g36 + *(int32_t *)(v91 + 60);
																			g26 = g33 + *(int32_t *)(v91 + 56) - *(int32_t *)(v95 + 496);
																			function_c9b28();
																			if (*(int32_t *)g28 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
																				// 0xb0460
																				v77 = g31;
																				v96 = *(int32_t *)(*(int32_t *)(v77 + 224) + 492);
																				g13 = 8;
																				function_507f4(233, g26, g27, v77 + 84, *(int32_t *)(v77 + 104), v96, 0);
																				// branch -> 0xb0488
																			}
																			// 0xb0488
																			function_c9b70((int32_t *)(g31 + 84));
																			v104 = function_aefc4(g32, g35, g26, g27, *(int32_t *)g28, 0, 8);
																			if (g20 != 0) {
																				// 0xb04b8
																				if (*(int32_t *)(g31 + 108) != 0) {
																					// 0xb04c4
																					v104 = function_afc30(g29 - 64, g32 - 1, g35 + 1, g33 - 64, g36);
																					// branch -> 0xb04dc
																				}
																			}
																		}
																	}
																}
															}
														} else {
															// 0xb03f4
															*(int32_t *)g28 = g17 - 1;
															v90 = *(int32_t *)g28;
															if (v90 <= 199) {
																// 0xb0408
																v107 = 232 * v90;
																v104 = v107;
																v91 = *(int32_t *)(g23 - 0x7754) + v107;
																g31 = v91;
																if (*(int32_t *)(v91 + 160) % 2 == 0) {
																	// 0xb0420
																	v95 = *(int32_t *)(v91 + 224);
																	if (v95 != 0) {
																		// 0xb042c
																		g34 = v91 + 84;
																		g27 = g36 + *(int32_t *)(v91 + 60);
																		g26 = g33 + *(int32_t *)(v91 + 56) - *(int32_t *)(v95 + 496);
																		function_c9b28();
																		if (*(int32_t *)g28 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
																			// 0xb0460
																			v77 = g31;
																			v96 = *(int32_t *)(*(int32_t *)(v77 + 224) + 492);
																			g13 = 8;
																			function_507f4(233, g26, g27, v77 + 84, *(int32_t *)(v77 + 104), v96, 0);
																			// branch -> 0xb0488
																		}
																		// 0xb0488
																		function_c9b70((int32_t *)(g31 + 84));
																		v104 = function_aefc4(g32, g35, g26, g27, *(int32_t *)g28, 0, 8);
																		if (g20 != 0) {
																			// 0xb04b8
																			if (*(int32_t *)(g31 + 108) != 0) {
																				// 0xb04c4
																				v104 = function_afc30(g29 - 64, g32 - 1, g35 + 1, g33 - 64, g36);
																				// branch -> 0xb04dc
																			}
																		}
																	}
																}
															}
														}
														// 0xb04dc
														if (v50 % 2 != 0) {
															// 0xb04e4
															v104 = function_aeb58(g32, g35, g33, g36, 0, 8, 0);
															// branch -> 0xb0504
														}
														// 0xb0504
														if ((0x1000000 * g16 || 0xffffff) >= 0x1ffffff) {
															// 0xb050c
															v78 = g23;
															v113 = *(int32_t *)*(int32_t *)(v78 - 0x7290);
															v104 = v113;
															if (v113 < (int32_t) * (char *)*(int32_t *)(v78 - 0x70cc)) {
																// 0xb0528
																v104 = function_afa48(g32, g35, g33, g36, 0, 0, 8);
																// branch -> 0xb0548
															}
														}
														// 0xb0548
														v79 = g25;
														v87 = 0x1000000 * v79;
														if ((v87 || 0xffffff) >= 0x1ffffff) {
															// 0xb0550
															v88 = v87 / 0x1000000 - 1;
															g27 = v88;
															v108 = 368 * v88;
															v104 = v108;
															v93 = *(int32_t *)(g23 - 0x7690) + v108;
															g32 = v93;
															if (*(int32_t *)(v93 + 52) != 0) {
																// 0xb0570
																if (v79 <= 127) {
																	// 0xb0578
																	g34 = *(int32_t *)(v93 + 24);
																	v80 = function_c9948();
																	g28 = v80;
																	v81 = g32;
																	if (v80 == 0) {
																		// 0xb0588
																		v104 = function_c9acc(*(int32_t *)(v81 + 24));
																		// branch -> 0xb0634
																	} else {
																		// 0xb0594
																		v99 = *(int32_t *)(v81 + 32);
																		g11 = v99;
																		if (v99 >= 1) {
																			// 0xb05a0
																			if (function_4d794(v80) > 50) {
																				// 0xb05a0
																				v103 = g32;
																				// branch -> 0xb05c4
																			} else {
																				// 0xb05b0
																				v89 = function_4d794(g28);
																				v82 = g32;
																				v100 = *(int32_t *)(v82 + 32);
																				g40 = v100;
																				if (v100 <= v89) {
																					// 0xb05d0
																					v83 = g27;
																					v94 = g33 - *(int32_t *)(v82 + 40);
																					g27 = v94;
																					v85 = v94;
																					v86 = v82;
																					if (v83 == (int32_t) * (char *)*(int32_t *)(g23 - 0x7748)) {
																						// 0xb05ec
																						g37 = v94;
																						g41 = *(int32_t *)(v82 + 36);
																						v84 = g36;
																						g38 = v84;
																						g42 = 0;
																						g13 = 8;
																						CelDrawHdrClrHL(181, v94, v84, *(int32_t *)(v82 + 24), v100);
																						v85 = g27;
																						v86 = g32;
																						// branch -> 0xb060c
																					}
																					// 0xb060c
																					v101 = *(int32_t *)(v86 + 32);
																					v102 = *(int32_t *)(v86 + 36);
																					function_4e998(v85, g36, *(int32_t *)(v86 + 24), v101, v102, 0, 8);
																					v110 = function_c9acc(*(int32_t *)(g32 + 24));
																					// branch -> 0xb0634
																					// 0xb0634
																					if (v12 == 0) {
																						// 0xb0634
																						result = v110;
																						// branch -> 0xb067c
																					} else {
																						// 0xb0640
																						v105 = g23;
																						v117 = *(int32_t *)(v105 - 0x7268);
																						v118 = (int32_t) * (char *)(v117 + (int32_t)v15);
																						*(int32_t *)*(int32_t *)(v105 - 0x7294) = v118;
																						v114 = *(int32_t *)*(int32_t *)(v105 - 0x7574);
																						result = function_4ea70(g29, v114, (int32_t)v12, 64, 0, 8);
																						// branch -> 0xb067c
																					}
																					// 0xb067c
																					g10 = v1;
																					return result;
																				}
																				v103 = v82;
																			}
																			// 0xb05c4
																			v109 = function_c9acc(*(int32_t *)(v103 + 24));
																			// branch -> 0xb0634
																			// 0xb0634
																			if (v12 == 0) {
																				// 0xb0634
																				result = v109;
																				// branch -> 0xb067c
																			} else {
																				// 0xb0640
																				v105 = g23;
																				v117 = *(int32_t *)(v105 - 0x7268);
																				v118 = (int32_t) * (char *)(v117 + (int32_t)v15);
																				*(int32_t *)*(int32_t *)(v105 - 0x7294) = v118;
																				v114 = *(int32_t *)*(int32_t *)(v105 - 0x7574);
																				result = function_4ea70(g29, v114, (int32_t)v12, 64, 0, 8);
																				// branch -> 0xb067c
																			}
																			// 0xb067c
																			g10 = v1;
																			return result;
																		}
																		// 0xb05c4
																		v104 = function_c9acc(*(int32_t *)(v81 + 24));
																		// branch -> 0xb0634
																	}
																	// 0xb0634
																	if (v12 == 0) {
																		// 0xb0634
																		result = v104;
																		// branch -> 0xb067c
																	} else {
																		// 0xb0640
																		v105 = g23;
																		v117 = *(int32_t *)(v105 - 0x7268);
																		v118 = (int32_t) * (char *)(v117 + (int32_t)v15);
																		*(int32_t *)*(int32_t *)(v105 - 0x7294) = v118;
																		v114 = *(int32_t *)*(int32_t *)(v105 - 0x7574);
																		result = function_4ea70(g29, v114, (int32_t)v12, 64, 0, 8);
																		// branch -> 0xb067c
																	}
																	// 0xb067c
																	g10 = v1;
																	return result;
																}
															}
														}
														// 0xb0634
														if (v12 == 0) {
															// 0xb0634
															result = v104;
															// branch -> 0xb067c
														} else {
															// 0xb0640
															v105 = g23;
															v117 = *(int32_t *)(v105 - 0x7268);
															v118 = (int32_t) * (char *)(v117 + (int32_t)v15);
															*(int32_t *)*(int32_t *)(v105 - 0x7294) = v118;
															v114 = *(int32_t *)*(int32_t *)(v105 - 0x7574);
															result = function_4ea70(g29, v114, (int32_t)v12, 64, 0, 8);
															// branch -> 0xb067c
														}
														// 0xb067c
														g10 = v1;
														return result;
													}
													// 0xb02f4
													if (__asm_rlwinm_(v50, 0, 29, 29) != 0) {
														// 0xb02fc
														function_af6d0(g32, g35, g33, g36, 0, 8, 1);
														// branch -> 0xb031c
													}
													// 0xb031c
													v43 = 0x1000000 * g18;
													if (v43 >= 0 && (v43 || 0xffffff) >= 0x1ffffff) {
														// 0xb0324
														v44 = v43 / 0x1000000 - 1;
														if (v44 <= 3) {
															// 0xb0334
															v56 = g19 + 0x55ec * v44;
															v57 = g36 + *(int32_t *)(v56 + 100);
															v58 = g33 + *(int32_t *)(v56 + 96) - *(int32_t *)(v56 + 148);
															v74 = *(int32_t *)(v56 + 140);
															g13 = *(int32_t *)(v56 + 144);
															function_af440(v44, g32, g35, v58, v57, *(int32_t *)(v56 + 124), v74, 0, 8);
															if (g20 != 0) {
																// 0xb0384
																v75 = *(int32_t *)(g31 + 152);
																if (v75 != 0) {
																	// 0xb0390
																	if (v75 == 2) {
																		// 0xb0398
																		function_afc30(g29 - 0x3060, g32 - 2, g35 + 1, g33 - 96, g36 - 16);
																		// branch -> 0xb03b0
																	}
																	// 0xb03b0
																	function_afc30(g29 - 64, g32 - 1, g35 + 1, g33 - 64, g36);
																	// branch -> 0xb03c8
																}
															}
														}
													}
													// 0xb03c8
													if (g17 >= 1) {
														// 0xb03d0
														if (__asm_rlwinm_(v50, 0, 25, 25) == 0) {
															// 0xb03d8
															v76 = *(int32_t *)(g23 - 0x77ac);
															if (*(int32_t *)(g19 + 0x55ec * *(int32_t *)v76 + 460) != 0) {
																// 0xb03f4
																*(int32_t *)g28 = g17 - 1;
																v90 = *(int32_t *)g28;
																if (v90 <= 199) {
																	// 0xb0408
																	v91 = *(int32_t *)(g23 - 0x7754) + 232 * v90;
																	g31 = v91;
																	if (*(int32_t *)(v91 + 160) % 2 == 0) {
																		// 0xb0420
																		v95 = *(int32_t *)(v91 + 224);
																		if (v95 != 0) {
																			// 0xb042c
																			g34 = v91 + 84;
																			g27 = g36 + *(int32_t *)(v91 + 60);
																			g26 = g33 + *(int32_t *)(v91 + 56) - *(int32_t *)(v95 + 496);
																			function_c9b28();
																			if (*(int32_t *)g28 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
																				// 0xb0460
																				v77 = g31;
																				v96 = *(int32_t *)(*(int32_t *)(v77 + 224) + 492);
																				g13 = 8;
																				function_507f4(233, g26, g27, v77 + 84, *(int32_t *)(v77 + 104), v96, 0);
																				// branch -> 0xb0488
																			}
																			// 0xb0488
																			function_c9b70((int32_t *)(g31 + 84));
																			function_aefc4(g32, g35, g26, g27, *(int32_t *)g28, 0, 8);
																			if (g20 != 0) {
																				// 0xb04b8
																				if (*(int32_t *)(g31 + 108) != 0) {
																					// 0xb04c4
																					function_afc30(g29 - 64, g32 - 1, g35 + 1, g33 - 64, g36);
																					// branch -> 0xb04dc
																				}
																			}
																		}
																	}
																}
															}
														} else {
															// 0xb03f4
															*(int32_t *)g28 = g17 - 1;
															v90 = *(int32_t *)g28;
															if (v90 <= 199) {
																// 0xb0408
																v91 = *(int32_t *)(g23 - 0x7754) + 232 * v90;
																g31 = v91;
																if (*(int32_t *)(v91 + 160) % 2 == 0) {
																	// 0xb0420
																	v95 = *(int32_t *)(v91 + 224);
																	if (v95 != 0) {
																		// 0xb042c
																		g34 = v91 + 84;
																		g27 = g36 + *(int32_t *)(v91 + 60);
																		g26 = g33 + *(int32_t *)(v91 + 56) - *(int32_t *)(v95 + 496);
																		function_c9b28();
																		if (*(int32_t *)g28 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
																			// 0xb0460
																			v77 = g31;
																			v96 = *(int32_t *)(*(int32_t *)(v77 + 224) + 492);
																			g13 = 8;
																			function_507f4(233, g26, g27, v77 + 84, *(int32_t *)(v77 + 104), v96, 0);
																			// branch -> 0xb0488
																		}
																		// 0xb0488
																		function_c9b70((int32_t *)(g31 + 84));
																		function_aefc4(g32, g35, g26, g27, *(int32_t *)g28, 0, 8);
																		if (g20 != 0) {
																			// 0xb04b8
																			if (*(int32_t *)(g31 + 108) != 0) {
																				// 0xb04c4
																				function_afc30(g29 - 64, g32 - 1, g35 + 1, g33 - 64, g36);
																				// branch -> 0xb04dc
																			}
																		}
																	}
																}
															}
														}
														// 0xb04dc
														if (v50 % 2 != 0) {
															// 0xb04e4
															function_aeb58(g32, g35, g33, g36, 0, 8, 0);
															// branch -> 0xb0504
														}
														// 0xb0504
														if ((0x1000000 * g16 || 0xffffff) >= 0x1ffffff) {
															// 0xb050c
															v78 = g23;
															v97 = *(int32_t *)(v78 - 0x70cc);
															v98 = *(int32_t *)(v78 - 0x7290);
															if (*(int32_t *)v98 < (int32_t) * (char *)v97) {
																// 0xb0528
																function_afa48(g32, g35, g33, g36, 0, 0, 8);
																// branch -> 0xb0548
															}
														}
														// 0xb0548
														v79 = g25;
														v87 = 0x1000000 * v79;
														v92 = v87 / 0x1000000;
														if ((v87 || 0xffffff) >= 0x1ffffff) {
															// 0xb0550
															v88 = v92 - 1;
															g27 = v88;
															v93 = *(int32_t *)(g23 - 0x7690) + 368 * v88;
															g32 = v93;
															if (*(int32_t *)(v93 + 52) != 0) {
																// 0xb0570
																if (v79 <= 127) {
																	// 0xb0578
																	g34 = *(int32_t *)(v93 + 24);
																	v80 = function_c9948();
																	g28 = v80;
																	v81 = g32;
																	if (v80 == 0) {
																		// 0xb0588
																		function_c9acc(*(int32_t *)(v81 + 24));
																		// branch -> 0xb0634
																	} else {
																		// 0xb0594
																		v99 = *(int32_t *)(v81 + 32);
																		g11 = v99;
																		v103 = v81;
																		if (v99 >= 1) {
																			// 0xb05a0
																			if (function_4d794(v80) > 50) {
																				// 0xb05a0
																				v103 = g32;
																				// branch -> 0xb05c4
																			} else {
																				// 0xb05b0
																				v89 = function_4d794(g28);
																				v82 = g32;
																				v100 = *(int32_t *)(v82 + 32);
																				g40 = v100;
																				if (v100 <= v89) {
																					// 0xb05d0
																					v83 = g27;
																					v94 = g33 - *(int32_t *)(v82 + 40);
																					g27 = v94;
																					v85 = v94;
																					v86 = v82;
																					if (v83 == (int32_t) * (char *)*(int32_t *)(g23 - 0x7748)) {
																						// 0xb05ec
																						g37 = v94;
																						g41 = *(int32_t *)(v82 + 36);
																						v84 = g36;
																						g38 = v84;
																						g42 = 0;
																						g13 = 8;
																						CelDrawHdrClrHL(181, v94, v84, *(int32_t *)(v82 + 24), v100);
																						v85 = g27;
																						v86 = g32;
																						// branch -> 0xb060c
																					}
																					// 0xb060c
																					v101 = *(int32_t *)(v86 + 32);
																					v102 = *(int32_t *)(v86 + 36);
																					function_4e998(v85, g36, *(int32_t *)(v86 + 24), v101, v102, 0, 8);
																					v110 = function_c9acc(*(int32_t *)(g32 + 24));
																					// branch -> 0xb0634
																					// 0xb0634
																					if (v12 == 0) {
																						// 0xb0634
																						result = v110;
																						// branch -> 0xb067c
																					} else {
																						// 0xb0640
																						v105 = g23;
																						v117 = *(int32_t *)(v105 - 0x7268);
																						v118 = (int32_t) * (char *)(v117 + (int32_t)v15);
																						*(int32_t *)*(int32_t *)(v105 - 0x7294) = v118;
																						v114 = *(int32_t *)*(int32_t *)(v105 - 0x7574);
																						result = function_4ea70(g29, v114, (int32_t)v12, 64, 0, 8);
																						// branch -> 0xb067c
																					}
																					// 0xb067c
																					g10 = v1;
																					return result;
																				}
																				v103 = v82;
																			}
																			// 0xb05c4
																			function_c9acc(*(int32_t *)(v103 + 24));
																			// branch -> 0xb0634
																			// Detected a possible infinite recursion (goto support failed); quitting...
																		}
																		// 0xb05c4
																		function_c9acc(*(int32_t *)(v103 + 24));
																		// branch -> 0xb0634
																	}
																	// Detected a possible infinite recursion (goto support failed); quitting...
																}
															}
														}
														// Detected a possible infinite recursion (goto support failed); quitting...
													}
													// 0xb04dc
													if (v50 % 2 != 0) {
														// 0xb04e4
														function_aeb58(g32, g35, g33, g36, 0, 8, 0);
														// branch -> 0xb0504
													}
													// 0xb0504
													if ((0x1000000 * g16 || 0xffffff) >= 0x1ffffff) {
														// 0xb050c
														v78 = g23;
														v97 = *(int32_t *)(v78 - 0x70cc);
														v98 = *(int32_t *)(v78 - 0x7290);
														if (*(int32_t *)v98 < (int32_t) * (char *)v97) {
															// 0xb0528
															function_afa48(g32, g35, g33, g36, 0, 0, 8);
															// branch -> 0xb0548
														}
													}
													// 0xb0548
													v79 = g25;
													v87 = 0x1000000 * v79;
													v92 = v87 / 0x1000000;
													if ((v87 || 0xffffff) >= 0x1ffffff) {
														// 0xb0550
														v88 = v92 - 1;
														g27 = v88;
														v93 = *(int32_t *)(g23 - 0x7690) + 368 * v88;
														g32 = v93;
														if (*(int32_t *)(v93 + 52) != 0) {
															// 0xb0570
															if (v79 <= 127) {
																// 0xb0578
																g34 = *(int32_t *)(v93 + 24);
																v80 = function_c9948();
																g28 = v80;
																v81 = g32;
																if (v80 == 0) {
																	// 0xb0588
																	function_c9acc(*(int32_t *)(v81 + 24));
																	// branch -> 0xb0634
																} else {
																	// 0xb0594
																	v99 = *(int32_t *)(v81 + 32);
																	g11 = v99;
																	v103 = v81;
																	if (v99 >= 1) {
																		// 0xb05a0
																		if (function_4d794(v80) > 50) {
																			// 0xb05a0
																			v103 = g32;
																			// branch -> 0xb05c4
																		} else {
																			// 0xb05b0
																			v89 = function_4d794(g28);
																			v82 = g32;
																			v100 = *(int32_t *)(v82 + 32);
																			g40 = v100;
																			if (v100 <= v89) {
																				// 0xb05d0
																				v83 = g27;
																				v94 = g33 - *(int32_t *)(v82 + 40);
																				g27 = v94;
																				v85 = v94;
																				v86 = v82;
																				if (v83 == (int32_t) * (char *)*(int32_t *)(g23 - 0x7748)) {
																					// 0xb05ec
																					g37 = v94;
																					g41 = *(int32_t *)(v82 + 36);
																					v84 = g36;
																					g38 = v84;
																					g42 = 0;
																					g13 = 8;
																					CelDrawHdrClrHL(181, v94, v84, *(int32_t *)(v82 + 24), v100);
																					v85 = g27;
																					v86 = g32;
																					// branch -> 0xb060c
																				}
																				// 0xb060c
																				v101 = *(int32_t *)(v86 + 32);
																				v102 = *(int32_t *)(v86 + 36);
																				function_4e998(v85, g36, *(int32_t *)(v86 + 24), v101, v102, 0, 8);
																				function_c9acc(*(int32_t *)(g32 + 24));
																				// branch -> 0xb0634
																				// Detected a possible infinite recursion (goto support failed); quitting...
																			} else {
																				v103 = v82;
																			}
																		}
																		// 0xb05c4
																		function_c9acc(*(int32_t *)(v103 + 24));
																		// branch -> 0xb0634
																		// Detected a possible infinite recursion (goto support failed); quitting...
																	}
																	// 0xb05c4
																	function_c9acc(*(int32_t *)(v103 + 24));
																	// branch -> 0xb0634
																}
																// Detected a possible infinite recursion (goto support failed); quitting...
															}
														}
													}
													// Detected a possible infinite recursion (goto support failed); quitting...
												}
												// 0xb00ac
												function_c9acc(*(int32_t *)(v30 + 24));
												// branch -> 0xb011c
											}
											// 0xb011c
											v50 = v13;
											g30 = v50;
											if (__asm_rlwinm_(v50, 0, 26, 26) != 0) {
												// 0xb0128
												v42 = -1 - (int32_t)v16;
												if (v42 <= 3) {
													// 0xb0140
													v51 = g19 + 0x55ec * v42;
													v52 = g36 + *(int32_t *)(v51 + 100);
													v53 = g33 + *(int32_t *)(v51 + 96) - *(int32_t *)(v51 + 148);
													v69 = *(int32_t *)(v51 + 140);
													g13 = *(int32_t *)(v51 + 144);
													function_af440(v42, g32, g35 - 1, v53, v52, *(int32_t *)(v51 + 124), v69, 0, 8);
													if (g20 != 0) {
														// 0xb0190
														v70 = *(int32_t *)(g31 + 152);
														if (v70 != 0) {
															// 0xb019c
															if (v70 == 2) {
																// 0xb01a4
																function_afc30(g29 - 0x3060, g32 - 2, g35 + 1, g33 - 96, g36 - 16);
																// branch -> 0xb01bc
															}
															// 0xb01bc
															function_afc30(g29 - 64, g32 - 1, g35 + 1, g33 - 64, g36);
															// branch -> 0xb01d4
														}
													}
												}
											}
											// 0xb01d4
											if (__asm_rlwinm_(v50, 0, 27, 27) != 0) {
												// 0xb01dc
												if (__asm_rlwinm_(v50, 0, 25, 25) == 0) {
													// 0xb01e4
													v71 = *(int32_t *)(g23 - 0x77ac);
													if (*(int32_t *)(g19 + 0x55ec * *(int32_t *)v71 + 460) != 0) {
														// 0xb0200
														v34 = g21;
														if (v34 <= 0xffffffff) {
															// 0xb0208
															*(int32_t *)g28 = -1 - v34;
															v54 = *(int32_t *)g28;
															if (v54 <= 199) {
																// 0xb0220
																v55 = *(int32_t *)(g23 - 0x7754) + 232 * v54;
																g31 = v55;
																if (*(int32_t *)(v55 + 160) % 2 == 0) {
																	// 0xb0238
																	v72 = *(int32_t *)(v55 + 224);
																	if (v72 != 0) {
																		// 0xb0244
																		g34 = v55 + 84;
																		g27 = g36 + *(int32_t *)(v55 + 60);
																		g26 = g33 + *(int32_t *)(v55 + 56) - *(int32_t *)(v72 + 496);
																		function_c9b28();
																		if (*(int32_t *)g28 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
																			// 0xb0278
																			v35 = g31;
																			v73 = *(int32_t *)(*(int32_t *)(v35 + 224) + 492);
																			g13 = 8;
																			function_507f4(233, g26, g27, v35 + 84, *(int32_t *)(v35 + 104), v73, 0);
																			// branch -> 0xb02a0
																		}
																		// 0xb02a0
																		function_c9b70((int32_t *)(g31 + 84));
																		function_aefc4(g32, g35, g26, g27, *(int32_t *)g28, 0, 8);
																		if (g20 != 0) {
																			// 0xb02d0
																			if (*(int32_t *)(g31 + 108) != 0) {
																				// 0xb02dc
																				function_afc30(g29 - 64, g32 - 1, g35 + 1, g33 - 64, g36);
																				// branch -> 0xb02f4
																			}
																		}
																	}
																}
															}
														}
													}
												} else {
													// 0xb0200
													v34 = g21;
													if (v34 <= 0xffffffff) {
														// 0xb0208
														*(int32_t *)g28 = -1 - v34;
														v54 = *(int32_t *)g28;
														if (v54 <= 199) {
															// 0xb0220
															v55 = *(int32_t *)(g23 - 0x7754) + 232 * v54;
															g31 = v55;
															if (*(int32_t *)(v55 + 160) % 2 == 0) {
																// 0xb0238
																v72 = *(int32_t *)(v55 + 224);
																if (v72 != 0) {
																	// 0xb0244
																	g34 = v55 + 84;
																	g27 = g36 + *(int32_t *)(v55 + 60);
																	g26 = g33 + *(int32_t *)(v55 + 56) - *(int32_t *)(v72 + 496);
																	function_c9b28();
																	if (*(int32_t *)g28 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
																		// 0xb0278
																		v35 = g31;
																		v73 = *(int32_t *)(*(int32_t *)(v35 + 224) + 492);
																		g13 = 8;
																		function_507f4(233, g26, g27, v35 + 84, *(int32_t *)(v35 + 104), v73, 0);
																		// branch -> 0xb02a0
																	}
																	// 0xb02a0
																	function_c9b70((int32_t *)(g31 + 84));
																	function_aefc4(g32, g35, g26, g27, *(int32_t *)g28, 0, 8);
																	if (g20 != 0) {
																		// 0xb02d0
																		if (*(int32_t *)(g31 + 108) != 0) {
																			// 0xb02dc
																			function_afc30(g29 - 64, g32 - 1, g35 + 1, g33 - 64, g36);
																			// branch -> 0xb02f4
																		}
																	}
																}
															}
														}
													}
												}
												// 0xb02f4
												if (__asm_rlwinm_(v50, 0, 29, 29) != 0) {
													// 0xb02fc
													function_af6d0(g32, g35, g33, g36, 0, 8, 1);
													// branch -> 0xb031c
												}
												// 0xb031c
												v43 = 0x1000000 * g18;
												if (v43 >= 0 && (v43 || 0xffffff) >= 0x1ffffff) {
													// 0xb0324
													v44 = v43 / 0x1000000 - 1;
													if (v44 <= 3) {
														// 0xb0334
														v56 = g19 + 0x55ec * v44;
														v57 = g36 + *(int32_t *)(v56 + 100);
														v58 = g33 + *(int32_t *)(v56 + 96) - *(int32_t *)(v56 + 148);
														v74 = *(int32_t *)(v56 + 140);
														g13 = *(int32_t *)(v56 + 144);
														function_af440(v44, g32, g35, v58, v57, *(int32_t *)(v56 + 124), v74, 0, 8);
														if (g20 != 0) {
															// 0xb0384
															v75 = *(int32_t *)(g31 + 152);
															if (v75 != 0) {
																// 0xb0390
																if (v75 == 2) {
																	// 0xb0398
																	function_afc30(g29 - 0x3060, g32 - 2, g35 + 1, g33 - 96, g36 - 16);
																	// branch -> 0xb03b0
																}
																// 0xb03b0
																function_afc30(g29 - 64, g32 - 1, g35 + 1, g33 - 64, g36);
																// branch -> 0xb03c8
															}
														}
													}
												}
												// 0xb03c8
												if (g17 >= 1) {
													// 0xb03d0
													if (__asm_rlwinm_(v50, 0, 25, 25) == 0) {
														// 0xb03d8
														v76 = *(int32_t *)(g23 - 0x77ac);
														if (*(int32_t *)(g19 + 0x55ec * *(int32_t *)v76 + 460) != 0) {
															// 0xb03f4
															*(int32_t *)g28 = g17 - 1;
															v90 = *(int32_t *)g28;
															if (v90 <= 199) {
																// 0xb0408
																v91 = *(int32_t *)(g23 - 0x7754) + 232 * v90;
																g31 = v91;
																if (*(int32_t *)(v91 + 160) % 2 == 0) {
																	// 0xb0420
																	v95 = *(int32_t *)(v91 + 224);
																	if (v95 != 0) {
																		// 0xb042c
																		g34 = v91 + 84;
																		g27 = g36 + *(int32_t *)(v91 + 60);
																		g26 = g33 + *(int32_t *)(v91 + 56) - *(int32_t *)(v95 + 496);
																		function_c9b28();
																		if (*(int32_t *)g28 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
																			// 0xb0460
																			v77 = g31;
																			v96 = *(int32_t *)(*(int32_t *)(v77 + 224) + 492);
																			g13 = 8;
																			function_507f4(233, g26, g27, v77 + 84, *(int32_t *)(v77 + 104), v96, 0);
																			// branch -> 0xb0488
																		}
																		// 0xb0488
																		function_c9b70((int32_t *)(g31 + 84));
																		function_aefc4(g32, g35, g26, g27, *(int32_t *)g28, 0, 8);
																		if (g20 != 0) {
																			// 0xb04b8
																			if (*(int32_t *)(g31 + 108) != 0) {
																				// 0xb04c4
																				function_afc30(g29 - 64, g32 - 1, g35 + 1, g33 - 64, g36);
																				// branch -> 0xb04dc
																			}
																		}
																	}
																}
															}
														}
													} else {
														// 0xb03f4
														*(int32_t *)g28 = g17 - 1;
														v90 = *(int32_t *)g28;
														if (v90 <= 199) {
															// 0xb0408
															v91 = *(int32_t *)(g23 - 0x7754) + 232 * v90;
															g31 = v91;
															if (*(int32_t *)(v91 + 160) % 2 == 0) {
																// 0xb0420
																v95 = *(int32_t *)(v91 + 224);
																if (v95 != 0) {
																	// 0xb042c
																	g34 = v91 + 84;
																	g27 = g36 + *(int32_t *)(v91 + 60);
																	g26 = g33 + *(int32_t *)(v91 + 56) - *(int32_t *)(v95 + 496);
																	function_c9b28();
																	if (*(int32_t *)g28 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
																		// 0xb0460
																		v77 = g31;
																		v96 = *(int32_t *)(*(int32_t *)(v77 + 224) + 492);
																		g13 = 8;
																		function_507f4(233, g26, g27, v77 + 84, *(int32_t *)(v77 + 104), v96, 0);
																		// branch -> 0xb0488
																	}
																	// 0xb0488
																	function_c9b70((int32_t *)(g31 + 84));
																	function_aefc4(g32, g35, g26, g27, *(int32_t *)g28, 0, 8);
																	if (g20 != 0) {
																		// 0xb04b8
																		if (*(int32_t *)(g31 + 108) != 0) {
																			// 0xb04c4
																			function_afc30(g29 - 64, g32 - 1, g35 + 1, g33 - 64, g36);
																			// branch -> 0xb04dc
																		}
																	}
																}
															}
														}
													}
													// 0xb04dc
													if (v50 % 2 != 0) {
														// 0xb04e4
														function_aeb58(g32, g35, g33, g36, 0, 8, 0);
														// branch -> 0xb0504
													}
													// 0xb0504
													if ((0x1000000 * g16 || 0xffffff) >= 0x1ffffff) {
														// 0xb050c
														v78 = g23;
														v97 = *(int32_t *)(v78 - 0x70cc);
														v98 = *(int32_t *)(v78 - 0x7290);
														if (*(int32_t *)v98 < (int32_t) * (char *)v97) {
															// 0xb0528
															function_afa48(g32, g35, g33, g36, 0, 0, 8);
															// branch -> 0xb0548
														}
													}
													// 0xb0548
													v79 = g25;
													v87 = 0x1000000 * v79;
													v92 = v87 / 0x1000000;
													if ((v87 || 0xffffff) >= 0x1ffffff) {
														// 0xb0550
														v88 = v92 - 1;
														g27 = v88;
														v93 = *(int32_t *)(g23 - 0x7690) + 368 * v88;
														g32 = v93;
														if (*(int32_t *)(v93 + 52) != 0) {
															// 0xb0570
															if (v79 <= 127) {
																// 0xb0578
																g34 = *(int32_t *)(v93 + 24);
																v80 = function_c9948();
																g28 = v80;
																v81 = g32;
																if (v80 == 0) {
																	// 0xb0588
																	function_c9acc(*(int32_t *)(v81 + 24));
																	// branch -> 0xb0634
																} else {
																	// 0xb0594
																	v99 = *(int32_t *)(v81 + 32);
																	g11 = v99;
																	v103 = v81;
																	if (v99 >= 1) {
																		// 0xb05a0
																		if (function_4d794(v80) > 50) {
																			// 0xb05a0
																			v103 = g32;
																			// branch -> 0xb05c4
																		} else {
																			// 0xb05b0
																			v89 = function_4d794(g28);
																			v82 = g32;
																			v100 = *(int32_t *)(v82 + 32);
																			g40 = v100;
																			if (v100 <= v89) {
																				// 0xb05d0
																				v83 = g27;
																				v94 = g33 - *(int32_t *)(v82 + 40);
																				g27 = v94;
																				v85 = v94;
																				v86 = v82;
																				if (v83 == (int32_t) * (char *)*(int32_t *)(g23 - 0x7748)) {
																					// 0xb05ec
																					g37 = v94;
																					g41 = *(int32_t *)(v82 + 36);
																					v84 = g36;
																					g38 = v84;
																					g42 = 0;
																					g13 = 8;
																					CelDrawHdrClrHL(181, v94, v84, *(int32_t *)(v82 + 24), v100);
																					v85 = g27;
																					v86 = g32;
																					// branch -> 0xb060c
																				}
																				// 0xb060c
																				v101 = *(int32_t *)(v86 + 32);
																				v102 = *(int32_t *)(v86 + 36);
																				function_4e998(v85, g36, *(int32_t *)(v86 + 24), v101, v102, 0, 8);
																				function_c9acc(*(int32_t *)(g32 + 24));
																				// branch -> 0xb0634
																				// Detected a possible infinite recursion (goto support failed); quitting...
																			} else {
																				v103 = v82;
																			}
																		}
																		// 0xb05c4
																		function_c9acc(*(int32_t *)(v103 + 24));
																		// branch -> 0xb0634
																		// Detected a possible infinite recursion (goto support failed); quitting...
																	}
																	// 0xb05c4
																	function_c9acc(*(int32_t *)(v103 + 24));
																	// branch -> 0xb0634
																}
																// Detected a possible infinite recursion (goto support failed); quitting...
															}
														}
													}
													// Detected a possible infinite recursion (goto support failed); quitting...
												}
												// 0xb04dc
												if (v50 % 2 != 0) {
													// 0xb04e4
													function_aeb58(g32, g35, g33, g36, 0, 8, 0);
													// branch -> 0xb0504
												}
												// 0xb0504
												if ((0x1000000 * g16 || 0xffffff) >= 0x1ffffff) {
													// 0xb050c
													v78 = g23;
													v97 = *(int32_t *)(v78 - 0x70cc);
													v98 = *(int32_t *)(v78 - 0x7290);
													if (*(int32_t *)v98 < (int32_t) * (char *)v97) {
														// 0xb0528
														function_afa48(g32, g35, g33, g36, 0, 0, 8);
														// branch -> 0xb0548
													}
												}
												// 0xb0548
												v79 = g25;
												v87 = 0x1000000 * v79;
												v92 = v87 / 0x1000000;
												if ((v87 || 0xffffff) >= 0x1ffffff) {
													// 0xb0550
													v88 = v92 - 1;
													g27 = v88;
													v93 = *(int32_t *)(g23 - 0x7690) + 368 * v88;
													g32 = v93;
													if (*(int32_t *)(v93 + 52) != 0) {
														// 0xb0570
														if (v79 <= 127) {
															// 0xb0578
															g34 = *(int32_t *)(v93 + 24);
															v80 = function_c9948();
															g28 = v80;
															v81 = g32;
															if (v80 == 0) {
																// 0xb0588
																function_c9acc(*(int32_t *)(v81 + 24));
																// branch -> 0xb0634
															} else {
																// 0xb0594
																v99 = *(int32_t *)(v81 + 32);
																g11 = v99;
																v103 = v81;
																if (v99 >= 1) {
																	// 0xb05a0
																	if (function_4d794(v80) > 50) {
																		// 0xb05a0
																		v103 = g32;
																		// branch -> 0xb05c4
																	} else {
																		// 0xb05b0
																		v89 = function_4d794(g28);
																		v82 = g32;
																		v100 = *(int32_t *)(v82 + 32);
																		g40 = v100;
																		if (v100 <= v89) {
																			// 0xb05d0
																			v83 = g27;
																			v94 = g33 - *(int32_t *)(v82 + 40);
																			g27 = v94;
																			v85 = v94;
																			v86 = v82;
																			if (v83 == (int32_t) * (char *)*(int32_t *)(g23 - 0x7748)) {
																				// 0xb05ec
																				g37 = v94;
																				g41 = *(int32_t *)(v82 + 36);
																				v84 = g36;
																				g38 = v84;
																				g42 = 0;
																				g13 = 8;
																				CelDrawHdrClrHL(181, v94, v84, *(int32_t *)(v82 + 24), v100);
																				v85 = g27;
																				v86 = g32;
																				// branch -> 0xb060c
																			}
																			// 0xb060c
																			v101 = *(int32_t *)(v86 + 32);
																			v102 = *(int32_t *)(v86 + 36);
																			function_4e998(v85, g36, *(int32_t *)(v86 + 24), v101, v102, 0, 8);
																			function_c9acc(*(int32_t *)(g32 + 24));
																			// branch -> 0xb0634
																			// Detected a possible infinite recursion (goto support failed); quitting...
																		} else {
																			v103 = v82;
																		}
																	}
																	// 0xb05c4
																	function_c9acc(*(int32_t *)(v103 + 24));
																	// branch -> 0xb0634
																	// Detected a possible infinite recursion (goto support failed); quitting...
																}
																// 0xb05c4
																function_c9acc(*(int32_t *)(v103 + 24));
																// branch -> 0xb0634
															}
															// Detected a possible infinite recursion (goto support failed); quitting...
														}
													}
												}
												// Detected a possible infinite recursion (goto support failed); quitting...
											}
											// 0xb02f4
											if (__asm_rlwinm_(v50, 0, 29, 29) != 0) {
												// 0xb02fc
												function_af6d0(g32, g35, g33, g36, 0, 8, 1);
												// branch -> 0xb031c
											}
											// 0xb031c
											v43 = 0x1000000 * g18;
											if (v43 >= 0 && (v43 || 0xffffff) >= 0x1ffffff) {
												// 0xb0324
												v44 = v43 / 0x1000000 - 1;
												if (v44 <= 3) {
													// 0xb0334
													v56 = g19 + 0x55ec * v44;
													v57 = g36 + *(int32_t *)(v56 + 100);
													v58 = g33 + *(int32_t *)(v56 + 96) - *(int32_t *)(v56 + 148);
													v74 = *(int32_t *)(v56 + 140);
													g13 = *(int32_t *)(v56 + 144);
													function_af440(v44, g32, g35, v58, v57, *(int32_t *)(v56 + 124), v74, 0, 8);
													if (g20 != 0) {
														// 0xb0384
														v75 = *(int32_t *)(g31 + 152);
														if (v75 != 0) {
															// 0xb0390
															if (v75 == 2) {
																// 0xb0398
																function_afc30(g29 - 0x3060, g32 - 2, g35 + 1, g33 - 96, g36 - 16);
																// branch -> 0xb03b0
															}
															// 0xb03b0
															function_afc30(g29 - 64, g32 - 1, g35 + 1, g33 - 64, g36);
															// branch -> 0xb03c8
														}
													}
												}
											}
											// 0xb03c8
											if (g17 >= 1) {
												// 0xb03d0
												if (__asm_rlwinm_(v50, 0, 25, 25) == 0) {
													// 0xb03d8
													v76 = *(int32_t *)(g23 - 0x77ac);
													if (*(int32_t *)(g19 + 0x55ec * *(int32_t *)v76 + 460) != 0) {
														// 0xb03f4
														*(int32_t *)g28 = g17 - 1;
														v90 = *(int32_t *)g28;
														if (v90 <= 199) {
															// 0xb0408
															v91 = *(int32_t *)(g23 - 0x7754) + 232 * v90;
															g31 = v91;
															if (*(int32_t *)(v91 + 160) % 2 == 0) {
																// 0xb0420
																v95 = *(int32_t *)(v91 + 224);
																if (v95 != 0) {
																	// 0xb042c
																	g34 = v91 + 84;
																	g27 = g36 + *(int32_t *)(v91 + 60);
																	g26 = g33 + *(int32_t *)(v91 + 56) - *(int32_t *)(v95 + 496);
																	function_c9b28();
																	if (*(int32_t *)g28 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
																		// 0xb0460
																		v77 = g31;
																		v96 = *(int32_t *)(*(int32_t *)(v77 + 224) + 492);
																		g13 = 8;
																		function_507f4(233, g26, g27, v77 + 84, *(int32_t *)(v77 + 104), v96, 0);
																		// branch -> 0xb0488
																	}
																	// 0xb0488
																	function_c9b70((int32_t *)(g31 + 84));
																	function_aefc4(g32, g35, g26, g27, *(int32_t *)g28, 0, 8);
																	if (g20 != 0) {
																		// 0xb04b8
																		if (*(int32_t *)(g31 + 108) != 0) {
																			// 0xb04c4
																			function_afc30(g29 - 64, g32 - 1, g35 + 1, g33 - 64, g36);
																			// branch -> 0xb04dc
																		}
																	}
																}
															}
														}
													}
												} else {
													// 0xb03f4
													*(int32_t *)g28 = g17 - 1;
													v90 = *(int32_t *)g28;
													if (v90 <= 199) {
														// 0xb0408
														v91 = *(int32_t *)(g23 - 0x7754) + 232 * v90;
														g31 = v91;
														if (*(int32_t *)(v91 + 160) % 2 == 0) {
															// 0xb0420
															v95 = *(int32_t *)(v91 + 224);
															if (v95 != 0) {
																// 0xb042c
																g34 = v91 + 84;
																g27 = g36 + *(int32_t *)(v91 + 60);
																g26 = g33 + *(int32_t *)(v91 + 56) - *(int32_t *)(v95 + 496);
																function_c9b28();
																if (*(int32_t *)g28 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
																	// 0xb0460
																	v77 = g31;
																	v96 = *(int32_t *)(*(int32_t *)(v77 + 224) + 492);
																	g13 = 8;
																	function_507f4(233, g26, g27, v77 + 84, *(int32_t *)(v77 + 104), v96, 0);
																	// branch -> 0xb0488
																}
																// 0xb0488
																function_c9b70((int32_t *)(g31 + 84));
																function_aefc4(g32, g35, g26, g27, *(int32_t *)g28, 0, 8);
																if (g20 != 0) {
																	// 0xb04b8
																	if (*(int32_t *)(g31 + 108) != 0) {
																		// 0xb04c4
																		function_afc30(g29 - 64, g32 - 1, g35 + 1, g33 - 64, g36);
																		// branch -> 0xb04dc
																	}
																}
															}
														}
													}
												}
												// 0xb04dc
												if (v50 % 2 != 0) {
													// 0xb04e4
													function_aeb58(g32, g35, g33, g36, 0, 8, 0);
													// branch -> 0xb0504
												}
												// 0xb0504
												if ((0x1000000 * g16 || 0xffffff) >= 0x1ffffff) {
													// 0xb050c
													v78 = g23;
													v97 = *(int32_t *)(v78 - 0x70cc);
													v98 = *(int32_t *)(v78 - 0x7290);
													if (*(int32_t *)v98 < (int32_t) * (char *)v97) {
														// 0xb0528
														function_afa48(g32, g35, g33, g36, 0, 0, 8);
														// branch -> 0xb0548
													}
												}
												// 0xb0548
												v79 = g25;
												v87 = 0x1000000 * v79;
												v92 = v87 / 0x1000000;
												if ((v87 || 0xffffff) >= 0x1ffffff) {
													// 0xb0550
													v88 = v92 - 1;
													g27 = v88;
													v93 = *(int32_t *)(g23 - 0x7690) + 368 * v88;
													g32 = v93;
													if (*(int32_t *)(v93 + 52) != 0) {
														// 0xb0570
														if (v79 <= 127) {
															// 0xb0578
															g34 = *(int32_t *)(v93 + 24);
															v80 = function_c9948();
															g28 = v80;
															v81 = g32;
															if (v80 == 0) {
																// 0xb0588
																function_c9acc(*(int32_t *)(v81 + 24));
																// branch -> 0xb0634
															} else {
																// 0xb0594
																v99 = *(int32_t *)(v81 + 32);
																g11 = v99;
																v103 = v81;
																if (v99 >= 1) {
																	// 0xb05a0
																	if (function_4d794(v80) > 50) {
																		// 0xb05a0
																		v103 = g32;
																		// branch -> 0xb05c4
																	} else {
																		// 0xb05b0
																		v89 = function_4d794(g28);
																		v82 = g32;
																		v100 = *(int32_t *)(v82 + 32);
																		g40 = v100;
																		if (v100 <= v89) {
																			// 0xb05d0
																			v83 = g27;
																			v94 = g33 - *(int32_t *)(v82 + 40);
																			g27 = v94;
																			v85 = v94;
																			v86 = v82;
																			if (v83 == (int32_t) * (char *)*(int32_t *)(g23 - 0x7748)) {
																				// 0xb05ec
																				g37 = v94;
																				g41 = *(int32_t *)(v82 + 36);
																				v84 = g36;
																				g38 = v84;
																				g42 = 0;
																				g13 = 8;
																				CelDrawHdrClrHL(181, v94, v84, *(int32_t *)(v82 + 24), v100);
																				v85 = g27;
																				v86 = g32;
																				// branch -> 0xb060c
																			}
																			// 0xb060c
																			v101 = *(int32_t *)(v86 + 32);
																			v102 = *(int32_t *)(v86 + 36);
																			function_4e998(v85, g36, *(int32_t *)(v86 + 24), v101, v102, 0, 8);
																			function_c9acc(*(int32_t *)(g32 + 24));
																			// branch -> 0xb0634
																			// Detected a possible infinite recursion (goto support failed); quitting...
																		} else {
																			v103 = v82;
																		}
																	}
																	// 0xb05c4
																	function_c9acc(*(int32_t *)(v103 + 24));
																	// branch -> 0xb0634
																	// Detected a possible infinite recursion (goto support failed); quitting...
																}
																// 0xb05c4
																function_c9acc(*(int32_t *)(v103 + 24));
																// branch -> 0xb0634
															}
															// Detected a possible infinite recursion (goto support failed); quitting...
														}
													}
												}
												// Detected a possible infinite recursion (goto support failed); quitting...
											}
											// 0xb04dc
											if (v50 % 2 != 0) {
												// 0xb04e4
												function_aeb58(g32, g35, g33, g36, 0, 8, 0);
												// branch -> 0xb0504
											}
											// 0xb0504
											if ((0x1000000 * g16 || 0xffffff) >= 0x1ffffff) {
												// 0xb050c
												v78 = g23;
												v97 = *(int32_t *)(v78 - 0x70cc);
												v98 = *(int32_t *)(v78 - 0x7290);
												if (*(int32_t *)v98 < (int32_t) * (char *)v97) {
													// 0xb0528
													function_afa48(g32, g35, g33, g36, 0, 0, 8);
													// branch -> 0xb0548
												}
											}
											// 0xb0548
											v79 = g25;
											v87 = 0x1000000 * v79;
											v92 = v87 / 0x1000000;
											if ((v87 || 0xffffff) >= 0x1ffffff) {
												// 0xb0550
												v88 = v92 - 1;
												g27 = v88;
												v93 = *(int32_t *)(g23 - 0x7690) + 368 * v88;
												g32 = v93;
												if (*(int32_t *)(v93 + 52) != 0) {
													// 0xb0570
													if (v79 <= 127) {
														// 0xb0578
														g34 = *(int32_t *)(v93 + 24);
														v80 = function_c9948();
														g28 = v80;
														v81 = g32;
														if (v80 == 0) {
															// 0xb0588
															function_c9acc(*(int32_t *)(v81 + 24));
															// branch -> 0xb0634
														} else {
															// 0xb0594
															v99 = *(int32_t *)(v81 + 32);
															g11 = v99;
															v103 = v81;
															if (v99 >= 1) {
																// 0xb05a0
																if (function_4d794(v80) > 50) {
																	// 0xb05a0
																	v103 = g32;
																	// branch -> 0xb05c4
																} else {
																	// 0xb05b0
																	v89 = function_4d794(g28);
																	v82 = g32;
																	v100 = *(int32_t *)(v82 + 32);
																	g40 = v100;
																	if (v100 <= v89) {
																		// 0xb05d0
																		v83 = g27;
																		v94 = g33 - *(int32_t *)(v82 + 40);
																		g27 = v94;
																		v85 = v94;
																		v86 = v82;
																		if (v83 == (int32_t) * (char *)*(int32_t *)(g23 - 0x7748)) {
																			// 0xb05ec
																			g37 = v94;
																			g41 = *(int32_t *)(v82 + 36);
																			v84 = g36;
																			g38 = v84;
																			g42 = 0;
																			g13 = 8;
																			CelDrawHdrClrHL(181, v94, v84, *(int32_t *)(v82 + 24), v100);
																			v85 = g27;
																			v86 = g32;
																			// branch -> 0xb060c
																		}
																		// 0xb060c
																		v101 = *(int32_t *)(v86 + 32);
																		v102 = *(int32_t *)(v86 + 36);
																		function_4e998(v85, g36, *(int32_t *)(v86 + 24), v101, v102, 0, 8);
																		function_c9acc(*(int32_t *)(g32 + 24));
																		// branch -> 0xb0634
																		// Detected a possible infinite recursion (goto support failed); quitting...
																	} else {
																		v103 = v82;
																	}
																}
																// 0xb05c4
																function_c9acc(*(int32_t *)(v103 + 24));
																// branch -> 0xb0634
																// Detected a possible infinite recursion (goto support failed); quitting...
															}
															// 0xb05c4
															function_c9acc(*(int32_t *)(v103 + 24));
															// branch -> 0xb0634
														}
														// Detected a possible infinite recursion (goto support failed); quitting...
													}
												}
											}
											// Detected a possible infinite recursion (goto support failed); quitting...
										}
									}
								}
								// 0xb011c
								v50 = v13;
								g30 = v50;
								if (__asm_rlwinm_(v50, 0, 26, 26) != 0) {
									// 0xb0128
									v42 = -1 - (int32_t)v16;
									if (v42 <= 3) {
										// 0xb0140
										v51 = g19 + 0x55ec * v42;
										v52 = g36 + *(int32_t *)(v51 + 100);
										v53 = g33 + *(int32_t *)(v51 + 96) - *(int32_t *)(v51 + 148);
										v69 = *(int32_t *)(v51 + 140);
										g13 = *(int32_t *)(v51 + 144);
										function_af440(v42, g32, g35 - 1, v53, v52, *(int32_t *)(v51 + 124), v69, 0, 8);
										if (g20 != 0) {
											// 0xb0190
											v70 = *(int32_t *)(g31 + 152);
											if (v70 != 0) {
												// 0xb019c
												if (v70 == 2) {
													// 0xb01a4
													function_afc30(g29 - 0x3060, g32 - 2, g35 + 1, g33 - 96, g36 - 16);
													// branch -> 0xb01bc
												}
												// 0xb01bc
												function_afc30(g29 - 64, g32 - 1, g35 + 1, g33 - 64, g36);
												// branch -> 0xb01d4
											}
										}
									}
								}
								// 0xb01d4
								if (__asm_rlwinm_(v50, 0, 27, 27) != 0) {
									// 0xb01dc
									if (__asm_rlwinm_(v50, 0, 25, 25) == 0) {
										// 0xb01e4
										v71 = *(int32_t *)(g23 - 0x77ac);
										if (*(int32_t *)(g19 + 0x55ec * *(int32_t *)v71 + 460) != 0) {
											// 0xb0200
											v34 = g21;
											if (v34 <= 0xffffffff) {
												// 0xb0208
												*(int32_t *)g28 = -1 - v34;
												v54 = *(int32_t *)g28;
												if (v54 <= 199) {
													// 0xb0220
													v55 = *(int32_t *)(g23 - 0x7754) + 232 * v54;
													g31 = v55;
													if (*(int32_t *)(v55 + 160) % 2 == 0) {
														// 0xb0238
														v72 = *(int32_t *)(v55 + 224);
														if (v72 != 0) {
															// 0xb0244
															g34 = v55 + 84;
															g27 = g36 + *(int32_t *)(v55 + 60);
															g26 = g33 + *(int32_t *)(v55 + 56) - *(int32_t *)(v72 + 496);
															function_c9b28();
															if (*(int32_t *)g28 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
																// 0xb0278
																v35 = g31;
																v73 = *(int32_t *)(*(int32_t *)(v35 + 224) + 492);
																g13 = 8;
																function_507f4(233, g26, g27, v35 + 84, *(int32_t *)(v35 + 104), v73, 0);
																// branch -> 0xb02a0
															}
															// 0xb02a0
															function_c9b70((int32_t *)(g31 + 84));
															function_aefc4(g32, g35, g26, g27, *(int32_t *)g28, 0, 8);
															if (g20 != 0) {
																// 0xb02d0
																if (*(int32_t *)(g31 + 108) != 0) {
																	// 0xb02dc
																	function_afc30(g29 - 64, g32 - 1, g35 + 1, g33 - 64, g36);
																	// branch -> 0xb02f4
																}
															}
														}
													}
												}
											}
										}
									} else {
										// 0xb0200
										v34 = g21;
										if (v34 <= 0xffffffff) {
											// 0xb0208
											*(int32_t *)g28 = -1 - v34;
											v54 = *(int32_t *)g28;
											if (v54 <= 199) {
												// 0xb0220
												v55 = *(int32_t *)(g23 - 0x7754) + 232 * v54;
												g31 = v55;
												if (*(int32_t *)(v55 + 160) % 2 == 0) {
													// 0xb0238
													v72 = *(int32_t *)(v55 + 224);
													if (v72 != 0) {
														// 0xb0244
														g34 = v55 + 84;
														g27 = g36 + *(int32_t *)(v55 + 60);
														g26 = g33 + *(int32_t *)(v55 + 56) - *(int32_t *)(v72 + 496);
														function_c9b28();
														if (*(int32_t *)g28 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
															// 0xb0278
															v35 = g31;
															v73 = *(int32_t *)(*(int32_t *)(v35 + 224) + 492);
															g13 = 8;
															function_507f4(233, g26, g27, v35 + 84, *(int32_t *)(v35 + 104), v73, 0);
															// branch -> 0xb02a0
														}
														// 0xb02a0
														function_c9b70((int32_t *)(g31 + 84));
														function_aefc4(g32, g35, g26, g27, *(int32_t *)g28, 0, 8);
														if (g20 != 0) {
															// 0xb02d0
															if (*(int32_t *)(g31 + 108) != 0) {
																// 0xb02dc
																function_afc30(g29 - 64, g32 - 1, g35 + 1, g33 - 64, g36);
																// branch -> 0xb02f4
															}
														}
													}
												}
											}
										}
									}
									// 0xb02f4
									if (__asm_rlwinm_(v50, 0, 29, 29) != 0) {
										// 0xb02fc
										function_af6d0(g32, g35, g33, g36, 0, 8, 1);
										// branch -> 0xb031c
									}
									// 0xb031c
									v43 = 0x1000000 * g18;
									if (v43 >= 0 && (v43 || 0xffffff) >= 0x1ffffff) {
										// 0xb0324
										v44 = v43 / 0x1000000 - 1;
										if (v44 <= 3) {
											// 0xb0334
											v56 = g19 + 0x55ec * v44;
											v57 = g36 + *(int32_t *)(v56 + 100);
											v58 = g33 + *(int32_t *)(v56 + 96) - *(int32_t *)(v56 + 148);
											v74 = *(int32_t *)(v56 + 140);
											g13 = *(int32_t *)(v56 + 144);
											function_af440(v44, g32, g35, v58, v57, *(int32_t *)(v56 + 124), v74, 0, 8);
											if (g20 != 0) {
												// 0xb0384
												v75 = *(int32_t *)(g31 + 152);
												if (v75 != 0) {
													// 0xb0390
													if (v75 == 2) {
														// 0xb0398
														function_afc30(g29 - 0x3060, g32 - 2, g35 + 1, g33 - 96, g36 - 16);
														// branch -> 0xb03b0
													}
													// 0xb03b0
													function_afc30(g29 - 64, g32 - 1, g35 + 1, g33 - 64, g36);
													// branch -> 0xb03c8
												}
											}
										}
									}
									// 0xb03c8
									if (g17 >= 1) {
										// 0xb03d0
										if (__asm_rlwinm_(v50, 0, 25, 25) == 0) {
											// 0xb03d8
											v76 = *(int32_t *)(g23 - 0x77ac);
											if (*(int32_t *)(g19 + 0x55ec * *(int32_t *)v76 + 460) != 0) {
												// 0xb03f4
												*(int32_t *)g28 = g17 - 1;
												v90 = *(int32_t *)g28;
												if (v90 <= 199) {
													// 0xb0408
													v91 = *(int32_t *)(g23 - 0x7754) + 232 * v90;
													g31 = v91;
													if (*(int32_t *)(v91 + 160) % 2 == 0) {
														// 0xb0420
														v95 = *(int32_t *)(v91 + 224);
														if (v95 != 0) {
															// 0xb042c
															g34 = v91 + 84;
															g27 = g36 + *(int32_t *)(v91 + 60);
															g26 = g33 + *(int32_t *)(v91 + 56) - *(int32_t *)(v95 + 496);
															function_c9b28();
															if (*(int32_t *)g28 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
																// 0xb0460
																v77 = g31;
																v96 = *(int32_t *)(*(int32_t *)(v77 + 224) + 492);
																g13 = 8;
																function_507f4(233, g26, g27, v77 + 84, *(int32_t *)(v77 + 104), v96, 0);
																// branch -> 0xb0488
															}
															// 0xb0488
															function_c9b70((int32_t *)(g31 + 84));
															function_aefc4(g32, g35, g26, g27, *(int32_t *)g28, 0, 8);
															if (g20 != 0) {
																// 0xb04b8
																if (*(int32_t *)(g31 + 108) != 0) {
																	// 0xb04c4
																	function_afc30(g29 - 64, g32 - 1, g35 + 1, g33 - 64, g36);
																	// branch -> 0xb04dc
																}
															}
														}
													}
												}
											}
										} else {
											// 0xb03f4
											*(int32_t *)g28 = g17 - 1;
											v90 = *(int32_t *)g28;
											if (v90 <= 199) {
												// 0xb0408
												v91 = *(int32_t *)(g23 - 0x7754) + 232 * v90;
												g31 = v91;
												if (*(int32_t *)(v91 + 160) % 2 == 0) {
													// 0xb0420
													v95 = *(int32_t *)(v91 + 224);
													if (v95 != 0) {
														// 0xb042c
														g34 = v91 + 84;
														g27 = g36 + *(int32_t *)(v91 + 60);
														g26 = g33 + *(int32_t *)(v91 + 56) - *(int32_t *)(v95 + 496);
														function_c9b28();
														if (*(int32_t *)g28 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
															// 0xb0460
															v77 = g31;
															v96 = *(int32_t *)(*(int32_t *)(v77 + 224) + 492);
															g13 = 8;
															function_507f4(233, g26, g27, v77 + 84, *(int32_t *)(v77 + 104), v96, 0);
															// branch -> 0xb0488
														}
														// 0xb0488
														function_c9b70((int32_t *)(g31 + 84));
														function_aefc4(g32, g35, g26, g27, *(int32_t *)g28, 0, 8);
														if (g20 != 0) {
															// 0xb04b8
															if (*(int32_t *)(g31 + 108) != 0) {
																// 0xb04c4
																function_afc30(g29 - 64, g32 - 1, g35 + 1, g33 - 64, g36);
																// branch -> 0xb04dc
															}
														}
													}
												}
											}
										}
										// 0xb04dc
										if (v50 % 2 != 0) {
											// 0xb04e4
											function_aeb58(g32, g35, g33, g36, 0, 8, 0);
											// branch -> 0xb0504
										}
										// 0xb0504
										if ((0x1000000 * g16 || 0xffffff) >= 0x1ffffff) {
											// 0xb050c
											v78 = g23;
											v97 = *(int32_t *)(v78 - 0x70cc);
											v98 = *(int32_t *)(v78 - 0x7290);
											if (*(int32_t *)v98 < (int32_t) * (char *)v97) {
												// 0xb0528
												function_afa48(g32, g35, g33, g36, 0, 0, 8);
												// branch -> 0xb0548
											}
										}
										// 0xb0548
										v79 = g25;
										v87 = 0x1000000 * v79;
										v92 = v87 / 0x1000000;
										if ((v87 || 0xffffff) >= 0x1ffffff) {
											// 0xb0550
											v88 = v92 - 1;
											g27 = v88;
											v93 = *(int32_t *)(g23 - 0x7690) + 368 * v88;
											g32 = v93;
											if (*(int32_t *)(v93 + 52) != 0) {
												// 0xb0570
												if (v79 <= 127) {
													// 0xb0578
													g34 = *(int32_t *)(v93 + 24);
													v80 = function_c9948();
													g28 = v80;
													v81 = g32;
													if (v80 == 0) {
														// 0xb0588
														function_c9acc(*(int32_t *)(v81 + 24));
														// branch -> 0xb0634
													} else {
														// 0xb0594
														v99 = *(int32_t *)(v81 + 32);
														g11 = v99;
														v103 = v81;
														if (v99 >= 1) {
															// 0xb05a0
															if (function_4d794(v80) > 50) {
																// 0xb05a0
																v103 = g32;
																// branch -> 0xb05c4
															} else {
																// 0xb05b0
																v89 = function_4d794(g28);
																v82 = g32;
																v100 = *(int32_t *)(v82 + 32);
																g40 = v100;
																if (v100 <= v89) {
																	// 0xb05d0
																	v83 = g27;
																	v94 = g33 - *(int32_t *)(v82 + 40);
																	g27 = v94;
																	v85 = v94;
																	v86 = v82;
																	if (v83 == (int32_t) * (char *)*(int32_t *)(g23 - 0x7748)) {
																		// 0xb05ec
																		g37 = v94;
																		g41 = *(int32_t *)(v82 + 36);
																		v84 = g36;
																		g38 = v84;
																		g42 = 0;
																		g13 = 8;
																		CelDrawHdrClrHL(181, v94, v84, *(int32_t *)(v82 + 24), v100);
																		v85 = g27;
																		v86 = g32;
																		// branch -> 0xb060c
																	}
																	// 0xb060c
																	v101 = *(int32_t *)(v86 + 32);
																	v102 = *(int32_t *)(v86 + 36);
																	function_4e998(v85, g36, *(int32_t *)(v86 + 24), v101, v102, 0, 8);
																	function_c9acc(*(int32_t *)(g32 + 24));
																	// branch -> 0xb0634
																	// Detected a possible infinite recursion (goto support failed); quitting...
																} else {
																	v103 = v82;
																}
															}
															// 0xb05c4
															function_c9acc(*(int32_t *)(v103 + 24));
															// branch -> 0xb0634
															// Detected a possible infinite recursion (goto support failed); quitting...
														}
														// Detected a possible infinite recursion (goto support failed); quitting...
													}
													// Detected a possible infinite recursion (goto support failed); quitting...
												}
											}
										}
										// Detected a possible infinite recursion (goto support failed); quitting...
									}
									// 0xb04dc
									if (v50 % 2 != 0) {
										// 0xb04e4
										function_aeb58(g32, g35, g33, g36, 0, 8, 0);
										// branch -> 0xb0504
									}
									// 0xb0504
									if ((0x1000000 * g16 || 0xffffff) >= 0x1ffffff) {
										// 0xb050c
										v78 = g23;
										v97 = *(int32_t *)(v78 - 0x70cc);
										v98 = *(int32_t *)(v78 - 0x7290);
										if (*(int32_t *)v98 < (int32_t) * (char *)v97) {
											// 0xb0528
											function_afa48(g32, g35, g33, g36, 0, 0, 8);
											// branch -> 0xb0548
										}
									}
									// 0xb0548
									v79 = g25;
									v87 = 0x1000000 * v79;
									v92 = v87 / 0x1000000;
									if ((v87 || 0xffffff) >= 0x1ffffff) {
										// 0xb0550
										v88 = v92 - 1;
										g27 = v88;
										v93 = *(int32_t *)(g23 - 0x7690) + 368 * v88;
										g32 = v93;
										if (*(int32_t *)(v93 + 52) != 0) {
											// 0xb0570
											if (v79 <= 127) {
												// 0xb0578
												g34 = *(int32_t *)(v93 + 24);
												v80 = function_c9948();
												g28 = v80;
												v81 = g32;
												if (v80 == 0) {
													// 0xb0588
													function_c9acc(*(int32_t *)(v81 + 24));
													// branch -> 0xb0634
												} else {
													// 0xb0594
													v99 = *(int32_t *)(v81 + 32);
													g11 = v99;
													if (v99 >= 1) {
														// 0xb05a0
														if (function_4d794(v80) > 50) {
															// 0xb05a0
															// branch -> 0xb05c4
														} else {
															// 0xb05b0
															v89 = function_4d794(g28);
															v82 = g32;
															v100 = *(int32_t *)(v82 + 32);
															g40 = v100;
															if (v100 <= v89) {
																// 0xb05d0
																v83 = g27;
																v94 = g33 - *(int32_t *)(v82 + 40);
																g27 = v94;
																v85 = v94;
																v86 = v82;
																if (v83 == (int32_t) * (char *)*(int32_t *)(g23 - 0x7748)) {
																	// 0xb05ec
																	g37 = v94;
																	g41 = *(int32_t *)(v82 + 36);
																	v84 = g36;
																	g38 = v84;
																	g42 = 0;
																	g13 = 8;
																	CelDrawHdrClrHL(181, v94, v84, *(int32_t *)(v82 + 24), v100);
																	v85 = g27;
																	v86 = g32;
																	// branch -> 0xb060c
																}
																// 0xb060c
																v101 = *(int32_t *)(v86 + 32);
																v102 = *(int32_t *)(v86 + 36);
																function_4e998(v85, g36, *(int32_t *)(v86 + 24), v101, v102, 0, 8);
																function_c9acc(*(int32_t *)(g32 + 24));
																// branch -> 0xb0634
																// Detected a possible infinite recursion (goto support failed); quitting...
															}
														}
														// Detected a possible infinite recursion (goto support failed); quitting...
													}
													// Detected a possible infinite recursion (goto support failed); quitting...
												}
												// Detected a possible infinite recursion (goto support failed); quitting...
											}
										}
									}
									// Detected a possible infinite recursion (goto support failed); quitting...
								}
								// 0xb02f4
								if (__asm_rlwinm_(v50, 0, 29, 29) != 0) {
									// 0xb02fc
									function_af6d0(g32, g35, g33, g36, 0, 8, 1);
									// branch -> 0xb031c
								}
								// 0xb031c
								v43 = 0x1000000 * g18;
								if (v43 >= 0 && (v43 || 0xffffff) >= 0x1ffffff) {
									// 0xb0324
									v44 = v43 / 0x1000000 - 1;
									if (v44 <= 3) {
										// 0xb0334
										v56 = g19 + 0x55ec * v44;
										v57 = g36 + *(int32_t *)(v56 + 100);
										v58 = g33 + *(int32_t *)(v56 + 96) - *(int32_t *)(v56 + 148);
										v74 = *(int32_t *)(v56 + 140);
										g13 = *(int32_t *)(v56 + 144);
										function_af440(v44, g32, g35, v58, v57, *(int32_t *)(v56 + 124), v74, 0, 8);
										if (g20 != 0) {
											// 0xb0384
											v75 = *(int32_t *)(g31 + 152);
											if (v75 != 0) {
												// 0xb0390
												if (v75 == 2) {
													// 0xb0398
													function_afc30(g29 - 0x3060, g32 - 2, g35 + 1, g33 - 96, g36 - 16);
													// branch -> 0xb03b0
												}
												// 0xb03b0
												function_afc30(g29 - 64, g32 - 1, g35 + 1, g33 - 64, g36);
												// branch -> 0xb03c8
											}
										}
									}
								}
								// 0xb03c8
								if (g17 >= 1) {
									// 0xb03d0
									if (__asm_rlwinm_(v50, 0, 25, 25) == 0) {
										// 0xb03d8
										v76 = *(int32_t *)(g23 - 0x77ac);
										if (*(int32_t *)(g19 + 0x55ec * *(int32_t *)v76 + 460) != 0) {
											// 0xb03f4
											*(int32_t *)g28 = g17 - 1;
											v90 = *(int32_t *)g28;
											if (v90 <= 199) {
												// 0xb0408
												v91 = *(int32_t *)(g23 - 0x7754) + 232 * v90;
												g31 = v91;
												if (*(int32_t *)(v91 + 160) % 2 == 0) {
													// 0xb0420
													v95 = *(int32_t *)(v91 + 224);
													if (v95 != 0) {
														// 0xb042c
														g34 = v91 + 84;
														g27 = g36 + *(int32_t *)(v91 + 60);
														g26 = g33 + *(int32_t *)(v91 + 56) - *(int32_t *)(v95 + 496);
														function_c9b28();
														if (*(int32_t *)g28 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
															// 0xb0460
															v77 = g31;
															v96 = *(int32_t *)(*(int32_t *)(v77 + 224) + 492);
															g13 = 8;
															function_507f4(233, g26, g27, v77 + 84, *(int32_t *)(v77 + 104), v96, 0);
															// branch -> 0xb0488
														}
														// 0xb0488
														function_c9b70((int32_t *)(g31 + 84));
														function_aefc4(g32, g35, g26, g27, *(int32_t *)g28, 0, 8);
														if (g20 != 0) {
															// 0xb04b8
															if (*(int32_t *)(g31 + 108) != 0) {
																// 0xb04c4
																function_afc30(g29 - 64, g32 - 1, g35 + 1, g33 - 64, g36);
																// branch -> 0xb04dc
															}
														}
													}
												}
											}
										}
									} else {
										// 0xb03f4
										*(int32_t *)g28 = g17 - 1;
										v90 = *(int32_t *)g28;
										if (v90 <= 199) {
											// 0xb0408
											v91 = *(int32_t *)(g23 - 0x7754) + 232 * v90;
											g31 = v91;
											if (*(int32_t *)(v91 + 160) % 2 == 0) {
												// 0xb0420
												v95 = *(int32_t *)(v91 + 224);
												if (v95 != 0) {
													// 0xb042c
													g34 = v91 + 84;
													g27 = g36 + *(int32_t *)(v91 + 60);
													g26 = g33 + *(int32_t *)(v91 + 56) - *(int32_t *)(v95 + 496);
													function_c9b28();
													if (*(int32_t *)g28 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
														// 0xb0460
														v77 = g31;
														v96 = *(int32_t *)(*(int32_t *)(v77 + 224) + 492);
														g13 = 8;
														function_507f4(233, g26, g27, v77 + 84, *(int32_t *)(v77 + 104), v96, 0);
														// branch -> 0xb0488
													}
													// 0xb0488
													function_c9b70((int32_t *)(g31 + 84));
													function_aefc4(g32, g35, g26, g27, *(int32_t *)g28, 0, 8);
													if (g20 != 0) {
														// 0xb04b8
														if (*(int32_t *)(g31 + 108) != 0) {
															// 0xb04c4
															function_afc30(g29 - 64, g32 - 1, g35 + 1, g33 - 64, g36);
															// branch -> 0xb04dc
														}
													}
												}
											}
										}
									}
									// 0xb04dc
									if (v50 % 2 != 0) {
										// 0xb04e4
										function_aeb58(g32, g35, g33, g36, 0, 8, 0);
										// branch -> 0xb0504
									}
									// 0xb0504
									if ((0x1000000 * g16 || 0xffffff) >= 0x1ffffff) {
										// 0xb050c
										v78 = g23;
										v97 = *(int32_t *)(v78 - 0x70cc);
										v98 = *(int32_t *)(v78 - 0x7290);
										if (*(int32_t *)v98 < (int32_t) * (char *)v97) {
											// 0xb0528
											function_afa48(g32, g35, g33, g36, 0, 0, 8);
											// branch -> 0xb0548
										}
									}
									// 0xb0548
									v79 = g25;
									v87 = 0x1000000 * v79;
									v92 = v87 / 0x1000000;
									if ((v87 || 0xffffff) >= 0x1ffffff) {
										// 0xb0550
										v88 = v92 - 1;
										g27 = v88;
										v93 = *(int32_t *)(g23 - 0x7690) + 368 * v88;
										g32 = v93;
										if (*(int32_t *)(v93 + 52) != 0) {
											// 0xb0570
											if (v79 <= 127) {
												// 0xb0578
												g34 = *(int32_t *)(v93 + 24);
												v80 = function_c9948();
												g28 = v80;
												v81 = g32;
												if (v80 == 0) {
													// 0xb0588
													function_c9acc(*(int32_t *)(v81 + 24));
													// branch -> 0xb0634
												} else {
													// 0xb0594
													v99 = *(int32_t *)(v81 + 32);
													g11 = v99;
													if (v99 >= 1) {
														// 0xb05a0
														if (function_4d794(v80) > 50) {
															// 0xb05a0
															// branch -> 0xb05c4
														} else {
															// 0xb05b0
															v89 = function_4d794(g28);
															v82 = g32;
															v100 = *(int32_t *)(v82 + 32);
															g40 = v100;
															if (v100 <= v89) {
																// 0xb05d0
																v83 = g27;
																v94 = g33 - *(int32_t *)(v82 + 40);
																g27 = v94;
																v85 = v94;
																v86 = v82;
																if (v83 == (int32_t) * (char *)*(int32_t *)(g23 - 0x7748)) {
																	// 0xb05ec
																	g37 = v94;
																	g41 = *(int32_t *)(v82 + 36);
																	v84 = g36;
																	g38 = v84;
																	g42 = 0;
																	g13 = 8;
																	CelDrawHdrClrHL(181, v94, v84, *(int32_t *)(v82 + 24), v100);
																	v85 = g27;
																	v86 = g32;
																	// branch -> 0xb060c
																}
																// 0xb060c
																v101 = *(int32_t *)(v86 + 32);
																v102 = *(int32_t *)(v86 + 36);
																function_4e998(v85, g36, *(int32_t *)(v86 + 24), v101, v102, 0, 8);
																function_c9acc(*(int32_t *)(g32 + 24));
																// branch -> 0xb0634
																// Detected a possible infinite recursion (goto support failed); quitting...
															}
														}
														// Detected a possible infinite recursion (goto support failed); quitting...
													}
													// Detected a possible infinite recursion (goto support failed); quitting...
												}
												// Detected a possible infinite recursion (goto support failed); quitting...
											}
										}
									}
									// Detected a possible infinite recursion (goto support failed); quitting...
								}
								// 0xb04dc
								if (v50 % 2 != 0) {
									// 0xb04e4
									function_aeb58(g32, g35, g33, g36, 0, 8, 0);
									// branch -> 0xb0504
								}
								// 0xb0504
								if ((0x1000000 * g16 || 0xffffff) >= 0x1ffffff) {
									// 0xb050c
									v78 = g23;
									v97 = *(int32_t *)(v78 - 0x70cc);
									v98 = *(int32_t *)(v78 - 0x7290);
									if (*(int32_t *)v98 < (int32_t) * (char *)v97) {
										// 0xb0528
										function_afa48(g32, g35, g33, g36, 0, 0, 8);
										// branch -> 0xb0548
									}
								}
								// 0xb0548
								v79 = g25;
								v87 = 0x1000000 * v79;
								v92 = v87 / 0x1000000;
								if ((v87 || 0xffffff) >= 0x1ffffff) {
									// 0xb0550
									v88 = v92 - 1;
									g27 = v88;
									v93 = *(int32_t *)(g23 - 0x7690) + 368 * v88;
									g32 = v93;
									if (*(int32_t *)(v93 + 52) != 0) {
										// 0xb0570
										if (v79 <= 127) {
											// 0xb0578
											g34 = *(int32_t *)(v93 + 24);
											v80 = function_c9948();
											g28 = v80;
											v81 = g32;
											if (v80 == 0) {
												// 0xb0588
												function_c9acc(*(int32_t *)(v81 + 24));
												// branch -> 0xb0634
											} else {
												// 0xb0594
												v99 = *(int32_t *)(v81 + 32);
												g11 = v99;
												if (v99 >= 1) {
													// 0xb05a0
													if (function_4d794(v80) > 50) {
														// 0xb05a0
														// branch -> 0xb05c4
													} else {
														// 0xb05b0
														v89 = function_4d794(g28);
														v82 = g32;
														v100 = *(int32_t *)(v82 + 32);
														g40 = v100;
														if (v100 <= v89) {
															// 0xb05d0
															v83 = g27;
															v94 = g33 - *(int32_t *)(v82 + 40);
															g27 = v94;
															v85 = v94;
															v86 = v82;
															if (v83 == (int32_t) * (char *)*(int32_t *)(g23 - 0x7748)) {
																// 0xb05ec
																g37 = v94;
																g41 = *(int32_t *)(v82 + 36);
																v84 = g36;
																g38 = v84;
																g42 = 0;
																g13 = 8;
																CelDrawHdrClrHL(181, v94, v84, *(int32_t *)(v82 + 24), v100);
																v85 = g27;
																v86 = g32;
																// branch -> 0xb060c
															}
															// 0xb060c
															v101 = *(int32_t *)(v86 + 32);
															v102 = *(int32_t *)(v86 + 36);
															function_4e998(v85, g36, *(int32_t *)(v86 + 24), v101, v102, 0, 8);
															function_c9acc(*(int32_t *)(g32 + 24));
															// branch -> 0xb0634
															// Detected a possible infinite recursion (goto support failed); quitting...
														}
													}
													// Detected a possible infinite recursion (goto support failed); quitting...
												}
												// Detected a possible infinite recursion (goto support failed); quitting...
											}
											// Detected a possible infinite recursion (goto support failed); quitting...
										}
									}
								}
								// Detected a possible infinite recursion (goto support failed); quitting...
							}
						}
					}
					// 0xaffac
					function_c9b70((int32_t *)g30);
					// branch -> 0xb0008
				}
				// 0xb0008
				if ((0x1000000 * g16 || 0xffffff) >= 0x1ffffff) {
					// 0xb0010
					function_afa48(g32, g35, g33, g36, 1, 0, 8);
					// branch -> 0xb0030
				}
				// 0xb0030
				v26 = g25;
				v39 = 0x1000000 * v26;
				v47 = v39 / 0x1000000;
				if ((v39 || 0xffffff) >= 0x1ffffff) {
					// 0xb0038
					v40 = v47 - 1;
					g26 = v40;
					v48 = *(int32_t *)(g23 - 0x7690) + 368 * v40;
					g31 = v48;
					if (*(int32_t *)(v48 + 52) == 0) {
						// 0xb0058
						if (v26 <= 127) {
							// 0xb0060
							g34 = *(int32_t *)(v48 + 24);
							v27 = function_c9948();
							v17 = v27;
							v28 = g31;
							if (v27 == 0) {
								// 0xb0070
								function_c9acc(*(int32_t *)(v28 + 24));
								// branch -> 0xb011c
							} else {
								// 0xb007c
								v65 = *(int32_t *)(v28 + 32);
								g11 = v65;
								v30 = v28;
								if (v65 >= 1) {
									// 0xb0088
									if (function_4d794(v27) > 50) {
										// 0xb0088
										v30 = g31;
										// branch -> 0xb00ac
									} else {
										// 0xb0098
										v41 = function_4d794(v17);
										v29 = g31;
										v66 = *(int32_t *)(v29 + 32);
										g40 = v66;
										if (v66 <= v41) {
											// 0xb00b8
											v49 = g33 - *(int32_t *)(v29 + 40);
											g27 = v49;
											v32 = v49;
											v33 = v29;
											if (g26 == (int32_t) * (char *)*(int32_t *)(g23 - 0x7748)) {
												// 0xb00d4
												g37 = v49;
												g41 = *(int32_t *)(v29 + 36);
												v31 = g36;
												g38 = v31;
												g42 = 0;
												g13 = 8;
												CelDrawHdrClrHL(181, v49, v31, *(int32_t *)(v29 + 24), v66);
												v32 = g27;
												v33 = g31;
												// branch -> 0xb00f4
											}
											// 0xb00f4
											v67 = *(int32_t *)(v33 + 32);
											v68 = *(int32_t *)(v33 + 36);
											function_4e998(v32, g36, *(int32_t *)(v33 + 24), v67, v68, 0, 8);
											function_c9acc(*(int32_t *)(g31 + 24));
											// branch -> 0xb011c
											// 0xb011c
											v50 = v13;
											g30 = v50;
											if (__asm_rlwinm_(v50, 0, 26, 26) != 0) {
												// 0xb0128
												v42 = -1 - (int32_t)v16;
												if (v42 <= 3) {
													// 0xb0140
													v51 = g19 + 0x55ec * v42;
													v52 = g36 + *(int32_t *)(v51 + 100);
													v53 = g33 + *(int32_t *)(v51 + 96) - *(int32_t *)(v51 + 148);
													v69 = *(int32_t *)(v51 + 140);
													g13 = *(int32_t *)(v51 + 144);
													function_af440(v42, g32, g35 - 1, v53, v52, *(int32_t *)(v51 + 124), v69, 0, 8);
													if (g20 != 0) {
														// 0xb0190
														v70 = *(int32_t *)(g31 + 152);
														if (v70 != 0) {
															// 0xb019c
															if (v70 == 2) {
																// 0xb01a4
																function_afc30(g29 - 0x3060, g32 - 2, g35 + 1, g33 - 96, g36 - 16);
																// branch -> 0xb01bc
															}
															// 0xb01bc
															function_afc30(g29 - 64, g32 - 1, g35 + 1, g33 - 64, g36);
															// branch -> 0xb01d4
														}
													}
												}
											}
											// 0xb01d4
											if (__asm_rlwinm_(v50, 0, 27, 27) != 0) {
												// 0xb01dc
												if (__asm_rlwinm_(v50, 0, 25, 25) == 0) {
													// 0xb01e4
													v71 = *(int32_t *)(g23 - 0x77ac);
													if (*(int32_t *)(g19 + 0x55ec * *(int32_t *)v71 + 460) != 0) {
														// 0xb0200
														v34 = g21;
														if (v34 <= 0xffffffff) {
															// 0xb0208
															*(int32_t *)g28 = -1 - v34;
															v54 = *(int32_t *)g28;
															if (v54 <= 199) {
																// 0xb0220
																v55 = *(int32_t *)(g23 - 0x7754) + 232 * v54;
																g31 = v55;
																if (*(int32_t *)(v55 + 160) % 2 == 0) {
																	// 0xb0238
																	v72 = *(int32_t *)(v55 + 224);
																	if (v72 != 0) {
																		// 0xb0244
																		g34 = v55 + 84;
																		g27 = g36 + *(int32_t *)(v55 + 60);
																		g26 = g33 + *(int32_t *)(v55 + 56) - *(int32_t *)(v72 + 496);
																		function_c9b28();
																		if (*(int32_t *)g28 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
																			// 0xb0278
																			v35 = g31;
																			v73 = *(int32_t *)(*(int32_t *)(v35 + 224) + 492);
																			g13 = 8;
																			function_507f4(233, g26, g27, v35 + 84, *(int32_t *)(v35 + 104), v73, 0);
																			// branch -> 0xb02a0
																		}
																		// 0xb02a0
																		function_c9b70((int32_t *)(g31 + 84));
																		function_aefc4(g32, g35, g26, g27, *(int32_t *)g28, 0, 8);
																		if (g20 != 0) {
																			// 0xb02d0
																			if (*(int32_t *)(g31 + 108) != 0) {
																				// 0xb02dc
																				function_afc30(g29 - 64, g32 - 1, g35 + 1, g33 - 64, g36);
																				// branch -> 0xb02f4
																			}
																		}
																	}
																}
															}
														}
													}
												} else {
													// 0xb0200
													v34 = g21;
													if (v34 <= 0xffffffff) {
														// 0xb0208
														*(int32_t *)g28 = -1 - v34;
														v54 = *(int32_t *)g28;
														if (v54 <= 199) {
															// 0xb0220
															v55 = *(int32_t *)(g23 - 0x7754) + 232 * v54;
															g31 = v55;
															if (*(int32_t *)(v55 + 160) % 2 == 0) {
																// 0xb0238
																v72 = *(int32_t *)(v55 + 224);
																if (v72 != 0) {
																	// 0xb0244
																	g34 = v55 + 84;
																	g27 = g36 + *(int32_t *)(v55 + 60);
																	g26 = g33 + *(int32_t *)(v55 + 56) - *(int32_t *)(v72 + 496);
																	function_c9b28();
																	if (*(int32_t *)g28 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
																		// 0xb0278
																		v35 = g31;
																		v73 = *(int32_t *)(*(int32_t *)(v35 + 224) + 492);
																		g13 = 8;
																		function_507f4(233, g26, g27, v35 + 84, *(int32_t *)(v35 + 104), v73, 0);
																		// branch -> 0xb02a0
																	}
																	// 0xb02a0
																	function_c9b70((int32_t *)(g31 + 84));
																	function_aefc4(g32, g35, g26, g27, *(int32_t *)g28, 0, 8);
																	if (g20 != 0) {
																		// 0xb02d0
																		if (*(int32_t *)(g31 + 108) != 0) {
																			// 0xb02dc
																			function_afc30(g29 - 64, g32 - 1, g35 + 1, g33 - 64, g36);
																			// branch -> 0xb02f4
																		}
																	}
																}
															}
														}
													}
												}
												// 0xb02f4
												if (__asm_rlwinm_(v50, 0, 29, 29) != 0) {
													// 0xb02fc
													function_af6d0(g32, g35, g33, g36, 0, 8, 1);
													// branch -> 0xb031c
												}
												// 0xb031c
												v43 = 0x1000000 * g18;
												if (v43 >= 0 && (v43 || 0xffffff) >= 0x1ffffff) {
													// 0xb0324
													v44 = v43 / 0x1000000 - 1;
													if (v44 <= 3) {
														// 0xb0334
														v56 = g19 + 0x55ec * v44;
														v57 = g36 + *(int32_t *)(v56 + 100);
														v58 = g33 + *(int32_t *)(v56 + 96) - *(int32_t *)(v56 + 148);
														v74 = *(int32_t *)(v56 + 140);
														g13 = *(int32_t *)(v56 + 144);
														function_af440(v44, g32, g35, v58, v57, *(int32_t *)(v56 + 124), v74, 0, 8);
														if (g20 != 0) {
															// 0xb0384
															v75 = *(int32_t *)(g31 + 152);
															if (v75 != 0) {
																// 0xb0390
																if (v75 == 2) {
																	// 0xb0398
																	function_afc30(g29 - 0x3060, g32 - 2, g35 + 1, g33 - 96, g36 - 16);
																	// branch -> 0xb03b0
																}
																// 0xb03b0
																function_afc30(g29 - 64, g32 - 1, g35 + 1, g33 - 64, g36);
																// branch -> 0xb03c8
															}
														}
													}
												}
												// 0xb03c8
												if (g17 >= 1) {
													// 0xb03d0
													if (__asm_rlwinm_(v50, 0, 25, 25) == 0) {
														// 0xb03d8
														v76 = *(int32_t *)(g23 - 0x77ac);
														if (*(int32_t *)(g19 + 0x55ec * *(int32_t *)v76 + 460) != 0) {
															// 0xb03f4
															*(int32_t *)g28 = g17 - 1;
															v90 = *(int32_t *)g28;
															if (v90 <= 199) {
																// 0xb0408
																v91 = *(int32_t *)(g23 - 0x7754) + 232 * v90;
																g31 = v91;
																if (*(int32_t *)(v91 + 160) % 2 == 0) {
																	// 0xb0420
																	v95 = *(int32_t *)(v91 + 224);
																	if (v95 != 0) {
																		// 0xb042c
																		g34 = v91 + 84;
																		g27 = g36 + *(int32_t *)(v91 + 60);
																		g26 = g33 + *(int32_t *)(v91 + 56) - *(int32_t *)(v95 + 496);
																		function_c9b28();
																		if (*(int32_t *)g28 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
																			// 0xb0460
																			v77 = g31;
																			v96 = *(int32_t *)(*(int32_t *)(v77 + 224) + 492);
																			g13 = 8;
																			function_507f4(233, g26, g27, v77 + 84, *(int32_t *)(v77 + 104), v96, 0);
																			// branch -> 0xb0488
																		}
																		// 0xb0488
																		function_c9b70((int32_t *)(g31 + 84));
																		function_aefc4(g32, g35, g26, g27, *(int32_t *)g28, 0, 8);
																		if (g20 != 0) {
																			// 0xb04b8
																			if (*(int32_t *)(g31 + 108) != 0) {
																				// 0xb04c4
																				function_afc30(g29 - 64, g32 - 1, g35 + 1, g33 - 64, g36);
																				// branch -> 0xb04dc
																			}
																		}
																	}
																}
															}
														}
													} else {
														// 0xb03f4
														*(int32_t *)g28 = g17 - 1;
														v90 = *(int32_t *)g28;
														if (v90 <= 199) {
															// 0xb0408
															v91 = *(int32_t *)(g23 - 0x7754) + 232 * v90;
															g31 = v91;
															if (*(int32_t *)(v91 + 160) % 2 == 0) {
																// 0xb0420
																v95 = *(int32_t *)(v91 + 224);
																if (v95 != 0) {
																	// 0xb042c
																	g34 = v91 + 84;
																	g27 = g36 + *(int32_t *)(v91 + 60);
																	g26 = g33 + *(int32_t *)(v91 + 56) - *(int32_t *)(v95 + 496);
																	function_c9b28();
																	if (*(int32_t *)g28 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
																		// 0xb0460
																		v77 = g31;
																		v96 = *(int32_t *)(*(int32_t *)(v77 + 224) + 492);
																		g13 = 8;
																		function_507f4(233, g26, g27, v77 + 84, *(int32_t *)(v77 + 104), v96, 0);
																		// branch -> 0xb0488
																	}
																	// 0xb0488
																	function_c9b70((int32_t *)(g31 + 84));
																	function_aefc4(g32, g35, g26, g27, *(int32_t *)g28, 0, 8);
																	if (g20 != 0) {
																		// 0xb04b8
																		if (*(int32_t *)(g31 + 108) != 0) {
																			// 0xb04c4
																			function_afc30(g29 - 64, g32 - 1, g35 + 1, g33 - 64, g36);
																			// branch -> 0xb04dc
																		}
																	}
																}
															}
														}
													}
													// 0xb04dc
													if (v50 % 2 != 0) {
														// 0xb04e4
														function_aeb58(g32, g35, g33, g36, 0, 8, 0);
														// branch -> 0xb0504
													}
													// 0xb0504
													if ((0x1000000 * g16 || 0xffffff) >= 0x1ffffff) {
														// 0xb050c
														v78 = g23;
														v97 = *(int32_t *)(v78 - 0x70cc);
														v98 = *(int32_t *)(v78 - 0x7290);
														if (*(int32_t *)v98 < (int32_t) * (char *)v97) {
															// 0xb0528
															function_afa48(g32, g35, g33, g36, 0, 0, 8);
															// branch -> 0xb0548
														}
													}
													// 0xb0548
													v79 = g25;
													v87 = 0x1000000 * v79;
													v92 = v87 / 0x1000000;
													if ((v87 || 0xffffff) >= 0x1ffffff) {
														// 0xb0550
														v88 = v92 - 1;
														g27 = v88;
														v93 = *(int32_t *)(g23 - 0x7690) + 368 * v88;
														g32 = v93;
														if (*(int32_t *)(v93 + 52) != 0) {
															// 0xb0570
															if (v79 <= 127) {
																// 0xb0578
																g34 = *(int32_t *)(v93 + 24);
																v80 = function_c9948();
																g28 = v80;
																v81 = g32;
																if (v80 == 0) {
																	// 0xb0588
																	function_c9acc(*(int32_t *)(v81 + 24));
																	// branch -> 0xb0634
																} else {
																	// 0xb0594
																	v99 = *(int32_t *)(v81 + 32);
																	g11 = v99;
																	if (v99 >= 1) {
																		// 0xb05a0
																		if (function_4d794(v80) > 50) {
																			// 0xb05a0
																			// branch -> 0xb05c4
																		} else {
																			// 0xb05b0
																			v89 = function_4d794(g28);
																			v82 = g32;
																			v100 = *(int32_t *)(v82 + 32);
																			g40 = v100;
																			if (v100 <= v89) {
																				// 0xb05d0
																				v83 = g27;
																				v94 = g33 - *(int32_t *)(v82 + 40);
																				g27 = v94;
																				v85 = v94;
																				v86 = v82;
																				if (v83 == (int32_t) * (char *)*(int32_t *)(g23 - 0x7748)) {
																					// 0xb05ec
																					g37 = v94;
																					g41 = *(int32_t *)(v82 + 36);
																					v84 = g36;
																					g38 = v84;
																					g42 = 0;
																					g13 = 8;
																					CelDrawHdrClrHL(181, v94, v84, *(int32_t *)(v82 + 24), v100);
																					v85 = g27;
																					v86 = g32;
																					// branch -> 0xb060c
																				}
																				// 0xb060c
																				v101 = *(int32_t *)(v86 + 32);
																				v102 = *(int32_t *)(v86 + 36);
																				function_4e998(v85, g36, *(int32_t *)(v86 + 24), v101, v102, 0, 8);
																				function_c9acc(*(int32_t *)(g32 + 24));
																				// branch -> 0xb0634
																				// Detected a possible infinite recursion (goto support failed); quitting...
																			}
																		}
																		// Detected a possible infinite recursion (goto support failed); quitting...
																	}
																	// Detected a possible infinite recursion (goto support failed); quitting...
																}
																// Detected a possible infinite recursion (goto support failed); quitting...
															}
														}
													}
													// Detected a possible infinite recursion (goto support failed); quitting...
												}
												// 0xb04dc
												if (v50 % 2 != 0) {
													// 0xb04e4
													function_aeb58(g32, g35, g33, g36, 0, 8, 0);
													// branch -> 0xb0504
												}
												// 0xb0504
												if ((0x1000000 * g16 || 0xffffff) >= 0x1ffffff) {
													// 0xb050c
													v78 = g23;
													v97 = *(int32_t *)(v78 - 0x70cc);
													v98 = *(int32_t *)(v78 - 0x7290);
													if (*(int32_t *)v98 < (int32_t) * (char *)v97) {
														// 0xb0528
														function_afa48(g32, g35, g33, g36, 0, 0, 8);
														// branch -> 0xb0548
													}
												}
												// 0xb0548
												v79 = g25;
												v87 = 0x1000000 * v79;
												v92 = v87 / 0x1000000;
												if ((v87 || 0xffffff) >= 0x1ffffff) {
													// 0xb0550
													v88 = v92 - 1;
													g27 = v88;
													v93 = *(int32_t *)(g23 - 0x7690) + 368 * v88;
													g32 = v93;
													if (*(int32_t *)(v93 + 52) != 0) {
														// 0xb0570
														if (v79 <= 127) {
															// 0xb0578
															g34 = *(int32_t *)(v93 + 24);
															v80 = function_c9948();
															g28 = v80;
															v81 = g32;
															if (v80 == 0) {
																// 0xb0588
																function_c9acc(*(int32_t *)(v81 + 24));
																// branch -> 0xb0634
															} else {
																// 0xb0594
																v99 = *(int32_t *)(v81 + 32);
																g11 = v99;
																if (v99 >= 1) {
																	// 0xb05a0
																	if (function_4d794(v80) > 50) {
																		// 0xb05a0
																		// branch -> 0xb05c4
																	} else {
																		// 0xb05b0
																		v89 = function_4d794(g28);
																		v82 = g32;
																		v100 = *(int32_t *)(v82 + 32);
																		g40 = v100;
																		if (v100 <= v89) {
																			// 0xb05d0
																			v83 = g27;
																			v94 = g33 - *(int32_t *)(v82 + 40);
																			g27 = v94;
																			v85 = v94;
																			v86 = v82;
																			if (v83 == (int32_t) * (char *)*(int32_t *)(g23 - 0x7748)) {
																				// 0xb05ec
																				g37 = v94;
																				g41 = *(int32_t *)(v82 + 36);
																				v84 = g36;
																				g38 = v84;
																				g42 = 0;
																				g13 = 8;
																				CelDrawHdrClrHL(181, v94, v84, *(int32_t *)(v82 + 24), v100);
																				v85 = g27;
																				v86 = g32;
																				// branch -> 0xb060c
																			}
																			// 0xb060c
																			v101 = *(int32_t *)(v86 + 32);
																			v102 = *(int32_t *)(v86 + 36);
																			function_4e998(v85, g36, *(int32_t *)(v86 + 24), v101, v102, 0, 8);
																			function_c9acc(*(int32_t *)(g32 + 24));
																			// branch -> 0xb0634
																			// Detected a possible infinite recursion (goto support failed); quitting...
																		}
																	}
																	// Detected a possible infinite recursion (goto support failed); quitting...
																}
																// Detected a possible infinite recursion (goto support failed); quitting...
															}
															// Detected a possible infinite recursion (goto support failed); quitting...
														}
													}
												}
												// Detected a possible infinite recursion (goto support failed); quitting...
											}
											// 0xb02f4
											if (__asm_rlwinm_(v50, 0, 29, 29) != 0) {
												// 0xb02fc
												function_af6d0(g32, g35, g33, g36, 0, 8, 1);
												// branch -> 0xb031c
											}
											// 0xb031c
											v43 = 0x1000000 * g18;
											if (v43 >= 0 && (v43 || 0xffffff) >= 0x1ffffff) {
												// 0xb0324
												v44 = v43 / 0x1000000 - 1;
												if (v44 <= 3) {
													// 0xb0334
													v56 = g19 + 0x55ec * v44;
													v57 = g36 + *(int32_t *)(v56 + 100);
													v58 = g33 + *(int32_t *)(v56 + 96) - *(int32_t *)(v56 + 148);
													v74 = *(int32_t *)(v56 + 140);
													g13 = *(int32_t *)(v56 + 144);
													function_af440(v44, g32, g35, v58, v57, *(int32_t *)(v56 + 124), v74, 0, 8);
													if (g20 != 0) {
														// 0xb0384
														v75 = *(int32_t *)(g31 + 152);
														if (v75 != 0) {
															// 0xb0390
															if (v75 == 2) {
																// 0xb0398
																function_afc30(g29 - 0x3060, g32 - 2, g35 + 1, g33 - 96, g36 - 16);
																// branch -> 0xb03b0
															}
															// 0xb03b0
															function_afc30(g29 - 64, g32 - 1, g35 + 1, g33 - 64, g36);
															// branch -> 0xb03c8
														}
													}
												}
											}
											// 0xb03c8
											if (g17 >= 1) {
												// 0xb03d0
												if (__asm_rlwinm_(v50, 0, 25, 25) == 0) {
													// 0xb03d8
													v76 = *(int32_t *)(g23 - 0x77ac);
													if (*(int32_t *)(g19 + 0x55ec * *(int32_t *)v76 + 460) != 0) {
														// 0xb03f4
														*(int32_t *)g28 = g17 - 1;
														v90 = *(int32_t *)g28;
														if (v90 <= 199) {
															// 0xb0408
															v91 = *(int32_t *)(g23 - 0x7754) + 232 * v90;
															g31 = v91;
															if (*(int32_t *)(v91 + 160) % 2 == 0) {
																// 0xb0420
																v95 = *(int32_t *)(v91 + 224);
																if (v95 != 0) {
																	// 0xb042c
																	g34 = v91 + 84;
																	g27 = g36 + *(int32_t *)(v91 + 60);
																	g26 = g33 + *(int32_t *)(v91 + 56) - *(int32_t *)(v95 + 496);
																	function_c9b28();
																	if (*(int32_t *)g28 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
																		// 0xb0460
																		v77 = g31;
																		v96 = *(int32_t *)(*(int32_t *)(v77 + 224) + 492);
																		g13 = 8;
																		function_507f4(233, g26, g27, v77 + 84, *(int32_t *)(v77 + 104), v96, 0);
																		// branch -> 0xb0488
																	}
																	// 0xb0488
																	function_c9b70((int32_t *)(g31 + 84));
																	function_aefc4(g32, g35, g26, g27, *(int32_t *)g28, 0, 8);
																	if (g20 != 0) {
																		// 0xb04b8
																		if (*(int32_t *)(g31 + 108) != 0) {
																			// 0xb04c4
																			function_afc30(g29 - 64, g32 - 1, g35 + 1, g33 - 64, g36);
																			// branch -> 0xb04dc
																		}
																	}
																}
															}
														}
													}
												} else {
													// 0xb03f4
													*(int32_t *)g28 = g17 - 1;
													v90 = *(int32_t *)g28;
													if (v90 <= 199) {
														// 0xb0408
														v91 = *(int32_t *)(g23 - 0x7754) + 232 * v90;
														g31 = v91;
														if (*(int32_t *)(v91 + 160) % 2 == 0) {
															// 0xb0420
															v95 = *(int32_t *)(v91 + 224);
															if (v95 != 0) {
																// 0xb042c
																g34 = v91 + 84;
																g27 = g36 + *(int32_t *)(v91 + 60);
																g26 = g33 + *(int32_t *)(v91 + 56) - *(int32_t *)(v95 + 496);
																function_c9b28();
																if (*(int32_t *)g28 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
																	// 0xb0460
																	v77 = g31;
																	v96 = *(int32_t *)(*(int32_t *)(v77 + 224) + 492);
																	g13 = 8;
																	function_507f4(233, g26, g27, v77 + 84, *(int32_t *)(v77 + 104), v96, 0);
																	// branch -> 0xb0488
																}
																// 0xb0488
																function_c9b70((int32_t *)(g31 + 84));
																function_aefc4(g32, g35, g26, g27, *(int32_t *)g28, 0, 8);
																if (g20 != 0) {
																	// 0xb04b8
																	if (*(int32_t *)(g31 + 108) != 0) {
																		// 0xb04c4
																		function_afc30(g29 - 64, g32 - 1, g35 + 1, g33 - 64, g36);
																		// branch -> 0xb04dc
																	}
																}
															}
														}
													}
												}
												// 0xb04dc
												if (v50 % 2 != 0) {
													// 0xb04e4
													function_aeb58(g32, g35, g33, g36, 0, 8, 0);
													// branch -> 0xb0504
												}
												// 0xb0504
												if ((0x1000000 * g16 || 0xffffff) >= 0x1ffffff) {
													// 0xb050c
													v78 = g23;
													v97 = *(int32_t *)(v78 - 0x70cc);
													v98 = *(int32_t *)(v78 - 0x7290);
													if (*(int32_t *)v98 < (int32_t) * (char *)v97) {
														// 0xb0528
														function_afa48(g32, g35, g33, g36, 0, 0, 8);
														// branch -> 0xb0548
													}
												}
												// 0xb0548
												v79 = g25;
												v87 = 0x1000000 * v79;
												v92 = v87 / 0x1000000;
												if ((v87 || 0xffffff) >= 0x1ffffff) {
													// 0xb0550
													v88 = v92 - 1;
													g27 = v88;
													v93 = *(int32_t *)(g23 - 0x7690) + 368 * v88;
													g32 = v93;
													if (*(int32_t *)(v93 + 52) != 0) {
														// 0xb0570
														if (v79 <= 127) {
															// 0xb0578
															g34 = *(int32_t *)(v93 + 24);
															v80 = function_c9948();
															g28 = v80;
															v81 = g32;
															if (v80 == 0) {
																// 0xb0588
																function_c9acc(*(int32_t *)(v81 + 24));
																// branch -> 0xb0634
															} else {
																// 0xb0594
																v99 = *(int32_t *)(v81 + 32);
																g11 = v99;
																if (v99 >= 1) {
																	// 0xb05a0
																	if (function_4d794(v80) > 50) {
																		// 0xb05a0
																		// branch -> 0xb05c4
																	} else {
																		// 0xb05b0
																		v89 = function_4d794(g28);
																		v82 = g32;
																		v100 = *(int32_t *)(v82 + 32);
																		g40 = v100;
																		if (v100 <= v89) {
																			// 0xb05d0
																			v83 = g27;
																			v94 = g33 - *(int32_t *)(v82 + 40);
																			g27 = v94;
																			v85 = v94;
																			v86 = v82;
																			if (v83 == (int32_t) * (char *)*(int32_t *)(g23 - 0x7748)) {
																				// 0xb05ec
																				g37 = v94;
																				g41 = *(int32_t *)(v82 + 36);
																				v84 = g36;
																				g38 = v84;
																				g42 = 0;
																				g13 = 8;
																				CelDrawHdrClrHL(181, v94, v84, *(int32_t *)(v82 + 24), v100);
																				v85 = g27;
																				v86 = g32;
																				// branch -> 0xb060c
																			}
																			// 0xb060c
																			v101 = *(int32_t *)(v86 + 32);
																			v102 = *(int32_t *)(v86 + 36);
																			function_4e998(v85, g36, *(int32_t *)(v86 + 24), v101, v102, 0, 8);
																			function_c9acc(*(int32_t *)(g32 + 24));
																			// branch -> 0xb0634
																			// Detected a possible infinite recursion (goto support failed); quitting...
																		}
																	}
																	// Detected a possible infinite recursion (goto support failed); quitting...
																}
																// Detected a possible infinite recursion (goto support failed); quitting...
															}
															// Detected a possible infinite recursion (goto support failed); quitting...
														}
													}
												}
												// Detected a possible infinite recursion (goto support failed); quitting...
											}
											// 0xb04dc
											if (v50 % 2 != 0) {
												// 0xb04e4
												function_aeb58(g32, g35, g33, g36, 0, 8, 0);
												// branch -> 0xb0504
											}
											// 0xb0504
											if ((0x1000000 * g16 || 0xffffff) >= 0x1ffffff) {
												// 0xb050c
												v78 = g23;
												v97 = *(int32_t *)(v78 - 0x70cc);
												v98 = *(int32_t *)(v78 - 0x7290);
												if (*(int32_t *)v98 < (int32_t) * (char *)v97) {
													// 0xb0528
													function_afa48(g32, g35, g33, g36, 0, 0, 8);
													// branch -> 0xb0548
												}
											}
											// 0xb0548
											v79 = g25;
											v87 = 0x1000000 * v79;
											v92 = v87 / 0x1000000;
											if ((v87 || 0xffffff) >= 0x1ffffff) {
												// 0xb0550
												v88 = v92 - 1;
												g27 = v88;
												v93 = *(int32_t *)(g23 - 0x7690) + 368 * v88;
												g32 = v93;
												if (*(int32_t *)(v93 + 52) != 0) {
													// 0xb0570
													if (v79 <= 127) {
														// 0xb0578
														g34 = *(int32_t *)(v93 + 24);
														v80 = function_c9948();
														g28 = v80;
														v81 = g32;
														if (v80 == 0) {
															// 0xb0588
															function_c9acc(*(int32_t *)(v81 + 24));
															// branch -> 0xb0634
														} else {
															// 0xb0594
															v99 = *(int32_t *)(v81 + 32);
															g11 = v99;
															if (v99 >= 1) {
																// 0xb05a0
																if (function_4d794(v80) > 50) {
																	// 0xb05a0
																	// branch -> 0xb05c4
																} else {
																	// 0xb05b0
																	v89 = function_4d794(g28);
																	v82 = g32;
																	v100 = *(int32_t *)(v82 + 32);
																	g40 = v100;
																	if (v100 <= v89) {
																		// 0xb05d0
																		v83 = g27;
																		v94 = g33 - *(int32_t *)(v82 + 40);
																		g27 = v94;
																		v85 = v94;
																		v86 = v82;
																		if (v83 == (int32_t) * (char *)*(int32_t *)(g23 - 0x7748)) {
																			// 0xb05ec
																			g37 = v94;
																			g41 = *(int32_t *)(v82 + 36);
																			v84 = g36;
																			g38 = v84;
																			g42 = 0;
																			g13 = 8;
																			CelDrawHdrClrHL(181, v94, v84, *(int32_t *)(v82 + 24), v100);
																			v85 = g27;
																			v86 = g32;
																			// branch -> 0xb060c
																		}
																		// 0xb060c
																		v101 = *(int32_t *)(v86 + 32);
																		v102 = *(int32_t *)(v86 + 36);
																		function_4e998(v85, g36, *(int32_t *)(v86 + 24), v101, v102, 0, 8);
																		function_c9acc(*(int32_t *)(g32 + 24));
																		// branch -> 0xb0634
																		// Detected a possible infinite recursion (goto support failed); quitting...
																	}
																}
																// Detected a possible infinite recursion (goto support failed); quitting...
															}
															// Detected a possible infinite recursion (goto support failed); quitting...
														}
														// Detected a possible infinite recursion (goto support failed); quitting...
													}
												}
											}
											// Detected a possible infinite recursion (goto support failed); quitting...
										} else {
											v30 = v29;
										}
									}
									// 0xb00ac
									function_c9acc(*(int32_t *)(v30 + 24));
									// branch -> 0xb011c
									// 0xb011c
									v50 = v13;
									g30 = v50;
									if (__asm_rlwinm_(v50, 0, 26, 26) != 0) {
										// 0xb0128
										v42 = -1 - (int32_t)v16;
										if (v42 <= 3) {
											// 0xb0140
											v51 = g19 + 0x55ec * v42;
											v52 = g36 + *(int32_t *)(v51 + 100);
											v53 = g33 + *(int32_t *)(v51 + 96) - *(int32_t *)(v51 + 148);
											v69 = *(int32_t *)(v51 + 140);
											g13 = *(int32_t *)(v51 + 144);
											function_af440(v42, g32, g35 - 1, v53, v52, *(int32_t *)(v51 + 124), v69, 0, 8);
											if (g20 != 0) {
												// 0xb0190
												v70 = *(int32_t *)(g31 + 152);
												if (v70 != 0) {
													// 0xb019c
													if (v70 == 2) {
														// 0xb01a4
														function_afc30(g29 - 0x3060, g32 - 2, g35 + 1, g33 - 96, g36 - 16);
														// branch -> 0xb01bc
													}
													// 0xb01bc
													function_afc30(g29 - 64, g32 - 1, g35 + 1, g33 - 64, g36);
													// branch -> 0xb01d4
												}
											}
										}
									}
									// 0xb01d4
									if (__asm_rlwinm_(v50, 0, 27, 27) != 0) {
										// 0xb01dc
										if (__asm_rlwinm_(v50, 0, 25, 25) == 0) {
											// 0xb01e4
											v71 = *(int32_t *)(g23 - 0x77ac);
											if (*(int32_t *)(g19 + 0x55ec * *(int32_t *)v71 + 460) != 0) {
												// 0xb0200
												v34 = g21;
												if (v34 <= 0xffffffff) {
													// 0xb0208
													*(int32_t *)g28 = -1 - v34;
													v54 = *(int32_t *)g28;
													if (v54 <= 199) {
														// 0xb0220
														v55 = *(int32_t *)(g23 - 0x7754) + 232 * v54;
														g31 = v55;
														if (*(int32_t *)(v55 + 160) % 2 == 0) {
															// 0xb0238
															v72 = *(int32_t *)(v55 + 224);
															if (v72 != 0) {
																// 0xb0244
																g34 = v55 + 84;
																g27 = g36 + *(int32_t *)(v55 + 60);
																g26 = g33 + *(int32_t *)(v55 + 56) - *(int32_t *)(v72 + 496);
																function_c9b28();
																if (*(int32_t *)g28 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
																	// 0xb0278
																	v35 = g31;
																	v73 = *(int32_t *)(*(int32_t *)(v35 + 224) + 492);
																	g13 = 8;
																	function_507f4(233, g26, g27, v35 + 84, *(int32_t *)(v35 + 104), v73, 0);
																	// branch -> 0xb02a0
																}
																// 0xb02a0
																function_c9b70((int32_t *)(g31 + 84));
																function_aefc4(g32, g35, g26, g27, *(int32_t *)g28, 0, 8);
																if (g20 != 0) {
																	// 0xb02d0
																	if (*(int32_t *)(g31 + 108) != 0) {
																		// 0xb02dc
																		function_afc30(g29 - 64, g32 - 1, g35 + 1, g33 - 64, g36);
																		// branch -> 0xb02f4
																	}
																}
															}
														}
													}
												}
											}
										} else {
											// 0xb0200
											v34 = g21;
											if (v34 <= 0xffffffff) {
												// 0xb0208
												*(int32_t *)g28 = -1 - v34;
												v54 = *(int32_t *)g28;
												if (v54 <= 199) {
													// 0xb0220
													v55 = *(int32_t *)(g23 - 0x7754) + 232 * v54;
													g31 = v55;
													if (*(int32_t *)(v55 + 160) % 2 == 0) {
														// 0xb0238
														v72 = *(int32_t *)(v55 + 224);
														if (v72 != 0) {
															// 0xb0244
															g34 = v55 + 84;
															g27 = g36 + *(int32_t *)(v55 + 60);
															g26 = g33 + *(int32_t *)(v55 + 56) - *(int32_t *)(v72 + 496);
															function_c9b28();
															if (*(int32_t *)g28 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
																// 0xb0278
																v35 = g31;
																v73 = *(int32_t *)(*(int32_t *)(v35 + 224) + 492);
																g13 = 8;
																function_507f4(233, g26, g27, v35 + 84, *(int32_t *)(v35 + 104), v73, 0);
																// branch -> 0xb02a0
															}
															// 0xb02a0
															function_c9b70((int32_t *)(g31 + 84));
															function_aefc4(g32, g35, g26, g27, *(int32_t *)g28, 0, 8);
															if (g20 != 0) {
																// 0xb02d0
																if (*(int32_t *)(g31 + 108) != 0) {
																	// 0xb02dc
																	function_afc30(g29 - 64, g32 - 1, g35 + 1, g33 - 64, g36);
																	// branch -> 0xb02f4
																}
															}
														}
													}
												}
											}
										}
										// 0xb02f4
										if (__asm_rlwinm_(v50, 0, 29, 29) != 0) {
											// 0xb02fc
											function_af6d0(g32, g35, g33, g36, 0, 8, 1);
											// branch -> 0xb031c
										}
										// 0xb031c
										v43 = 0x1000000 * g18;
										if (v43 >= 0 && (v43 || 0xffffff) >= 0x1ffffff) {
											// 0xb0324
											v44 = v43 / 0x1000000 - 1;
											if (v44 <= 3) {
												// 0xb0334
												v56 = g19 + 0x55ec * v44;
												v57 = g36 + *(int32_t *)(v56 + 100);
												v58 = g33 + *(int32_t *)(v56 + 96) - *(int32_t *)(v56 + 148);
												v74 = *(int32_t *)(v56 + 140);
												g13 = *(int32_t *)(v56 + 144);
												function_af440(v44, g32, g35, v58, v57, *(int32_t *)(v56 + 124), v74, 0, 8);
												if (g20 != 0) {
													// 0xb0384
													v75 = *(int32_t *)(g31 + 152);
													if (v75 != 0) {
														// 0xb0390
														if (v75 == 2) {
															// 0xb0398
															function_afc30(g29 - 0x3060, g32 - 2, g35 + 1, g33 - 96, g36 - 16);
															// branch -> 0xb03b0
														}
														// 0xb03b0
														function_afc30(g29 - 64, g32 - 1, g35 + 1, g33 - 64, g36);
														// branch -> 0xb03c8
													}
												}
											}
										}
										// 0xb03c8
										if (g17 >= 1) {
											// 0xb03d0
											if (__asm_rlwinm_(v50, 0, 25, 25) == 0) {
												// 0xb03d8
												v76 = *(int32_t *)(g23 - 0x77ac);
												if (*(int32_t *)(g19 + 0x55ec * *(int32_t *)v76 + 460) != 0) {
													// 0xb03f4
													*(int32_t *)g28 = g17 - 1;
													v90 = *(int32_t *)g28;
													if (v90 <= 199) {
														// 0xb0408
														v91 = *(int32_t *)(g23 - 0x7754) + 232 * v90;
														g31 = v91;
														if (*(int32_t *)(v91 + 160) % 2 == 0) {
															// 0xb0420
															v95 = *(int32_t *)(v91 + 224);
															if (v95 != 0) {
																// 0xb042c
																g34 = v91 + 84;
																g27 = g36 + *(int32_t *)(v91 + 60);
																g26 = g33 + *(int32_t *)(v91 + 56) - *(int32_t *)(v95 + 496);
																function_c9b28();
																if (*(int32_t *)g28 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
																	// 0xb0460
																	v77 = g31;
																	v96 = *(int32_t *)(*(int32_t *)(v77 + 224) + 492);
																	g13 = 8;
																	function_507f4(233, g26, g27, v77 + 84, *(int32_t *)(v77 + 104), v96, 0);
																	// branch -> 0xb0488
																}
																// 0xb0488
																function_c9b70((int32_t *)(g31 + 84));
																function_aefc4(g32, g35, g26, g27, *(int32_t *)g28, 0, 8);
																if (g20 != 0) {
																	// 0xb04b8
																	if (*(int32_t *)(g31 + 108) != 0) {
																		// 0xb04c4
																		function_afc30(g29 - 64, g32 - 1, g35 + 1, g33 - 64, g36);
																		// branch -> 0xb04dc
																	}
																}
															}
														}
													}
												}
											} else {
												// 0xb03f4
												*(int32_t *)g28 = g17 - 1;
												v90 = *(int32_t *)g28;
												if (v90 <= 199) {
													// 0xb0408
													v91 = *(int32_t *)(g23 - 0x7754) + 232 * v90;
													g31 = v91;
													if (*(int32_t *)(v91 + 160) % 2 == 0) {
														// 0xb0420
														v95 = *(int32_t *)(v91 + 224);
														if (v95 != 0) {
															// 0xb042c
															g34 = v91 + 84;
															g27 = g36 + *(int32_t *)(v91 + 60);
															g26 = g33 + *(int32_t *)(v91 + 56) - *(int32_t *)(v95 + 496);
															function_c9b28();
															if (*(int32_t *)g28 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
																// 0xb0460
																v77 = g31;
																v96 = *(int32_t *)(*(int32_t *)(v77 + 224) + 492);
																g13 = 8;
																function_507f4(233, g26, g27, v77 + 84, *(int32_t *)(v77 + 104), v96, 0);
																// branch -> 0xb0488
															}
															// 0xb0488
															function_c9b70((int32_t *)(g31 + 84));
															function_aefc4(g32, g35, g26, g27, *(int32_t *)g28, 0, 8);
															if (g20 != 0) {
																// 0xb04b8
																if (*(int32_t *)(g31 + 108) != 0) {
																	// 0xb04c4
																	function_afc30(g29 - 64, g32 - 1, g35 + 1, g33 - 64, g36);
																	// branch -> 0xb04dc
																}
															}
														}
													}
												}
											}
											// 0xb04dc
											if (v50 % 2 != 0) {
												// 0xb04e4
												function_aeb58(g32, g35, g33, g36, 0, 8, 0);
												// branch -> 0xb0504
											}
											// 0xb0504
											if ((0x1000000 * g16 || 0xffffff) >= 0x1ffffff) {
												// 0xb050c
												v78 = g23;
												v97 = *(int32_t *)(v78 - 0x70cc);
												v98 = *(int32_t *)(v78 - 0x7290);
												if (*(int32_t *)v98 < (int32_t) * (char *)v97) {
													// 0xb0528
													function_afa48(g32, g35, g33, g36, 0, 0, 8);
													// branch -> 0xb0548
												}
											}
											// 0xb0548
											v79 = g25;
											v87 = 0x1000000 * v79;
											v92 = v87 / 0x1000000;
											if ((v87 || 0xffffff) >= 0x1ffffff) {
												// 0xb0550
												v88 = v92 - 1;
												g27 = v88;
												v93 = *(int32_t *)(g23 - 0x7690) + 368 * v88;
												g32 = v93;
												if (*(int32_t *)(v93 + 52) != 0) {
													// 0xb0570
													if (v79 <= 127) {
														// 0xb0578
														g34 = *(int32_t *)(v93 + 24);
														v80 = function_c9948();
														g28 = v80;
														v81 = g32;
														if (v80 == 0) {
															// 0xb0588
															function_c9acc(*(int32_t *)(v81 + 24));
															// branch -> 0xb0634
														} else {
															// 0xb0594
															v99 = *(int32_t *)(v81 + 32);
															g11 = v99;
															if (v99 >= 1) {
																// 0xb05a0
																if (function_4d794(v80) > 50) {
																	// 0xb05a0
																	// branch -> 0xb05c4
																} else {
																	// 0xb05b0
																	v89 = function_4d794(g28);
																	v82 = g32;
																	v100 = *(int32_t *)(v82 + 32);
																	g40 = v100;
																	if (v100 <= v89) {
																		// 0xb05d0
																		v83 = g27;
																		v94 = g33 - *(int32_t *)(v82 + 40);
																		g27 = v94;
																		v85 = v94;
																		v86 = v82;
																		if (v83 == (int32_t) * (char *)*(int32_t *)(g23 - 0x7748)) {
																			// 0xb05ec
																			g37 = v94;
																			g41 = *(int32_t *)(v82 + 36);
																			v84 = g36;
																			g38 = v84;
																			g42 = 0;
																			g13 = 8;
																			CelDrawHdrClrHL(181, v94, v84, *(int32_t *)(v82 + 24), v100);
																			v85 = g27;
																			v86 = g32;
																			// branch -> 0xb060c
																		}
																		// 0xb060c
																		v101 = *(int32_t *)(v86 + 32);
																		v102 = *(int32_t *)(v86 + 36);
																		function_4e998(v85, g36, *(int32_t *)(v86 + 24), v101, v102, 0, 8);
																		function_c9acc(*(int32_t *)(g32 + 24));
																		// branch -> 0xb0634
																		// Detected a possible infinite recursion (goto support failed); quitting...
																	}
																}
																// Detected a possible infinite recursion (goto support failed); quitting...
															}
															// Detected a possible infinite recursion (goto support failed); quitting...
														}
														// Detected a possible infinite recursion (goto support failed); quitting...
													}
												}
											}
											// Detected a possible infinite recursion (goto support failed); quitting...
										}
										// 0xb04dc
										if (v50 % 2 != 0) {
											// 0xb04e4
											function_aeb58(g32, g35, g33, g36, 0, 8, 0);
											// branch -> 0xb0504
										}
										// 0xb0504
										if ((0x1000000 * g16 || 0xffffff) >= 0x1ffffff) {
											// 0xb050c
											v78 = g23;
											v97 = *(int32_t *)(v78 - 0x70cc);
											v98 = *(int32_t *)(v78 - 0x7290);
											if (*(int32_t *)v98 < (int32_t) * (char *)v97) {
												// 0xb0528
												function_afa48(g32, g35, g33, g36, 0, 0, 8);
												// branch -> 0xb0548
											}
										}
										// 0xb0548
										v79 = g25;
										v87 = 0x1000000 * v79;
										v92 = v87 / 0x1000000;
										if ((v87 || 0xffffff) >= 0x1ffffff) {
											// 0xb0550
											v88 = v92 - 1;
											g27 = v88;
											v93 = *(int32_t *)(g23 - 0x7690) + 368 * v88;
											g32 = v93;
											if (*(int32_t *)(v93 + 52) != 0) {
												// 0xb0570
												if (v79 <= 127) {
													// 0xb0578
													g34 = *(int32_t *)(v93 + 24);
													v80 = function_c9948();
													g28 = v80;
													v81 = g32;
													if (v80 == 0) {
														// 0xb0588
														function_c9acc(*(int32_t *)(v81 + 24));
														// branch -> 0xb0634
													} else {
														// 0xb0594
														v99 = *(int32_t *)(v81 + 32);
														g11 = v99;
														if (v99 >= 1) {
															// 0xb05a0
															if (function_4d794(v80) > 50) {
																// 0xb05a0
																// branch -> 0xb05c4
															} else {
																// 0xb05b0
																v89 = function_4d794(g28);
																v82 = g32;
																v100 = *(int32_t *)(v82 + 32);
																g40 = v100;
																if (v100 <= v89) {
																	// 0xb05d0
																	v83 = g27;
																	v94 = g33 - *(int32_t *)(v82 + 40);
																	g27 = v94;
																	v85 = v94;
																	v86 = v82;
																	if (v83 == (int32_t) * (char *)*(int32_t *)(g23 - 0x7748)) {
																		// 0xb05ec
																		g37 = v94;
																		g41 = *(int32_t *)(v82 + 36);
																		v84 = g36;
																		g38 = v84;
																		g42 = 0;
																		g13 = 8;
																		CelDrawHdrClrHL(181, v94, v84, *(int32_t *)(v82 + 24), v100);
																		v85 = g27;
																		v86 = g32;
																		// branch -> 0xb060c
																	}
																	// 0xb060c
																	v101 = *(int32_t *)(v86 + 32);
																	v102 = *(int32_t *)(v86 + 36);
																	function_4e998(v85, g36, *(int32_t *)(v86 + 24), v101, v102, 0, 8);
																	function_c9acc(*(int32_t *)(g32 + 24));
																	// branch -> 0xb0634
																	// Detected a possible infinite recursion (goto support failed); quitting...
																}
															}
															// Detected a possible infinite recursion (goto support failed); quitting...
														}
														// Detected a possible infinite recursion (goto support failed); quitting...
													}
													// Detected a possible infinite recursion (goto support failed); quitting...
												}
											}
										}
										// Detected a possible infinite recursion (goto support failed); quitting...
									}
									// 0xb02f4
									if (__asm_rlwinm_(v50, 0, 29, 29) != 0) {
										// 0xb02fc
										function_af6d0(g32, g35, g33, g36, 0, 8, 1);
										// branch -> 0xb031c
									}
									// 0xb031c
									v43 = 0x1000000 * g18;
									if (v43 >= 0 && (v43 || 0xffffff) >= 0x1ffffff) {
										// 0xb0324
										v44 = v43 / 0x1000000 - 1;
										if (v44 <= 3) {
											// 0xb0334
											v56 = g19 + 0x55ec * v44;
											v57 = g36 + *(int32_t *)(v56 + 100);
											v58 = g33 + *(int32_t *)(v56 + 96) - *(int32_t *)(v56 + 148);
											v74 = *(int32_t *)(v56 + 140);
											g13 = *(int32_t *)(v56 + 144);
											function_af440(v44, g32, g35, v58, v57, *(int32_t *)(v56 + 124), v74, 0, 8);
											if (g20 != 0) {
												// 0xb0384
												v75 = *(int32_t *)(g31 + 152);
												if (v75 != 0) {
													// 0xb0390
													if (v75 == 2) {
														// 0xb0398
														function_afc30(g29 - 0x3060, g32 - 2, g35 + 1, g33 - 96, g36 - 16);
														// branch -> 0xb03b0
													}
													// 0xb03b0
													function_afc30(g29 - 64, g32 - 1, g35 + 1, g33 - 64, g36);
													// branch -> 0xb03c8
												}
											}
										}
									}
									// 0xb03c8
									if (g17 >= 1) {
										// 0xb03d0
										if (__asm_rlwinm_(v50, 0, 25, 25) == 0) {
											// 0xb03d8
											v76 = *(int32_t *)(g23 - 0x77ac);
											if (*(int32_t *)(g19 + 0x55ec * *(int32_t *)v76 + 460) != 0) {
												// 0xb03f4
												*(int32_t *)g28 = g17 - 1;
												v90 = *(int32_t *)g28;
												if (v90 <= 199) {
													// 0xb0408
													v91 = *(int32_t *)(g23 - 0x7754) + 232 * v90;
													g31 = v91;
													if (*(int32_t *)(v91 + 160) % 2 == 0) {
														// 0xb0420
														v95 = *(int32_t *)(v91 + 224);
														if (v95 != 0) {
															// 0xb042c
															g34 = v91 + 84;
															g27 = g36 + *(int32_t *)(v91 + 60);
															g26 = g33 + *(int32_t *)(v91 + 56) - *(int32_t *)(v95 + 496);
															function_c9b28();
															if (*(int32_t *)g28 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
																// 0xb0460
																v77 = g31;
																v96 = *(int32_t *)(*(int32_t *)(v77 + 224) + 492);
																g13 = 8;
																function_507f4(233, g26, g27, v77 + 84, *(int32_t *)(v77 + 104), v96, 0);
																// branch -> 0xb0488
															}
															// 0xb0488
															function_c9b70((int32_t *)(g31 + 84));
															function_aefc4(g32, g35, g26, g27, *(int32_t *)g28, 0, 8);
															if (g20 != 0) {
																// 0xb04b8
																if (*(int32_t *)(g31 + 108) != 0) {
																	// 0xb04c4
																	function_afc30(g29 - 64, g32 - 1, g35 + 1, g33 - 64, g36);
																	// branch -> 0xb04dc
																}
															}
														}
													}
												}
											}
										} else {
											// 0xb03f4
											*(int32_t *)g28 = g17 - 1;
											v90 = *(int32_t *)g28;
											if (v90 <= 199) {
												// 0xb0408
												v91 = *(int32_t *)(g23 - 0x7754) + 232 * v90;
												g31 = v91;
												if (*(int32_t *)(v91 + 160) % 2 == 0) {
													// 0xb0420
													v95 = *(int32_t *)(v91 + 224);
													if (v95 != 0) {
														// 0xb042c
														g34 = v91 + 84;
														g27 = g36 + *(int32_t *)(v91 + 60);
														g26 = g33 + *(int32_t *)(v91 + 56) - *(int32_t *)(v95 + 496);
														function_c9b28();
														if (*(int32_t *)g28 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
															// 0xb0460
															v77 = g31;
															v96 = *(int32_t *)(*(int32_t *)(v77 + 224) + 492);
															g13 = 8;
															function_507f4(233, g26, g27, v77 + 84, *(int32_t *)(v77 + 104), v96, 0);
															// branch -> 0xb0488
														}
														// 0xb0488
														function_c9b70((int32_t *)(g31 + 84));
														function_aefc4(g32, g35, g26, g27, *(int32_t *)g28, 0, 8);
														if (g20 != 0) {
															// 0xb04b8
															if (*(int32_t *)(g31 + 108) != 0) {
																// 0xb04c4
																function_afc30(g29 - 64, g32 - 1, g35 + 1, g33 - 64, g36);
																// branch -> 0xb04dc
															}
														}
													}
												}
											}
										}
										// 0xb04dc
										if (v50 % 2 != 0) {
											// 0xb04e4
											function_aeb58(g32, g35, g33, g36, 0, 8, 0);
											// branch -> 0xb0504
										}
										// 0xb0504
										if ((0x1000000 * g16 || 0xffffff) >= 0x1ffffff) {
											// 0xb050c
											v78 = g23;
											v97 = *(int32_t *)(v78 - 0x70cc);
											v98 = *(int32_t *)(v78 - 0x7290);
											if (*(int32_t *)v98 < (int32_t) * (char *)v97) {
												// 0xb0528
												function_afa48(g32, g35, g33, g36, 0, 0, 8);
												// branch -> 0xb0548
											}
										}
										// 0xb0548
										v79 = g25;
										v87 = 0x1000000 * v79;
										v92 = v87 / 0x1000000;
										if ((v87 || 0xffffff) >= 0x1ffffff) {
											// 0xb0550
											v88 = v92 - 1;
											g27 = v88;
											v93 = *(int32_t *)(g23 - 0x7690) + 368 * v88;
											g32 = v93;
											if (*(int32_t *)(v93 + 52) != 0) {
												// 0xb0570
												if (v79 <= 127) {
													// 0xb0578
													g34 = *(int32_t *)(v93 + 24);
													v80 = function_c9948();
													g28 = v80;
													v81 = g32;
													if (v80 == 0) {
														// 0xb0588
														function_c9acc(*(int32_t *)(v81 + 24));
														// branch -> 0xb0634
													} else {
														// 0xb0594
														v99 = *(int32_t *)(v81 + 32);
														g11 = v99;
														if (v99 >= 1) {
															// 0xb05a0
															if (function_4d794(v80) > 50) {
																// 0xb05a0
																// branch -> 0xb05c4
															} else {
																// 0xb05b0
																v89 = function_4d794(g28);
																v82 = g32;
																v100 = *(int32_t *)(v82 + 32);
																g40 = v100;
																if (v100 <= v89) {
																	// 0xb05d0
																	v83 = g27;
																	v94 = g33 - *(int32_t *)(v82 + 40);
																	g27 = v94;
																	v85 = v94;
																	v86 = v82;
																	if (v83 == (int32_t) * (char *)*(int32_t *)(g23 - 0x7748)) {
																		// 0xb05ec
																		g37 = v94;
																		g41 = *(int32_t *)(v82 + 36);
																		v84 = g36;
																		g38 = v84;
																		g42 = 0;
																		g13 = 8;
																		CelDrawHdrClrHL(181, v94, v84, *(int32_t *)(v82 + 24), v100);
																		v85 = g27;
																		v86 = g32;
																		// branch -> 0xb060c
																	}
																	// 0xb060c
																	v101 = *(int32_t *)(v86 + 32);
																	v102 = *(int32_t *)(v86 + 36);
																	function_4e998(v85, g36, *(int32_t *)(v86 + 24), v101, v102, 0, 8);
																	function_c9acc(*(int32_t *)(g32 + 24));
																	// branch -> 0xb0634
																	// Detected a possible infinite recursion (goto support failed); quitting...
																}
															}
															// Detected a possible infinite recursion (goto support failed); quitting...
														}
														// Detected a possible infinite recursion (goto support failed); quitting...
													}
													// Detected a possible infinite recursion (goto support failed); quitting...
												}
											}
										}
										// Detected a possible infinite recursion (goto support failed); quitting...
									}
									// 0xb04dc
									if (v50 % 2 != 0) {
										// 0xb04e4
										function_aeb58(g32, g35, g33, g36, 0, 8, 0);
										// branch -> 0xb0504
									}
									// 0xb0504
									if ((0x1000000 * g16 || 0xffffff) >= 0x1ffffff) {
										// 0xb050c
										v78 = g23;
										v97 = *(int32_t *)(v78 - 0x70cc);
										v98 = *(int32_t *)(v78 - 0x7290);
										if (*(int32_t *)v98 < (int32_t) * (char *)v97) {
											// 0xb0528
											function_afa48(g32, g35, g33, g36, 0, 0, 8);
											// branch -> 0xb0548
										}
									}
									// 0xb0548
									v79 = g25;
									v87 = 0x1000000 * v79;
									v92 = v87 / 0x1000000;
									if ((v87 || 0xffffff) >= 0x1ffffff) {
										// 0xb0550
										v88 = v92 - 1;
										g27 = v88;
										v93 = *(int32_t *)(g23 - 0x7690) + 368 * v88;
										g32 = v93;
										if (*(int32_t *)(v93 + 52) != 0) {
											// 0xb0570
											if (v79 <= 127) {
												// 0xb0578
												g34 = *(int32_t *)(v93 + 24);
												v80 = function_c9948();
												g28 = v80;
												v81 = g32;
												if (v80 == 0) {
													// 0xb0588
													function_c9acc(*(int32_t *)(v81 + 24));
													// branch -> 0xb0634
												} else {
													// 0xb0594
													v99 = *(int32_t *)(v81 + 32);
													g11 = v99;
													if (v99 >= 1) {
														// 0xb05a0
														if (function_4d794(v80) > 50) {
															// 0xb05a0
															// branch -> 0xb05c4
														} else {
															// 0xb05b0
															v89 = function_4d794(g28);
															v82 = g32;
															v100 = *(int32_t *)(v82 + 32);
															g40 = v100;
															if (v100 <= v89) {
																// 0xb05d0
																v83 = g27;
																v94 = g33 - *(int32_t *)(v82 + 40);
																g27 = v94;
																v85 = v94;
																v86 = v82;
																if (v83 == (int32_t) * (char *)*(int32_t *)(g23 - 0x7748)) {
																	// 0xb05ec
																	g37 = v94;
																	g41 = *(int32_t *)(v82 + 36);
																	v84 = g36;
																	g38 = v84;
																	g42 = 0;
																	g13 = 8;
																	CelDrawHdrClrHL(181, v94, v84, *(int32_t *)(v82 + 24), v100);
																	v85 = g27;
																	v86 = g32;
																	// branch -> 0xb060c
																}
																// 0xb060c
																v101 = *(int32_t *)(v86 + 32);
																v102 = *(int32_t *)(v86 + 36);
																function_4e998(v85, g36, *(int32_t *)(v86 + 24), v101, v102, 0, 8);
																function_c9acc(*(int32_t *)(g32 + 24));
																// branch -> 0xb0634
																// Detected a possible infinite recursion (goto support failed); quitting...
															}
														}
														// Detected a possible infinite recursion (goto support failed); quitting...
													}
													// Detected a possible infinite recursion (goto support failed); quitting...
												}
												// Detected a possible infinite recursion (goto support failed); quitting...
											}
										}
									}
									// Detected a possible infinite recursion (goto support failed); quitting...
								}
								// 0xb00ac
								function_c9acc(*(int32_t *)(v30 + 24));
								// branch -> 0xb011c
							}
							// 0xb011c
							v50 = v13;
							g30 = v50;
							if (__asm_rlwinm_(v50, 0, 26, 26) != 0) {
								// 0xb0128
								v42 = -1 - (int32_t)v16;
								if (v42 <= 3) {
									// 0xb0140
									v51 = g19 + 0x55ec * v42;
									v52 = g36 + *(int32_t *)(v51 + 100);
									v53 = g33 + *(int32_t *)(v51 + 96) - *(int32_t *)(v51 + 148);
									v69 = *(int32_t *)(v51 + 140);
									g13 = *(int32_t *)(v51 + 144);
									function_af440(v42, g32, g35 - 1, v53, v52, *(int32_t *)(v51 + 124), v69, 0, 8);
									if (g20 != 0) {
										// 0xb0190
										v70 = *(int32_t *)(g31 + 152);
										if (v70 != 0) {
											// 0xb019c
											if (v70 == 2) {
												// 0xb01a4
												function_afc30(g29 - 0x3060, g32 - 2, g35 + 1, g33 - 96, g36 - 16);
												// branch -> 0xb01bc
											}
											// 0xb01bc
											function_afc30(g29 - 64, g32 - 1, g35 + 1, g33 - 64, g36);
											// branch -> 0xb01d4
										}
									}
								}
							}
							// 0xb01d4
							if (__asm_rlwinm_(v50, 0, 27, 27) != 0) {
								// 0xb01dc
								if (__asm_rlwinm_(v50, 0, 25, 25) == 0) {
									// 0xb01e4
									v71 = *(int32_t *)(g23 - 0x77ac);
									if (*(int32_t *)(g19 + 0x55ec * *(int32_t *)v71 + 460) != 0) {
										// 0xb0200
										v34 = g21;
										if (v34 <= 0xffffffff) {
											// 0xb0208
											*(int32_t *)g28 = -1 - v34;
											v54 = *(int32_t *)g28;
											if (v54 <= 199) {
												// 0xb0220
												v55 = *(int32_t *)(g23 - 0x7754) + 232 * v54;
												g31 = v55;
												if (*(int32_t *)(v55 + 160) % 2 == 0) {
													// 0xb0238
													v72 = *(int32_t *)(v55 + 224);
													if (v72 != 0) {
														// 0xb0244
														g34 = v55 + 84;
														g27 = g36 + *(int32_t *)(v55 + 60);
														g26 = g33 + *(int32_t *)(v55 + 56) - *(int32_t *)(v72 + 496);
														function_c9b28();
														if (*(int32_t *)g28 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
															// 0xb0278
															v35 = g31;
															v73 = *(int32_t *)(*(int32_t *)(v35 + 224) + 492);
															g13 = 8;
															function_507f4(233, g26, g27, v35 + 84, *(int32_t *)(v35 + 104), v73, 0);
															// branch -> 0xb02a0
														}
														// 0xb02a0
														function_c9b70((int32_t *)(g31 + 84));
														function_aefc4(g32, g35, g26, g27, *(int32_t *)g28, 0, 8);
														if (g20 != 0) {
															// 0xb02d0
															if (*(int32_t *)(g31 + 108) != 0) {
																// 0xb02dc
																function_afc30(g29 - 64, g32 - 1, g35 + 1, g33 - 64, g36);
																// branch -> 0xb02f4
															}
														}
													}
												}
											}
										}
									}
								} else {
									// 0xb0200
									v34 = g21;
									if (v34 <= 0xffffffff) {
										// 0xb0208
										*(int32_t *)g28 = -1 - v34;
										v54 = *(int32_t *)g28;
										if (v54 <= 199) {
											// 0xb0220
											v55 = *(int32_t *)(g23 - 0x7754) + 232 * v54;
											g31 = v55;
											if (*(int32_t *)(v55 + 160) % 2 == 0) {
												// 0xb0238
												v72 = *(int32_t *)(v55 + 224);
												if (v72 != 0) {
													// 0xb0244
													g34 = v55 + 84;
													g27 = g36 + *(int32_t *)(v55 + 60);
													g26 = g33 + *(int32_t *)(v55 + 56) - *(int32_t *)(v72 + 496);
													function_c9b28();
													if (*(int32_t *)g28 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
														// 0xb0278
														v35 = g31;
														v73 = *(int32_t *)(*(int32_t *)(v35 + 224) + 492);
														g13 = 8;
														function_507f4(233, g26, g27, v35 + 84, *(int32_t *)(v35 + 104), v73, 0);
														// branch -> 0xb02a0
													}
													// 0xb02a0
													function_c9b70((int32_t *)(g31 + 84));
													function_aefc4(g32, g35, g26, g27, *(int32_t *)g28, 0, 8);
													if (g20 != 0) {
														// 0xb02d0
														if (*(int32_t *)(g31 + 108) != 0) {
															// 0xb02dc
															function_afc30(g29 - 64, g32 - 1, g35 + 1, g33 - 64, g36);
															// branch -> 0xb02f4
														}
													}
												}
											}
										}
									}
								}
								// 0xb02f4
								if (__asm_rlwinm_(v50, 0, 29, 29) != 0) {
									// 0xb02fc
									function_af6d0(g32, g35, g33, g36, 0, 8, 1);
									// branch -> 0xb031c
								}
								// 0xb031c
								v43 = 0x1000000 * g18;
								if (v43 >= 0 && (v43 || 0xffffff) >= 0x1ffffff) {
									// 0xb0324
									v44 = v43 / 0x1000000 - 1;
									if (v44 <= 3) {
										// 0xb0334
										v56 = g19 + 0x55ec * v44;
										v57 = g36 + *(int32_t *)(v56 + 100);
										v58 = g33 + *(int32_t *)(v56 + 96) - *(int32_t *)(v56 + 148);
										v74 = *(int32_t *)(v56 + 140);
										g13 = *(int32_t *)(v56 + 144);
										function_af440(v44, g32, g35, v58, v57, *(int32_t *)(v56 + 124), v74, 0, 8);
										if (g20 != 0) {
											// 0xb0384
											v75 = *(int32_t *)(g31 + 152);
											if (v75 != 0) {
												// 0xb0390
												if (v75 == 2) {
													// 0xb0398
													function_afc30(g29 - 0x3060, g32 - 2, g35 + 1, g33 - 96, g36 - 16);
													// branch -> 0xb03b0
												}
												// 0xb03b0
												function_afc30(g29 - 64, g32 - 1, g35 + 1, g33 - 64, g36);
												// branch -> 0xb03c8
											}
										}
									}
								}
								// 0xb03c8
								if (g17 >= 1) {
									// 0xb03d0
									if (__asm_rlwinm_(v50, 0, 25, 25) == 0) {
										// 0xb03d8
										v76 = *(int32_t *)(g23 - 0x77ac);
										if (*(int32_t *)(g19 + 0x55ec * *(int32_t *)v76 + 460) != 0) {
											// 0xb03f4
											*(int32_t *)g28 = g17 - 1;
											v90 = *(int32_t *)g28;
											if (v90 <= 199) {
												// 0xb0408
												v91 = *(int32_t *)(g23 - 0x7754) + 232 * v90;
												g31 = v91;
												if (*(int32_t *)(v91 + 160) % 2 == 0) {
													// 0xb0420
													v95 = *(int32_t *)(v91 + 224);
													if (v95 != 0) {
														// 0xb042c
														g34 = v91 + 84;
														g27 = g36 + *(int32_t *)(v91 + 60);
														g26 = g33 + *(int32_t *)(v91 + 56) - *(int32_t *)(v95 + 496);
														function_c9b28();
														if (*(int32_t *)g28 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
															// 0xb0460
															v77 = g31;
															v96 = *(int32_t *)(*(int32_t *)(v77 + 224) + 492);
															g13 = 8;
															function_507f4(233, g26, g27, v77 + 84, *(int32_t *)(v77 + 104), v96, 0);
															// branch -> 0xb0488
														}
														// 0xb0488
														function_c9b70((int32_t *)(g31 + 84));
														function_aefc4(g32, g35, g26, g27, *(int32_t *)g28, 0, 8);
														if (g20 != 0) {
															// 0xb04b8
															if (*(int32_t *)(g31 + 108) != 0) {
																// 0xb04c4
																function_afc30(g29 - 64, g32 - 1, g35 + 1, g33 - 64, g36);
																// branch -> 0xb04dc
															}
														}
													}
												}
											}
										}
									}
									// 0xb04dc
									if (v50 % 2 != 0) {
										// 0xb04e4
										function_aeb58(g32, g35, g33, g36, 0, 8, 0);
										// branch -> 0xb0504
									}
									// 0xb0504
									if ((0x1000000 * g16 || 0xffffff) >= 0x1ffffff) {
										// 0xb050c
										v78 = g23;
										v97 = *(int32_t *)(v78 - 0x70cc);
										v98 = *(int32_t *)(v78 - 0x7290);
										if (*(int32_t *)v98 < (int32_t) * (char *)v97) {
											// 0xb0528
											function_afa48(g32, g35, g33, g36, 0, 0, 8);
											// branch -> 0xb0548
										}
									}
									// 0xb0548
									v79 = g25;
									v87 = 0x1000000 * v79;
									if ((v87 || 0xffffff) >= 0x1ffffff) {
										// 0xb0550
										v88 = v87 / 0x1000000 - 1;
										g27 = v88;
										v93 = *(int32_t *)(g23 - 0x7690) + 368 * v88;
										g32 = v93;
										if (*(int32_t *)(v93 + 52) != 0) {
											// 0xb0570
											if (v79 <= 127) {
												// 0xb0578
												g34 = *(int32_t *)(v93 + 24);
												v80 = function_c9948();
												g28 = v80;
												v81 = g32;
												if (v80 == 0) {
													// 0xb0588
													function_c9acc(*(int32_t *)(v81 + 24));
													// branch -> 0xb0634
												} else {
													// 0xb0594
													v99 = *(int32_t *)(v81 + 32);
													g11 = v99;
													if (v99 >= 1) {
														// 0xb05a0
														if (function_4d794(v80) > 50) {
															// 0xb05a0
															// branch -> 0xb05c4
														} else {
															// 0xb05b0
															v89 = function_4d794(g28);
															v82 = g32;
															v100 = *(int32_t *)(v82 + 32);
															g40 = v100;
															if (v100 <= v89) {
																// 0xb05d0
																v83 = g27;
																v94 = g33 - *(int32_t *)(v82 + 40);
																g27 = v94;
																v85 = v94;
																v86 = v82;
																if (v83 == (int32_t) * (char *)*(int32_t *)(g23 - 0x7748)) {
																	// 0xb05ec
																	g37 = v94;
																	g41 = *(int32_t *)(v82 + 36);
																	v84 = g36;
																	g38 = v84;
																	g42 = 0;
																	g13 = 8;
																	CelDrawHdrClrHL(181, v94, v84, *(int32_t *)(v82 + 24), v100);
																	v85 = g27;
																	v86 = g32;
																	// branch -> 0xb060c
																}
																// 0xb060c
																v101 = *(int32_t *)(v86 + 32);
																v102 = *(int32_t *)(v86 + 36);
																function_4e998(v85, g36, *(int32_t *)(v86 + 24), v101, v102, 0, 8);
																function_c9acc(*(int32_t *)(g32 + 24));
																// branch -> 0xb0634
																// Detected a possible infinite recursion (goto support failed); quitting...
															}
														}
														// Detected a possible infinite recursion (goto support failed); quitting...
													}
													// Detected a possible infinite recursion (goto support failed); quitting...
												}
												// Detected a possible infinite recursion (goto support failed); quitting...
											}
										}
									}
									// Detected a possible infinite recursion (goto support failed); quitting...
								}
								// Detected a possible infinite recursion (goto support failed); quitting...
							}
							// 0xb02f4
							if (__asm_rlwinm_(v50, 0, 29, 29) != 0) {
								// 0xb02fc
								function_af6d0(g32, g35, g33, g36, 0, 8, 1);
								// branch -> 0xb031c
							}
							// 0xb031c
							v43 = 0x1000000 * g18;
							if (v43 >= 0 && (v43 || 0xffffff) >= 0x1ffffff) {
								// 0xb0324
								v44 = v43 / 0x1000000 - 1;
								if (v44 <= 3) {
									// 0xb0334
									v56 = g19 + 0x55ec * v44;
									v57 = g36 + *(int32_t *)(v56 + 100);
									v58 = g33 + *(int32_t *)(v56 + 96) - *(int32_t *)(v56 + 148);
									v74 = *(int32_t *)(v56 + 140);
									g13 = *(int32_t *)(v56 + 144);
									function_af440(v44, g32, g35, v58, v57, *(int32_t *)(v56 + 124), v74, 0, 8);
									if (g20 != 0) {
										// 0xb0384
										v75 = *(int32_t *)(g31 + 152);
										if (v75 != 0) {
											// 0xb0390
											if (v75 == 2) {
												// 0xb0398
												function_afc30(g29 - 0x3060, g32 - 2, g35 + 1, g33 - 96, g36 - 16);
												// branch -> 0xb03b0
											}
											// 0xb03b0
											function_afc30(g29 - 64, g32 - 1, g35 + 1, g33 - 64, g36);
											// branch -> 0xb03c8
										}
									}
								}
							}
							// 0xb03c8
							if (g17 >= 1) {
								// 0xb03d0
								if (__asm_rlwinm_(v50, 0, 25, 25) == 0) {
									// 0xb03d8
									v76 = *(int32_t *)(g23 - 0x77ac);
									if (*(int32_t *)(g19 + 0x55ec * *(int32_t *)v76 + 460) != 0) {
										// Detected a possible infinite recursion (goto support failed); quitting...
									}
								}
								// Detected a possible infinite recursion (goto support failed); quitting...
							}
							// Detected a possible infinite recursion (goto support failed); quitting...
						}
					}
				}
				// 0xb011c
				v50 = v13;
				g30 = v50;
				if (__asm_rlwinm_(v50, 0, 26, 26) != 0) {
					// 0xb0128
					v42 = -1 - (int32_t)v16;
					if (v42 <= 3) {
						// 0xb0140
						v51 = g19 + 0x55ec * v42;
						v52 = g36 + *(int32_t *)(v51 + 100);
						v53 = g33 + *(int32_t *)(v51 + 96) - *(int32_t *)(v51 + 148);
						v69 = *(int32_t *)(v51 + 140);
						g13 = *(int32_t *)(v51 + 144);
						function_af440(v42, g32, g35 - 1, v53, v52, *(int32_t *)(v51 + 124), v69, 0, 8);
						if (g20 != 0) {
							// 0xb0190
							v70 = *(int32_t *)(g31 + 152);
							if (v70 != 0) {
								// 0xb019c
								if (v70 == 2) {
									// 0xb01a4
									function_afc30(g29 - 0x3060, g32 - 2, g35 + 1, g33 - 96, g36 - 16);
									// branch -> 0xb01bc
								}
								// 0xb01bc
								function_afc30(g29 - 64, g32 - 1, g35 + 1, g33 - 64, g36);
								// branch -> 0xb01d4
							}
						}
					}
				}
				// 0xb01d4
				if (__asm_rlwinm_(v50, 0, 27, 27) != 0) {
					// 0xb01dc
					if (__asm_rlwinm_(v50, 0, 25, 25) == 0) {
						// 0xb01e4
						v71 = *(int32_t *)(g23 - 0x77ac);
						if (*(int32_t *)(g19 + 0x55ec * *(int32_t *)v71 + 460) != 0) {
							// 0xb0200
							v34 = g21;
							if (v34 <= 0xffffffff) {
								// 0xb0208
								*(int32_t *)g28 = -1 - v34;
								v54 = *(int32_t *)g28;
								if (v54 <= 199) {
									// 0xb0220
									v55 = *(int32_t *)(g23 - 0x7754) + 232 * v54;
									g31 = v55;
									if (*(int32_t *)(v55 + 160) % 2 == 0) {
										// 0xb0238
										v72 = *(int32_t *)(v55 + 224);
										if (v72 != 0) {
											// 0xb0244
											g34 = v55 + 84;
											g27 = g36 + *(int32_t *)(v55 + 60);
											g26 = g33 + *(int32_t *)(v55 + 56) - *(int32_t *)(v72 + 496);
											function_c9b28();
											if (*(int32_t *)g28 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
												// 0xb0278
												v35 = g31;
												v73 = *(int32_t *)(*(int32_t *)(v35 + 224) + 492);
												g13 = 8;
												function_507f4(233, g26, g27, v35 + 84, *(int32_t *)(v35 + 104), v73, 0);
												// branch -> 0xb02a0
											}
											// 0xb02a0
											function_c9b70((int32_t *)(g31 + 84));
											function_aefc4(g32, g35, g26, g27, *(int32_t *)g28, 0, 8);
											if (g20 != 0) {
												// 0xb02d0
												if (*(int32_t *)(g31 + 108) != 0) {
													// 0xb02dc
													function_afc30(g29 - 64, g32 - 1, g35 + 1, g33 - 64, g36);
													// branch -> 0xb02f4
												}
											}
										}
									}
								}
							}
						}
					} else {
						// 0xb0200
						v34 = g21;
						if (v34 <= 0xffffffff) {
							// 0xb0208
							*(int32_t *)g28 = -1 - v34;
							v54 = *(int32_t *)g28;
							if (v54 <= 199) {
								// 0xb0220
								v55 = *(int32_t *)(g23 - 0x7754) + 232 * v54;
								g31 = v55;
								if (*(int32_t *)(v55 + 160) % 2 == 0) {
									// 0xb0238
									v72 = *(int32_t *)(v55 + 224);
									if (v72 != 0) {
										// 0xb0244
										g34 = v55 + 84;
										g27 = g36 + *(int32_t *)(v55 + 60);
										g26 = g33 + *(int32_t *)(v55 + 56) - *(int32_t *)(v72 + 496);
										function_c9b28();
										if (*(int32_t *)g28 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
											// 0xb0278
											v35 = g31;
											v73 = *(int32_t *)(*(int32_t *)(v35 + 224) + 492);
											g13 = 8;
											function_507f4(233, g26, g27, v35 + 84, *(int32_t *)(v35 + 104), v73, 0);
											// branch -> 0xb02a0
										}
										// 0xb02a0
										function_c9b70((int32_t *)(g31 + 84));
										function_aefc4(g32, g35, g26, g27, *(int32_t *)g28, 0, 8);
										if (g20 != 0) {
											// 0xb02d0
											if (*(int32_t *)(g31 + 108) != 0) {
												// 0xb02dc
												function_afc30(g29 - 64, g32 - 1, g35 + 1, g33 - 64, g36);
												// branch -> 0xb02f4
											}
										}
									}
								}
							}
						}
					}
					// 0xb02f4
					if (__asm_rlwinm_(v50, 0, 29, 29) != 0) {
						// 0xb02fc
						function_af6d0(g32, g35, g33, g36, 0, 8, 1);
						// branch -> 0xb031c
					}
					// 0xb031c
					v43 = 0x1000000 * g18;
					if (v43 >= 0 && (v43 || 0xffffff) >= 0x1ffffff) {
						// 0xb0324
						v44 = v43 / 0x1000000 - 1;
						if (v44 <= 3) {
							// 0xb0334
							v56 = g19 + 0x55ec * v44;
							v57 = g36 + *(int32_t *)(v56 + 100);
							v58 = g33 + *(int32_t *)(v56 + 96) - *(int32_t *)(v56 + 148);
							v74 = *(int32_t *)(v56 + 140);
							g13 = *(int32_t *)(v56 + 144);
							function_af440(v44, g32, g35, v58, v57, *(int32_t *)(v56 + 124), v74, 0, 8);
							if (g20 != 0) {
								// 0xb0384
								v75 = *(int32_t *)(g31 + 152);
								if (v75 != 0) {
									// 0xb0390
									if (v75 == 2) {
										// 0xb0398
										function_afc30(g29 - 0x3060, g32 - 2, g35 + 1, g33 - 96, g36 - 16);
										// branch -> 0xb03b0
									}
									// 0xb03b0
									function_afc30(g29 - 64, g32 - 1, g35 + 1, g33 - 64, g36);
									// branch -> 0xb03c8
								}
							}
						}
					}
					// 0xb03c8
					if (g17 >= 1) {
						// 0xb03d0
						if (__asm_rlwinm_(v50, 0, 25, 25) == 0) {
							// 0xb03d8
							v76 = *(int32_t *)(g23 - 0x77ac);
							if (*(int32_t *)(g19 + 0x55ec * *(int32_t *)v76 + 460) != 0) {
								// Detected a possible infinite recursion (goto support failed); quitting...
							}
						}
						// Detected a possible infinite recursion (goto support failed); quitting...
					}
					// Detected a possible infinite recursion (goto support failed); quitting...
				}
				// 0xb02f4
				if (__asm_rlwinm_(v50, 0, 29, 29) != 0) {
					// 0xb02fc
					function_af6d0(g32, g35, g33, g36, 0, 8, 1);
					// branch -> 0xb031c
				}
				// 0xb031c
				v43 = 0x1000000 * g18;
				if (v43 >= 0 && (v43 || 0xffffff) >= 0x1ffffff) {
					// 0xb0324
					v44 = v43 / 0x1000000 - 1;
					if (v44 <= 3) {
						// 0xb0334
						v56 = g19 + 0x55ec * v44;
						v57 = g36 + *(int32_t *)(v56 + 100);
						v58 = g33 + *(int32_t *)(v56 + 96) - *(int32_t *)(v56 + 148);
						v74 = *(int32_t *)(v56 + 140);
						g13 = *(int32_t *)(v56 + 144);
						function_af440(v44, g32, g35, v58, v57, *(int32_t *)(v56 + 124), v74, 0, 8);
						if (g20 != 0) {
							// 0xb0384
							v75 = *(int32_t *)(g31 + 152);
							if (v75 != 0) {
								// 0xb0390
								if (v75 == 2) {
									// 0xb0398
									function_afc30(g29 - 0x3060, g32 - 2, g35 + 1, g33 - 96, g36 - 16);
									// branch -> 0xb03b0
								}
								// 0xb03b0
								function_afc30(g29 - 64, g32 - 1, g35 + 1, g33 - 64, g36);
								// branch -> 0xb03c8
							}
						}
					}
				}
				// 0xb03c8
				if (g17 >= 1) {
					// 0xb03d0
					if (__asm_rlwinm_(v50, 0, 25, 25) == 0) {
						// 0xb03d8
						v76 = *(int32_t *)(g23 - 0x77ac);
						if (*(int32_t *)(g19 + 0x55ec * *(int32_t *)v76 + 460) != 0) {
							// Detected a possible infinite recursion (goto support failed); quitting...
						}
					}
					// Detected a possible infinite recursion (goto support failed); quitting...
				}
				// Detected a possible infinite recursion (goto support failed); quitting...
			}
			// 0xb0008
			if ((0x1000000 * g16 || 0xffffff) >= 0x1ffffff) {
				// 0xb0010
				function_afa48(g32, g35, g33, g36, 1, 0, 8);
				// branch -> 0xb0030
			}
		}
		// 0xb0030
		v26 = g25;
		v39 = 0x1000000 * v26;
		v47 = v39 / 0x1000000;
		if ((v39 || 0xffffff) >= 0x1ffffff) {
			// 0xb0038
			v40 = v47 - 1;
			g26 = v40;
			v48 = *(int32_t *)(g23 - 0x7690) + 368 * v40;
			g31 = v48;
			if (*(int32_t *)(v48 + 52) == 0) {
				// 0xb0058
				if (v26 <= 127) {
					// 0xb0060
					g34 = *(int32_t *)(v48 + 24);
					v27 = function_c9948();
					v17 = v27;
					v28 = g31;
					if (v27 == 0) {
						// 0xb0070
						function_c9acc(*(int32_t *)(v28 + 24));
						// branch -> 0xb011c
					} else {
						// 0xb007c
						v65 = *(int32_t *)(v28 + 32);
						g11 = v65;
						v30 = v28;
						if (v65 >= 1) {
							// 0xb0088
							if (function_4d794(v27) > 50) {
								// 0xb0088
								v30 = g31;
								// branch -> 0xb00ac
							} else {
								// 0xb0098
								v41 = function_4d794(v17);
								v29 = g31;
								v66 = *(int32_t *)(v29 + 32);
								g40 = v66;
								if (v66 <= v41) {
									// 0xb00b8
									v49 = g33 - *(int32_t *)(v29 + 40);
									g27 = v49;
									v32 = v49;
									v33 = v29;
									if (g26 == (int32_t) * (char *)*(int32_t *)(g23 - 0x7748)) {
										// 0xb00d4
										g37 = v49;
										g41 = *(int32_t *)(v29 + 36);
										v31 = g36;
										g38 = v31;
										g42 = 0;
										g13 = 8;
										CelDrawHdrClrHL(181, v49, v31, *(int32_t *)(v29 + 24), v66);
										v32 = g27;
										v33 = g31;
										// branch -> 0xb00f4
									}
									// 0xb00f4
									v67 = *(int32_t *)(v33 + 32);
									v68 = *(int32_t *)(v33 + 36);
									function_4e998(v32, g36, *(int32_t *)(v33 + 24), v67, v68, 0, 8);
									function_c9acc(*(int32_t *)(g31 + 24));
									// branch -> 0xb011c
									// 0xb011c
									v50 = v13;
									g30 = v50;
									if (__asm_rlwinm_(v50, 0, 26, 26) != 0) {
										// 0xb0128
										v42 = -1 - (int32_t)v16;
										if (v42 <= 3) {
											// 0xb0140
											v51 = g19 + 0x55ec * v42;
											v52 = g36 + *(int32_t *)(v51 + 100);
											v53 = g33 + *(int32_t *)(v51 + 96) - *(int32_t *)(v51 + 148);
											v69 = *(int32_t *)(v51 + 140);
											g13 = *(int32_t *)(v51 + 144);
											function_af440(v42, g32, g35 - 1, v53, v52, *(int32_t *)(v51 + 124), v69, 0, 8);
											if (g20 != 0) {
												// 0xb0190
												v70 = *(int32_t *)(g31 + 152);
												if (v70 != 0) {
													// 0xb019c
													if (v70 == 2) {
														// 0xb01a4
														function_afc30(g29 - 0x3060, g32 - 2, g35 + 1, g33 - 96, g36 - 16);
														// branch -> 0xb01bc
													}
													// 0xb01bc
													function_afc30(g29 - 64, g32 - 1, g35 + 1, g33 - 64, g36);
													// branch -> 0xb01d4
												}
											}
										}
									}
									// 0xb01d4
									if (__asm_rlwinm_(v50, 0, 27, 27) != 0) {
										// 0xb01dc
										if (__asm_rlwinm_(v50, 0, 25, 25) == 0) {
											// 0xb01e4
											v71 = *(int32_t *)(g23 - 0x77ac);
											if (*(int32_t *)(g19 + 0x55ec * *(int32_t *)v71 + 460) != 0) {
												// 0xb0200
												v34 = g21;
												if (v34 <= 0xffffffff) {
													// 0xb0208
													*(int32_t *)g28 = -1 - v34;
													v54 = *(int32_t *)g28;
													if (v54 <= 199) {
														// 0xb0220
														v55 = *(int32_t *)(g23 - 0x7754) + 232 * v54;
														g31 = v55;
														if (*(int32_t *)(v55 + 160) % 2 == 0) {
															// 0xb0238
															v72 = *(int32_t *)(v55 + 224);
															if (v72 != 0) {
																// 0xb0244
																g34 = v55 + 84;
																g27 = g36 + *(int32_t *)(v55 + 60);
																g26 = g33 + *(int32_t *)(v55 + 56) - *(int32_t *)(v72 + 496);
																function_c9b28();
																if (*(int32_t *)g28 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
																	// 0xb0278
																	v35 = g31;
																	v73 = *(int32_t *)(*(int32_t *)(v35 + 224) + 492);
																	g13 = 8;
																	function_507f4(233, g26, g27, v35 + 84, *(int32_t *)(v35 + 104), v73, 0);
																	// branch -> 0xb02a0
																}
																// 0xb02a0
																function_c9b70((int32_t *)(g31 + 84));
																function_aefc4(g32, g35, g26, g27, *(int32_t *)g28, 0, 8);
																if (g20 != 0) {
																	// 0xb02d0
																	if (*(int32_t *)(g31 + 108) != 0) {
																		// 0xb02dc
																		function_afc30(g29 - 64, g32 - 1, g35 + 1, g33 - 64, g36);
																		// branch -> 0xb02f4
																	}
																}
															}
														}
													}
												}
											}
										} else {
											// 0xb0200
											v34 = g21;
											if (v34 <= 0xffffffff) {
												// 0xb0208
												*(int32_t *)g28 = -1 - v34;
												v54 = *(int32_t *)g28;
												if (v54 <= 199) {
													// 0xb0220
													v55 = *(int32_t *)(g23 - 0x7754) + 232 * v54;
													g31 = v55;
													if (*(int32_t *)(v55 + 160) % 2 == 0) {
														// 0xb0238
														v72 = *(int32_t *)(v55 + 224);
														if (v72 != 0) {
															// 0xb0244
															g34 = v55 + 84;
															g27 = g36 + *(int32_t *)(v55 + 60);
															g26 = g33 + *(int32_t *)(v55 + 56) - *(int32_t *)(v72 + 496);
															function_c9b28();
															if (*(int32_t *)g28 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
																// 0xb0278
																v35 = g31;
																v73 = *(int32_t *)(*(int32_t *)(v35 + 224) + 492);
																g13 = 8;
																function_507f4(233, g26, g27, v35 + 84, *(int32_t *)(v35 + 104), v73, 0);
																// branch -> 0xb02a0
															}
															// 0xb02a0
															function_c9b70((int32_t *)(g31 + 84));
															function_aefc4(g32, g35, g26, g27, *(int32_t *)g28, 0, 8);
															if (g20 != 0) {
																// 0xb02d0
																if (*(int32_t *)(g31 + 108) != 0) {
																	// 0xb02dc
																	function_afc30(g29 - 64, g32 - 1, g35 + 1, g33 - 64, g36);
																	// branch -> 0xb02f4
																}
															}
														}
													}
												}
											}
										}
										// 0xb02f4
										if (__asm_rlwinm_(v50, 0, 29, 29) != 0) {
											// 0xb02fc
											function_af6d0(g32, g35, g33, g36, 0, 8, 1);
											// branch -> 0xb031c
										}
										// 0xb031c
										v43 = 0x1000000 * g18;
										if (v43 >= 0 && (v43 || 0xffffff) >= 0x1ffffff) {
											// 0xb0324
											v44 = v43 / 0x1000000 - 1;
											if (v44 <= 3) {
												// 0xb0334
												v56 = g19 + 0x55ec * v44;
												v57 = g36 + *(int32_t *)(v56 + 100);
												v58 = g33 + *(int32_t *)(v56 + 96) - *(int32_t *)(v56 + 148);
												v74 = *(int32_t *)(v56 + 140);
												g13 = *(int32_t *)(v56 + 144);
												function_af440(v44, g32, g35, v58, v57, *(int32_t *)(v56 + 124), v74, 0, 8);
												if (g20 != 0) {
													// 0xb0384
													v75 = *(int32_t *)(g31 + 152);
													if (v75 != 0) {
														// 0xb0390
														if (v75 == 2) {
															// 0xb0398
															function_afc30(g29 - 0x3060, g32 - 2, g35 + 1, g33 - 96, g36 - 16);
															// branch -> 0xb03b0
														}
														// 0xb03b0
														function_afc30(g29 - 64, g32 - 1, g35 + 1, g33 - 64, g36);
														// branch -> 0xb03c8
													}
												}
											}
										}
										// 0xb03c8
										if (g17 >= 1) {
											// 0xb03d0
											if (__asm_rlwinm_(v50, 0, 25, 25) == 0) {
												// 0xb03d8
												v76 = *(int32_t *)(g23 - 0x77ac);
												if (*(int32_t *)(g19 + 0x55ec * *(int32_t *)v76 + 460) != 0) {
													// Detected a possible infinite recursion (goto support failed); quitting...
												}
											}
											// Detected a possible infinite recursion (goto support failed); quitting...
										}
										// Detected a possible infinite recursion (goto support failed); quitting...
									}
									// 0xb02f4
									if (__asm_rlwinm_(v50, 0, 29, 29) != 0) {
										// 0xb02fc
										function_af6d0(g32, g35, g33, g36, 0, 8, 1);
										// branch -> 0xb031c
									}
									// 0xb031c
									v43 = 0x1000000 * g18;
									if (v43 >= 0 && (v43 || 0xffffff) >= 0x1ffffff) {
										// 0xb0324
										v44 = v43 / 0x1000000 - 1;
										if (v44 <= 3) {
											// 0xb0334
											v56 = g19 + 0x55ec * v44;
											v57 = g36 + *(int32_t *)(v56 + 100);
											v58 = g33 + *(int32_t *)(v56 + 96) - *(int32_t *)(v56 + 148);
											v74 = *(int32_t *)(v56 + 140);
											g13 = *(int32_t *)(v56 + 144);
											function_af440(v44, g32, g35, v58, v57, *(int32_t *)(v56 + 124), v74, 0, 8);
											if (g20 != 0) {
												// 0xb0384
												v75 = *(int32_t *)(g31 + 152);
												if (v75 != 0) {
													// 0xb0390
													if (v75 == 2) {
														// 0xb0398
														function_afc30(g29 - 0x3060, g32 - 2, g35 + 1, g33 - 96, g36 - 16);
														// branch -> 0xb03b0
													}
													// 0xb03b0
													function_afc30(g29 - 64, g32 - 1, g35 + 1, g33 - 64, g36);
													// branch -> 0xb03c8
												}
											}
										}
									}
									// 0xb03c8
									if (g17 >= 1) {
										// 0xb03d0
										if (__asm_rlwinm_(v50, 0, 25, 25) == 0) {
											// 0xb03d8
											v76 = *(int32_t *)(g23 - 0x77ac);
											if (*(int32_t *)(g19 + 0x55ec * *(int32_t *)v76 + 460) != 0) {
												// Detected a possible infinite recursion (goto support failed); quitting...
											}
										}
										// Detected a possible infinite recursion (goto support failed); quitting...
									}
									// Detected a possible infinite recursion (goto support failed); quitting...
								} else {
									v30 = v29;
								}
							}
							// 0xb00ac
							function_c9acc(*(int32_t *)(v30 + 24));
							// branch -> 0xb011c
							// 0xb011c
							v50 = v13;
							g30 = v50;
							if (__asm_rlwinm_(v50, 0, 26, 26) != 0) {
								// 0xb0128
								v42 = -1 - (int32_t)v16;
								if (v42 <= 3) {
									// 0xb0140
									v51 = g19 + 0x55ec * v42;
									v52 = g36 + *(int32_t *)(v51 + 100);
									v53 = g33 + *(int32_t *)(v51 + 96) - *(int32_t *)(v51 + 148);
									v69 = *(int32_t *)(v51 + 140);
									g13 = *(int32_t *)(v51 + 144);
									function_af440(v42, g32, g35 - 1, v53, v52, *(int32_t *)(v51 + 124), v69, 0, 8);
									if (g20 != 0) {
										// 0xb0190
										v70 = *(int32_t *)(g31 + 152);
										if (v70 != 0) {
											// 0xb019c
											if (v70 == 2) {
												// 0xb01a4
												function_afc30(g29 - 0x3060, g32 - 2, g35 + 1, g33 - 96, g36 - 16);
												// branch -> 0xb01bc
											}
											// 0xb01bc
											function_afc30(g29 - 64, g32 - 1, g35 + 1, g33 - 64, g36);
											// branch -> 0xb01d4
										}
									}
								}
							}
							// 0xb01d4
							if (__asm_rlwinm_(v50, 0, 27, 27) != 0) {
								// 0xb01dc
								if (__asm_rlwinm_(v50, 0, 25, 25) == 0) {
									// 0xb01e4
									v71 = *(int32_t *)(g23 - 0x77ac);
									if (*(int32_t *)(g19 + 0x55ec * *(int32_t *)v71 + 460) != 0) {
										// 0xb0200
										v34 = g21;
										if (v34 <= 0xffffffff) {
											// 0xb0208
											*(int32_t *)g28 = -1 - v34;
											v54 = *(int32_t *)g28;
											if (v54 <= 199) {
												// 0xb0220
												v55 = *(int32_t *)(g23 - 0x7754) + 232 * v54;
												g31 = v55;
												if (*(int32_t *)(v55 + 160) % 2 == 0) {
													// 0xb0238
													v72 = *(int32_t *)(v55 + 224);
													if (v72 != 0) {
														// 0xb0244
														g34 = v55 + 84;
														g27 = g36 + *(int32_t *)(v55 + 60);
														g26 = g33 + *(int32_t *)(v55 + 56) - *(int32_t *)(v72 + 496);
														function_c9b28();
														if (*(int32_t *)g28 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
															// 0xb0278
															v35 = g31;
															v73 = *(int32_t *)(*(int32_t *)(v35 + 224) + 492);
															g13 = 8;
															function_507f4(233, g26, g27, v35 + 84, *(int32_t *)(v35 + 104), v73, 0);
															// branch -> 0xb02a0
														}
														// 0xb02a0
														function_c9b70((int32_t *)(g31 + 84));
														function_aefc4(g32, g35, g26, g27, *(int32_t *)g28, 0, 8);
														if (g20 != 0) {
															// 0xb02d0
															if (*(int32_t *)(g31 + 108) != 0) {
																// 0xb02dc
																function_afc30(g29 - 64, g32 - 1, g35 + 1, g33 - 64, g36);
																// branch -> 0xb02f4
															}
														}
													}
												}
											}
										}
									}
								} else {
									// 0xb0200
									v34 = g21;
									if (v34 <= 0xffffffff) {
										// 0xb0208
										*(int32_t *)g28 = -1 - v34;
										v54 = *(int32_t *)g28;
										if (v54 <= 199) {
											// 0xb0220
											v55 = *(int32_t *)(g23 - 0x7754) + 232 * v54;
											g31 = v55;
											if (*(int32_t *)(v55 + 160) % 2 == 0) {
												// 0xb0238
												v72 = *(int32_t *)(v55 + 224);
												if (v72 != 0) {
													// 0xb0244
													g34 = v55 + 84;
													g27 = g36 + *(int32_t *)(v55 + 60);
													g26 = g33 + *(int32_t *)(v55 + 56) - *(int32_t *)(v72 + 496);
													function_c9b28();
													if (*(int32_t *)g28 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
														// 0xb0278
														v35 = g31;
														v73 = *(int32_t *)(*(int32_t *)(v35 + 224) + 492);
														g13 = 8;
														function_507f4(233, g26, g27, v35 + 84, *(int32_t *)(v35 + 104), v73, 0);
														// branch -> 0xb02a0
													}
													// 0xb02a0
													function_c9b70((int32_t *)(g31 + 84));
													function_aefc4(g32, g35, g26, g27, *(int32_t *)g28, 0, 8);
													if (g20 != 0) {
														// 0xb02d0
														if (*(int32_t *)(g31 + 108) != 0) {
															// 0xb02dc
															function_afc30(g29 - 64, g32 - 1, g35 + 1, g33 - 64, g36);
															// branch -> 0xb02f4
														}
													}
												}
											}
										}
									}
								}
								// 0xb02f4
								if (__asm_rlwinm_(v50, 0, 29, 29) != 0) {
									// 0xb02fc
									function_af6d0(g32, g35, g33, g36, 0, 8, 1);
									// branch -> 0xb031c
								}
								// 0xb031c
								v43 = 0x1000000 * g18;
								if (v43 >= 0 && (v43 || 0xffffff) >= 0x1ffffff) {
									// 0xb0324
									v44 = v43 / 0x1000000 - 1;
									if (v44 <= 3) {
										// 0xb0334
										v56 = g19 + 0x55ec * v44;
										v57 = g36 + *(int32_t *)(v56 + 100);
										v58 = g33 + *(int32_t *)(v56 + 96) - *(int32_t *)(v56 + 148);
										v74 = *(int32_t *)(v56 + 140);
										g13 = *(int32_t *)(v56 + 144);
										function_af440(v44, g32, g35, v58, v57, *(int32_t *)(v56 + 124), v74, 0, 8);
										if (g20 != 0) {
											// 0xb0384
											v75 = *(int32_t *)(g31 + 152);
											if (v75 != 0) {
												// 0xb0390
												if (v75 == 2) {
													// 0xb0398
													function_afc30(g29 - 0x3060, g32 - 2, g35 + 1, g33 - 96, g36 - 16);
													// branch -> 0xb03b0
												}
												// 0xb03b0
												function_afc30(g29 - 64, g32 - 1, g35 + 1, g33 - 64, g36);
												// branch -> 0xb03c8
											}
										}
									}
								}
								// 0xb03c8
								if (g17 >= 1) {
									// 0xb03d0
									if (__asm_rlwinm_(v50, 0, 25, 25) == 0) {
										// 0xb03d8
										v76 = *(int32_t *)(g23 - 0x77ac);
										if (*(int32_t *)(g19 + 0x55ec * *(int32_t *)v76 + 460) != 0) {
											// Detected a possible infinite recursion (goto support failed); quitting...
										}
									}
									// Detected a possible infinite recursion (goto support failed); quitting...
								}
								// Detected a possible infinite recursion (goto support failed); quitting...
							}
							// 0xb02f4
							if (__asm_rlwinm_(v50, 0, 29, 29) != 0) {
								// 0xb02fc
								function_af6d0(g32, g35, g33, g36, 0, 8, 1);
								// branch -> 0xb031c
							}
							// 0xb031c
							v43 = 0x1000000 * g18;
							if (v43 >= 0 && (v43 || 0xffffff) >= 0x1ffffff) {
								// 0xb0324
								v44 = v43 / 0x1000000 - 1;
								if (v44 <= 3) {
									// 0xb0334
									v56 = g19 + 0x55ec * v44;
									v57 = g36 + *(int32_t *)(v56 + 100);
									v58 = g33 + *(int32_t *)(v56 + 96) - *(int32_t *)(v56 + 148);
									v74 = *(int32_t *)(v56 + 140);
									g13 = *(int32_t *)(v56 + 144);
									function_af440(v44, g32, g35, v58, v57, *(int32_t *)(v56 + 124), v74, 0, 8);
									if (g20 != 0) {
										// 0xb0384
										v75 = *(int32_t *)(g31 + 152);
										if (v75 != 0) {
											// 0xb0390
											if (v75 == 2) {
												// 0xb0398
												function_afc30(g29 - 0x3060, g32 - 2, g35 + 1, g33 - 96, g36 - 16);
												// branch -> 0xb03b0
											}
											// 0xb03b0
											function_afc30(g29 - 64, g32 - 1, g35 + 1, g33 - 64, g36);
											// branch -> 0xb03c8
										}
									}
								}
							}
							// 0xb03c8
							if (g17 >= 1) {
								// 0xb03d0
								if (__asm_rlwinm_(v50, 0, 25, 25) == 0) {
									// 0xb03d8
									v76 = *(int32_t *)(g23 - 0x77ac);
									if (*(int32_t *)(g19 + 0x55ec * *(int32_t *)v76 + 460) != 0) {
										// Detected a possible infinite recursion (goto support failed); quitting...
									}
								}
								// Detected a possible infinite recursion (goto support failed); quitting...
							}
							// Detected a possible infinite recursion (goto support failed); quitting...
						}
						// 0xb00ac
						function_c9acc(*(int32_t *)(v30 + 24));
						// branch -> 0xb011c
					}
					// 0xb011c
					v50 = v13;
					g30 = v50;
					if (__asm_rlwinm_(v50, 0, 26, 26) != 0) {
						// 0xb0128
						v42 = -1 - (int32_t)v16;
						if (v42 <= 3) {
							// 0xb0140
							v51 = g19 + 0x55ec * v42;
							v52 = g36 + *(int32_t *)(v51 + 100);
							v53 = g33 + *(int32_t *)(v51 + 96) - *(int32_t *)(v51 + 148);
							v69 = *(int32_t *)(v51 + 140);
							g13 = *(int32_t *)(v51 + 144);
							function_af440(v42, g32, g35 - 1, v53, v52, *(int32_t *)(v51 + 124), v69, 0, 8);
							if (g20 != 0) {
								// 0xb0190
								v70 = *(int32_t *)(g31 + 152);
								if (v70 != 0) {
									// 0xb019c
									if (v70 == 2) {
										// 0xb01a4
										function_afc30(g29 - 0x3060, g32 - 2, g35 + 1, g33 - 96, g36 - 16);
										// branch -> 0xb01bc
									}
									// 0xb01bc
									function_afc30(g29 - 64, g32 - 1, g35 + 1, g33 - 64, g36);
									// branch -> 0xb01d4
								}
							}
						}
					}
					// 0xb01d4
					if (__asm_rlwinm_(v50, 0, 27, 27) != 0) {
						// 0xb01dc
						if (__asm_rlwinm_(v50, 0, 25, 25) == 0) {
							// 0xb01e4
							v71 = *(int32_t *)(g23 - 0x77ac);
							if (*(int32_t *)(g19 + 0x55ec * *(int32_t *)v71 + 460) != 0) {
								// 0xb0200
								v34 = g21;
								if (v34 <= 0xffffffff) {
									// 0xb0208
									*(int32_t *)g28 = -1 - v34;
									v54 = *(int32_t *)g28;
									if (v54 <= 199) {
										// 0xb0220
										v55 = *(int32_t *)(g23 - 0x7754) + 232 * v54;
										g31 = v55;
										if (*(int32_t *)(v55 + 160) % 2 == 0) {
											// 0xb0238
											v72 = *(int32_t *)(v55 + 224);
											if (v72 != 0) {
												// 0xb0244
												g34 = v55 + 84;
												g27 = g36 + *(int32_t *)(v55 + 60);
												g26 = g33 + *(int32_t *)(v55 + 56) - *(int32_t *)(v72 + 496);
												function_c9b28();
												if (*(int32_t *)g28 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
													// 0xb0278
													v35 = g31;
													v73 = *(int32_t *)(*(int32_t *)(v35 + 224) + 492);
													g13 = 8;
													function_507f4(233, g26, g27, v35 + 84, *(int32_t *)(v35 + 104), v73, 0);
													// branch -> 0xb02a0
												}
												// 0xb02a0
												function_c9b70((int32_t *)(g31 + 84));
												function_aefc4(g32, g35, g26, g27, *(int32_t *)g28, 0, 8);
												if (g20 != 0) {
													// 0xb02d0
													if (*(int32_t *)(g31 + 108) != 0) {
														// 0xb02dc
														function_afc30(g29 - 64, g32 - 1, g35 + 1, g33 - 64, g36);
														// branch -> 0xb02f4
													}
												}
											}
										}
									}
								}
							}
						} else {
							// 0xb0200
							v34 = g21;
							if (v34 <= 0xffffffff) {
								// 0xb0208
								*(int32_t *)g28 = -1 - v34;
								v54 = *(int32_t *)g28;
								if (v54 <= 199) {
									// 0xb0220
									v55 = *(int32_t *)(g23 - 0x7754) + 232 * v54;
									g31 = v55;
									if (*(int32_t *)(v55 + 160) % 2 == 0) {
										// 0xb0238
										v72 = *(int32_t *)(v55 + 224);
										if (v72 != 0) {
											// 0xb0244
											g34 = v55 + 84;
											g27 = g36 + *(int32_t *)(v55 + 60);
											g26 = g33 + *(int32_t *)(v55 + 56) - *(int32_t *)(v72 + 496);
											function_c9b28();
											if (*(int32_t *)g28 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
												// 0xb0278
												v35 = g31;
												v73 = *(int32_t *)(*(int32_t *)(v35 + 224) + 492);
												g13 = 8;
												function_507f4(233, g26, g27, v35 + 84, *(int32_t *)(v35 + 104), v73, 0);
												// branch -> 0xb02a0
											}
											// 0xb02a0
											function_c9b70((int32_t *)(g31 + 84));
											function_aefc4(g32, g35, g26, g27, *(int32_t *)g28, 0, 8);
											if (g20 != 0) {
												// 0xb02d0
												if (*(int32_t *)(g31 + 108) != 0) {
													// 0xb02dc
													function_afc30(g29 - 64, g32 - 1, g35 + 1, g33 - 64, g36);
													// branch -> 0xb02f4
												}
											}
										}
									}
								}
							}
						}
						// 0xb02f4
						if (__asm_rlwinm_(v50, 0, 29, 29) != 0) {
							// 0xb02fc
							function_af6d0(g32, g35, g33, g36, 0, 8, 1);
							// branch -> 0xb031c
						}
						// 0xb031c
						v43 = 0x1000000 * g18;
						if (v43 >= 0 && (v43 || 0xffffff) >= 0x1ffffff) {
							// 0xb0324
							v44 = v43 / 0x1000000 - 1;
							if (v44 <= 3) {
								// 0xb0334
								v56 = g19 + 0x55ec * v44;
								v57 = g36 + *(int32_t *)(v56 + 100);
								v58 = g33 + *(int32_t *)(v56 + 96) - *(int32_t *)(v56 + 148);
								v74 = *(int32_t *)(v56 + 140);
								g13 = *(int32_t *)(v56 + 144);
								function_af440(v44, g32, g35, v58, v57, *(int32_t *)(v56 + 124), v74, 0, 8);
								if (g20 != 0) {
									// 0xb0384
									v75 = *(int32_t *)(g31 + 152);
									if (v75 != 0) {
										// 0xb0390
										if (v75 == 2) {
											// 0xb0398
											function_afc30(g29 - 0x3060, g32 - 2, g35 + 1, g33 - 96, g36 - 16);
											// branch -> 0xb03b0
										}
										// 0xb03b0
										function_afc30(g29 - 64, g32 - 1, g35 + 1, g33 - 64, g36);
										// branch -> 0xb03c8
									}
								}
							}
						}
						// 0xb03c8
						if (g17 >= 1) {
							// 0xb03d0
							if (__asm_rlwinm_(v50, 0, 25, 25) == 0) {
								// 0xb03d8
								v76 = *(int32_t *)(g23 - 0x77ac);
								if (*(int32_t *)(g19 + 0x55ec * *(int32_t *)v76 + 460) != 0) {
									// Detected a possible infinite recursion (goto support failed); quitting...
								}
							}
							// Detected a possible infinite recursion (goto support failed); quitting...
						}
						// Detected a possible infinite recursion (goto support failed); quitting...
					}
					// 0xb02f4
					if (__asm_rlwinm_(v50, 0, 29, 29) != 0) {
						// 0xb02fc
						function_af6d0(g32, g35, g33, g36, 0, 8, 1);
						// branch -> 0xb031c
					}
					// 0xb031c
					v43 = 0x1000000 * g18;
					if (v43 >= 0 && (v43 || 0xffffff) >= 0x1ffffff) {
						// 0xb0324
						v44 = v43 / 0x1000000 - 1;
						if (v44 <= 3) {
							// 0xb0334
							v56 = g19 + 0x55ec * v44;
							v57 = g36 + *(int32_t *)(v56 + 100);
							v58 = g33 + *(int32_t *)(v56 + 96) - *(int32_t *)(v56 + 148);
							v74 = *(int32_t *)(v56 + 140);
							g13 = *(int32_t *)(v56 + 144);
							function_af440(v44, g32, g35, v58, v57, *(int32_t *)(v56 + 124), v74, 0, 8);
							if (g20 != 0) {
								// 0xb0384
								v75 = *(int32_t *)(g31 + 152);
								if (v75 != 0) {
									// 0xb0390
									if (v75 == 2) {
										// 0xb0398
										function_afc30(g29 - 0x3060, g32 - 2, g35 + 1, g33 - 96, g36 - 16);
										// branch -> 0xb03b0
									}
									// 0xb03b0
									function_afc30(g29 - 64, g32 - 1, g35 + 1, g33 - 64, g36);
									// branch -> 0xb03c8
								}
							}
						}
					}
					// 0xb03c8
					if (g17 >= 1) {
						// 0xb03d0
						if (__asm_rlwinm_(v50, 0, 25, 25) == 0) {
							// 0xb03d8
							v76 = *(int32_t *)(g23 - 0x77ac);
							if (*(int32_t *)(g19 + 0x55ec * *(int32_t *)v76 + 460) != 0) {
								// Detected a possible infinite recursion (goto support failed); quitting...
							}
						}
						// Detected a possible infinite recursion (goto support failed); quitting...
					}
					// Detected a possible infinite recursion (goto support failed); quitting...
				}
			}
		}
		// 0xb011c
		v50 = v13;
		g30 = v50;
		if (__asm_rlwinm_(v50, 0, 26, 26) != 0) {
			// 0xb0128
			v42 = -1 - (int32_t)v16;
			if (v42 <= 3) {
				// 0xb0140
				v51 = g19 + 0x55ec * v42;
				v52 = g36 + *(int32_t *)(v51 + 100);
				v53 = g33 + *(int32_t *)(v51 + 96) - *(int32_t *)(v51 + 148);
				v69 = *(int32_t *)(v51 + 140);
				g13 = *(int32_t *)(v51 + 144);
				function_af440(v42, g32, g35 - 1, v53, v52, *(int32_t *)(v51 + 124), v69, 0, 8);
				if (g20 != 0) {
					// 0xb0190
					v70 = *(int32_t *)(g31 + 152);
					if (v70 != 0) {
						// 0xb019c
						if (v70 == 2) {
							// 0xb01a4
							function_afc30(g29 - 0x3060, g32 - 2, g35 + 1, g33 - 96, g36 - 16);
							// branch -> 0xb01bc
						}
						// 0xb01bc
						function_afc30(g29 - 64, g32 - 1, g35 + 1, g33 - 64, g36);
						// branch -> 0xb01d4
					}
				}
			}
		}
		// 0xb01d4
		if (__asm_rlwinm_(v50, 0, 27, 27) != 0) {
			// 0xb01dc
			if (__asm_rlwinm_(v50, 0, 25, 25) == 0) {
				// 0xb01e4
				v71 = *(int32_t *)(g23 - 0x77ac);
				if (*(int32_t *)(g19 + 0x55ec * *(int32_t *)v71 + 460) != 0) {
					// 0xb0200
					v34 = g21;
					if (v34 <= 0xffffffff) {
						// 0xb0208
						*(int32_t *)g28 = -1 - v34;
						v54 = *(int32_t *)g28;
						if (v54 <= 199) {
							// 0xb0220
							v55 = *(int32_t *)(g23 - 0x7754) + 232 * v54;
							g31 = v55;
							if (*(int32_t *)(v55 + 160) % 2 == 0) {
								// 0xb0238
								v72 = *(int32_t *)(v55 + 224);
								if (v72 != 0) {
									// 0xb0244
									g34 = v55 + 84;
									g27 = g36 + *(int32_t *)(v55 + 60);
									g26 = g33 + *(int32_t *)(v55 + 56) - *(int32_t *)(v72 + 496);
									function_c9b28();
									if (*(int32_t *)g28 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
										// 0xb0278
										v35 = g31;
										v73 = *(int32_t *)(*(int32_t *)(v35 + 224) + 492);
										g13 = 8;
										function_507f4(233, g26, g27, v35 + 84, *(int32_t *)(v35 + 104), v73, 0);
										// branch -> 0xb02a0
									}
									// 0xb02a0
									function_c9b70((int32_t *)(g31 + 84));
									function_aefc4(g32, g35, g26, g27, *(int32_t *)g28, 0, 8);
									if (g20 != 0) {
										// 0xb02d0
										if (*(int32_t *)(g31 + 108) != 0) {
											// 0xb02dc
											function_afc30(g29 - 64, g32 - 1, g35 + 1, g33 - 64, g36);
											// branch -> 0xb02f4
										}
									}
								}
							}
						}
					}
				}
			} else {
				// 0xb0200
				v34 = g21;
				if (v34 <= 0xffffffff) {
					// 0xb0208
					*(int32_t *)g28 = -1 - v34;
					v54 = *(int32_t *)g28;
					if (v54 <= 199) {
						// 0xb0220
						v55 = *(int32_t *)(g23 - 0x7754) + 232 * v54;
						g31 = v55;
						if (*(int32_t *)(v55 + 160) % 2 == 0) {
							// 0xb0238
							v72 = *(int32_t *)(v55 + 224);
							if (v72 != 0) {
								// 0xb0244
								g34 = v55 + 84;
								g27 = g36 + *(int32_t *)(v55 + 60);
								g26 = g33 + *(int32_t *)(v55 + 56) - *(int32_t *)(v72 + 496);
								function_c9b28();
								if (*(int32_t *)g28 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
									// 0xb0278
									v35 = g31;
									v73 = *(int32_t *)(*(int32_t *)(v35 + 224) + 492);
									g13 = 8;
									function_507f4(233, g26, g27, v35 + 84, *(int32_t *)(v35 + 104), v73, 0);
									// branch -> 0xb02a0
								}
								// 0xb02a0
								function_c9b70((int32_t *)(g31 + 84));
								function_aefc4(g32, g35, g26, g27, *(int32_t *)g28, 0, 8);
								if (g20 != 0) {
									// 0xb02d0
									if (*(int32_t *)(g31 + 108) != 0) {
										// 0xb02dc
										function_afc30(g29 - 64, g32 - 1, g35 + 1, g33 - 64, g36);
										// branch -> 0xb02f4
									}
								}
							}
						}
					}
				}
			}
			// 0xb02f4
			if (__asm_rlwinm_(v50, 0, 29, 29) != 0) {
				// 0xb02fc
				function_af6d0(g32, g35, g33, g36, 0, 8, 1);
				// branch -> 0xb031c
			}
			// 0xb031c
			v43 = 0x1000000 * g18;
			if (v43 >= 0 && (v43 || 0xffffff) >= 0x1ffffff) {
				// 0xb0324
				v44 = v43 / 0x1000000 - 1;
				if (v44 <= 3) {
					// 0xb0334
					v56 = g19 + 0x55ec * v44;
					v57 = g36 + *(int32_t *)(v56 + 100);
					v58 = g33 + *(int32_t *)(v56 + 96) - *(int32_t *)(v56 + 148);
					v74 = *(int32_t *)(v56 + 140);
					g13 = *(int32_t *)(v56 + 144);
					function_af440(v44, g32, g35, v58, v57, *(int32_t *)(v56 + 124), v74, 0, 8);
					if (g20 != 0) {
						// 0xb0384
						v75 = *(int32_t *)(g31 + 152);
						if (v75 != 0) {
							// 0xb0390
							if (v75 == 2) {
								// 0xb0398
								function_afc30(g29 - 0x3060, g32 - 2, g35 + 1, g33 - 96, g36 - 16);
								// branch -> 0xb03b0
							}
							// 0xb03b0
							function_afc30(g29 - 64, g32 - 1, g35 + 1, g33 - 64, g36);
							// branch -> 0xb03c8
						}
					}
				}
			}
			// 0xb03c8
			if (g17 >= 1) {
				// 0xb03d0
				if (__asm_rlwinm_(v50, 0, 25, 25) == 0) {
					// 0xb03d8
					v76 = *(int32_t *)(g23 - 0x77ac);
					if (*(int32_t *)(g19 + 0x55ec * *(int32_t *)v76 + 460) != 0) {
						// Detected a possible infinite recursion (goto support failed); quitting...
					}
				}
				// Detected a possible infinite recursion (goto support failed); quitting...
			}
			// Detected a possible infinite recursion (goto support failed); quitting...
		}
		// 0xb02f4
		if (__asm_rlwinm_(v50, 0, 29, 29) != 0) {
			// 0xb02fc
			function_af6d0(g32, g35, g33, g36, 0, 8, 1);
			// branch -> 0xb031c
		}
		// 0xb031c
		v43 = 0x1000000 * g18;
		if (v43 >= 0 && (v43 || 0xffffff) >= 0x1ffffff) {
			// 0xb0324
			v44 = v43 / 0x1000000 - 1;
			if (v44 <= 3) {
				// 0xb0334
				v56 = g19 + 0x55ec * v44;
				v57 = g36 + *(int32_t *)(v56 + 100);
				v58 = g33 + *(int32_t *)(v56 + 96) - *(int32_t *)(v56 + 148);
				v74 = *(int32_t *)(v56 + 140);
				g13 = *(int32_t *)(v56 + 144);
				function_af440(v44, g32, g35, v58, v57, *(int32_t *)(v56 + 124), v74, 0, 8);
				if (g20 != 0) {
					// 0xb0384
					v75 = *(int32_t *)(g31 + 152);
					if (v75 != 0) {
						// 0xb0390
						if (v75 == 2) {
							// 0xb0398
							function_afc30(g29 - 0x3060, g32 - 2, g35 + 1, g33 - 96, g36 - 16);
							// branch -> 0xb03b0
						}
						// 0xb03b0
						function_afc30(g29 - 64, g32 - 1, g35 + 1, g33 - 64, g36);
						// branch -> 0xb03c8
					}
				}
			}
		}
		// 0xb03c8
		if (g17 >= 1) {
			// 0xb03d0
			if (__asm_rlwinm_(v50, 0, 25, 25) == 0) {
				// 0xb03d8
				v76 = *(int32_t *)(g23 - 0x77ac);
				if (*(int32_t *)(g19 + 0x55ec * *(int32_t *)v76 + 460) != 0) {
					// Detected a possible infinite recursion (goto support failed); quitting...
				}
			}
			// Detected a possible infinite recursion (goto support failed); quitting...
		}
		// Detected a possible infinite recursion (goto support failed); quitting...
	}
	// 0xafed4
	v18 = g23;
	v19 = v18;
	if (*(int32_t *)*(int32_t *)(v18 - 0x70e4) != 0) {
		// 0xafee4
		if (v13 % 2 != 0) {
			// 0xafeec
			function_aeb58(g32, g35, g33, g36, 0, 8, 1);
			v19 = g23;
			// branch -> 0xaff0c
		} else {
			v19 = v18;
		}
		// 0xaff0c
		v59 = *(int32_t *)(v19 - 0x70cc);
		v60 = *(int32_t *)(v19 - 0x7290);
		if (*(int32_t *)v60 < (int32_t) * (char *)v59) {
			// 0xaff28
			v36 = 0x1000000 * g26;
			v45 = v36 / 0x1000000;
			if ((v36 || 0xffffff) >= 0x1ffffff) {
				// 0xaff30
				g31 = *(int32_t *)(v19 - 0x7614) + 80 * (v45 % 32) - 80;
				v37 = __asm_rlwinm(v45, 27, 29, 31);
				v20 = g31;
				v46 = v20 + 0x1000000 * v37 / 0x200000;
				g30 = v46;
				g34 = v46;
				g26 = g33 - *(int32_t *)(v20 + 72);
				v21 = function_c9b28();
				g27 = v21;
				if (v21 == 0) {
					// 0xaff70
					function_c9b70((int32_t *)g30);
					// branch -> 0xb0008
				} else {
					// 0xaff7c
					v61 = *(int32_t *)(g31 + 64);
					g11 = v61;
					if (v61 >= 1) {
						// 0xaff88
						if (function_4d794(v21) <= 50) {
							// 0xaff98
							v38 = function_4d794(g27);
							v22 = g31;
							v62 = *(int32_t *)(v22 + 64);
							if (v62 <= v38) {
								// 0xaffb8
								v63 = *(char *)(v22 + 76);
								g13 = v63;
								v64 = *(int32_t *)(v22 + 68);
								v23 = g26;
								v24 = g36;
								v25 = g30;
								if (v63 == 0) {
									// 0xaffe4
									Cl2DecodeFrm6(v23, v24, v25, v62, v64, 0, 8);
									// branch -> 0xb0000
								} else {
									// 0xaffc4
									Cl2DecodeFrm5(v23, v24, v25, v62, v64, 0, 8);
									// branch -> 0xb0000
								}
								// 0xb0000
								function_c9b70((int32_t *)g30);
								// branch -> 0xb0008
								// 0xb0008
								if ((0x1000000 * g16 || 0xffffff) >= 0x1ffffff) {
									// 0xb0010
									function_afa48(g32, g35, g33, g36, 1, 0, 8);
									// branch -> 0xb0030
								}
								// 0xb0030
								v26 = g25;
								v39 = 0x1000000 * v26;
								v47 = v39 / 0x1000000;
								if ((v39 || 0xffffff) >= 0x1ffffff) {
									// 0xb0038
									v40 = v47 - 1;
									g26 = v40;
									v48 = *(int32_t *)(g23 - 0x7690) + 368 * v40;
									g31 = v48;
									if (*(int32_t *)(v48 + 52) == 0) {
										// 0xb0058
										if (v26 <= 127) {
											// 0xb0060
											g34 = *(int32_t *)(v48 + 24);
											v27 = function_c9948();
											v17 = v27;
											v28 = g31;
											if (v27 == 0) {
												// 0xb0070
												function_c9acc(*(int32_t *)(v28 + 24));
												// branch -> 0xb011c
											} else {
												// 0xb007c
												v65 = *(int32_t *)(v28 + 32);
												g11 = v65;
												v30 = v28;
												if (v65 >= 1) {
													// 0xb0088
													if (function_4d794(v27) > 50) {
														// 0xb0088
														v30 = g31;
														// branch -> 0xb00ac
													} else {
														// 0xb0098
														v41 = function_4d794(v17);
														v29 = g31;
														v66 = *(int32_t *)(v29 + 32);
														g40 = v66;
														if (v66 <= v41) {
															// 0xb00b8
															v49 = g33 - *(int32_t *)(v29 + 40);
															g27 = v49;
															v32 = v49;
															v33 = v29;
															if (g26 == (int32_t) * (char *)*(int32_t *)(g23 - 0x7748)) {
																// 0xb00d4
																g37 = v49;
																g41 = *(int32_t *)(v29 + 36);
																v31 = g36;
																g38 = v31;
																g42 = 0;
																g13 = 8;
																CelDrawHdrClrHL(181, v49, v31, *(int32_t *)(v29 + 24), v66);
																v32 = g27;
																v33 = g31;
																// branch -> 0xb00f4
															}
															// 0xb00f4
															v67 = *(int32_t *)(v33 + 32);
															v68 = *(int32_t *)(v33 + 36);
															function_4e998(v32, g36, *(int32_t *)(v33 + 24), v67, v68, 0, 8);
															function_c9acc(*(int32_t *)(g31 + 24));
															// branch -> 0xb011c
															// 0xb011c
															v50 = v13;
															g30 = v50;
															if (__asm_rlwinm_(v50, 0, 26, 26) != 0) {
																// 0xb0128
																v42 = -1 - (int32_t)v16;
																if (v42 <= 3) {
																	// 0xb0140
																	v51 = g19 + 0x55ec * v42;
																	v52 = g36 + *(int32_t *)(v51 + 100);
																	v53 = g33 + *(int32_t *)(v51 + 96) - *(int32_t *)(v51 + 148);
																	v69 = *(int32_t *)(v51 + 140);
																	g13 = *(int32_t *)(v51 + 144);
																	function_af440(v42, g32, g35 - 1, v53, v52, *(int32_t *)(v51 + 124), v69, 0, 8);
																	if (g20 != 0) {
																		// 0xb0190
																		v70 = *(int32_t *)(g31 + 152);
																		if (v70 != 0) {
																			// 0xb019c
																			if (v70 == 2) {
																				// 0xb01a4
																				function_afc30(g29 - 0x3060, g32 - 2, g35 + 1, g33 - 96, g36 - 16);
																				// branch -> 0xb01bc
																			}
																			// 0xb01bc
																			function_afc30(g29 - 64, g32 - 1, g35 + 1, g33 - 64, g36);
																			// branch -> 0xb01d4
																		}
																	}
																}
															}
															// 0xb01d4
															if (__asm_rlwinm_(v50, 0, 27, 27) != 0) {
																// 0xb01dc
																if (__asm_rlwinm_(v50, 0, 25, 25) == 0) {
																	// 0xb01e4
																	v71 = *(int32_t *)(g23 - 0x77ac);
																	if (*(int32_t *)(g19 + 0x55ec * *(int32_t *)v71 + 460) != 0) {
																		// 0xb0200
																		v34 = g21;
																		if (v34 <= 0xffffffff) {
																			// 0xb0208
																			*(int32_t *)g28 = -1 - v34;
																			v54 = *(int32_t *)g28;
																			if (v54 <= 199) {
																				// 0xb0220
																				v55 = *(int32_t *)(g23 - 0x7754) + 232 * v54;
																				g31 = v55;
																				if (*(int32_t *)(v55 + 160) % 2 == 0) {
																					// 0xb0238
																					v72 = *(int32_t *)(v55 + 224);
																					if (v72 != 0) {
																						// 0xb0244
																						g34 = v55 + 84;
																						g27 = g36 + *(int32_t *)(v55 + 60);
																						g26 = g33 + *(int32_t *)(v55 + 56) - *(int32_t *)(v72 + 496);
																						function_c9b28();
																						if (*(int32_t *)g28 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
																							// 0xb0278
																							v35 = g31;
																							v73 = *(int32_t *)(*(int32_t *)(v35 + 224) + 492);
																							g13 = 8;
																							function_507f4(233, g26, g27, v35 + 84, *(int32_t *)(v35 + 104), v73, 0);
																							// branch -> 0xb02a0
																						}
																						// 0xb02a0
																						function_c9b70((int32_t *)(g31 + 84));
																						function_aefc4(g32, g35, g26, g27, *(int32_t *)g28, 0, 8);
																						if (g20 != 0) {
																							// 0xb02d0
																							if (*(int32_t *)(g31 + 108) != 0) {
																								// 0xb02dc
																								function_afc30(g29 - 64, g32 - 1, g35 + 1, g33 - 64, g36);
																								// branch -> 0xb02f4
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
																// 0xb02f4
																if (__asm_rlwinm_(v50, 0, 29, 29) != 0) {
																	// 0xb02fc
																	function_af6d0(g32, g35, g33, g36, 0, 8, 1);
																	// branch -> 0xb031c
																}
																// 0xb031c
																v43 = 0x1000000 * g18;
																if (v43 >= 0 && (v43 || 0xffffff) >= 0x1ffffff) {
																	// 0xb0324
																	v44 = v43 / 0x1000000 - 1;
																	if (v44 <= 3) {
																		// 0xb0334
																		v56 = g19 + 0x55ec * v44;
																		v57 = g36 + *(int32_t *)(v56 + 100);
																		v58 = g33 + *(int32_t *)(v56 + 96) - *(int32_t *)(v56 + 148);
																		v74 = *(int32_t *)(v56 + 140);
																		g13 = *(int32_t *)(v56 + 144);
																		function_af440(v44, g32, g35, v58, v57, *(int32_t *)(v56 + 124), v74, 0, 8);
																		if (g20 != 0) {
																			// 0xb0384
																			v75 = *(int32_t *)(g31 + 152);
																			if (v75 != 0) {
																				// 0xb0390
																				if (v75 == 2) {
																					// 0xb0398
																					function_afc30(g29 - 0x3060, g32 - 2, g35 + 1, g33 - 96, g36 - 16);
																					// branch -> 0xb03b0
																				}
																				// 0xb03b0
																				function_afc30(g29 - 64, g32 - 1, g35 + 1, g33 - 64, g36);
																				// branch -> 0xb03c8
																			}
																		}
																	}
																}
																// 0xb03c8
																if (g17 >= 1) {
																	// 0xb03d0
																	if (__asm_rlwinm_(v50, 0, 25, 25) == 0) {
																		// 0xb03d8
																		v76 = *(int32_t *)(g23 - 0x77ac);
																		if (*(int32_t *)(g19 + 0x55ec * *(int32_t *)v76 + 460) != 0) {
																			// Detected a possible infinite recursion (goto support failed); quitting...
																		}
																	}
																	// Detected a possible infinite recursion (goto support failed); quitting...
																}
																// Detected a possible infinite recursion (goto support failed); quitting...
															}
															// Detected a possible infinite recursion (goto support failed); quitting...
														} else {
															v30 = v29;
														}
													}
													// 0xb00ac
													function_c9acc(*(int32_t *)(v30 + 24));
													// branch -> 0xb011c
													// 0xb011c
													v50 = v13;
													g30 = v50;
													if (__asm_rlwinm_(v50, 0, 26, 26) != 0) {
														// 0xb0128
														v42 = -1 - (int32_t)v16;
														if (v42 <= 3) {
															// 0xb0140
															v51 = g19 + 0x55ec * v42;
															v52 = g36 + *(int32_t *)(v51 + 100);
															v53 = g33 + *(int32_t *)(v51 + 96) - *(int32_t *)(v51 + 148);
															v69 = *(int32_t *)(v51 + 140);
															g13 = *(int32_t *)(v51 + 144);
															function_af440(v42, g32, g35 - 1, v53, v52, *(int32_t *)(v51 + 124), v69, 0, 8);
															if (g20 != 0) {
																// 0xb0190
																v70 = *(int32_t *)(g31 + 152);
																if (v70 != 0) {
																	// 0xb019c
																	if (v70 == 2) {
																		// 0xb01a4
																		function_afc30(g29 - 0x3060, g32 - 2, g35 + 1, g33 - 96, g36 - 16);
																		// branch -> 0xb01bc
																	}
																	// 0xb01bc
																	function_afc30(g29 - 64, g32 - 1, g35 + 1, g33 - 64, g36);
																	// branch -> 0xb01d4
																}
															}
														}
													}
													// 0xb01d4
													if (__asm_rlwinm_(v50, 0, 27, 27) != 0) {
														// 0xb01dc
														if (__asm_rlwinm_(v50, 0, 25, 25) == 0) {
															// 0xb01e4
															v71 = *(int32_t *)(g23 - 0x77ac);
															if (*(int32_t *)(g19 + 0x55ec * *(int32_t *)v71 + 460) != 0) {
																// Detected a possible infinite recursion (goto support failed); quitting...
															}
														}
														// Detected a possible infinite recursion (goto support failed); quitting...
													}
													// Detected a possible infinite recursion (goto support failed); quitting...
												}
												// 0xb00ac
												function_c9acc(*(int32_t *)(v30 + 24));
												// branch -> 0xb011c
											}
											// 0xb011c
											v50 = v13;
											g30 = v50;
											if (__asm_rlwinm_(v50, 0, 26, 26) != 0) {
												// 0xb0128
												v42 = -1 - (int32_t)v16;
												if (v42 <= 3) {
													// 0xb0140
													v51 = g19 + 0x55ec * v42;
													v52 = g36 + *(int32_t *)(v51 + 100);
													v53 = g33 + *(int32_t *)(v51 + 96) - *(int32_t *)(v51 + 148);
													v69 = *(int32_t *)(v51 + 140);
													g13 = *(int32_t *)(v51 + 144);
													function_af440(v42, g32, g35 - 1, v53, v52, *(int32_t *)(v51 + 124), v69, 0, 8);
													if (g20 != 0) {
														// 0xb0190
														v70 = *(int32_t *)(g31 + 152);
														if (v70 != 0) {
															// 0xb019c
															if (v70 == 2) {
																// 0xb01a4
																function_afc30(g29 - 0x3060, g32 - 2, g35 + 1, g33 - 96, g36 - 16);
																// branch -> 0xb01bc
															}
															// 0xb01bc
															function_afc30(g29 - 64, g32 - 1, g35 + 1, g33 - 64, g36);
															// branch -> 0xb01d4
														}
													}
												}
											}
											// 0xb01d4
											if (__asm_rlwinm_(v50, 0, 27, 27) != 0) {
												// 0xb01dc
												if (__asm_rlwinm_(v50, 0, 25, 25) == 0) {
													// 0xb01e4
													v71 = *(int32_t *)(g23 - 0x77ac);
													if (*(int32_t *)(g19 + 0x55ec * *(int32_t *)v71 + 460) != 0) {
														// Detected a possible infinite recursion (goto support failed); quitting...
													}
												}
												// Detected a possible infinite recursion (goto support failed); quitting...
											}
											// Detected a possible infinite recursion (goto support failed); quitting...
										}
									}
								}
								// 0xb011c
								v50 = v13;
								g30 = v50;
								if (__asm_rlwinm_(v50, 0, 26, 26) != 0) {
									// 0xb0128
									v42 = -1 - (int32_t)v16;
									if (v42 <= 3) {
										// 0xb0140
										v51 = g19 + 0x55ec * v42;
										v52 = g36 + *(int32_t *)(v51 + 100);
										v53 = g33 + *(int32_t *)(v51 + 96) - *(int32_t *)(v51 + 148);
										v69 = *(int32_t *)(v51 + 140);
										g13 = *(int32_t *)(v51 + 144);
										function_af440(v42, g32, g35 - 1, v53, v52, *(int32_t *)(v51 + 124), v69, 0, 8);
										if (g20 != 0) {
											// 0xb0190
											v70 = *(int32_t *)(g31 + 152);
											if (v70 != 0) {
												// 0xb019c
												if (v70 == 2) {
													// 0xb01a4
													function_afc30(g29 - 0x3060, g32 - 2, g35 + 1, g33 - 96, g36 - 16);
													// branch -> 0xb01bc
												}
												// 0xb01bc
												function_afc30(g29 - 64, g32 - 1, g35 + 1, g33 - 64, g36);
												// branch -> 0xb01d4
											}
										}
									}
								}
								// 0xb01d4
								if (__asm_rlwinm_(v50, 0, 27, 27) != 0) {
									// 0xb01dc
									if (__asm_rlwinm_(v50, 0, 25, 25) == 0) {
										// 0xb01e4
										v71 = *(int32_t *)(g23 - 0x77ac);
										if (*(int32_t *)(g19 + 0x55ec * *(int32_t *)v71 + 460) != 0) {
											// Detected a possible infinite recursion (goto support failed); quitting...
										}
									}
									// Detected a possible infinite recursion (goto support failed); quitting...
								}
								// Detected a possible infinite recursion (goto support failed); quitting...
							}
						}
					}
					// 0xaffac
					function_c9b70((int32_t *)g30);
					// branch -> 0xb0008
				}
				// 0xb0008
				if ((0x1000000 * g16 || 0xffffff) >= 0x1ffffff) {
					// 0xb0010
					function_afa48(g32, g35, g33, g36, 1, 0, 8);
					// branch -> 0xb0030
				}
				// 0xb0030
				v26 = g25;
				v39 = 0x1000000 * v26;
				v47 = v39 / 0x1000000;
				if ((v39 || 0xffffff) >= 0x1ffffff) {
					// 0xb0038
					v40 = v47 - 1;
					g26 = v40;
					v48 = *(int32_t *)(g23 - 0x7690) + 368 * v40;
					g31 = v48;
					if (*(int32_t *)(v48 + 52) == 0) {
						// 0xb0058
						if (v26 <= 127) {
							// 0xb0060
							g34 = *(int32_t *)(v48 + 24);
							v27 = function_c9948();
							v17 = v27;
							v28 = g31;
							if (v27 == 0) {
								// 0xb0070
								function_c9acc(*(int32_t *)(v28 + 24));
								// branch -> 0xb011c
							} else {
								// 0xb007c
								v65 = *(int32_t *)(v28 + 32);
								g11 = v65;
								v30 = v28;
								if (v65 >= 1) {
									// 0xb0088
									if (function_4d794(v27) > 50) {
										// 0xb0088
										v30 = g31;
										// branch -> 0xb00ac
									} else {
										// 0xb0098
										v41 = function_4d794(v17);
										v29 = g31;
										v66 = *(int32_t *)(v29 + 32);
										g40 = v66;
										if (v66 <= v41) {
											// 0xb00b8
											v49 = g33 - *(int32_t *)(v29 + 40);
											g27 = v49;
											v32 = v49;
											v33 = v29;
											if (g26 == (int32_t) * (char *)*(int32_t *)(g23 - 0x7748)) {
												// 0xb00d4
												g37 = v49;
												g41 = *(int32_t *)(v29 + 36);
												v31 = g36;
												g38 = v31;
												g42 = 0;
												g13 = 8;
												CelDrawHdrClrHL(181, v49, v31, *(int32_t *)(v29 + 24), v66);
												v32 = g27;
												v33 = g31;
												// branch -> 0xb00f4
											}
											// 0xb00f4
											v67 = *(int32_t *)(v33 + 32);
											v68 = *(int32_t *)(v33 + 36);
											function_4e998(v32, g36, *(int32_t *)(v33 + 24), v67, v68, 0, 8);
											function_c9acc(*(int32_t *)(g31 + 24));
											// branch -> 0xb011c
											// 0xb011c
											v50 = v13;
											g30 = v50;
											if (__asm_rlwinm_(v50, 0, 26, 26) != 0) {
												// 0xb0128
												v42 = -1 - (int32_t)v16;
												if (v42 <= 3) {
													// 0xb0140
													v51 = g19 + 0x55ec * v42;
													v52 = g36 + *(int32_t *)(v51 + 100);
													v53 = g33 + *(int32_t *)(v51 + 96) - *(int32_t *)(v51 + 148);
													v69 = *(int32_t *)(v51 + 140);
													g13 = *(int32_t *)(v51 + 144);
													function_af440(v42, g32, g35 - 1, v53, v52, *(int32_t *)(v51 + 124), v69, 0, 8);
													if (g20 != 0) {
														// 0xb0190
														v70 = *(int32_t *)(g31 + 152);
														if (v70 != 0) {
															// 0xb019c
															if (v70 == 2) {
																// 0xb01a4
																function_afc30(g29 - 0x3060, g32 - 2, g35 + 1, g33 - 96, g36 - 16);
																// branch -> 0xb01bc
															}
															// 0xb01bc
															function_afc30(g29 - 64, g32 - 1, g35 + 1, g33 - 64, g36);
															// branch -> 0xb01d4
														}
													}
												}
											}
											// 0xb01d4
											if (__asm_rlwinm_(v50, 0, 27, 27) != 0) {
												// 0xb01dc
												if (__asm_rlwinm_(v50, 0, 25, 25) == 0) {
													// 0xb01e4
													v71 = *(int32_t *)(g23 - 0x77ac);
													if (*(int32_t *)(g19 + 0x55ec * *(int32_t *)v71 + 460) != 0) {
														// Detected a possible infinite recursion (goto support failed); quitting...
													}
												}
												// Detected a possible infinite recursion (goto support failed); quitting...
											}
											// Detected a possible infinite recursion (goto support failed); quitting...
										} else {
											v30 = v29;
										}
									}
									// 0xb00ac
									function_c9acc(*(int32_t *)(v30 + 24));
									// branch -> 0xb011c
									// 0xb011c
									v50 = v13;
									g30 = v50;
									if (__asm_rlwinm_(v50, 0, 26, 26) != 0) {
										// 0xb0128
										v42 = -1 - (int32_t)v16;
										if (v42 <= 3) {
											// 0xb0140
											v51 = g19 + 0x55ec * v42;
											v52 = g36 + *(int32_t *)(v51 + 100);
											v53 = g33 + *(int32_t *)(v51 + 96) - *(int32_t *)(v51 + 148);
											v69 = *(int32_t *)(v51 + 140);
											g13 = *(int32_t *)(v51 + 144);
											function_af440(v42, g32, g35 - 1, v53, v52, *(int32_t *)(v51 + 124), v69, 0, 8);
											if (g20 != 0) {
												// 0xb0190
												v70 = *(int32_t *)(g31 + 152);
												if (v70 != 0) {
													// 0xb019c
													if (v70 == 2) {
														// 0xb01a4
														function_afc30(g29 - 0x3060, g32 - 2, g35 + 1, g33 - 96, g36 - 16);
														// branch -> 0xb01bc
													}
													// 0xb01bc
													function_afc30(g29 - 64, g32 - 1, g35 + 1, g33 - 64, g36);
													// branch -> 0xb01d4
												}
											}
										}
									}
									// 0xb01d4
									if (__asm_rlwinm_(v50, 0, 27, 27) != 0) {
										// 0xb01dc
										if (__asm_rlwinm_(v50, 0, 25, 25) == 0) {
											// 0xb01e4
											v71 = *(int32_t *)(g23 - 0x77ac);
											if (*(int32_t *)(g19 + 0x55ec * *(int32_t *)v71 + 460) != 0) {
												// Detected a possible infinite recursion (goto support failed); quitting...
											}
										}
										// Detected a possible infinite recursion (goto support failed); quitting...
									}
									// Detected a possible infinite recursion (goto support failed); quitting...
								}
								// 0xb00ac
								function_c9acc(*(int32_t *)(v30 + 24));
								// branch -> 0xb011c
							}
							// 0xb011c
							v50 = v13;
							g30 = v50;
							if (__asm_rlwinm_(v50, 0, 26, 26) != 0) {
								// 0xb0128
								v42 = -1 - (int32_t)v16;
								if (v42 <= 3) {
									// 0xb0140
									v51 = g19 + 0x55ec * v42;
									v52 = g36 + *(int32_t *)(v51 + 100);
									v53 = g33 + *(int32_t *)(v51 + 96) - *(int32_t *)(v51 + 148);
									v69 = *(int32_t *)(v51 + 140);
									g13 = *(int32_t *)(v51 + 144);
									function_af440(v42, g32, g35 - 1, v53, v52, *(int32_t *)(v51 + 124), v69, 0, 8);
									if (g20 != 0) {
										// 0xb0190
										v70 = *(int32_t *)(g31 + 152);
										if (v70 != 0) {
											// 0xb019c
											if (v70 == 2) {
												// 0xb01a4
												function_afc30(g29 - 0x3060, g32 - 2, g35 + 1, g33 - 96, g36 - 16);
												// branch -> 0xb01bc
											}
											// 0xb01bc
											function_afc30(g29 - 64, g32 - 1, g35 + 1, g33 - 64, g36);
											// branch -> 0xb01d4
										}
									}
								}
							}
							// 0xb01d4
							if (__asm_rlwinm_(v50, 0, 27, 27) != 0) {
								// 0xb01dc
								if (__asm_rlwinm_(v50, 0, 25, 25) == 0) {
									// 0xb01e4
									v71 = *(int32_t *)(g23 - 0x77ac);
									if (*(int32_t *)(g19 + 0x55ec * *(int32_t *)v71 + 460) != 0) {
										// Detected a possible infinite recursion (goto support failed); quitting...
									}
								}
								// Detected a possible infinite recursion (goto support failed); quitting...
							}
							// Detected a possible infinite recursion (goto support failed); quitting...
						}
					}
				}
				// 0xb011c
				v50 = v13;
				g30 = v50;
				if (__asm_rlwinm_(v50, 0, 26, 26) != 0) {
					// 0xb0128
					v42 = -1 - (int32_t)v16;
					if (v42 <= 3) {
						// 0xb0140
						v51 = g19 + 0x55ec * v42;
						v52 = g36 + *(int32_t *)(v51 + 100);
						v53 = g33 + *(int32_t *)(v51 + 96) - *(int32_t *)(v51 + 148);
						v69 = *(int32_t *)(v51 + 140);
						g13 = *(int32_t *)(v51 + 144);
						function_af440(v42, g32, g35 - 1, v53, v52, *(int32_t *)(v51 + 124), v69, 0, 8);
						if (g20 != 0) {
							// 0xb0190
							v70 = *(int32_t *)(g31 + 152);
							if (v70 != 0) {
								// 0xb019c
								if (v70 == 2) {
									// 0xb01a4
									function_afc30(g29 - 0x3060, g32 - 2, g35 + 1, g33 - 96, g36 - 16);
									// branch -> 0xb01bc
								}
								// 0xb01bc
								function_afc30(g29 - 64, g32 - 1, g35 + 1, g33 - 64, g36);
								// branch -> 0xb01d4
							}
						}
					}
				}
				// 0xb01d4
				if (__asm_rlwinm_(v50, 0, 27, 27) != 0) {
					// 0xb01dc
					if (__asm_rlwinm_(v50, 0, 25, 25) == 0) {
						// 0xb01e4
						v71 = *(int32_t *)(g23 - 0x77ac);
						if (*(int32_t *)(g19 + 0x55ec * *(int32_t *)v71 + 460) != 0) {
							// Detected a possible infinite recursion (goto support failed); quitting...
						}
					}
					// Detected a possible infinite recursion (goto support failed); quitting...
				}
				// Detected a possible infinite recursion (goto support failed); quitting...
			}
			// 0xb0008
			if ((0x1000000 * g16 || 0xffffff) >= 0x1ffffff) {
				// 0xb0010
				function_afa48(g32, g35, g33, g36, 1, 0, 8);
				// branch -> 0xb0030
			}
		}
		// 0xb0030
		v26 = g25;
		v39 = 0x1000000 * v26;
		v47 = v39 / 0x1000000;
		if ((v39 || 0xffffff) >= 0x1ffffff) {
			// 0xb0038
			v40 = v47 - 1;
			g26 = v40;
			v48 = *(int32_t *)(g23 - 0x7690) + 368 * v40;
			g31 = v48;
			if (*(int32_t *)(v48 + 52) == 0) {
				// 0xb0058
				if (v26 <= 127) {
					// 0xb0060
					g34 = *(int32_t *)(v48 + 24);
					v27 = function_c9948();
					v17 = v27;
					v28 = g31;
					if (v27 == 0) {
						// 0xb0070
						function_c9acc(*(int32_t *)(v28 + 24));
						// branch -> 0xb011c
					} else {
						// 0xb007c
						v65 = *(int32_t *)(v28 + 32);
						g11 = v65;
						v30 = v28;
						if (v65 >= 1) {
							// 0xb0088
							if (function_4d794(v27) > 50) {
								// 0xb0088
								v30 = g31;
								// branch -> 0xb00ac
							} else {
								// 0xb0098
								v41 = function_4d794(v17);
								v29 = g31;
								v66 = *(int32_t *)(v29 + 32);
								g40 = v66;
								if (v66 <= v41) {
									// 0xb00b8
									v49 = g33 - *(int32_t *)(v29 + 40);
									g27 = v49;
									v32 = v49;
									v33 = v29;
									if (g26 == (int32_t) * (char *)*(int32_t *)(g23 - 0x7748)) {
										// 0xb00d4
										g37 = v49;
										g41 = *(int32_t *)(v29 + 36);
										v31 = g36;
										g38 = v31;
										g42 = 0;
										g13 = 8;
										CelDrawHdrClrHL(181, v49, v31, *(int32_t *)(v29 + 24), v66);
										v32 = g27;
										v33 = g31;
										// branch -> 0xb00f4
									}
									// 0xb00f4
									v67 = *(int32_t *)(v33 + 32);
									v68 = *(int32_t *)(v33 + 36);
									function_4e998(v32, g36, *(int32_t *)(v33 + 24), v67, v68, 0, 8);
									function_c9acc(*(int32_t *)(g31 + 24));
									// branch -> 0xb011c
									// 0xb011c
									v50 = v13;
									g30 = v50;
									if (__asm_rlwinm_(v50, 0, 26, 26) != 0) {
										// 0xb0128
										v42 = -1 - (int32_t)v16;
										if (v42 <= 3) {
											// 0xb0140
											v51 = g19 + 0x55ec * v42;
											v52 = g36 + *(int32_t *)(v51 + 100);
											v53 = g33 + *(int32_t *)(v51 + 96) - *(int32_t *)(v51 + 148);
											v69 = *(int32_t *)(v51 + 140);
											g13 = *(int32_t *)(v51 + 144);
											function_af440(v42, g32, g35 - 1, v53, v52, *(int32_t *)(v51 + 124), v69, 0, 8);
											if (g20 != 0) {
												// 0xb0190
												v70 = *(int32_t *)(g31 + 152);
												if (v70 != 0) {
													// 0xb019c
													if (v70 == 2) {
														// 0xb01a4
														function_afc30(g29 - 0x3060, g32 - 2, g35 + 1, g33 - 96, g36 - 16);
														// branch -> 0xb01bc
													}
													// 0xb01bc
													function_afc30(g29 - 64, g32 - 1, g35 + 1, g33 - 64, g36);
													// branch -> 0xb01d4
												}
											}
										}
									}
									// 0xb01d4
									if (__asm_rlwinm_(v50, 0, 27, 27) != 0) {
										// 0xb01dc
										if (__asm_rlwinm_(v50, 0, 25, 25) == 0) {
											// 0xb01e4
											v71 = *(int32_t *)(g23 - 0x77ac);
											if (*(int32_t *)(g19 + 0x55ec * *(int32_t *)v71 + 460) != 0) {
												// Detected a possible infinite recursion (goto support failed); quitting...
											}
										}
										// Detected a possible infinite recursion (goto support failed); quitting...
									}
									// Detected a possible infinite recursion (goto support failed); quitting...
								} else {
									v30 = v29;
								}
							}
							// 0xb00ac
							function_c9acc(*(int32_t *)(v30 + 24));
							// branch -> 0xb011c
							// 0xb011c
							v50 = v13;
							g30 = v50;
							if (__asm_rlwinm_(v50, 0, 26, 26) != 0) {
								// 0xb0128
								v42 = -1 - (int32_t)v16;
								if (v42 <= 3) {
									// 0xb0140
									v51 = g19 + 0x55ec * v42;
									v52 = g36 + *(int32_t *)(v51 + 100);
									v53 = g33 + *(int32_t *)(v51 + 96) - *(int32_t *)(v51 + 148);
									v69 = *(int32_t *)(v51 + 140);
									g13 = *(int32_t *)(v51 + 144);
									function_af440(v42, g32, g35 - 1, v53, v52, *(int32_t *)(v51 + 124), v69, 0, 8);
									if (g20 != 0) {
										// 0xb0190
										v70 = *(int32_t *)(g31 + 152);
										if (v70 != 0) {
											// 0xb019c
											if (v70 == 2) {
												// 0xb01a4
												function_afc30(g29 - 0x3060, g32 - 2, g35 + 1, g33 - 96, g36 - 16);
												// branch -> 0xb01bc
											}
											// 0xb01bc
											function_afc30(g29 - 64, g32 - 1, g35 + 1, g33 - 64, g36);
											// branch -> 0xb01d4
										}
									}
								}
							}
							// 0xb01d4
							if (__asm_rlwinm_(v50, 0, 27, 27) != 0) {
								// 0xb01dc
								if (__asm_rlwinm_(v50, 0, 25, 25) == 0) {
									// 0xb01e4
									v71 = *(int32_t *)(g23 - 0x77ac);
									if (*(int32_t *)(g19 + 0x55ec * *(int32_t *)v71 + 460) != 0) {
										// Detected a possible infinite recursion (goto support failed); quitting...
									}
								}
								// Detected a possible infinite recursion (goto support failed); quitting...
							}
							// Detected a possible infinite recursion (goto support failed); quitting...
						}
						// 0xb00ac
						function_c9acc(*(int32_t *)(v30 + 24));
						// branch -> 0xb011c
					}
					// 0xb011c
					v50 = v13;
					g30 = v50;
					if (__asm_rlwinm_(v50, 0, 26, 26) != 0) {
						// 0xb0128
						v42 = -1 - (int32_t)v16;
						if (v42 <= 3) {
							// 0xb0140
							v51 = g19 + 0x55ec * v42;
							v52 = g36 + *(int32_t *)(v51 + 100);
							v53 = g33 + *(int32_t *)(v51 + 96) - *(int32_t *)(v51 + 148);
							v69 = *(int32_t *)(v51 + 140);
							g13 = *(int32_t *)(v51 + 144);
							function_af440(v42, g32, g35 - 1, v53, v52, *(int32_t *)(v51 + 124), v69, 0, 8);
							if (g20 != 0) {
								// 0xb0190
								v70 = *(int32_t *)(g31 + 152);
								if (v70 != 0) {
									// 0xb019c
									if (v70 == 2) {
										// 0xb01a4
										function_afc30(g29 - 0x3060, g32 - 2, g35 + 1, g33 - 96, g36 - 16);
										// branch -> 0xb01bc
									}
									// 0xb01bc
									function_afc30(g29 - 64, g32 - 1, g35 + 1, g33 - 64, g36);
									// branch -> 0xb01d4
								}
							}
						}
					}
					// 0xb01d4
					if (__asm_rlwinm_(v50, 0, 27, 27) != 0) {
						// 0xb01dc
						if (__asm_rlwinm_(v50, 0, 25, 25) == 0) {
							// 0xb01e4
							v71 = *(int32_t *)(g23 - 0x77ac);
							if (*(int32_t *)(g19 + 0x55ec * *(int32_t *)v71 + 460) != 0) {
								// Detected a possible infinite recursion (goto support failed); quitting...
							}
						}
						// Detected a possible infinite recursion (goto support failed); quitting...
					}
					// Detected a possible infinite recursion (goto support failed); quitting...
				}
			}
		}
		// 0xb011c
		v50 = v13;
		g30 = v50;
		if (__asm_rlwinm_(v50, 0, 26, 26) != 0) {
			// 0xb0128
			v42 = -1 - (int32_t)v16;
			if (v42 <= 3) {
				// 0xb0140
				v51 = g19 + 0x55ec * v42;
				v52 = g36 + *(int32_t *)(v51 + 100);
				v53 = g33 + *(int32_t *)(v51 + 96) - *(int32_t *)(v51 + 148);
				v69 = *(int32_t *)(v51 + 140);
				g13 = *(int32_t *)(v51 + 144);
				function_af440(v42, g32, g35 - 1, v53, v52, *(int32_t *)(v51 + 124), v69, 0, 8);
				if (g20 != 0) {
					// 0xb0190
					v70 = *(int32_t *)(g31 + 152);
					if (v70 != 0) {
						// 0xb019c
						if (v70 == 2) {
							// 0xb01a4
							function_afc30(g29 - 0x3060, g32 - 2, g35 + 1, g33 - 96, g36 - 16);
							// branch -> 0xb01bc
						}
						// 0xb01bc
						function_afc30(g29 - 64, g32 - 1, g35 + 1, g33 - 64, g36);
						// branch -> 0xb01d4
					}
				}
			}
		}
		// 0xb01d4
		if (__asm_rlwinm_(v50, 0, 27, 27) != 0) {
			// 0xb01dc
			if (__asm_rlwinm_(v50, 0, 25, 25) == 0) {
				// 0xb01e4
				v71 = *(int32_t *)(g23 - 0x77ac);
				if (*(int32_t *)(g19 + 0x55ec * *(int32_t *)v71 + 460) != 0) {
					// Detected a possible infinite recursion (goto support failed); quitting...
				}
			}
			// Detected a possible infinite recursion (goto support failed); quitting...
		}
		// Detected a possible infinite recursion (goto support failed); quitting...
	}
	// 0xaff0c
	v59 = *(int32_t *)(v19 - 0x70cc);
	v60 = *(int32_t *)(v19 - 0x7290);
	if (*(int32_t *)v60 < (int32_t) * (char *)v59) {
		// 0xaff28
		v36 = 0x1000000 * g26;
		v45 = v36 / 0x1000000;
		if ((v36 || 0xffffff) >= 0x1ffffff) {
			// 0xaff30
			g31 = *(int32_t *)(v19 - 0x7614) + 80 * (v45 % 32) - 80;
			v37 = __asm_rlwinm(v45, 27, 29, 31);
			v20 = g31;
			v46 = v20 + 0x1000000 * v37 / 0x200000;
			g30 = v46;
			g34 = v46;
			g26 = g33 - *(int32_t *)(v20 + 72);
			v21 = function_c9b28();
			g27 = v21;
			if (v21 == 0) {
				// 0xaff70
				function_c9b70((int32_t *)g30);
				// branch -> 0xb0008
			} else {
				// 0xaff7c
				v61 = *(int32_t *)(g31 + 64);
				g11 = v61;
				if (v61 >= 1) {
					// 0xaff88
					if (function_4d794(v21) <= 50) {
						// 0xaff98
						v38 = function_4d794(g27);
						v22 = g31;
						v62 = *(int32_t *)(v22 + 64);
						if (v62 <= v38) {
							// 0xaffb8
							v63 = *(char *)(v22 + 76);
							g13 = v63;
							v64 = *(int32_t *)(v22 + 68);
							v23 = g26;
							v24 = g36;
							v25 = g30;
							if (v63 == 0) {
								// 0xaffe4
								Cl2DecodeFrm6(v23, v24, v25, v62, v64, 0, 8);
								// branch -> 0xb0000
							} else {
								// 0xaffc4
								Cl2DecodeFrm5(v23, v24, v25, v62, v64, 0, 8);
								// branch -> 0xb0000
							}
							// 0xb0000
							function_c9b70((int32_t *)g30);
							// branch -> 0xb0008
							// 0xb0008
							if ((0x1000000 * g16 || 0xffffff) >= 0x1ffffff) {
								// 0xb0010
								function_afa48(g32, g35, g33, g36, 1, 0, 8);
								// branch -> 0xb0030
							}
							// 0xb0030
							v26 = g25;
							v39 = 0x1000000 * v26;
							v47 = v39 / 0x1000000;
							if ((v39 || 0xffffff) >= 0x1ffffff) {
								// 0xb0038
								v40 = v47 - 1;
								g26 = v40;
								v48 = *(int32_t *)(g23 - 0x7690) + 368 * v40;
								g31 = v48;
								if (*(int32_t *)(v48 + 52) == 0) {
									// 0xb0058
									if (v26 <= 127) {
										// 0xb0060
										g34 = *(int32_t *)(v48 + 24);
										v27 = function_c9948();
										v17 = v27;
										v28 = g31;
										if (v27 == 0) {
											// 0xb0070
											function_c9acc(*(int32_t *)(v28 + 24));
											// branch -> 0xb011c
										} else {
											// 0xb007c
											v65 = *(int32_t *)(v28 + 32);
											g11 = v65;
											v30 = v28;
											if (v65 >= 1) {
												// 0xb0088
												if (function_4d794(v27) > 50) {
													// 0xb0088
													v30 = g31;
													// branch -> 0xb00ac
												} else {
													// 0xb0098
													v41 = function_4d794(v17);
													v29 = g31;
													v66 = *(int32_t *)(v29 + 32);
													g40 = v66;
													if (v66 <= v41) {
														// 0xb00b8
														v49 = g33 - *(int32_t *)(v29 + 40);
														g27 = v49;
														v32 = v49;
														v33 = v29;
														if (g26 == (int32_t) * (char *)*(int32_t *)(g23 - 0x7748)) {
															// 0xb00d4
															g37 = v49;
															g41 = *(int32_t *)(v29 + 36);
															v31 = g36;
															g38 = v31;
															g42 = 0;
															g13 = 8;
															CelDrawHdrClrHL(181, v49, v31, *(int32_t *)(v29 + 24), v66);
															v32 = g27;
															v33 = g31;
															// branch -> 0xb00f4
														}
														// 0xb00f4
														v67 = *(int32_t *)(v33 + 32);
														v68 = *(int32_t *)(v33 + 36);
														function_4e998(v32, g36, *(int32_t *)(v33 + 24), v67, v68, 0, 8);
														function_c9acc(*(int32_t *)(g31 + 24));
														// branch -> 0xb011c
														// 0xb011c
														v50 = v13;
														g30 = v50;
														if (__asm_rlwinm_(v50, 0, 26, 26) != 0) {
															// 0xb0128
															v42 = -1 - (int32_t)v16;
															if (v42 <= 3) {
																// 0xb0140
																v51 = g19 + 0x55ec * v42;
																v52 = g36 + *(int32_t *)(v51 + 100);
																v53 = g33 + *(int32_t *)(v51 + 96) - *(int32_t *)(v51 + 148);
																v69 = *(int32_t *)(v51 + 140);
																g13 = *(int32_t *)(v51 + 144);
																function_af440(v42, g32, g35 - 1, v53, v52, *(int32_t *)(v51 + 124), v69, 0, 8);
																if (g20 != 0) {
																	// 0xb0190
																	v70 = *(int32_t *)(g31 + 152);
																	if (v70 != 0) {
																		// 0xb019c
																		if (v70 == 2) {
																			// 0xb01a4
																			function_afc30(g29 - 0x3060, g32 - 2, g35 + 1, g33 - 96, g36 - 16);
																			// branch -> 0xb01bc
																		}
																		// 0xb01bc
																		function_afc30(g29 - 64, g32 - 1, g35 + 1, g33 - 64, g36);
																		// branch -> 0xb01d4
																	}
																}
															}
														}
														// 0xb01d4
														if (__asm_rlwinm_(v50, 0, 27, 27) != 0) {
															// 0xb01dc
															if (__asm_rlwinm_(v50, 0, 25, 25) == 0) {
																// 0xb01e4
																v71 = *(int32_t *)(g23 - 0x77ac);
																if (*(int32_t *)(g19 + 0x55ec * *(int32_t *)v71 + 460) != 0) {
																	// Detected a possible infinite recursion (goto support failed); quitting...
																}
															}
															// Detected a possible infinite recursion (goto support failed); quitting...
														}
														// Detected a possible infinite recursion (goto support failed); quitting...
													} else {
														v30 = v29;
													}
												}
												// 0xb00ac
												function_c9acc(*(int32_t *)(v30 + 24));
												// branch -> 0xb011c
												// Detected a possible infinite recursion (goto support failed); quitting...
											}
											// 0xb00ac
											function_c9acc(*(int32_t *)(v30 + 24));
											// branch -> 0xb011c
										}
										// Detected a possible infinite recursion (goto support failed); quitting...
									}
								}
							}
							// Detected a possible infinite recursion (goto support failed); quitting...
						}
					}
				}
				// 0xaffac
				function_c9b70((int32_t *)g30);
				// branch -> 0xb0008
			}
			// 0xb0008
			if ((0x1000000 * g16 || 0xffffff) >= 0x1ffffff) {
				// 0xb0010
				function_afa48(g32, g35, g33, g36, 1, 0, 8);
				// branch -> 0xb0030
			}
			// 0xb0030
			v26 = g25;
			v39 = 0x1000000 * v26;
			v47 = v39 / 0x1000000;
			if ((v39 || 0xffffff) >= 0x1ffffff) {
				// 0xb0038
				v40 = v47 - 1;
				g26 = v40;
				v48 = *(int32_t *)(g23 - 0x7690) + 368 * v40;
				g31 = v48;
				if (*(int32_t *)(v48 + 52) == 0) {
					// 0xb0058
					if (v26 <= 127) {
						// 0xb0060
						g34 = *(int32_t *)(v48 + 24);
						v27 = function_c9948();
						v17 = v27;
						v28 = g31;
						if (v27 == 0) {
							// 0xb0070
							function_c9acc(*(int32_t *)(v28 + 24));
							// branch -> 0xb011c
						} else {
							// 0xb007c
							v65 = *(int32_t *)(v28 + 32);
							g11 = v65;
							v30 = v28;
							if (v65 >= 1) {
								// 0xb0088
								if (function_4d794(v27) > 50) {
									// 0xb0088
									v30 = g31;
									// branch -> 0xb00ac
								} else {
									// 0xb0098
									v41 = function_4d794(v17);
									v29 = g31;
									v66 = *(int32_t *)(v29 + 32);
									g40 = v66;
									if (v66 <= v41) {
										// 0xb00b8
										v49 = g33 - *(int32_t *)(v29 + 40);
										g27 = v49;
										v32 = v49;
										v33 = v29;
										if (g26 == (int32_t) * (char *)*(int32_t *)(g23 - 0x7748)) {
											// 0xb00d4
											g37 = v49;
											g41 = *(int32_t *)(v29 + 36);
											v31 = g36;
											g38 = v31;
											g42 = 0;
											g13 = 8;
											CelDrawHdrClrHL(181, v49, v31, *(int32_t *)(v29 + 24), v66);
											v32 = g27;
											v33 = g31;
											// branch -> 0xb00f4
										}
										// 0xb00f4
										v67 = *(int32_t *)(v33 + 32);
										v68 = *(int32_t *)(v33 + 36);
										function_4e998(v32, g36, *(int32_t *)(v33 + 24), v67, v68, 0, 8);
										function_c9acc(*(int32_t *)(g31 + 24));
										// branch -> 0xb011c
										// Detected a possible infinite recursion (goto support failed); quitting...
									} else {
										v30 = v29;
									}
								}
								// 0xb00ac
								function_c9acc(*(int32_t *)(v30 + 24));
								// branch -> 0xb011c
								// Detected a possible infinite recursion (goto support failed); quitting...
							}
							// 0xb00ac
							function_c9acc(*(int32_t *)(v30 + 24));
							// branch -> 0xb011c
						}
						// Detected a possible infinite recursion (goto support failed); quitting...
					}
				}
			}
			// Detected a possible infinite recursion (goto support failed); quitting...
		}
		// 0xb0008
		if ((0x1000000 * g16 || 0xffffff) >= 0x1ffffff) {
			// 0xb0010
			function_afa48(g32, g35, g33, g36, 1, 0, 8);
			// branch -> 0xb0030
		}
		// 0xb0030
		v26 = g25;
		v39 = 0x1000000 * v26;
		v47 = v39 / 0x1000000;
		if ((v39 || 0xffffff) >= 0x1ffffff) {
			// 0xb0038
			v40 = v47 - 1;
			g26 = v40;
			v48 = *(int32_t *)(g23 - 0x7690) + 368 * v40;
			g31 = v48;
			if (*(int32_t *)(v48 + 52) == 0) {
				// 0xb0058
				if (v26 <= 127) {
					// 0xb0060
					g34 = *(int32_t *)(v48 + 24);
					v27 = function_c9948();
					v17 = v27;
					v28 = g31;
					if (v27 == 0) {
						// 0xb0070
						function_c9acc(*(int32_t *)(v28 + 24));
						// branch -> 0xb011c
					} else {
						// 0xb007c
						v65 = *(int32_t *)(v28 + 32);
						g11 = v65;
						v30 = v28;
						if (v65 >= 1) {
							// 0xb0088
							if (function_4d794(v27) > 50) {
								// 0xb0088
								v30 = g31;
								// branch -> 0xb00ac
							} else {
								// 0xb0098
								v41 = function_4d794(v17);
								v29 = g31;
								v66 = *(int32_t *)(v29 + 32);
								g40 = v66;
								if (v66 <= v41) {
									// 0xb00b8
									v49 = g33 - *(int32_t *)(v29 + 40);
									g27 = v49;
									v32 = v49;
									v33 = v29;
									if (g26 == (int32_t) * (char *)*(int32_t *)(g23 - 0x7748)) {
										// 0xb00d4
										g37 = v49;
										g41 = *(int32_t *)(v29 + 36);
										v31 = g36;
										g38 = v31;
										g42 = 0;
										g13 = 8;
										CelDrawHdrClrHL(181, v49, v31, *(int32_t *)(v29 + 24), v66);
										v32 = g27;
										v33 = g31;
										// branch -> 0xb00f4
									}
									// 0xb00f4
									v67 = *(int32_t *)(v33 + 32);
									v68 = *(int32_t *)(v33 + 36);
									function_4e998(v32, g36, *(int32_t *)(v33 + 24), v67, v68, 0, 8);
									function_c9acc(*(int32_t *)(g31 + 24));
									// branch -> 0xb011c
									// Detected a possible infinite recursion (goto support failed); quitting...
								} else {
									v30 = v29;
								}
							}
							// 0xb00ac
							function_c9acc(*(int32_t *)(v30 + 24));
							// branch -> 0xb011c
							// Detected a possible infinite recursion (goto support failed); quitting...
						}
						// 0xb00ac
						function_c9acc(*(int32_t *)(v30 + 24));
						// branch -> 0xb011c
					}
					// Detected a possible infinite recursion (goto support failed); quitting...
				}
			}
		}
		// Detected a possible infinite recursion (goto support failed); quitting...
	}
	// 0xb0030
	v26 = g25;
	v39 = 0x1000000 * v26;
	if ((v39 || 0xffffff) >= 0x1ffffff) {
		// 0xb0038
		v40 = v39 / 0x1000000 - 1;
		g26 = v40;
		v48 = *(int32_t *)(g23 - 0x7690) + 368 * v40;
		g31 = v48;
		if (*(int32_t *)(v48 + 52) == 0) {
			// 0xb0058
			if (v26 <= 127) {
				// 0xb0060
				g34 = *(int32_t *)(v48 + 24);
				v27 = function_c9948();
				v28 = g31;
				if (v27 == 0) {
					// 0xb0070
					function_c9acc(*(int32_t *)(v28 + 24));
					// branch -> 0xb011c
				} else {
					// 0xb007c
					v65 = *(int32_t *)(v28 + 32);
					g11 = v65;
					v30 = v28;
					if (v65 >= 1) {
						// 0xb0088
						if (function_4d794(v27) > 50) {
							// 0xb0088
							v30 = g31;
							// branch -> 0xb00ac
						} else {
							// 0xb0098
							v41 = function_4d794(v27);
							v29 = g31;
							v66 = *(int32_t *)(v29 + 32);
							g40 = v66;
							if (v66 <= v41) {
								// 0xb00b8
								v49 = g33 - *(int32_t *)(v29 + 40);
								g27 = v49;
								v32 = v49;
								v33 = v29;
								if (g26 == (int32_t) * (char *)*(int32_t *)(g23 - 0x7748)) {
									// 0xb00d4
									g37 = v49;
									g41 = *(int32_t *)(v29 + 36);
									v31 = g36;
									g38 = v31;
									g42 = 0;
									g13 = 8;
									CelDrawHdrClrHL(181, v49, v31, *(int32_t *)(v29 + 24), v66);
									v32 = g27;
									v33 = g31;
									// branch -> 0xb00f4
								}
								// 0xb00f4
								v67 = *(int32_t *)(v33 + 32);
								v68 = *(int32_t *)(v33 + 36);
								function_4e998(v32, g36, *(int32_t *)(v33 + 24), v67, v68, 0, 8);
								function_c9acc(*(int32_t *)(g31 + 24));
								// branch -> 0xb011c
								// Detected a possible infinite recursion (goto support failed); quitting...
							} else {
								v30 = v29;
							}
						}
						// 0xb00ac
						function_c9acc(*(int32_t *)(v30 + 24));
						// branch -> 0xb011c
						// Detected a possible infinite recursion (goto support failed); quitting...
					}
					// 0xb00ac
					function_c9acc(*(int32_t *)(v30 + 24));
					// branch -> 0xb011c
				}
				// Detected a possible infinite recursion (goto support failed); quitting...
			}
			// Detected a possible infinite recursion (goto support failed); quitting...
		}
	}
	// Detected a possible infinite recursion (goto support failed); quitting...
}

// Address range: 0xb0690 - 0xb0c10
int32_t scrollrt_draw_lower(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6)
{
	// 0xb0690
	g37 = a2;
	g34 = a1;
	int32_t v1 = g10; // 0xb0694
	g31 = *(int32_t *)(g23 - 0x7250);
	g27 = g34;
	g32 = *(int32_t *)(g23 - 0x6f50);
	g24 = *(int32_t *)(g23 - 0x6f4c);
	g30 = g37;
	g16 = *(int32_t *)(g23 - 0x7588);
	g29 = a3;
	g18 = *(int32_t *)(g23 - 0x6f48);
	g22 = *(int32_t *)(g23 - 0x7698);
	g17 = a4;
	g26 = *(int32_t *)(g23 - 0x7804);
	g20 = a5;
	int32_t v2 = function_52378();                       // 0xb06d4
	int32_t v3 = *(int32_t *)*(int32_t *)(g23 - 0x7584); // 0xb06e8
	g28 = v3 + 32 * v2;
	int32_t v4;        // 0xb08a8
	int32_t v5;        // 0xb08b8
	int32_t v6;        // 0xb08bc
	int32_t v7;        // 0xb08cc
	int32_t v8;        // 0xb08d8
	int32_t v9;        // 0xb08dc
	int32_t v10;       // 0xb0a88
	int32_t v11;       // 0xb0a94
	int32_t v12;       // 0xb0a9c
	int32_t v13;       // 0xb0aec
	int32_t result2;   // 0xb0c0c
	int32_t result4;   // 0xb0c0c25
	int32_t result;    // 0xb0c0c27
	int32_t v14;       // 0xb08a8
	int32_t v15;       // 0xb08b0
	int32_t v16;       // 0xb08bc
	int32_t v17;       // 0xb08d8
	int32_t v18;       // 0xb08dc
	int32_t v19;       // 0xb0be4
	int32_t v20;       // 0xb0a8c
	int32_t v21;       // 0xb0aa0
	int32_t v22;       // 0xb0ab8
	int32_t v23;       // 0xb0ac8
	int32_t v24;       // 0xb0ad0
	uint16_t v25;      // 0xb0b1c
	int32_t v26;       // 0xb0bdc
	uint16_t v27;      // 0xb0b3c
	uint16_t v28;      // 0xb0b54
	uint16_t v29;      // 0xb0b70
	uint16_t v30;      // 0xb0b8c
	uint16_t v31;      // 0xb0ba8
	int16_t v32;       // 0xb0a90
	unsigned char v33; // 0xb0aa8
	unsigned char v34; // 0xb0ae8
	unsigned char v35; // 0xb0af4
	unsigned char v36; // 0xb0b04
	if (a6 == 0) {
		// 0xb0690
		result = v3;
		v6 = g30;
		v5 = g20;
		v4 = g27;
		// branch -> 0xb08a8
	} else {
		uint32_t v37 = g30; // 0xb06f4
		int32_t v38;        // 0xb0894
		int32_t v39;        // 0xb0898
		if (v37 <= 111) {
			uint32_t v40 = g27; // 0xb06fc
			if (v40 <= 111) {
				int32_t v41 = 224 * v40 + 2 * v37;                                        // 0xb0714
				int16_t v42 = *(int16_t *)(*(int32_t *)*(int32_t *)(g23 - 0x757c) + v41); // 0xb0718
				*(int32_t *)g18 = (int32_t)v42;
				int32_t v43 = g30 + 112 * v40;                                               // 0xb0728
				unsigned char v44 = *(char *)(*(int32_t *)*(int32_t *)(g23 - 0x758c) + v43); // 0xb0730
				*(int32_t *)*(int32_t *)(g23 - 0x7290) = (int32_t)v44;
				int32_t v45 = *(int32_t *)g18; // 0xb0740
				int32_t v46 = 4 * g17;         // 0xb087c
				int32_t v47;                   // 0xb0c0c28
				if (v45 == 0) {
					int32_t v48 = *(int32_t *)g26;                     // 0xb0880
					int32_t v49 = *(int32_t *)(g22 + v46) + v48 + g29; // 0xb088c
					g34 = v49;
					v47 = function_d9114(v49, v48);
					// branch -> 0xb0894
				} else {
					int32_t v50 = g22 + v46;                                                  // 0xb0754
					unsigned char v51 = *(char *)(*(int32_t *)(g23 - 0x7230) + v45);          // 0xb0760
					unsigned char v52 = *(char *)(v43 + *(int32_t *)g16);                     // 0xb0764
					unsigned char v53 = *(char *)(*(int32_t *)(g23 - 0x7268) + (int32_t)v52); // 0xb0778
					*(int32_t *)*(int32_t *)(g23 - 0x7294) = (int32_t)(v53 & v51);
					int32_t v54 = g29 + *(int32_t *)v50 + 32 + *(int32_t *)g26; // r21
					*(char *)g24 = (char)2;
					uint16_t v55 = *(int16_t *)(g28 + 2); // 0xb0798
					*(int32_t *)g32 = (int32_t)v55;
					if (v55 != 0) {
						// 0xb07a8
						function_d8e58(v54);
						// branch -> 0xb07b0
					}
					// 0xb07b0
					*(char *)g24 = 0;
					uint16_t v56 = *(int16_t *)(g28 + 6); // 0xb07b8
					*(int32_t *)g32 = (int32_t)v56;
					if (v56 != 0) {
						// 0xb07c8
						function_d8e58(v54 - 0x6000);
						// branch -> 0xb07d0
					}
					uint16_t v57 = *(int16_t *)(g28 + 10); // 0xb07d0
					*(int32_t *)g32 = (int32_t)v57;
					if (v57 != 0) {
						// 0xb07e0
						function_d8e58(v54 - 0xc000);
						// branch -> 0xb07ec
					}
					uint16_t v58 = *(int16_t *)(g28 + 14); // 0xb07ec
					*(int32_t *)g32 = (int32_t)v58;
					if (v58 != 0) {
						// 0xb07fc
						function_d8e58(v54 - 0x12000);
						// branch -> 0xb0808
					}
					uint16_t v59 = *(int16_t *)(g28 + 18); // 0xb0808
					*(int32_t *)g32 = (int32_t)v59;
					if (v59 != 0) {
						// 0xb0818
						function_d8e58(v54 - 0x18000);
						// branch -> 0xb0824
					}
					uint16_t v60 = *(int16_t *)(g28 + 22); // 0xb0824
					*(int32_t *)g32 = (int32_t)v60;
					if (v60 != 0) {
						// 0xb0834
						if (*(char *)*(int32_t *)(g23 - 0x7794) == 4) {
							// 0xb0844
							function_d8e58(v54 - 0x1e000);
							// branch -> 0xb0850
						}
					}
					int32_t v61 = *(int32_t *)g26; // 0xb0858
					int32_t v62 = g29;             // 0xb0860
					v47 = scrollrt_draw_clipped_dungeon(v61 + *(int32_t *)v50 + v62, g27, g30, v62, g17, 0);
					// branch -> 0xb0894
				}
				// 0xb0894
				v38 = g27 + 1;
				g27 = v38;
				v39 = g30 - 1;
				g30 = v39;
				g29 += 64;
				g28 += 32;
				result = v47;
				v6 = v39;
				v5 = g20 - 1;
				v4 = v38;
				// branch -> 0xb08a8
				// 0xb08a8
				v14 = 224 * v4;
				g19 = v14;
				v15 = 112 * v4;
				g21 = v15;
				g25 = g22 + 4 * g17;
				v16 = 2 * v6;
				g20 = v16;
				g22 = v5 - 1;
				v11 = v4;
				v10 = v6;
				if (v5 == 0) {
					// 0xb0a5c
					if (a6 == 0 || v10 > 111 || v11 >= 112) {
						// 0xb0bfc
						g10 = v1;
						return result;
					}
					// 0xb0a7c
					v20 = 2 * v10 + 224 * v11;
					v32 = *(int16_t *)(*(int32_t *)*(int32_t *)(g23 - 0x757c) + v20);
					*(int32_t *)g18 = (int32_t)v32;
					v12 = g23;
					v21 = g30 + 112 * v11;
					v33 = *(char *)(*(int32_t *)*(int32_t *)(v12 - 0x758c) + v21);
					*(int32_t *)*(int32_t *)(v12 - 0x7290) = (int32_t)v33;
					v22 = *(int32_t *)g18;
					if (v22 == 0) {
						// 0xb0ac4
						v23 = *(int32_t *)g26;
						v24 = v23 + *(int32_t *)g25 + g29;
						g34 = v24;
						result2 = function_d9114(v24, v23);
						// branch -> 0xb0bfc
					} else {
						// 0xb0adc
						v34 = *(char *)(v21 + *(int32_t *)g16);
						v13 = g23;
						v35 = *(char *)(*(int32_t *)(v13 - 0x7230) + v22);
						v36 = *(char *)(*(int32_t *)(v13 - 0x7268) + (int32_t)v34);
						g31 = *(int32_t *)g26 + g29 + *(int32_t *)g25;
						*(int32_t *)*(int32_t *)(v13 - 0x7294) = (int32_t)(v36 & v35);
						*(char *)g24 = (char)1;
						v25 = *(int16_t *)g28;
						*(int32_t *)g32 = (int32_t)v25;
						if (v25 != 0) {
							// 0xb0b2c
							function_d8e58(g31);
							// branch -> 0xb0b34
						}
						// 0xb0b34
						*(char *)g24 = 0;
						v27 = *(int16_t *)(g28 + 4);
						*(int32_t *)g32 = (int32_t)v27;
						if (v27 != 0) {
							// 0xb0b4c
							function_d8e58(g31 - 0x6000);
							// branch -> 0xb0b54
						}
						// 0xb0b54
						v28 = *(int16_t *)(g28 + 8);
						*(int32_t *)g32 = (int32_t)v28;
						if (v28 != 0) {
							// 0xb0b64
							function_d8e58(g31 - 0xc000);
							// branch -> 0xb0b70
						}
						// 0xb0b70
						v29 = *(int16_t *)(g28 + 12);
						*(int32_t *)g32 = (int32_t)v29;
						if (v29 != 0) {
							// 0xb0b80
							function_d8e58(g31 - 0x12000);
							// branch -> 0xb0b8c
						}
						// 0xb0b8c
						v30 = *(int16_t *)(g28 + 16);
						*(int32_t *)g32 = (int32_t)v30;
						if (v30 != 0) {
							// 0xb0b9c
							function_d8e58(g31 - 0x18000);
							// branch -> 0xb0ba8
						}
						// 0xb0ba8
						v31 = *(int16_t *)(g28 + 20);
						*(int32_t *)g32 = (int32_t)v31;
						if (v31 != 0) {
							// 0xb0bb8
							if (*(char *)*(int32_t *)(g23 - 0x7794) == 4) {
								// 0xb0bc8
								function_d8e58(g31 - 0x1e000);
								// branch -> 0xb0bd4
							}
						}
						// 0xb0bd4
						v26 = *(int32_t *)g26;
						v19 = g29;
						result2 = scrollrt_draw_clipped_dungeon(v26 + *(int32_t *)g25 + v19, g27, g30, v19, g17, 0);
						// branch -> 0xb0bfc
					}
					// 0xb0bfc
					g10 = v1;
					return result2;
				}
				result4 = result;
				v9 = v15;
				v17 = v16;
				v8 = v14;
				v7 = v4;
				v18 = v6;
				int32_t result3; // 0xb0c0c26
				while (true) {
					// 0xb0a4c
					if (v18 >= 0) {
					lab_0xb0a54:
						// 0xb0a54
						if (v7 < 112) {
							int32_t v63 = result4; // 0xb0c0c24
							int32_t v64;
							int32_t v65; // 0xb0a24
							int32_t v66; // 0xb0a28
							int32_t v67; // 0xb0a2c
							int32_t v68; // 0xb0a30
							int32_t v69; // 0xb0a34
							if (v18 <= 111) {
								// 0xb08cc
								if (v7 >= 0) {
									int32_t v70 = *(int32_t *)(g23 - 0x757c);               // 0xb08d4
									int32_t v71 = v18 + v9;                                 // r0
									int16_t v72 = *(int16_t *)(*(int32_t *)v70 + v8 + v17); // 0xb08e4
									*(int32_t *)g18 = (int32_t)v72;
									int32_t v73 = *(int32_t *)*(int32_t *)(g23 - 0x758c); // 0xb08f0
									char v74 = *(char *)(v71 + v73);                      // 0xb08f4
									*(int32_t *)*(int32_t *)(g23 - 0x7290) = (int32_t)v74;
									int32_t v75 = *(int32_t *)g18; // 0xb0904
									if (v75 == 0) {
										int32_t v76 = *(int32_t *)g26 + *(int32_t *)g25 + g29; // 0xb091c
										g34 = v76;
										v63 = function_d9114(v76, 0);
										// branch -> 0xb0a24
									} else {
										unsigned char v77 = *(char *)(v71 + *(int32_t *)g16);            // 0xb0934
										unsigned char v78 = *(char *)(*(int32_t *)(g23 - 0x7230) + v75); // 0xb0940
										char v79 = *(char *)(*(int32_t *)(g23 - 0x7268) + (int32_t)v77); // 0xb0950
										g36 = *(int32_t *)g26 + g29 + *(int32_t *)g25;
										*(int32_t *)*(int32_t *)(g23 - 0x7294) = (int32_t)(v79 & v78);
										*(char *)g24 = (char)1;
										uint16_t v80 = *(int16_t *)g28; // 0xb0968
										*(int32_t *)g32 = (int32_t)v80;
										if (v80 != 0) {
											// 0xb0978
											function_d8e58(g36);
											// branch -> 0xb0980
										}
										// 0xb0980
										*(char *)g24 = 2;
										uint16_t v81 = *(int16_t *)(g28 + 2); // 0xb0988
										*(int32_t *)g32 = (int32_t)v81;
										if (v81 != 0) {
											// 0xb0998
											function_d8e58(g36 + 32);
											// branch -> 0xb09a0
										}
										// 0xb09a0
										g35 = g28 + 4;
										*(char *)g24 = 0;
										g33 = 2;
										int32_t v82; // 0xb0a0c
										int32_t v83; // 0xb0a04
										if (*(int32_t *)g31 > 2) {
											int32_t v84 = g35; // 0xb09b4
											// branch -> 0xb09b4
											while (true) {
												uint16_t v85 = *(int16_t *)v84; // 0xb09b4
												g36 -= 0x6000;
												*(int32_t *)g32 = (int32_t)v85;
												if (v85 != 0) {
													// 0xb09c8
													function_d8e58(g36);
													// branch -> 0xb09d0
												}
												uint16_t v86 = *(int16_t *)(g35 + 2); // 0xb09d0
												*(int32_t *)g32 = (int32_t)v86;
												if (v86 != 0) {
													// 0xb09e0
													function_d8e58(g36 + 32);
													// branch -> 0xb09e8
												}
												int32_t v87 = g35 + 4; // 0xb09e8
												g35 = v87;
												int32_t v88 = g33 + 2; // 0xb09ec
												g33 = v88;
												if (v88 >= *(int32_t *)g31) {
													// break -> 0xb09fc
													break;
												}
												v84 = v87;
												// continue -> 0xb09b4
											}
											// 0xb09fc
											v83 = *(int32_t *)g26;
											v82 = g29;
											v63 = scrollrt_draw_clipped_dungeon(v83 + *(int32_t *)g25 + v82, g27, g30, v82, g17, 1);
											// branch -> 0xb0a24
										lab_0xb0a24:
											// 0xb0a24
											v65 = g19 + 224;
											g19 = v65;
											v66 = g21 + 112;
											g21 = v66;
											v67 = g27 + 1;
											g27 = v67;
											v68 = g20 - 2;
											g20 = v68;
											v69 = g30 - 1;
											g30 = v69;
											g29 += 64;
											g28 += 32;
											v64 = g22;
											g22 = v64 - 1;
											if (v64 == 0) {
												result3 = v63;
												v11 = v67;
												v10 = v69;
												// break -> 0xb0a5c
												break;
											}
											result4 = v63;
											v9 = v66;
											v17 = v68;
											v8 = v65;
											v7 = v67;
											v18 = v69;
											// continue -> 0xb0a4c
											continue;
										}
										// 0xb09fc
										v83 = *(int32_t *)g26;
										v82 = g29;
										v63 = scrollrt_draw_clipped_dungeon(v83 + *(int32_t *)g25 + v82, g27, g30, v82, g17, 1);
										// branch -> 0xb0a24
										goto lab_0xb0a24;
									}
									// 0xb0a24
									v65 = g19 + 224;
									g19 = v65;
									v66 = g21 + 112;
									g21 = v66;
									v67 = g27 + 1;
									g27 = v67;
									v68 = g20 - 2;
									g20 = v68;
									v69 = g30 - 1;
									g30 = v69;
									g29 += 64;
									g28 += 32;
									v64 = g22;
									g22 = v64 - 1;
									if (v64 == 0) {
										result3 = v63;
										v11 = v67;
										v10 = v69;
										// break -> 0xb0a5c
										break;
									}
									result4 = v63;
									v9 = v66;
									v17 = v68;
									v8 = v65;
									v7 = v67;
									v18 = v69;
									// continue -> 0xb0a4c
									continue;
								} else {
									v63 = result4;
								}
							}
							// 0xb0a24
							v65 = g19 + 224;
							g19 = v65;
							v66 = g21 + 112;
							g21 = v66;
							v67 = g27 + 1;
							g27 = v67;
							v68 = g20 - 2;
							g20 = v68;
							v69 = g30 - 1;
							g30 = v69;
							g29 += 64;
							g28 += 32;
							v64 = g22;
							g22 = v64 - 1;
							if (v64 == 0) {
								result3 = v63;
								v11 = v67;
								v10 = v69;
								// break -> 0xb0a5c
								break;
							}
							result4 = v63;
							v9 = v66;
							v17 = v68;
							v8 = v65;
							v7 = v67;
							v18 = v69;
							// continue -> 0xb0a4c
							continue;
						} else {
							result3 = result4;
							v11 = v7;
							v10 = v18;
						}
					} else {
						result3 = result4;
						v11 = v7;
						v10 = v18;
					}
				}
				// 0xb0a5c
				if (a6 == 0 || v10 > 111 || v11 >= 112) {
					// 0xb0bfc
					g10 = v1;
					return result3;
				}
				// 0xb0a7c
				v20 = 2 * v10 + 224 * v11;
				v32 = *(int16_t *)(*(int32_t *)*(int32_t *)(g23 - 0x757c) + v20);
				*(int32_t *)g18 = (int32_t)v32;
				v12 = g23;
				v21 = g30 + 112 * v11;
				v33 = *(char *)(*(int32_t *)*(int32_t *)(v12 - 0x758c) + v21);
				*(int32_t *)*(int32_t *)(v12 - 0x7290) = (int32_t)v33;
				v22 = *(int32_t *)g18;
				if (v22 == 0) {
					// 0xb0ac4
					v23 = *(int32_t *)g26;
					v24 = v23 + *(int32_t *)g25 + g29;
					g34 = v24;
					result2 = function_d9114(v24, v23);
					// branch -> 0xb0bfc
				} else {
					// 0xb0adc
					v34 = *(char *)(v21 + *(int32_t *)g16);
					v13 = g23;
					v35 = *(char *)(*(int32_t *)(v13 - 0x7230) + v22);
					v36 = *(char *)(*(int32_t *)(v13 - 0x7268) + (int32_t)v34);
					g31 = *(int32_t *)g26 + g29 + *(int32_t *)g25;
					*(int32_t *)*(int32_t *)(v13 - 0x7294) = (int32_t)(v36 & v35);
					*(char *)g24 = (char)1;
					v25 = *(int16_t *)g28;
					*(int32_t *)g32 = (int32_t)v25;
					if (v25 != 0) {
						// 0xb0b2c
						function_d8e58(g31);
						// branch -> 0xb0b34
					}
					// 0xb0b34
					*(char *)g24 = 0;
					v27 = *(int16_t *)(g28 + 4);
					*(int32_t *)g32 = (int32_t)v27;
					if (v27 != 0) {
						// 0xb0b4c
						function_d8e58(g31 - 0x6000);
						// branch -> 0xb0b54
					}
					// 0xb0b54
					v28 = *(int16_t *)(g28 + 8);
					*(int32_t *)g32 = (int32_t)v28;
					if (v28 != 0) {
						// 0xb0b64
						function_d8e58(g31 - 0xc000);
						// branch -> 0xb0b70
					}
					// 0xb0b70
					v29 = *(int16_t *)(g28 + 12);
					*(int32_t *)g32 = (int32_t)v29;
					if (v29 != 0) {
						// 0xb0b80
						function_d8e58(g31 - 0x12000);
						// branch -> 0xb0b8c
					}
					// 0xb0b8c
					v30 = *(int16_t *)(g28 + 16);
					*(int32_t *)g32 = (int32_t)v30;
					if (v30 != 0) {
						// 0xb0b9c
						function_d8e58(g31 - 0x18000);
						// branch -> 0xb0ba8
					}
					// 0xb0ba8
					v31 = *(int16_t *)(g28 + 20);
					*(int32_t *)g32 = (int32_t)v31;
					if (v31 != 0) {
						// 0xb0bb8
						if (*(char *)*(int32_t *)(g23 - 0x7794) == 4) {
							// 0xb0bc8
							function_d8e58(g31 - 0x1e000);
							// branch -> 0xb0bd4
						}
					}
					// 0xb0bd4
					v26 = *(int32_t *)g26;
					v19 = g29;
					result2 = scrollrt_draw_clipped_dungeon(v26 + *(int32_t *)g25 + v19, g27, g30, v19, g17, 0);
					// branch -> 0xb0bfc
				}
				// 0xb0bfc
				g10 = v1;
				return result2;
			}
		}
		// 0xb0894
		v38 = g27 + 1;
		g27 = v38;
		v39 = g30 - 1;
		g30 = v39;
		g29 += 64;
		g28 += 32;
		result = v3;
		v6 = v39;
		v5 = g20 - 1;
		v4 = v38;
		// branch -> 0xb08a8
	}
	// 0xb08a8
	v14 = 224 * v4;
	g19 = v14;
	v15 = 112 * v4;
	g21 = v15;
	g25 = g22 + 4 * g17;
	v16 = 2 * v6;
	g20 = v16;
	g22 = v5 - 1;
	v11 = v4;
	v10 = v6;
	if (v5 != 0) {
		result4 = result;
		v9 = v15;
		v17 = v16;
		v8 = v14;
		v7 = v4;
		v18 = v6;
		while (true) {
			// 0xb0a4c
			if (v18 >= 0) {
				goto lab_0xb0a54;
			}
			v11 = v7;
			v10 = v18;
			// 0xb0a5c
			if (a6 == 0 || v10 > 111 || v11 >= 112) {
				// 0xb0bfc
				g10 = v1;
				return result4;
			}
			// 0xb0a7c
			v20 = 2 * v10 + 224 * v11;
			v32 = *(int16_t *)(*(int32_t *)*(int32_t *)(g23 - 0x757c) + v20);
			*(int32_t *)g18 = (int32_t)v32;
			v12 = g23;
			v21 = g30 + 112 * v11;
			v33 = *(char *)(*(int32_t *)*(int32_t *)(v12 - 0x758c) + v21);
			*(int32_t *)*(int32_t *)(v12 - 0x7290) = (int32_t)v33;
			v22 = *(int32_t *)g18;
			if (v22 == 0) {
				// 0xb0ac4
				v23 = *(int32_t *)g26;
				v24 = v23 + *(int32_t *)g25 + g29;
				g34 = v24;
				int32_t result5 = function_d9114(v24, v23); // 0xb0ad4
				// branch -> 0xb0bfc
				// 0xb0bfc
				g10 = v1;
				return result5;
			}
			// 0xb0adc
			v34 = *(char *)(v21 + *(int32_t *)g16);
			v13 = g23;
			v35 = *(char *)(*(int32_t *)(v13 - 0x7230) + v22);
			v36 = *(char *)(*(int32_t *)(v13 - 0x7268) + (int32_t)v34);
			g31 = *(int32_t *)g26 + g29 + *(int32_t *)g25;
			*(int32_t *)*(int32_t *)(v13 - 0x7294) = (int32_t)(v36 & v35);
			*(char *)g24 = (char)1;
			v25 = *(int16_t *)g28;
			*(int32_t *)g32 = (int32_t)v25;
			if (v25 != 0) {
				// 0xb0b2c
				function_d8e58(g31);
				// branch -> 0xb0b34
			}
			// 0xb0b34
			*(char *)g24 = 0;
			v27 = *(int16_t *)(g28 + 4);
			*(int32_t *)g32 = (int32_t)v27;
			if (v27 != 0) {
				// 0xb0b4c
				function_d8e58(g31 - 0x6000);
				// branch -> 0xb0b54
			}
			// 0xb0b54
			v28 = *(int16_t *)(g28 + 8);
			*(int32_t *)g32 = (int32_t)v28;
			if (v28 != 0) {
				// 0xb0b64
				function_d8e58(g31 - 0xc000);
				// branch -> 0xb0b70
			}
			// 0xb0b70
			v29 = *(int16_t *)(g28 + 12);
			*(int32_t *)g32 = (int32_t)v29;
			if (v29 != 0) {
				// 0xb0b80
				function_d8e58(g31 - 0x12000);
				// branch -> 0xb0b8c
			}
			// 0xb0b8c
			v30 = *(int16_t *)(g28 + 16);
			*(int32_t *)g32 = (int32_t)v30;
			if (v30 != 0) {
				// 0xb0b9c
				function_d8e58(g31 - 0x18000);
				// branch -> 0xb0ba8
			}
			// 0xb0ba8
			v31 = *(int16_t *)(g28 + 20);
			*(int32_t *)g32 = (int32_t)v31;
			int32_t result6; // 0xb0bf8
			if (v31 != 0) {
				// 0xb0bb8
				if (*(char *)*(int32_t *)(g23 - 0x7794) == 4) {
					// 0xb0bc8
					function_d8e58(g31 - 0x1e000);
					// branch -> 0xb0bd4
					// 0xb0bd4
					v26 = *(int32_t *)g26;
					v19 = g29;
					result6 = scrollrt_draw_clipped_dungeon(v26 + *(int32_t *)g25 + v19, g27, g30, v19, g17, 0);
					// branch -> 0xb0bfc
					// 0xb0bfc
					g10 = v1;
					return result6;
				}
			}
			// 0xb0bd4
			v26 = *(int32_t *)g26;
			v19 = g29;
			result6 = scrollrt_draw_clipped_dungeon(v26 + *(int32_t *)g25 + v19, g27, g30, v19, g17, 0);
			// branch -> 0xb0bfc
			// 0xb0bfc
			g10 = v1;
			return result6;
		}
	}
	// 0xb0a5c
	if (a6 == 0 || v10 > 111 || v11 >= 112) {
		// 0xb0bfc
		g10 = v1;
		return result;
	}
	// 0xb0a7c
	v20 = 2 * v10 + 224 * v11;
	v32 = *(int16_t *)(*(int32_t *)*(int32_t *)(g23 - 0x757c) + v20);
	*(int32_t *)g18 = (int32_t)v32;
	v12 = g23;
	v21 = g30 + 112 * v11;
	v33 = *(char *)(*(int32_t *)*(int32_t *)(v12 - 0x758c) + v21);
	*(int32_t *)*(int32_t *)(v12 - 0x7290) = (int32_t)v33;
	v22 = *(int32_t *)g18;
	if (v22 == 0) {
		// 0xb0ac4
		v23 = *(int32_t *)g26;
		v24 = v23 + *(int32_t *)g25 + g29;
		g34 = v24;
		result2 = function_d9114(v24, v23);
		// branch -> 0xb0bfc
	} else {
		// 0xb0adc
		v34 = *(char *)(v21 + *(int32_t *)g16);
		v13 = g23;
		v35 = *(char *)(*(int32_t *)(v13 - 0x7230) + v22);
		v36 = *(char *)(*(int32_t *)(v13 - 0x7268) + (int32_t)v34);
		g31 = *(int32_t *)g26 + g29 + *(int32_t *)g25;
		*(int32_t *)*(int32_t *)(v13 - 0x7294) = (int32_t)(v36 & v35);
		*(char *)g24 = (char)1;
		v25 = *(int16_t *)g28;
		*(int32_t *)g32 = (int32_t)v25;
		if (v25 != 0) {
			// 0xb0b2c
			function_d8e58(g31);
			// branch -> 0xb0b34
		}
		// 0xb0b34
		*(char *)g24 = 0;
		v27 = *(int16_t *)(g28 + 4);
		*(int32_t *)g32 = (int32_t)v27;
		if (v27 != 0) {
			// 0xb0b4c
			function_d8e58(g31 - 0x6000);
			// branch -> 0xb0b54
		}
		// 0xb0b54
		v28 = *(int16_t *)(g28 + 8);
		*(int32_t *)g32 = (int32_t)v28;
		if (v28 != 0) {
			// 0xb0b64
			function_d8e58(g31 - 0xc000);
			// branch -> 0xb0b70
		}
		// 0xb0b70
		v29 = *(int16_t *)(g28 + 12);
		*(int32_t *)g32 = (int32_t)v29;
		if (v29 != 0) {
			// 0xb0b80
			function_d8e58(g31 - 0x12000);
			// branch -> 0xb0b8c
		}
		// 0xb0b8c
		v30 = *(int16_t *)(g28 + 16);
		*(int32_t *)g32 = (int32_t)v30;
		if (v30 != 0) {
			// 0xb0b9c
			function_d8e58(g31 - 0x18000);
			// branch -> 0xb0ba8
		}
		// 0xb0ba8
		v31 = *(int16_t *)(g28 + 20);
		*(int32_t *)g32 = (int32_t)v31;
		if (v31 != 0) {
			// 0xb0bb8
			if (*(char *)*(int32_t *)(g23 - 0x7794) == 4) {
				// 0xb0bc8
				function_d8e58(g31 - 0x1e000);
				// branch -> 0xb0bd4
			}
		}
		// 0xb0bd4
		v26 = *(int32_t *)g26;
		v19 = g29;
		result2 = scrollrt_draw_clipped_dungeon(v26 + *(int32_t *)g25 + v19, g27, g30, v19, g17, 0);
		// branch -> 0xb0bfc
	}
	// 0xb0bfc
	g10 = v1;
	return result2;
}

// Address range: 0xb0c10 - 0xb0e1c
int32_t function_b0c10(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7)
{
	int32_t v1 = g10; // 0xb0c14
	g20 = a2;
	int32_t v2 = *(int32_t *)(g23 - 0x6f48); // 0xb0c24
	g33 = v2;
	g21 = a3;
	int32_t v3 = *(int32_t *)(g23 - 0x7294); // 0xb0c2c
	g35 = v3;
	g22 = a4;
	int32_t v4 = *(int32_t *)(g23 - 0x7290); // 0xb0c34
	g36 = v4;
	g19 = a1;
	g32 = *(int32_t *)(g23 - 0x6f50);
	g24 = a5;
	g25 = a6;
	g26 = a7;
	int32_t v5 = *(int32_t *)*(int32_t *)(g23 - 0x757c); // 0xb0c60
	int32_t v6 = a3 + 112 * a2;                          // r11
	g30 = *(int32_t *)v4;
	g29 = *(int32_t *)v3;
	int32_t *v7 = (int32_t *)v2; // 0xb0c74
	g28 = *v7;
	*v7 = (int32_t) * (int16_t *)(v5 + 2 * a3 + 224 * a2);
	int32_t v8 = *(int32_t *)(g23 - 0x7588);             // 0xb0c84
	int32_t v9 = *(int32_t *)*(int32_t *)(g23 - 0x758c); // 0xb0c88
	g31 = g19 + 0x6000 * g22;
	*(int32_t *)g36 = (int32_t) * (char *)(v6 + v9);
	g34 = g20;
	char v10 = *(char *)(v6 + *(int32_t *)v8); // 0xb0cb0
	g37 = g21;
	unsigned char v11 = *(char *)(*(int32_t *)(g23 - 0x7230) + *(int32_t *)g33); // 0xb0cb8
	char v12 = *(char *)(*(int32_t *)(g23 - 0x7268) + (int32_t)v10);             // 0xb0cc0
	*(int32_t *)g35 = (int32_t)(v12 & v11);
	int32_t v13 = g22;                                          // 0xb0cd4
	int32_t v14 = 32 * function_52378();                        // 0xb0cd8
	int32_t result = v14;                                       // r3
	int32_t v15 = *(int32_t *)*(int32_t *)(g23 - 0x7584) + v14; // 0xb0ce0
	g27 = v15;
	int32_t v16;  // 0xb0dd0
	uint16_t v17; // 0xb0d6c
	uint16_t v18; // 0xb0d88
	uint16_t v19; // 0xb0da0
	uint16_t v20; // 0xb0db8
	if (v13 == 2) {
		// 0xb0d6c
		v17 = *(int16_t *)(g27 + 12);
		g31 -= 0x6000;
		*(int32_t *)g32 = (int32_t)v17;
		if (v17 != 0) {
			// 0xb0d80
			result = function_d8e58(g31);
			// branch -> 0xb0d88
		}
		// 0xb0d88
		v18 = *(int16_t *)(g27 + 14);
		*(int32_t *)g32 = (int32_t)v18;
		if (v18 != 0) {
			// 0xb0d98
			result = function_d8e58(g31 + 32);
			// branch -> 0xb0da0
		}
		// 0xb0da0
		v19 = *(int16_t *)(g27 + 16);
		*(int32_t *)g32 = (int32_t)v19;
		if (v19 != 0) {
			// 0xb0db0
			result = function_d8e58(g31 - 0x6000);
			// branch -> 0xb0db8
		}
		// 0xb0db8
		v20 = *(int16_t *)(g27 + 18);
		*(int32_t *)g32 = (int32_t)v20;
		if (v20 != 0) {
			// 0xb0dc8
			result = function_d8e58(g31 - 0x5fe0);
			// branch -> 0xb0dd0
		}
		// 0xb0dd0
		v16 = g24;
		if (v16 <= 7) {
			// 0xb0dd8
			g13 = 0;
			result = function_b0e1c(g19, g20, g21, g22, v16, g25, g26);
			// branch -> 0xb0dfc
		}
		// 0xb0dfc
		*(int32_t *)g36 = g30;
		*(int32_t *)g35 = g29;
		*(int32_t *)g33 = g28;
		g10 = v1;
		return result;
	}
	// 0xb0ce8
	if (v13 > 2) {
		// 0xb0cfc
		if (v13 == 3) {
			// 0xb0da0
			v19 = *(int16_t *)(g27 + 16);
			*(int32_t *)g32 = (int32_t)v19;
			if (v19 != 0) {
				// 0xb0db0
				result = function_d8e58(g31 - 0x6000);
				// branch -> 0xb0db8
			}
			// 0xb0db8
			v20 = *(int16_t *)(g27 + 18);
			*(int32_t *)g32 = (int32_t)v20;
			if (v20 != 0) {
				// 0xb0dc8
				result = function_d8e58(g31 - 0x5fe0);
				// branch -> 0xb0dd0
			}
		}
	} else {
		// 0xb0cec
		if (v13 == 0) {
			uint16_t v21 = *(int16_t *)(v15 + 4); // 0xb0d08
			*(int32_t *)g32 = (int32_t)v21;
			if (v21 != 0) {
				// 0xb0d18
				result = function_d8e58(g31);
				// branch -> 0xb0d20
			}
			uint16_t v22 = *(int16_t *)(g27 + 6); // 0xb0d20
			*(int32_t *)g32 = (int32_t)v22;
			if (v22 != 0) {
				// 0xb0d30
				result = function_d8e58(g31 + 32);
				// branch -> 0xb0d38
			}
		} else {
			// 0xb0cf4
			if (v13 <= 0) {
				// 0xb0dd0
				v16 = g24;
				if (v16 <= 7) {
					// 0xb0dd8
					g13 = 0;
					result = function_b0e1c(g19, g20, g21, g22, v16, g25, g26);
					// branch -> 0xb0dfc
				}
				// 0xb0dfc
				*(int32_t *)g36 = g30;
				*(int32_t *)g35 = g29;
				*(int32_t *)g33 = g28;
				g10 = v1;
				return result;
			}
		}
		uint16_t v23 = *(int16_t *)(g27 + 8); // 0xb0d38
		g31 -= 0x6000;
		*(int32_t *)g32 = (int32_t)v23;
		if (v23 != 0) {
			// 0xb0d4c
			result = function_d8e58(g31);
			// branch -> 0xb0d54
		}
		uint16_t v24 = *(int16_t *)(g27 + 10); // 0xb0d54
		*(int32_t *)g32 = (int32_t)v24;
		if (v24 != 0) {
			// 0xb0d64
			result = function_d8e58(g31 + 32);
			// branch -> 0xb0d6c
		}
		// 0xb0d6c
		v17 = *(int16_t *)(g27 + 12);
		g31 -= 0x6000;
		*(int32_t *)g32 = (int32_t)v17;
		if (v17 != 0) {
			// 0xb0d80
			result = function_d8e58(g31);
			// branch -> 0xb0d88
		}
		// 0xb0d88
		v18 = *(int16_t *)(g27 + 14);
		*(int32_t *)g32 = (int32_t)v18;
		if (v18 != 0) {
			// 0xb0d98
			result = function_d8e58(g31 + 32);
			// branch -> 0xb0da0
		}
		// 0xb0da0
		v19 = *(int16_t *)(g27 + 16);
		*(int32_t *)g32 = (int32_t)v19;
		if (v19 != 0) {
			// 0xb0db0
			result = function_d8e58(g31 - 0x6000);
			// branch -> 0xb0db8
		}
		// 0xb0db8
		v20 = *(int16_t *)(g27 + 18);
		*(int32_t *)g32 = (int32_t)v20;
		if (v20 != 0) {
			// 0xb0dc8
			result = function_d8e58(g31 - 0x5fe0);
			// branch -> 0xb0dd0
		}
	}
	// 0xb0dd0
	v16 = g24;
	if (v16 <= 7) {
		// 0xb0dd8
		g13 = 0;
		result = function_b0e1c(g19, g20, g21, g22, v16, g25, g26);
		// branch -> 0xb0dfc
	}
	// 0xb0dfc
	*(int32_t *)g36 = g30;
	*(int32_t *)g35 = g29;
	*(int32_t *)g33 = g28;
	g10 = v1;
	return result;
}

// Address range: 0xb0e1c - 0xb1720
int32_t function_b0e1c(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7)
{
	g31 = a2;
	int32_t v1 = g10; // 0xb0e24
	g33 = a3;
	int32_t v2 = 112 * a2; // 0xb0e34
	g20 = a4;
	int32_t v3 = 224 * a2; // 0xb0e44
	int32_t v4 = 2 * a3;   // 0xb0e50
	g19 = v4 + v3;
	g17 = g13;
	g16 = *(int32_t *)(g23 - 0x77a8);
	int32_t v5 = a3 + v2;                                // 0xb0e70
	int32_t v6 = *(int32_t *)*(int32_t *)(g23 - 0x7680); // 0xb0e78
	g27 = v6;
	int32_t v7 = *(int32_t *)*(int32_t *)(g23 - 0x767c); // 0xb0e7c
	int32_t v8 = *(int32_t *)*(int32_t *)(g23 - 0x768c); // 0xb0e9c
	g30 = v8;
	g28 = a1;
	unsigned char v9 = *(char *)(*(int32_t *)*(int32_t *)(g23 - 0x7684) + v5);  // 0xb0eac
	unsigned char v10 = *(char *)(*(int32_t *)*(int32_t *)(g23 - 0x7630) + v5); // 0xb0eb4
	g26 = v10;
	g36 = a5;
	g32 = a6;
	char v11 = *(char *)(*(int32_t *)*(int32_t *)(g23 - 0x7598) + v5); // 0xb0ec8
	char v12 = *(char *)(*(int32_t *)*(int32_t *)(g23 - 0x779c) + v5); // 0xb0ecc
	int32_t v13 = v12;                                                 // 0xb0ecc
	g24 = v13;
	g35 = a7;
	g21 = (int32_t) * (char *)(v8 + v5);
	g22 = (int32_t) * (char *)(v6 + v5);
	char v14 = *(char *)(*(int32_t *)*(int32_t *)(g23 - 0x7588) + v5); // 0xb0edc
	g25 = *(int32_t *)(g23 - 0x6f54);
	uint16_t v15 = *(int16_t *)(g19 + v7);  // 0xb0ee8
	int32_t v16 = v15;                      // 0xb0ee8
	char v17 = *(char *)(v6 + v2 + a3 - 1); // 0xb0ef4
	g18 = (int32_t) * (int16_t *)(v7 + v3 + v4 - 2);
	int32_t v18;       // r25
	int32_t v19;       // 0xb0f2c
	int32_t v20;       // 0xb0f8c
	int32_t v21;       // 0xb0fa4
	int32_t v22;       // 0xb0fbc
	int32_t v23;       // 0xb0ff8
	int32_t v24;       // 0xb1040
	int32_t v25;       // 0xb1044
	int32_t v26;       // 0xb1048
	int32_t v27;       // 0xb104c
	uint32_t v28;      // 0xb108c
	int32_t v29;       // 0xb10c0
	int32_t v30;       // 0xb10cc
	int32_t v31;       // 0xb10fc
	int32_t v32;       // 0xb1108
	int32_t v33;       // 0xb113c
	int32_t v34;       // 0xb1154
	int32_t v35;       // 0xb1160
	uint32_t v36;      // 0xb1268
	int32_t v37;       // 0xb12e0
	int32_t v38;       // 0xb0f80
	int32_t v39;       // 0xb0fa0
	int32_t v40;       // 0xb0ff4
	int32_t v41;       // 0xb108c
	int32_t v42;       // 0xb109c
	int32_t v43;       // 0xb10f8
	int32_t v44;       // 0xb1190
	int32_t v45;       // 0xb138c
	int32_t v46;       // 0xb1398
	int32_t v47;       // 0xb0f80
	int32_t v48;       // 0xb0fb0
	int32_t v49;       // 0xb108c
	int32_t v50;       // 0xb10a4
	int32_t v51;       // 0xb1128
	int32_t v52;       // 0xb1178
	int32_t v53;       // 0xb11a4
	int32_t v54;       // 0xb11bc
	int32_t v55;       // 0xb11c8
	uint32_t v56;      // 0xb127c
	int32_t v57;       // 0xb1290
	int32_t v58;       // 0xb13a8
	int32_t v59;       // 0xb13c0
	int32_t v60;       // 0xb13cc
	int32_t v61;       // 0xb0f64
	int32_t v62;       // 0xb0f6c
	uint32_t v63;      // 0xb0fd4
	uint32_t v64;      // 0xb0ff8
	unsigned char v65; // 0xb1010
	int32_t v66;       // 0xb103c
	uint32_t v67;      // 0xb10d8
	uint32_t v68;      // 0xb10fc
	int32_t v69;       // 0xb1158
	int32_t v70;       // 0xb1160
	int32_t v71;       // 0xb11d0
	int32_t v72;       // 0xb11d4
	int32_t v73;       // 0xb11e8
	int32_t v74;       // 0xb124c
	int32_t v75;       // 0xb12a0
	int32_t v76;       // 0xb12f0
	int32_t v77;       // 0xb13dc
	int32_t v78;       // 0xb13f0
	int32_t v79;       // 0xb1458
	if (*(int32_t *)*(int32_t *)(g23 - 0x7608) != 0) {
		// 0xb0f04
		if (__asm_rlwinm_(v13, 0, 25, 25) != 0) {
			// 0xb0f0c
			function_4e5b4(g28, *(int32_t *)*(int32_t *)(g23 - 0x760c), 1, 64, g36, 8);
			// branch -> 0xb0f2c
		}
		// 0xb0f2c
		v19 = g23;
		v20 = v19;
		if (*(int32_t *)*(int32_t *)(v19 - 0x70e4) != 0) {
			// 0xb0f3c
			if (v12 % 2 != 0) {
				// 0xb0f44
				function_aeb58(g31, g33, g32, g35, g36, 8, 1);
				v20 = g23;
				// branch -> 0xb0f64
			} else {
				v20 = v19;
			}
		}
		// 0xb0f64
		v61 = *(int32_t *)(v20 - 0x70cc);
		v62 = *(int32_t *)(v20 - 0x7290);
		if (*(int32_t *)v62 < (int32_t) * (char *)v61) {
			// 0xb0f80
			v38 = 0x1000000 * g26;
			v47 = v38 / 0x1000000;
			if ((v38 || 0xffffff) >= 0x1ffffff) {
				// 0xb0f88
				g30 = *(int32_t *)(v20 - 0x7614) + 80 * (v47 % 32) - 80;
				v39 = __asm_rlwinm(v47, 27, 29, 31);
				v21 = g30;
				v48 = v21 + 0x1000000 * v39 / 0x200000;
				g29 = v48;
				g34 = v48;
				g26 = g32 - *(int32_t *)(v21 + 72);
				v22 = function_c9b28();
				g27 = v22;
				int32_t v80;   // 0xb14e4
				int32_t v81;   // 0xb159c
				uint32_t v82;  // 0xb15d8
				int32_t v83;   // 0xb160c
				int32_t v84;   // 0xb1618
				int32_t v85;   // 0xb1648
				int32_t v86;   // 0xb1670
				int32_t v87;   // 0xb1688
				int32_t v88;   // 0xb16a0
				int32_t v89;   // 0xb16ac
				int32_t v90;   // 0xb15d8
				int32_t v91;   // 0xb15e8
				int32_t v92;   // 0xb1644
				uint32_t v93;  // 0xb1480
				int32_t v94;   // 0xb1494
				int32_t v95;   // 0xb15d8
				int32_t v96;   // 0xb15f0
				int32_t v97;   // 0xb1674
				int32_t v98;   // 0xb14a4
				int32_t v99;   // 0xb14f4
				int32_t v100;  // 0xb159c
				int32_t v101;  // 0xb15a4
				uint32_t v102; // 0xb1624
				uint32_t v103; // 0xb1648
				int32_t v104;  // 0xb16a4
				int32_t v105;  // 0xb16ac
				if (v22 == 0) {
					// 0xb0fc8
					function_c9b70((int32_t *)g29);
					// branch -> 0xb1060
				} else {
					// 0xb0fd4
					v63 = *(int32_t *)(g30 + 64);
					g11 = v63;
					if (v63 >= 1) {
						// 0xb0fe0
						if (function_4d794(v22) <= 50) {
							// 0xb0ff0
							v40 = function_4d794(g27);
							v23 = g30;
							v64 = *(int32_t *)(v23 + 64);
							if (v64 <= v40) {
								// 0xb1010
								v65 = *(char *)(v23 + 76);
								g13 = v65;
								v66 = *(int32_t *)(v23 + 68);
								v24 = g26;
								v25 = g35;
								v26 = g29;
								v27 = g36;
								if (v65 == 0) {
									// 0xb103c
									Cl2DecodeFrm6(v24, v25, v26, v64, v66, v27, 8);
									// branch -> 0xb1058
								} else {
									// 0xb101c
									Cl2DecodeFrm5(v24, v25, v26, v64, v66, v27, 8);
									// branch -> 0xb1058
								}
								// 0xb1058
								function_c9b70((int32_t *)g29);
								// branch -> 0xb1060
								// 0xb1060
								if (v9 != 0) {
									// 0xb106c
									function_afa48(g31, g33, g32, g35, 1, g36, 8);
									// branch -> 0xb108c
								}
								// 0xb108c
								v28 = g21;
								v41 = 0x1000000 * v28;
								v49 = v41 / 0x1000000;
								int32_t v106; // 0xb1654
								if ((v41 || 0xffffff) >= 0x1ffffff) {
									// 0xb1094
									v42 = v49 - 1;
									g26 = v42;
									v50 = *(int32_t *)(g23 - 0x7690) + 368 * v42;
									g30 = v50;
									if (*(int32_t *)(v50 + 52) == 0) {
										// 0xb10b4
										if (v28 <= 127) {
											// 0xb10bc
											g34 = *(int32_t *)(v50 + 24);
											v29 = function_c9948();
											v18 = v29;
											v30 = g30;
											if (v29 == 0) {
												// 0xb10cc
												function_c9acc(*(int32_t *)(v30 + 24));
												// branch -> 0xb1178
											} else {
												// 0xb10d8
												v67 = *(int32_t *)(v30 + 32);
												g11 = v67;
												v32 = v30;
												if (v67 >= 1) {
													// 0xb10e4
													int32_t v107;       // r3
													int32_t v108;       // 0xb16d8
													int32_t result;     // 0xb171c
													int32_t v109;       // 0xb1288
													int32_t v110;       // 0xb148c
													int32_t v111;       // 0xb15ec
													int32_t v112;       // 0xb1658
													int32_t v113;       // 0xb16c0
													int32_t v114;       // 0xb1258
													int32_t v115;       // 0xb1464
													int32_t v116;       // 0xb15ac
													int32_t v117;       // 0xb1700
													int32_t v118;       // 0xb13d8
													unsigned char v119; // 0xb16e4
													if (function_4d794(v29) > 50) {
														// 0xb10e4
														v32 = g30;
														// branch -> 0xb1108
													} else {
														// 0xb10f4
														v43 = function_4d794(v18);
														v31 = g30;
														v68 = *(int32_t *)(v31 + 32);
														g40 = v68;
														if (v68 <= v43) {
															// 0xb1114
															v51 = g32 - *(int32_t *)(v31 + 40);
															g27 = v51;
															v34 = v51;
															v35 = v31;
															if (g26 == (int32_t) * (char *)*(int32_t *)(g23 - 0x7748)) {
																// 0xb1130
																g37 = v51;
																g41 = *(int32_t *)(v31 + 36);
																v33 = g35;
																g38 = v33;
																g42 = g36;
																g13 = 8;
																CelDrawHdrClrHL(181, v51, v33, *(int32_t *)(v31 + 24), v68);
																v34 = g27;
																v35 = g30;
																// branch -> 0xb1150
															}
															// 0xb1150
															v69 = *(int32_t *)(v35 + 32);
															v70 = *(int32_t *)(v35 + 36);
															function_4e998(v34, g35, *(int32_t *)(v35 + 24), v69, v70, g36, 8);
															v107 = function_c9acc(*(int32_t *)(g30 + 24));
															// branch -> 0xb1178
															// 0xb1178
															v52 = v12;
															g29 = v52;
															if (__asm_rlwinm_(v52, 0, 26, 26) != 0) {
																// 0xb1184
																v44 = -1 - (int32_t)v17;
																v107 = v44;
																if (v44 <= 3) {
																	// 0xb119c
																	v53 = g16 + 0x55ec * v44;
																	v54 = g35 + *(int32_t *)(v53 + 100);
																	v55 = g32 + *(int32_t *)(v53 + 96) - *(int32_t *)(v53 + 148);
																	v71 = *(int32_t *)(v53 + 124);
																	v72 = *(int32_t *)(v53 + 140);
																	g13 = *(int32_t *)(v53 + 144);
																	v107 = function_af440(v44, g31, g33 - 1, v55, v54, v71, v72, g36, 8);
																	if (g17 != 0) {
																		// 0xb11e8
																		v73 = *(int32_t *)(g30 + 152);
																		if (v73 != 0) {
																			// 0xb11f4
																			if (v73 == 2) {
																				// 0xb11fc
																				function_b0c10(g28 - 0x3060, g31 - 2, g33 + 1, g20, g36, g32 - 96, g35 - 16);
																				// branch -> 0xb121c
																			}
																			// 0xb121c
																			v107 = function_b0c10(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
																			// branch -> 0xb123c
																		}
																	}
																}
															}
															// 0xb123c
															if (__asm_rlwinm_(v52, 0, 27, 27) == 0) {
																// 0xb1364
																if (__asm_rlwinm_(v52, 0, 29, 29) != 0) {
																	// 0xb136c
																	v107 = function_af6d0(g31, g33, g32, g35, g36, 8, 1);
																	// branch -> 0xb138c
																}
																// 0xb138c
																v45 = 0x1000000 * g22;
																if (v45 >= 0 && (v45 || 0xffffff) >= 0x1ffffff) {
																	// 0xb1394
																	v46 = v45 / 0x1000000 - 1;
																	v107 = v46;
																	if (v46 <= 3) {
																		// 0xb13a4
																		v58 = g16 + 0x55ec * v46;
																		v59 = g35 + *(int32_t *)(v58 + 100);
																		v60 = g32 + *(int32_t *)(v58 + 96) - *(int32_t *)(v58 + 148);
																		v118 = *(int32_t *)(v58 + 124);
																		v77 = *(int32_t *)(v58 + 140);
																		g13 = *(int32_t *)(v58 + 144);
																		v107 = function_af440(v46, g31, g33, v60, v59, v118, v77, g36, 8);
																		if (g17 != 0) {
																			// 0xb13f0
																			v78 = *(int32_t *)(g30 + 152);
																			if (v78 != 0) {
																				// 0xb13fc
																				if (v78 == 2) {
																					// 0xb1404
																					function_b0c10(g28 - 0x3060, g31 - 2, g33 + 1, g20, g36, g32 - 96, g35 - 16);
																					// branch -> 0xb1424
																				}
																				// 0xb1424
																				v107 = function_b0c10(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
																				// branch -> 0xb1444
																			}
																		}
																	}
																}
																// 0xb1444
																if (v15 < 1) {
																	// 0xb1568
																	if (v52 % 2 != 0) {
																		// 0xb1570
																		v107 = function_aeb58(g31, g33, g32, g35, g36, 8, 0);
																		// branch -> 0xb1590
																	}
																	// 0xb1590
																	if (v9 != 0) {
																		// 0xb159c
																		v81 = g23;
																		v116 = *(int32_t *)*(int32_t *)(v81 - 0x7290);
																		v107 = v116;
																		if (v116 < (int32_t) * (char *)*(int32_t *)(v81 - 0x70cc)) {
																			// 0xb15b8
																			v107 = function_afa48(g31, g33, g32, g35, 0, g36, 8);
																			// branch -> 0xb15d8
																		}
																	}
																	// 0xb15d8
																	v82 = g21;
																	v90 = 0x1000000 * v82;
																	if ((v90 || 0xffffff) >= 0x1ffffff) {
																		// 0xb15e0
																		v91 = v90 / 0x1000000 - 1;
																		g27 = v91;
																		v111 = 368 * v91;
																		v107 = v111;
																		v96 = *(int32_t *)(g23 - 0x7690) + v111;
																		g31 = v96;
																		if (*(int32_t *)(v96 + 52) != 0) {
																			// 0xb1600
																			if (v82 <= 127) {
																				// 0xb1608
																				g34 = *(int32_t *)(v96 + 24);
																				v83 = function_c9948();
																				g29 = v83;
																				v84 = g31;
																				if (v83 == 0) {
																					// 0xb1618
																					v107 = function_c9acc(*(int32_t *)(v84 + 24));
																					// branch -> 0xb16c4
																				} else {
																					// 0xb1624
																					v102 = *(int32_t *)(v84 + 32);
																					g11 = v102;
																					if (v102 >= 1) {
																						// 0xb1630
																						if (function_4d794(v83) > 50) {
																							// 0xb1630
																							v106 = g31;
																							// branch -> 0xb1654
																						} else {
																							// 0xb1640
																							v92 = function_4d794(g29);
																							v85 = g31;
																							v103 = *(int32_t *)(v85 + 32);
																							g40 = v103;
																							if (v103 <= v92) {
																								// 0xb1660
																								v86 = g27;
																								v97 = g32 - *(int32_t *)(v85 + 40);
																								g27 = v97;
																								v88 = v97;
																								v89 = v85;
																								if (v86 == (int32_t) * (char *)*(int32_t *)(g23 - 0x7748)) {
																									// 0xb167c
																									g37 = v97;
																									g41 = *(int32_t *)(v85 + 36);
																									v87 = g35;
																									g38 = v87;
																									g42 = g36;
																									g13 = 8;
																									CelDrawHdrClrHL(181, v97, v87, *(int32_t *)(v85 + 24), v103);
																									v88 = g27;
																									v89 = g31;
																									// branch -> 0xb169c
																								}
																								// 0xb169c
																								v104 = *(int32_t *)(v89 + 32);
																								v105 = *(int32_t *)(v89 + 36);
																								function_4e998(v88, g35, *(int32_t *)(v89 + 24), v104, v105, g36, 8);
																								v113 = function_c9acc(*(int32_t *)(g31 + 24));
																								// branch -> 0xb16c4
																								// 0xb16c4
																								if (v11 == 0) {
																									// 0xb16c4
																									result = v113;
																									// branch -> 0xb170c
																								} else {
																									// 0xb16d0
																									v108 = g23;
																									v119 = *(char *)(*(int32_t *)(v108 - 0x7268) + (int32_t)v14);
																									*(int32_t *)*(int32_t *)(v108 - 0x7294) = (int32_t)v119;
																									v117 = *(int32_t *)*(int32_t *)(v108 - 0x7574);
																									result = function_4ea70(g28, v117, (int32_t)v11, 64, g36, 8);
																									// branch -> 0xb170c
																								}
																								// 0xb170c
																								g10 = v1;
																								return result;
																							}
																							v106 = v85;
																						}
																						// 0xb1654
																						v112 = function_c9acc(*(int32_t *)(v106 + 24));
																						// branch -> 0xb16c4
																						// 0xb16c4
																						if (v11 == 0) {
																							// 0xb16c4
																							result = v112;
																							// branch -> 0xb170c
																						} else {
																							// 0xb16d0
																							v108 = g23;
																							v119 = *(char *)(*(int32_t *)(v108 - 0x7268) + (int32_t)v14);
																							*(int32_t *)*(int32_t *)(v108 - 0x7294) = (int32_t)v119;
																							v117 = *(int32_t *)*(int32_t *)(v108 - 0x7574);
																							result = function_4ea70(g28, v117, (int32_t)v11, 64, g36, 8);
																							// branch -> 0xb170c
																						}
																						// 0xb170c
																						g10 = v1;
																						return result;
																					}
																					// 0xb1654
																					v107 = function_c9acc(*(int32_t *)(v84 + 24));
																					// branch -> 0xb16c4
																				}
																				// 0xb16c4
																				if (v11 == 0) {
																					// 0xb16c4
																					result = v107;
																					// branch -> 0xb170c
																				} else {
																					// 0xb16d0
																					v108 = g23;
																					v119 = *(char *)(*(int32_t *)(v108 - 0x7268) + (int32_t)v14);
																					*(int32_t *)*(int32_t *)(v108 - 0x7294) = (int32_t)v119;
																					v117 = *(int32_t *)*(int32_t *)(v108 - 0x7574);
																					result = function_4ea70(g28, v117, (int32_t)v11, 64, g36, 8);
																					// branch -> 0xb170c
																				}
																				// 0xb170c
																				g10 = v1;
																				return result;
																			}
																		}
																	}
																	// 0xb16c4
																	if (v11 == 0) {
																		// 0xb16c4
																		result = v107;
																		// branch -> 0xb170c
																	} else {
																		// 0xb16d0
																		v108 = g23;
																		v119 = *(char *)(*(int32_t *)(v108 - 0x7268) + (int32_t)v14);
																		*(int32_t *)*(int32_t *)(v108 - 0x7294) = (int32_t)v119;
																		v117 = *(int32_t *)*(int32_t *)(v108 - 0x7574);
																		result = function_4ea70(g28, v117, (int32_t)v11, 64, g36, 8);
																		// branch -> 0xb170c
																	}
																	// 0xb170c
																	g10 = v1;
																	return result;
																}
																// 0xb1450
																if (__asm_rlwinm_(v52, 0, 25, 25) == 0) {
																	// 0xb1458
																	v115 = g16 + 0x55ec * *(int32_t *)*(int32_t *)(g23 - 0x77ac);
																	v107 = v115;
																	if (*(int32_t *)(v115 + 460) != 0) {
																		// 0xb1474
																		v107 = v16;
																		*(int32_t *)g25 = v16 - 1;
																		v93 = *(int32_t *)g25;
																		if (v93 <= 199) {
																			// 0xb148c
																			v110 = 232 * v93;
																			v107 = v110;
																			v94 = *(int32_t *)(g23 - 0x7754) + v110;
																			g30 = v94;
																			if (*(int32_t *)(v94 + 160) % 2 == 0) {
																				// 0xb14a4
																				v98 = *(int32_t *)(v94 + 224);
																				if (v98 != 0) {
																					// 0xb14b0
																					g34 = v94 + 84;
																					g27 = g35 + *(int32_t *)(v94 + 60);
																					g26 = g32 + *(int32_t *)(v94 + 56) - *(int32_t *)(v98 + 496);
																					function_c9b28();
																					if (*(int32_t *)g25 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
																						// 0xb14e4
																						v80 = g30;
																						v99 = *(int32_t *)(*(int32_t *)(v80 + 224) + 492);
																						g13 = 8;
																						function_507f4(233, g26, g27, v80 + 84, *(int32_t *)(v80 + 104), v99, g36);
																						// branch -> 0xb150c
																					}
																					// 0xb150c
																					function_c9b70((int32_t *)(g30 + 84));
																					v107 = function_aefc4(g31, g33, g26, g27, *(int32_t *)g25, g36, 8);
																					if (g17 != 0) {
																						// 0xb153c
																						if (*(int32_t *)(g30 + 108) == 0) {
																							// 0xb1548
																							v107 = function_b0c10(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
																							// branch -> 0xb1568
																						}
																					}
																				}
																			}
																		}
																	}
																} else {
																	// 0xb1474
																	v107 = v16;
																	*(int32_t *)g25 = v16 - 1;
																	v93 = *(int32_t *)g25;
																	if (v93 <= 199) {
																		// 0xb148c
																		v110 = 232 * v93;
																		v107 = v110;
																		v94 = *(int32_t *)(g23 - 0x7754) + v110;
																		g30 = v94;
																		if (*(int32_t *)(v94 + 160) % 2 == 0) {
																			// 0xb14a4
																			v98 = *(int32_t *)(v94 + 224);
																			if (v98 != 0) {
																				// 0xb14b0
																				g34 = v94 + 84;
																				g27 = g35 + *(int32_t *)(v94 + 60);
																				g26 = g32 + *(int32_t *)(v94 + 56) - *(int32_t *)(v98 + 496);
																				function_c9b28();
																				if (*(int32_t *)g25 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
																					// 0xb14e4
																					v80 = g30;
																					v99 = *(int32_t *)(*(int32_t *)(v80 + 224) + 492);
																					g13 = 8;
																					function_507f4(233, g26, g27, v80 + 84, *(int32_t *)(v80 + 104), v99, g36);
																					// branch -> 0xb150c
																				}
																				// 0xb150c
																				function_c9b70((int32_t *)(g30 + 84));
																				v107 = function_aefc4(g31, g33, g26, g27, *(int32_t *)g25, g36, 8);
																				if (g17 != 0) {
																					// 0xb153c
																					if (*(int32_t *)(g30 + 108) == 0) {
																						// 0xb1548
																						v107 = function_b0c10(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
																						// branch -> 0xb1568
																					}
																				}
																			}
																		}
																	}
																}
																// 0xb1568
																if (v52 % 2 != 0) {
																	// 0xb1570
																	v107 = function_aeb58(g31, g33, g32, g35, g36, 8, 0);
																	// branch -> 0xb1590
																}
																// 0xb1590
																if (v9 != 0) {
																	// 0xb159c
																	v81 = g23;
																	v116 = *(int32_t *)*(int32_t *)(v81 - 0x7290);
																	v107 = v116;
																	if (v116 < (int32_t) * (char *)*(int32_t *)(v81 - 0x70cc)) {
																		// 0xb15b8
																		v107 = function_afa48(g31, g33, g32, g35, 0, g36, 8);
																		// branch -> 0xb15d8
																	}
																}
																// 0xb15d8
																v82 = g21;
																v90 = 0x1000000 * v82;
																if ((v90 || 0xffffff) >= 0x1ffffff) {
																	// 0xb15e0
																	v91 = v90 / 0x1000000 - 1;
																	g27 = v91;
																	v111 = 368 * v91;
																	v107 = v111;
																	v96 = *(int32_t *)(g23 - 0x7690) + v111;
																	g31 = v96;
																	if (*(int32_t *)(v96 + 52) != 0) {
																		// 0xb1600
																		if (v82 <= 127) {
																			// 0xb1608
																			g34 = *(int32_t *)(v96 + 24);
																			v83 = function_c9948();
																			g29 = v83;
																			v84 = g31;
																			if (v83 == 0) {
																				// 0xb1618
																				v107 = function_c9acc(*(int32_t *)(v84 + 24));
																				// branch -> 0xb16c4
																			} else {
																				// 0xb1624
																				v102 = *(int32_t *)(v84 + 32);
																				g11 = v102;
																				if (v102 >= 1) {
																					// 0xb1630
																					if (function_4d794(v83) > 50) {
																						// 0xb1630
																						v106 = g31;
																						// branch -> 0xb1654
																					} else {
																						// 0xb1640
																						v92 = function_4d794(g29);
																						v85 = g31;
																						v103 = *(int32_t *)(v85 + 32);
																						g40 = v103;
																						if (v103 <= v92) {
																							// 0xb1660
																							v86 = g27;
																							v97 = g32 - *(int32_t *)(v85 + 40);
																							g27 = v97;
																							v88 = v97;
																							v89 = v85;
																							if (v86 == (int32_t) * (char *)*(int32_t *)(g23 - 0x7748)) {
																								// 0xb167c
																								g37 = v97;
																								g41 = *(int32_t *)(v85 + 36);
																								v87 = g35;
																								g38 = v87;
																								g42 = g36;
																								g13 = 8;
																								CelDrawHdrClrHL(181, v97, v87, *(int32_t *)(v85 + 24), v103);
																								v88 = g27;
																								v89 = g31;
																								// branch -> 0xb169c
																							}
																							// 0xb169c
																							v104 = *(int32_t *)(v89 + 32);
																							v105 = *(int32_t *)(v89 + 36);
																							function_4e998(v88, g35, *(int32_t *)(v89 + 24), v104, v105, g36, 8);
																							v113 = function_c9acc(*(int32_t *)(g31 + 24));
																							// branch -> 0xb16c4
																							// 0xb16c4
																							if (v11 == 0) {
																								// 0xb16c4
																								result = v113;
																								// branch -> 0xb170c
																							} else {
																								// 0xb16d0
																								v108 = g23;
																								v119 = *(char *)(*(int32_t *)(v108 - 0x7268) + (int32_t)v14);
																								*(int32_t *)*(int32_t *)(v108 - 0x7294) = (int32_t)v119;
																								v117 = *(int32_t *)*(int32_t *)(v108 - 0x7574);
																								result = function_4ea70(g28, v117, (int32_t)v11, 64, g36, 8);
																								// branch -> 0xb170c
																							}
																							// 0xb170c
																							g10 = v1;
																							return result;
																						}
																						v106 = v85;
																					}
																					// 0xb1654
																					v112 = function_c9acc(*(int32_t *)(v106 + 24));
																					// branch -> 0xb16c4
																					// 0xb16c4
																					if (v11 == 0) {
																						// 0xb16c4
																						result = v112;
																						// branch -> 0xb170c
																					} else {
																						// 0xb16d0
																						v108 = g23;
																						v119 = *(char *)(*(int32_t *)(v108 - 0x7268) + (int32_t)v14);
																						*(int32_t *)*(int32_t *)(v108 - 0x7294) = (int32_t)v119;
																						v117 = *(int32_t *)*(int32_t *)(v108 - 0x7574);
																						result = function_4ea70(g28, v117, (int32_t)v11, 64, g36, 8);
																						// branch -> 0xb170c
																					}
																					// 0xb170c
																					g10 = v1;
																					return result;
																				}
																				// 0xb1654
																				v107 = function_c9acc(*(int32_t *)(v84 + 24));
																				// branch -> 0xb16c4
																			}
																			// 0xb16c4
																			if (v11 == 0) {
																				// 0xb16c4
																				result = v107;
																				// branch -> 0xb170c
																			} else {
																				// 0xb16d0
																				v108 = g23;
																				v119 = *(char *)(*(int32_t *)(v108 - 0x7268) + (int32_t)v14);
																				*(int32_t *)*(int32_t *)(v108 - 0x7294) = (int32_t)v119;
																				v117 = *(int32_t *)*(int32_t *)(v108 - 0x7574);
																				result = function_4ea70(g28, v117, (int32_t)v11, 64, g36, 8);
																				// branch -> 0xb170c
																			}
																			// 0xb170c
																			g10 = v1;
																			return result;
																		}
																	}
																}
																// 0xb16c4
																if (v11 == 0) {
																	// 0xb16c4
																	result = v107;
																	// branch -> 0xb170c
																} else {
																	// 0xb16d0
																	v108 = g23;
																	v119 = *(char *)(*(int32_t *)(v108 - 0x7268) + (int32_t)v14);
																	*(int32_t *)*(int32_t *)(v108 - 0x7294) = (int32_t)v119;
																	v117 = *(int32_t *)*(int32_t *)(v108 - 0x7574);
																	result = function_4ea70(g28, v117, (int32_t)v11, 64, g36, 8);
																	// branch -> 0xb170c
																}
																// 0xb170c
																g10 = v1;
																return result;
															}
															// 0xb1244
															if (__asm_rlwinm_(v52, 0, 25, 25) == 0) {
																// 0xb124c
																v114 = g16 + 0x55ec * *(int32_t *)*(int32_t *)(g23 - 0x77ac);
																v107 = v114;
																if (*(int32_t *)(v114 + 460) != 0) {
																	// 0xb1268
																	v36 = g18;
																	if (v36 <= 0xffffffff) {
																		// 0xb1270
																		*(int32_t *)g25 = -1 - v36;
																		v56 = *(int32_t *)g25;
																		if (v56 <= 199) {
																			// 0xb1288
																			v109 = 232 * v56;
																			v107 = v109;
																			v57 = *(int32_t *)(g23 - 0x7754) + v109;
																			g30 = v57;
																			if (*(int32_t *)(v57 + 160) % 2 == 0) {
																				// 0xb12a0
																				v75 = *(int32_t *)(v57 + 224);
																				if (v75 != 0) {
																					// 0xb12ac
																					g34 = v57 + 84;
																					g27 = g35 + *(int32_t *)(v57 + 60);
																					g26 = g32 + *(int32_t *)(v57 + 56) - *(int32_t *)(v75 + 496);
																					function_c9b28();
																					if (*(int32_t *)g25 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
																						// 0xb12e0
																						v37 = g30;
																						v76 = *(int32_t *)(*(int32_t *)(v37 + 224) + 492);
																						g13 = 8;
																						function_507f4(233, g26, g27, v37 + 84, *(int32_t *)(v37 + 104), v76, g36);
																						// branch -> 0xb1308
																					}
																					// 0xb1308
																					function_c9b70((int32_t *)(g30 + 84));
																					v107 = function_aefc4(g31, g33, g26, g27, *(int32_t *)g25, g36, 8);
																					if (g17 != 0) {
																						// 0xb1338
																						if (*(int32_t *)(g30 + 108) == 0) {
																							// 0xb1344
																							v107 = function_b0c10(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
																							// branch -> 0xb1364
																						}
																					}
																				}
																			}
																		}
																	}
																}
															} else {
																// 0xb1268
																v36 = g18;
																if (v36 <= 0xffffffff) {
																	// 0xb1270
																	*(int32_t *)g25 = -1 - v36;
																	v56 = *(int32_t *)g25;
																	if (v56 <= 199) {
																		// 0xb1288
																		v109 = 232 * v56;
																		v107 = v109;
																		v57 = *(int32_t *)(g23 - 0x7754) + v109;
																		g30 = v57;
																		if (*(int32_t *)(v57 + 160) % 2 == 0) {
																			// 0xb12a0
																			v75 = *(int32_t *)(v57 + 224);
																			if (v75 != 0) {
																				// 0xb12ac
																				g34 = v57 + 84;
																				g27 = g35 + *(int32_t *)(v57 + 60);
																				g26 = g32 + *(int32_t *)(v57 + 56) - *(int32_t *)(v75 + 496);
																				function_c9b28();
																				if (*(int32_t *)g25 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
																					// 0xb12e0
																					v37 = g30;
																					v76 = *(int32_t *)(*(int32_t *)(v37 + 224) + 492);
																					g13 = 8;
																					function_507f4(233, g26, g27, v37 + 84, *(int32_t *)(v37 + 104), v76, g36);
																					// branch -> 0xb1308
																				}
																				// 0xb1308
																				function_c9b70((int32_t *)(g30 + 84));
																				v107 = function_aefc4(g31, g33, g26, g27, *(int32_t *)g25, g36, 8);
																				if (g17 != 0) {
																					// 0xb1338
																					if (*(int32_t *)(g30 + 108) == 0) {
																						// 0xb1344
																						v107 = function_b0c10(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
																						// branch -> 0xb1364
																					}
																				}
																			}
																		}
																	}
																}
															}
															// 0xb1364
															if (__asm_rlwinm_(v52, 0, 29, 29) != 0) {
																// 0xb136c
																v107 = function_af6d0(g31, g33, g32, g35, g36, 8, 1);
																// branch -> 0xb138c
															}
															// 0xb138c
															v45 = 0x1000000 * g22;
															if (v45 >= 0 && (v45 || 0xffffff) >= 0x1ffffff) {
																// 0xb1394
																v46 = v45 / 0x1000000 - 1;
																v107 = v46;
																if (v46 <= 3) {
																	// 0xb13a4
																	v58 = g16 + 0x55ec * v46;
																	v59 = g35 + *(int32_t *)(v58 + 100);
																	v60 = g32 + *(int32_t *)(v58 + 96) - *(int32_t *)(v58 + 148);
																	v118 = *(int32_t *)(v58 + 124);
																	v77 = *(int32_t *)(v58 + 140);
																	g13 = *(int32_t *)(v58 + 144);
																	v107 = function_af440(v46, g31, g33, v60, v59, v118, v77, g36, 8);
																	if (g17 != 0) {
																		// 0xb13f0
																		v78 = *(int32_t *)(g30 + 152);
																		if (v78 != 0) {
																			// 0xb13fc
																			if (v78 == 2) {
																				// 0xb1404
																				function_b0c10(g28 - 0x3060, g31 - 2, g33 + 1, g20, g36, g32 - 96, g35 - 16);
																				// branch -> 0xb1424
																			}
																			// 0xb1424
																			v107 = function_b0c10(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
																			// branch -> 0xb1444
																		}
																	}
																}
															}
															// 0xb1444
															if (v15 < 1) {
																// 0xb1568
																if (v52 % 2 != 0) {
																	// 0xb1570
																	v107 = function_aeb58(g31, g33, g32, g35, g36, 8, 0);
																	// branch -> 0xb1590
																}
																// 0xb1590
																if (v9 != 0) {
																	// 0xb159c
																	v81 = g23;
																	v116 = *(int32_t *)*(int32_t *)(v81 - 0x7290);
																	v107 = v116;
																	if (v116 < (int32_t) * (char *)*(int32_t *)(v81 - 0x70cc)) {
																		// 0xb15b8
																		v107 = function_afa48(g31, g33, g32, g35, 0, g36, 8);
																		// branch -> 0xb15d8
																	}
																}
																// 0xb15d8
																v82 = g21;
																v90 = 0x1000000 * v82;
																if ((v90 || 0xffffff) >= 0x1ffffff) {
																	// 0xb15e0
																	v91 = v90 / 0x1000000 - 1;
																	g27 = v91;
																	v111 = 368 * v91;
																	v107 = v111;
																	v96 = *(int32_t *)(g23 - 0x7690) + v111;
																	g31 = v96;
																	if (*(int32_t *)(v96 + 52) != 0) {
																		// 0xb1600
																		if (v82 <= 127) {
																			// 0xb1608
																			g34 = *(int32_t *)(v96 + 24);
																			v83 = function_c9948();
																			g29 = v83;
																			v84 = g31;
																			if (v83 == 0) {
																				// 0xb1618
																				v107 = function_c9acc(*(int32_t *)(v84 + 24));
																				// branch -> 0xb16c4
																			} else {
																				// 0xb1624
																				v102 = *(int32_t *)(v84 + 32);
																				g11 = v102;
																				if (v102 >= 1) {
																					// 0xb1630
																					if (function_4d794(v83) > 50) {
																						// 0xb1630
																						v106 = g31;
																						// branch -> 0xb1654
																					} else {
																						// 0xb1640
																						v92 = function_4d794(g29);
																						v85 = g31;
																						v103 = *(int32_t *)(v85 + 32);
																						g40 = v103;
																						if (v103 <= v92) {
																							// 0xb1660
																							v86 = g27;
																							v97 = g32 - *(int32_t *)(v85 + 40);
																							g27 = v97;
																							v88 = v97;
																							v89 = v85;
																							if (v86 == (int32_t) * (char *)*(int32_t *)(g23 - 0x7748)) {
																								// 0xb167c
																								g37 = v97;
																								g41 = *(int32_t *)(v85 + 36);
																								v87 = g35;
																								g38 = v87;
																								g42 = g36;
																								g13 = 8;
																								CelDrawHdrClrHL(181, v97, v87, *(int32_t *)(v85 + 24), v103);
																								v88 = g27;
																								v89 = g31;
																								// branch -> 0xb169c
																							}
																							// 0xb169c
																							v104 = *(int32_t *)(v89 + 32);
																							v105 = *(int32_t *)(v89 + 36);
																							function_4e998(v88, g35, *(int32_t *)(v89 + 24), v104, v105, g36, 8);
																							v113 = function_c9acc(*(int32_t *)(g31 + 24));
																							// branch -> 0xb16c4
																							// 0xb16c4
																							if (v11 == 0) {
																								// 0xb16c4
																								result = v113;
																								// branch -> 0xb170c
																							} else {
																								// 0xb16d0
																								v108 = g23;
																								v119 = *(char *)(*(int32_t *)(v108 - 0x7268) + (int32_t)v14);
																								*(int32_t *)*(int32_t *)(v108 - 0x7294) = (int32_t)v119;
																								v117 = *(int32_t *)*(int32_t *)(v108 - 0x7574);
																								result = function_4ea70(g28, v117, (int32_t)v11, 64, g36, 8);
																								// branch -> 0xb170c
																							}
																							// 0xb170c
																							g10 = v1;
																							return result;
																						}
																						v106 = v85;
																					}
																					// 0xb1654
																					v112 = function_c9acc(*(int32_t *)(v106 + 24));
																					// branch -> 0xb16c4
																					// 0xb16c4
																					if (v11 == 0) {
																						// 0xb16c4
																						result = v112;
																						// branch -> 0xb170c
																					} else {
																						// 0xb16d0
																						v108 = g23;
																						v119 = *(char *)(*(int32_t *)(v108 - 0x7268) + (int32_t)v14);
																						*(int32_t *)*(int32_t *)(v108 - 0x7294) = (int32_t)v119;
																						v117 = *(int32_t *)*(int32_t *)(v108 - 0x7574);
																						result = function_4ea70(g28, v117, (int32_t)v11, 64, g36, 8);
																						// branch -> 0xb170c
																					}
																					// 0xb170c
																					g10 = v1;
																					return result;
																				}
																				// 0xb1654
																				v107 = function_c9acc(*(int32_t *)(v84 + 24));
																				// branch -> 0xb16c4
																			}
																			// 0xb16c4
																			if (v11 == 0) {
																				// 0xb16c4
																				result = v107;
																				// branch -> 0xb170c
																			} else {
																				// 0xb16d0
																				v108 = g23;
																				v119 = *(char *)(*(int32_t *)(v108 - 0x7268) + (int32_t)v14);
																				*(int32_t *)*(int32_t *)(v108 - 0x7294) = (int32_t)v119;
																				v117 = *(int32_t *)*(int32_t *)(v108 - 0x7574);
																				result = function_4ea70(g28, v117, (int32_t)v11, 64, g36, 8);
																				// branch -> 0xb170c
																			}
																			// 0xb170c
																			g10 = v1;
																			return result;
																		}
																	}
																}
																// 0xb16c4
																if (v11 == 0) {
																	// 0xb16c4
																	result = v107;
																	// branch -> 0xb170c
																} else {
																	// 0xb16d0
																	v108 = g23;
																	v119 = *(char *)(*(int32_t *)(v108 - 0x7268) + (int32_t)v14);
																	*(int32_t *)*(int32_t *)(v108 - 0x7294) = (int32_t)v119;
																	v117 = *(int32_t *)*(int32_t *)(v108 - 0x7574);
																	result = function_4ea70(g28, v117, (int32_t)v11, 64, g36, 8);
																	// branch -> 0xb170c
																}
																// 0xb170c
																g10 = v1;
																return result;
															}
															// 0xb1450
															if (__asm_rlwinm_(v52, 0, 25, 25) == 0) {
																// 0xb1458
																v115 = g16 + 0x55ec * *(int32_t *)*(int32_t *)(g23 - 0x77ac);
																v107 = v115;
																if (*(int32_t *)(v115 + 460) != 0) {
																	// 0xb1474
																	v107 = v16;
																	*(int32_t *)g25 = v16 - 1;
																	v93 = *(int32_t *)g25;
																	if (v93 <= 199) {
																		// 0xb148c
																		v110 = 232 * v93;
																		v107 = v110;
																		v94 = *(int32_t *)(g23 - 0x7754) + v110;
																		g30 = v94;
																		if (*(int32_t *)(v94 + 160) % 2 == 0) {
																			// 0xb14a4
																			v98 = *(int32_t *)(v94 + 224);
																			if (v98 != 0) {
																				// 0xb14b0
																				g34 = v94 + 84;
																				g27 = g35 + *(int32_t *)(v94 + 60);
																				g26 = g32 + *(int32_t *)(v94 + 56) - *(int32_t *)(v98 + 496);
																				function_c9b28();
																				if (*(int32_t *)g25 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
																					// 0xb14e4
																					v80 = g30;
																					v99 = *(int32_t *)(*(int32_t *)(v80 + 224) + 492);
																					g13 = 8;
																					function_507f4(233, g26, g27, v80 + 84, *(int32_t *)(v80 + 104), v99, g36);
																					// branch -> 0xb150c
																				}
																				// 0xb150c
																				function_c9b70((int32_t *)(g30 + 84));
																				v107 = function_aefc4(g31, g33, g26, g27, *(int32_t *)g25, g36, 8);
																				if (g17 != 0) {
																					// 0xb153c
																					if (*(int32_t *)(g30 + 108) == 0) {
																						// 0xb1548
																						v107 = function_b0c10(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
																						// branch -> 0xb1568
																					}
																				}
																			}
																		}
																	}
																}
															} else {
																// 0xb1474
																v107 = v16;
																*(int32_t *)g25 = v16 - 1;
																v93 = *(int32_t *)g25;
																if (v93 <= 199) {
																	// 0xb148c
																	v110 = 232 * v93;
																	v107 = v110;
																	v94 = *(int32_t *)(g23 - 0x7754) + v110;
																	g30 = v94;
																	if (*(int32_t *)(v94 + 160) % 2 == 0) {
																		// 0xb14a4
																		v98 = *(int32_t *)(v94 + 224);
																		if (v98 != 0) {
																			// 0xb14b0
																			g34 = v94 + 84;
																			g27 = g35 + *(int32_t *)(v94 + 60);
																			g26 = g32 + *(int32_t *)(v94 + 56) - *(int32_t *)(v98 + 496);
																			function_c9b28();
																			if (*(int32_t *)g25 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
																				// 0xb14e4
																				v80 = g30;
																				v99 = *(int32_t *)(*(int32_t *)(v80 + 224) + 492);
																				g13 = 8;
																				function_507f4(233, g26, g27, v80 + 84, *(int32_t *)(v80 + 104), v99, g36);
																				// branch -> 0xb150c
																			}
																			// 0xb150c
																			function_c9b70((int32_t *)(g30 + 84));
																			v107 = function_aefc4(g31, g33, g26, g27, *(int32_t *)g25, g36, 8);
																			if (g17 != 0) {
																				// 0xb153c
																				if (*(int32_t *)(g30 + 108) == 0) {
																					// 0xb1548
																					v107 = function_b0c10(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
																					// branch -> 0xb1568
																				}
																			}
																		}
																	}
																}
															}
															// 0xb1568
															if (v52 % 2 != 0) {
																// 0xb1570
																v107 = function_aeb58(g31, g33, g32, g35, g36, 8, 0);
																// branch -> 0xb1590
															}
															// 0xb1590
															if (v9 != 0) {
																// 0xb159c
																v81 = g23;
																v116 = *(int32_t *)*(int32_t *)(v81 - 0x7290);
																v107 = v116;
																if (v116 < (int32_t) * (char *)*(int32_t *)(v81 - 0x70cc)) {
																	// 0xb15b8
																	v107 = function_afa48(g31, g33, g32, g35, 0, g36, 8);
																	// branch -> 0xb15d8
																}
															}
															// 0xb15d8
															v82 = g21;
															v90 = 0x1000000 * v82;
															if ((v90 || 0xffffff) >= 0x1ffffff) {
																// 0xb15e0
																v91 = v90 / 0x1000000 - 1;
																g27 = v91;
																v111 = 368 * v91;
																v107 = v111;
																v96 = *(int32_t *)(g23 - 0x7690) + v111;
																g31 = v96;
																if (*(int32_t *)(v96 + 52) != 0) {
																	// 0xb1600
																	if (v82 <= 127) {
																		// 0xb1608
																		g34 = *(int32_t *)(v96 + 24);
																		v83 = function_c9948();
																		g29 = v83;
																		v84 = g31;
																		if (v83 == 0) {
																			// 0xb1618
																			v107 = function_c9acc(*(int32_t *)(v84 + 24));
																			// branch -> 0xb16c4
																		} else {
																			// 0xb1624
																			v102 = *(int32_t *)(v84 + 32);
																			g11 = v102;
																			if (v102 >= 1) {
																				// 0xb1630
																				if (function_4d794(v83) > 50) {
																					// 0xb1630
																					v106 = g31;
																					// branch -> 0xb1654
																				} else {
																					// 0xb1640
																					v92 = function_4d794(g29);
																					v85 = g31;
																					v103 = *(int32_t *)(v85 + 32);
																					g40 = v103;
																					if (v103 <= v92) {
																						// 0xb1660
																						v86 = g27;
																						v97 = g32 - *(int32_t *)(v85 + 40);
																						g27 = v97;
																						v88 = v97;
																						v89 = v85;
																						if (v86 == (int32_t) * (char *)*(int32_t *)(g23 - 0x7748)) {
																							// 0xb167c
																							g37 = v97;
																							g41 = *(int32_t *)(v85 + 36);
																							v87 = g35;
																							g38 = v87;
																							g42 = g36;
																							g13 = 8;
																							CelDrawHdrClrHL(181, v97, v87, *(int32_t *)(v85 + 24), v103);
																							v88 = g27;
																							v89 = g31;
																							// branch -> 0xb169c
																						}
																						// 0xb169c
																						v104 = *(int32_t *)(v89 + 32);
																						v105 = *(int32_t *)(v89 + 36);
																						function_4e998(v88, g35, *(int32_t *)(v89 + 24), v104, v105, g36, 8);
																						v113 = function_c9acc(*(int32_t *)(g31 + 24));
																						// branch -> 0xb16c4
																						// 0xb16c4
																						if (v11 == 0) {
																							// 0xb16c4
																							result = v113;
																							// branch -> 0xb170c
																						} else {
																							// 0xb16d0
																							v108 = g23;
																							v119 = *(char *)(*(int32_t *)(v108 - 0x7268) + (int32_t)v14);
																							*(int32_t *)*(int32_t *)(v108 - 0x7294) = (int32_t)v119;
																							v117 = *(int32_t *)*(int32_t *)(v108 - 0x7574);
																							result = function_4ea70(g28, v117, (int32_t)v11, 64, g36, 8);
																							// branch -> 0xb170c
																						}
																						// 0xb170c
																						g10 = v1;
																						return result;
																					}
																					v106 = v85;
																				}
																				// 0xb1654
																				v112 = function_c9acc(*(int32_t *)(v106 + 24));
																				// branch -> 0xb16c4
																				// 0xb16c4
																				if (v11 == 0) {
																					// 0xb16c4
																					result = v112;
																					// branch -> 0xb170c
																				} else {
																					// 0xb16d0
																					v108 = g23;
																					v119 = *(char *)(*(int32_t *)(v108 - 0x7268) + (int32_t)v14);
																					*(int32_t *)*(int32_t *)(v108 - 0x7294) = (int32_t)v119;
																					v117 = *(int32_t *)*(int32_t *)(v108 - 0x7574);
																					result = function_4ea70(g28, v117, (int32_t)v11, 64, g36, 8);
																					// branch -> 0xb170c
																				}
																				// 0xb170c
																				g10 = v1;
																				return result;
																			}
																			// 0xb1654
																			v107 = function_c9acc(*(int32_t *)(v84 + 24));
																			// branch -> 0xb16c4
																		}
																		// 0xb16c4
																		if (v11 == 0) {
																			// 0xb16c4
																			result = v107;
																			// branch -> 0xb170c
																		} else {
																			// 0xb16d0
																			v108 = g23;
																			v119 = *(char *)(*(int32_t *)(v108 - 0x7268) + (int32_t)v14);
																			*(int32_t *)*(int32_t *)(v108 - 0x7294) = (int32_t)v119;
																			v117 = *(int32_t *)*(int32_t *)(v108 - 0x7574);
																			result = function_4ea70(g28, v117, (int32_t)v11, 64, g36, 8);
																			// branch -> 0xb170c
																		}
																		// 0xb170c
																		g10 = v1;
																		return result;
																	}
																}
															}
															// 0xb16c4
															if (v11 == 0) {
																// 0xb16c4
																result = v107;
																// branch -> 0xb170c
															} else {
																// 0xb16d0
																v108 = g23;
																v119 = *(char *)(*(int32_t *)(v108 - 0x7268) + (int32_t)v14);
																*(int32_t *)*(int32_t *)(v108 - 0x7294) = (int32_t)v119;
																v117 = *(int32_t *)*(int32_t *)(v108 - 0x7574);
																result = function_4ea70(g28, v117, (int32_t)v11, 64, g36, 8);
																// branch -> 0xb170c
															}
															// 0xb170c
															g10 = v1;
															return result;
														}
														v32 = v31;
													}
													// 0xb1108
													v107 = function_c9acc(*(int32_t *)(v32 + 24));
													// branch -> 0xb1178
													// 0xb1178
													v52 = v12;
													g29 = v52;
													if (__asm_rlwinm_(v52, 0, 26, 26) != 0) {
														// 0xb1184
														v44 = -1 - (int32_t)v17;
														v107 = v44;
														if (v44 <= 3) {
															// 0xb119c
															v53 = g16 + 0x55ec * v44;
															v54 = g35 + *(int32_t *)(v53 + 100);
															v55 = g32 + *(int32_t *)(v53 + 96) - *(int32_t *)(v53 + 148);
															v71 = *(int32_t *)(v53 + 124);
															v72 = *(int32_t *)(v53 + 140);
															g13 = *(int32_t *)(v53 + 144);
															v107 = function_af440(v44, g31, g33 - 1, v55, v54, v71, v72, g36, 8);
															if (g17 != 0) {
																// 0xb11e8
																v73 = *(int32_t *)(g30 + 152);
																if (v73 != 0) {
																	// 0xb11f4
																	if (v73 == 2) {
																		// 0xb11fc
																		function_b0c10(g28 - 0x3060, g31 - 2, g33 + 1, g20, g36, g32 - 96, g35 - 16);
																		// branch -> 0xb121c
																	}
																	// 0xb121c
																	v107 = function_b0c10(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
																	// branch -> 0xb123c
																}
															}
														}
													}
													// 0xb123c
													if (__asm_rlwinm_(v52, 0, 27, 27) != 0) {
														// 0xb1244
														if (__asm_rlwinm_(v52, 0, 25, 25) == 0) {
															// 0xb124c
															v114 = g16 + 0x55ec * *(int32_t *)*(int32_t *)(g23 - 0x77ac);
															v107 = v114;
															if (*(int32_t *)(v114 + 460) != 0) {
																// 0xb1268
																v36 = g18;
																if (v36 <= 0xffffffff) {
																	// 0xb1270
																	*(int32_t *)g25 = -1 - v36;
																	v56 = *(int32_t *)g25;
																	if (v56 <= 199) {
																		// 0xb1288
																		v109 = 232 * v56;
																		v107 = v109;
																		v57 = *(int32_t *)(g23 - 0x7754) + v109;
																		g30 = v57;
																		if (*(int32_t *)(v57 + 160) % 2 == 0) {
																			// 0xb12a0
																			v75 = *(int32_t *)(v57 + 224);
																			if (v75 != 0) {
																				// 0xb12ac
																				g34 = v57 + 84;
																				g27 = g35 + *(int32_t *)(v57 + 60);
																				g26 = g32 + *(int32_t *)(v57 + 56) - *(int32_t *)(v75 + 496);
																				function_c9b28();
																				if (*(int32_t *)g25 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
																					// 0xb12e0
																					v37 = g30;
																					v76 = *(int32_t *)(*(int32_t *)(v37 + 224) + 492);
																					g13 = 8;
																					function_507f4(233, g26, g27, v37 + 84, *(int32_t *)(v37 + 104), v76, g36);
																					// branch -> 0xb1308
																				}
																				// 0xb1308
																				function_c9b70((int32_t *)(g30 + 84));
																				v107 = function_aefc4(g31, g33, g26, g27, *(int32_t *)g25, g36, 8);
																				if (g17 != 0) {
																					// 0xb1338
																					if (*(int32_t *)(g30 + 108) == 0) {
																						// 0xb1344
																						v107 = function_b0c10(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
																						// branch -> 0xb1364
																					}
																				}
																			}
																		}
																	}
																}
															}
														} else {
															// 0xb1268
															v36 = g18;
															if (v36 <= 0xffffffff) {
																// 0xb1270
																*(int32_t *)g25 = -1 - v36;
																v56 = *(int32_t *)g25;
																if (v56 <= 199) {
																	// 0xb1288
																	v109 = 232 * v56;
																	v107 = v109;
																	v57 = *(int32_t *)(g23 - 0x7754) + v109;
																	g30 = v57;
																	if (*(int32_t *)(v57 + 160) % 2 == 0) {
																		// 0xb12a0
																		v75 = *(int32_t *)(v57 + 224);
																		if (v75 != 0) {
																			// 0xb12ac
																			g34 = v57 + 84;
																			g27 = g35 + *(int32_t *)(v57 + 60);
																			g26 = g32 + *(int32_t *)(v57 + 56) - *(int32_t *)(v75 + 496);
																			function_c9b28();
																			if (*(int32_t *)g25 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
																				// 0xb12e0
																				v37 = g30;
																				v76 = *(int32_t *)(*(int32_t *)(v37 + 224) + 492);
																				g13 = 8;
																				function_507f4(233, g26, g27, v37 + 84, *(int32_t *)(v37 + 104), v76, g36);
																				// branch -> 0xb1308
																			}
																			// 0xb1308
																			function_c9b70((int32_t *)(g30 + 84));
																			v107 = function_aefc4(g31, g33, g26, g27, *(int32_t *)g25, g36, 8);
																			if (g17 != 0) {
																				// 0xb1338
																				if (*(int32_t *)(g30 + 108) == 0) {
																					// 0xb1344
																					v107 = function_b0c10(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
																					// branch -> 0xb1364
																				}
																			}
																		}
																	}
																}
															}
														}
														// 0xb1364
														if (__asm_rlwinm_(v52, 0, 29, 29) != 0) {
															// 0xb136c
															v107 = function_af6d0(g31, g33, g32, g35, g36, 8, 1);
															// branch -> 0xb138c
														}
														// 0xb138c
														v45 = 0x1000000 * g22;
														if (v45 >= 0 && (v45 || 0xffffff) >= 0x1ffffff) {
															// 0xb1394
															v46 = v45 / 0x1000000 - 1;
															v107 = v46;
															if (v46 <= 3) {
																// 0xb13a4
																v58 = g16 + 0x55ec * v46;
																v59 = g35 + *(int32_t *)(v58 + 100);
																v60 = g32 + *(int32_t *)(v58 + 96) - *(int32_t *)(v58 + 148);
																v118 = *(int32_t *)(v58 + 124);
																v77 = *(int32_t *)(v58 + 140);
																g13 = *(int32_t *)(v58 + 144);
																v107 = function_af440(v46, g31, g33, v60, v59, v118, v77, g36, 8);
																if (g17 != 0) {
																	// 0xb13f0
																	v78 = *(int32_t *)(g30 + 152);
																	if (v78 != 0) {
																		// 0xb13fc
																		if (v78 == 2) {
																			// 0xb1404
																			function_b0c10(g28 - 0x3060, g31 - 2, g33 + 1, g20, g36, g32 - 96, g35 - 16);
																			// branch -> 0xb1424
																		}
																		// 0xb1424
																		v107 = function_b0c10(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
																		// branch -> 0xb1444
																	}
																}
															}
														}
														// 0xb1444
														if (v15 < 1) {
															// 0xb1568
															if (v52 % 2 != 0) {
																// 0xb1570
																v107 = function_aeb58(g31, g33, g32, g35, g36, 8, 0);
																// branch -> 0xb1590
															}
															// 0xb1590
															if (v9 != 0) {
																// 0xb159c
																v81 = g23;
																v116 = *(int32_t *)*(int32_t *)(v81 - 0x7290);
																v107 = v116;
																if (v116 < (int32_t) * (char *)*(int32_t *)(v81 - 0x70cc)) {
																	// 0xb15b8
																	v107 = function_afa48(g31, g33, g32, g35, 0, g36, 8);
																	// branch -> 0xb15d8
																}
															}
															// 0xb15d8
															v82 = g21;
															v90 = 0x1000000 * v82;
															if ((v90 || 0xffffff) >= 0x1ffffff) {
																// 0xb15e0
																v91 = v90 / 0x1000000 - 1;
																g27 = v91;
																v111 = 368 * v91;
																v107 = v111;
																v96 = *(int32_t *)(g23 - 0x7690) + v111;
																g31 = v96;
																if (*(int32_t *)(v96 + 52) != 0) {
																	// 0xb1600
																	if (v82 <= 127) {
																		// 0xb1608
																		g34 = *(int32_t *)(v96 + 24);
																		v83 = function_c9948();
																		g29 = v83;
																		v84 = g31;
																		if (v83 == 0) {
																			// 0xb1618
																			v107 = function_c9acc(*(int32_t *)(v84 + 24));
																			// branch -> 0xb16c4
																		} else {
																			// 0xb1624
																			v102 = *(int32_t *)(v84 + 32);
																			g11 = v102;
																			if (v102 >= 1) {
																				// 0xb1630
																				if (function_4d794(v83) > 50) {
																					// 0xb1630
																					v106 = g31;
																					// branch -> 0xb1654
																				} else {
																					// 0xb1640
																					v92 = function_4d794(g29);
																					v85 = g31;
																					v103 = *(int32_t *)(v85 + 32);
																					g40 = v103;
																					if (v103 <= v92) {
																						// 0xb1660
																						v86 = g27;
																						v97 = g32 - *(int32_t *)(v85 + 40);
																						g27 = v97;
																						v88 = v97;
																						v89 = v85;
																						if (v86 == (int32_t) * (char *)*(int32_t *)(g23 - 0x7748)) {
																							// 0xb167c
																							g37 = v97;
																							g41 = *(int32_t *)(v85 + 36);
																							v87 = g35;
																							g38 = v87;
																							g42 = g36;
																							g13 = 8;
																							CelDrawHdrClrHL(181, v97, v87, *(int32_t *)(v85 + 24), v103);
																							v88 = g27;
																							v89 = g31;
																							// branch -> 0xb169c
																						}
																						// 0xb169c
																						v104 = *(int32_t *)(v89 + 32);
																						v105 = *(int32_t *)(v89 + 36);
																						function_4e998(v88, g35, *(int32_t *)(v89 + 24), v104, v105, g36, 8);
																						v113 = function_c9acc(*(int32_t *)(g31 + 24));
																						// branch -> 0xb16c4
																						// 0xb16c4
																						if (v11 == 0) {
																							// 0xb16c4
																							result = v113;
																							// branch -> 0xb170c
																						} else {
																							// 0xb16d0
																							v108 = g23;
																							v119 = *(char *)(*(int32_t *)(v108 - 0x7268) + (int32_t)v14);
																							*(int32_t *)*(int32_t *)(v108 - 0x7294) = (int32_t)v119;
																							v117 = *(int32_t *)*(int32_t *)(v108 - 0x7574);
																							result = function_4ea70(g28, v117, (int32_t)v11, 64, g36, 8);
																							// branch -> 0xb170c
																						}
																						// 0xb170c
																						g10 = v1;
																						return result;
																					}
																					v106 = v85;
																				}
																				// 0xb1654
																				v112 = function_c9acc(*(int32_t *)(v106 + 24));
																				// branch -> 0xb16c4
																				// 0xb16c4
																				if (v11 == 0) {
																					// 0xb16c4
																					result = v112;
																					// branch -> 0xb170c
																				} else {
																					// 0xb16d0
																					v108 = g23;
																					v119 = *(char *)(*(int32_t *)(v108 - 0x7268) + (int32_t)v14);
																					*(int32_t *)*(int32_t *)(v108 - 0x7294) = (int32_t)v119;
																					v117 = *(int32_t *)*(int32_t *)(v108 - 0x7574);
																					result = function_4ea70(g28, v117, (int32_t)v11, 64, g36, 8);
																					// branch -> 0xb170c
																				}
																				// 0xb170c
																				g10 = v1;
																				return result;
																			}
																			// 0xb1654
																			v107 = function_c9acc(*(int32_t *)(v84 + 24));
																			// branch -> 0xb16c4
																		}
																		// 0xb16c4
																		if (v11 == 0) {
																			// 0xb16c4
																			result = v107;
																			// branch -> 0xb170c
																		} else {
																			// 0xb16d0
																			v108 = g23;
																			v119 = *(char *)(*(int32_t *)(v108 - 0x7268) + (int32_t)v14);
																			*(int32_t *)*(int32_t *)(v108 - 0x7294) = (int32_t)v119;
																			v117 = *(int32_t *)*(int32_t *)(v108 - 0x7574);
																			result = function_4ea70(g28, v117, (int32_t)v11, 64, g36, 8);
																			// branch -> 0xb170c
																		}
																		// 0xb170c
																		g10 = v1;
																		return result;
																	}
																}
															}
															// 0xb16c4
															if (v11 == 0) {
																// 0xb16c4
																result = v107;
																// branch -> 0xb170c
															} else {
																// 0xb16d0
																v108 = g23;
																v119 = *(char *)(*(int32_t *)(v108 - 0x7268) + (int32_t)v14);
																*(int32_t *)*(int32_t *)(v108 - 0x7294) = (int32_t)v119;
																v117 = *(int32_t *)*(int32_t *)(v108 - 0x7574);
																result = function_4ea70(g28, v117, (int32_t)v11, 64, g36, 8);
																// branch -> 0xb170c
															}
															// 0xb170c
															g10 = v1;
															return result;
														}
														// 0xb1450
														if (__asm_rlwinm_(v52, 0, 25, 25) == 0) {
															// 0xb1458
															v115 = g16 + 0x55ec * *(int32_t *)*(int32_t *)(g23 - 0x77ac);
															v107 = v115;
															if (*(int32_t *)(v115 + 460) != 0) {
																// 0xb1474
																v107 = v16;
																*(int32_t *)g25 = v16 - 1;
																v93 = *(int32_t *)g25;
																if (v93 <= 199) {
																	// 0xb148c
																	v110 = 232 * v93;
																	v107 = v110;
																	v94 = *(int32_t *)(g23 - 0x7754) + v110;
																	g30 = v94;
																	if (*(int32_t *)(v94 + 160) % 2 == 0) {
																		// 0xb14a4
																		v98 = *(int32_t *)(v94 + 224);
																		if (v98 != 0) {
																			// 0xb14b0
																			g34 = v94 + 84;
																			g27 = g35 + *(int32_t *)(v94 + 60);
																			g26 = g32 + *(int32_t *)(v94 + 56) - *(int32_t *)(v98 + 496);
																			function_c9b28();
																			if (*(int32_t *)g25 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
																				// 0xb14e4
																				v80 = g30;
																				v99 = *(int32_t *)(*(int32_t *)(v80 + 224) + 492);
																				g13 = 8;
																				function_507f4(233, g26, g27, v80 + 84, *(int32_t *)(v80 + 104), v99, g36);
																				// branch -> 0xb150c
																			}
																			// 0xb150c
																			function_c9b70((int32_t *)(g30 + 84));
																			v107 = function_aefc4(g31, g33, g26, g27, *(int32_t *)g25, g36, 8);
																			if (g17 != 0) {
																				// 0xb153c
																				if (*(int32_t *)(g30 + 108) == 0) {
																					// 0xb1548
																					v107 = function_b0c10(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
																					// branch -> 0xb1568
																				}
																			}
																		}
																	}
																}
															}
														} else {
															// 0xb1474
															v107 = v16;
															*(int32_t *)g25 = v16 - 1;
															v93 = *(int32_t *)g25;
															if (v93 <= 199) {
																// 0xb148c
																v110 = 232 * v93;
																v107 = v110;
																v94 = *(int32_t *)(g23 - 0x7754) + v110;
																g30 = v94;
																if (*(int32_t *)(v94 + 160) % 2 == 0) {
																	// 0xb14a4
																	v98 = *(int32_t *)(v94 + 224);
																	if (v98 != 0) {
																		// 0xb14b0
																		g34 = v94 + 84;
																		g27 = g35 + *(int32_t *)(v94 + 60);
																		g26 = g32 + *(int32_t *)(v94 + 56) - *(int32_t *)(v98 + 496);
																		function_c9b28();
																		if (*(int32_t *)g25 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
																			// 0xb14e4
																			v80 = g30;
																			v99 = *(int32_t *)(*(int32_t *)(v80 + 224) + 492);
																			g13 = 8;
																			function_507f4(233, g26, g27, v80 + 84, *(int32_t *)(v80 + 104), v99, g36);
																			// branch -> 0xb150c
																		}
																		// 0xb150c
																		function_c9b70((int32_t *)(g30 + 84));
																		v107 = function_aefc4(g31, g33, g26, g27, *(int32_t *)g25, g36, 8);
																		if (g17 != 0) {
																			// 0xb153c
																			if (*(int32_t *)(g30 + 108) == 0) {
																				// 0xb1548
																				v107 = function_b0c10(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
																				// branch -> 0xb1568
																			}
																		}
																	}
																}
															}
														}
														// 0xb1568
														if (v52 % 2 != 0) {
															// 0xb1570
															v107 = function_aeb58(g31, g33, g32, g35, g36, 8, 0);
															// branch -> 0xb1590
														}
														// 0xb1590
														if (v9 != 0) {
															// 0xb159c
															v81 = g23;
															v116 = *(int32_t *)*(int32_t *)(v81 - 0x7290);
															v107 = v116;
															if (v116 < (int32_t) * (char *)*(int32_t *)(v81 - 0x70cc)) {
																// 0xb15b8
																v107 = function_afa48(g31, g33, g32, g35, 0, g36, 8);
																// branch -> 0xb15d8
															}
														}
														// 0xb15d8
														v82 = g21;
														v90 = 0x1000000 * v82;
														if ((v90 || 0xffffff) >= 0x1ffffff) {
															// 0xb15e0
															v91 = v90 / 0x1000000 - 1;
															g27 = v91;
															v111 = 368 * v91;
															v107 = v111;
															v96 = *(int32_t *)(g23 - 0x7690) + v111;
															g31 = v96;
															if (*(int32_t *)(v96 + 52) != 0) {
																// 0xb1600
																if (v82 <= 127) {
																	// 0xb1608
																	g34 = *(int32_t *)(v96 + 24);
																	v83 = function_c9948();
																	g29 = v83;
																	v84 = g31;
																	if (v83 == 0) {
																		// 0xb1618
																		v107 = function_c9acc(*(int32_t *)(v84 + 24));
																		// branch -> 0xb16c4
																	} else {
																		// 0xb1624
																		v102 = *(int32_t *)(v84 + 32);
																		g11 = v102;
																		if (v102 >= 1) {
																			// 0xb1630
																			if (function_4d794(v83) > 50) {
																				// 0xb1630
																				v106 = g31;
																				// branch -> 0xb1654
																			} else {
																				// 0xb1640
																				v92 = function_4d794(g29);
																				v85 = g31;
																				v103 = *(int32_t *)(v85 + 32);
																				g40 = v103;
																				if (v103 <= v92) {
																					// 0xb1660
																					v86 = g27;
																					v97 = g32 - *(int32_t *)(v85 + 40);
																					g27 = v97;
																					v88 = v97;
																					v89 = v85;
																					if (v86 == (int32_t) * (char *)*(int32_t *)(g23 - 0x7748)) {
																						// 0xb167c
																						g37 = v97;
																						g41 = *(int32_t *)(v85 + 36);
																						v87 = g35;
																						g38 = v87;
																						g42 = g36;
																						g13 = 8;
																						CelDrawHdrClrHL(181, v97, v87, *(int32_t *)(v85 + 24), v103);
																						v88 = g27;
																						v89 = g31;
																						// branch -> 0xb169c
																					}
																					// 0xb169c
																					v104 = *(int32_t *)(v89 + 32);
																					v105 = *(int32_t *)(v89 + 36);
																					function_4e998(v88, g35, *(int32_t *)(v89 + 24), v104, v105, g36, 8);
																					v113 = function_c9acc(*(int32_t *)(g31 + 24));
																					// branch -> 0xb16c4
																					// 0xb16c4
																					if (v11 == 0) {
																						// 0xb16c4
																						result = v113;
																						// branch -> 0xb170c
																					} else {
																						// 0xb16d0
																						v108 = g23;
																						v119 = *(char *)(*(int32_t *)(v108 - 0x7268) + (int32_t)v14);
																						*(int32_t *)*(int32_t *)(v108 - 0x7294) = (int32_t)v119;
																						v117 = *(int32_t *)*(int32_t *)(v108 - 0x7574);
																						result = function_4ea70(g28, v117, (int32_t)v11, 64, g36, 8);
																						// branch -> 0xb170c
																					}
																					// 0xb170c
																					g10 = v1;
																					return result;
																				}
																				v106 = v85;
																			}
																			// 0xb1654
																			v112 = function_c9acc(*(int32_t *)(v106 + 24));
																			// branch -> 0xb16c4
																			// 0xb16c4
																			if (v11 == 0) {
																				// 0xb16c4
																				result = v112;
																				// branch -> 0xb170c
																			} else {
																				// 0xb16d0
																				v108 = g23;
																				v119 = *(char *)(*(int32_t *)(v108 - 0x7268) + (int32_t)v14);
																				*(int32_t *)*(int32_t *)(v108 - 0x7294) = (int32_t)v119;
																				v117 = *(int32_t *)*(int32_t *)(v108 - 0x7574);
																				result = function_4ea70(g28, v117, (int32_t)v11, 64, g36, 8);
																				// branch -> 0xb170c
																			}
																			// 0xb170c
																			g10 = v1;
																			return result;
																		}
																		// 0xb1654
																		v107 = function_c9acc(*(int32_t *)(v84 + 24));
																		// branch -> 0xb16c4
																	}
																	// 0xb16c4
																	if (v11 == 0) {
																		// 0xb16c4
																		result = v107;
																		// branch -> 0xb170c
																	} else {
																		// 0xb16d0
																		v108 = g23;
																		v119 = *(char *)(*(int32_t *)(v108 - 0x7268) + (int32_t)v14);
																		*(int32_t *)*(int32_t *)(v108 - 0x7294) = (int32_t)v119;
																		v117 = *(int32_t *)*(int32_t *)(v108 - 0x7574);
																		result = function_4ea70(g28, v117, (int32_t)v11, 64, g36, 8);
																		// branch -> 0xb170c
																	}
																	// 0xb170c
																	g10 = v1;
																	return result;
																}
															}
														}
														// 0xb16c4
														if (v11 == 0) {
															// 0xb16c4
															result = v107;
															// branch -> 0xb170c
														} else {
															// 0xb16d0
															v108 = g23;
															v119 = *(char *)(*(int32_t *)(v108 - 0x7268) + (int32_t)v14);
															*(int32_t *)*(int32_t *)(v108 - 0x7294) = (int32_t)v119;
															v117 = *(int32_t *)*(int32_t *)(v108 - 0x7574);
															result = function_4ea70(g28, v117, (int32_t)v11, 64, g36, 8);
															// branch -> 0xb170c
														}
														// 0xb170c
														g10 = v1;
														return result;
													}
													// 0xb1364
													if (__asm_rlwinm_(v52, 0, 29, 29) != 0) {
														// 0xb136c
														function_af6d0(g31, g33, g32, g35, g36, 8, 1);
														// branch -> 0xb138c
													}
													// 0xb138c
													v45 = 0x1000000 * g22;
													if (v45 >= 0 && (v45 || 0xffffff) >= 0x1ffffff) {
														// 0xb1394
														v46 = v45 / 0x1000000 - 1;
														if (v46 <= 3) {
															// 0xb13a4
															v58 = g16 + 0x55ec * v46;
															v59 = g35 + *(int32_t *)(v58 + 100);
															v60 = g32 + *(int32_t *)(v58 + 96) - *(int32_t *)(v58 + 148);
															v77 = *(int32_t *)(v58 + 140);
															g13 = *(int32_t *)(v58 + 144);
															function_af440(v46, g31, g33, v60, v59, *(int32_t *)(v58 + 124), v77, g36, 8);
															if (g17 != 0) {
																// 0xb13f0
																v78 = *(int32_t *)(g30 + 152);
																if (v78 != 0) {
																	// 0xb13fc
																	if (v78 == 2) {
																		// 0xb1404
																		function_b0c10(g28 - 0x3060, g31 - 2, g33 + 1, g20, g36, g32 - 96, g35 - 16);
																		// branch -> 0xb1424
																	}
																	// 0xb1424
																	function_b0c10(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
																	// branch -> 0xb1444
																}
															}
														}
													}
													// 0xb1444
													if (v15 >= 1) {
														// 0xb1450
														if (__asm_rlwinm_(v52, 0, 25, 25) == 0) {
															// 0xb1458
															v79 = *(int32_t *)(g23 - 0x77ac);
															if (*(int32_t *)(g16 + 0x55ec * *(int32_t *)v79 + 460) != 0) {
																// 0xb1474
																*(int32_t *)g25 = v16 - 1;
																v93 = *(int32_t *)g25;
																if (v93 <= 199) {
																	// 0xb148c
																	v94 = *(int32_t *)(g23 - 0x7754) + 232 * v93;
																	g30 = v94;
																	if (*(int32_t *)(v94 + 160) % 2 == 0) {
																		// 0xb14a4
																		v98 = *(int32_t *)(v94 + 224);
																		if (v98 != 0) {
																			// 0xb14b0
																			g34 = v94 + 84;
																			g27 = g35 + *(int32_t *)(v94 + 60);
																			g26 = g32 + *(int32_t *)(v94 + 56) - *(int32_t *)(v98 + 496);
																			function_c9b28();
																			if (*(int32_t *)g25 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
																				// 0xb14e4
																				v80 = g30;
																				v99 = *(int32_t *)(*(int32_t *)(v80 + 224) + 492);
																				g13 = 8;
																				function_507f4(233, g26, g27, v80 + 84, *(int32_t *)(v80 + 104), v99, g36);
																				// branch -> 0xb150c
																			}
																			// 0xb150c
																			function_c9b70((int32_t *)(g30 + 84));
																			function_aefc4(g31, g33, g26, g27, *(int32_t *)g25, g36, 8);
																			if (g17 != 0) {
																				// 0xb153c
																				if (*(int32_t *)(g30 + 108) == 0) {
																					// 0xb1548
																					function_b0c10(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
																					// branch -> 0xb1568
																				}
																			}
																		}
																	}
																}
															}
														} else {
															// 0xb1474
															*(int32_t *)g25 = v16 - 1;
															v93 = *(int32_t *)g25;
															if (v93 <= 199) {
																// 0xb148c
																v94 = *(int32_t *)(g23 - 0x7754) + 232 * v93;
																g30 = v94;
																if (*(int32_t *)(v94 + 160) % 2 == 0) {
																	// 0xb14a4
																	v98 = *(int32_t *)(v94 + 224);
																	if (v98 != 0) {
																		// 0xb14b0
																		g34 = v94 + 84;
																		g27 = g35 + *(int32_t *)(v94 + 60);
																		g26 = g32 + *(int32_t *)(v94 + 56) - *(int32_t *)(v98 + 496);
																		function_c9b28();
																		if (*(int32_t *)g25 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
																			// 0xb14e4
																			v80 = g30;
																			v99 = *(int32_t *)(*(int32_t *)(v80 + 224) + 492);
																			g13 = 8;
																			function_507f4(233, g26, g27, v80 + 84, *(int32_t *)(v80 + 104), v99, g36);
																			// branch -> 0xb150c
																		}
																		// 0xb150c
																		function_c9b70((int32_t *)(g30 + 84));
																		function_aefc4(g31, g33, g26, g27, *(int32_t *)g25, g36, 8);
																		if (g17 != 0) {
																			// 0xb153c
																			if (*(int32_t *)(g30 + 108) == 0) {
																				// 0xb1548
																				function_b0c10(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
																				// branch -> 0xb1568
																			}
																		}
																	}
																}
															}
														}
														// 0xb1568
														if (v52 % 2 != 0) {
															// 0xb1570
															function_aeb58(g31, g33, g32, g35, g36, 8, 0);
															// branch -> 0xb1590
														}
														// 0xb1590
														if (v9 != 0) {
															// 0xb159c
															v81 = g23;
															v100 = *(int32_t *)(v81 - 0x70cc);
															v101 = *(int32_t *)(v81 - 0x7290);
															if (*(int32_t *)v101 < (int32_t) * (char *)v100) {
																// 0xb15b8
																function_afa48(g31, g33, g32, g35, 0, g36, 8);
																// branch -> 0xb15d8
															}
														}
														// 0xb15d8
														v82 = g21;
														v90 = 0x1000000 * v82;
														v95 = v90 / 0x1000000;
														if ((v90 || 0xffffff) >= 0x1ffffff) {
															// 0xb15e0
															v91 = v95 - 1;
															g27 = v91;
															v96 = *(int32_t *)(g23 - 0x7690) + 368 * v91;
															g31 = v96;
															if (*(int32_t *)(v96 + 52) != 0) {
																// 0xb1600
																if (v82 <= 127) {
																	// 0xb1608
																	g34 = *(int32_t *)(v96 + 24);
																	v83 = function_c9948();
																	g29 = v83;
																	v84 = g31;
																	if (v83 == 0) {
																		// 0xb1618
																		function_c9acc(*(int32_t *)(v84 + 24));
																		// branch -> 0xb16c4
																	} else {
																		// 0xb1624
																		v102 = *(int32_t *)(v84 + 32);
																		g11 = v102;
																		v106 = v84;
																		if (v102 >= 1) {
																			// 0xb1630
																			if (function_4d794(v83) > 50) {
																				// 0xb1630
																				v106 = g31;
																				// branch -> 0xb1654
																			} else {
																				// 0xb1640
																				v92 = function_4d794(g29);
																				v85 = g31;
																				v103 = *(int32_t *)(v85 + 32);
																				g40 = v103;
																				if (v103 <= v92) {
																					// 0xb1660
																					v86 = g27;
																					v97 = g32 - *(int32_t *)(v85 + 40);
																					g27 = v97;
																					v88 = v97;
																					v89 = v85;
																					if (v86 == (int32_t) * (char *)*(int32_t *)(g23 - 0x7748)) {
																						// 0xb167c
																						g37 = v97;
																						g41 = *(int32_t *)(v85 + 36);
																						v87 = g35;
																						g38 = v87;
																						g42 = g36;
																						g13 = 8;
																						CelDrawHdrClrHL(181, v97, v87, *(int32_t *)(v85 + 24), v103);
																						v88 = g27;
																						v89 = g31;
																						// branch -> 0xb169c
																					}
																					// 0xb169c
																					v104 = *(int32_t *)(v89 + 32);
																					v105 = *(int32_t *)(v89 + 36);
																					function_4e998(v88, g35, *(int32_t *)(v89 + 24), v104, v105, g36, 8);
																					v113 = function_c9acc(*(int32_t *)(g31 + 24));
																					// branch -> 0xb16c4
																					// 0xb16c4
																					if (v11 == 0) {
																						// 0xb16c4
																						result = v113;
																						// branch -> 0xb170c
																					} else {
																						// 0xb16d0
																						v108 = g23;
																						v119 = *(char *)(*(int32_t *)(v108 - 0x7268) + (int32_t)v14);
																						*(int32_t *)*(int32_t *)(v108 - 0x7294) = (int32_t)v119;
																						v117 = *(int32_t *)*(int32_t *)(v108 - 0x7574);
																						result = function_4ea70(g28, v117, (int32_t)v11, 64, g36, 8);
																						// branch -> 0xb170c
																					}
																					// 0xb170c
																					g10 = v1;
																					return result;
																				}
																				v106 = v85;
																			}
																			// 0xb1654
																			function_c9acc(*(int32_t *)(v106 + 24));
																			// branch -> 0xb16c4
																			// Detected a possible infinite recursion (goto support failed); quitting...
																		}
																		// 0xb1654
																		function_c9acc(*(int32_t *)(v106 + 24));
																		// branch -> 0xb16c4
																	}
																	// Detected a possible infinite recursion (goto support failed); quitting...
																}
															}
														}
														// Detected a possible infinite recursion (goto support failed); quitting...
													}
													// 0xb1568
													if (v52 % 2 != 0) {
														// 0xb1570
														function_aeb58(g31, g33, g32, g35, g36, 8, 0);
														// branch -> 0xb1590
													}
													// 0xb1590
													if (v9 != 0) {
														// 0xb159c
														v81 = g23;
														v100 = *(int32_t *)(v81 - 0x70cc);
														v101 = *(int32_t *)(v81 - 0x7290);
														if (*(int32_t *)v101 < (int32_t) * (char *)v100) {
															// 0xb15b8
															function_afa48(g31, g33, g32, g35, 0, g36, 8);
															// branch -> 0xb15d8
														}
													}
													// 0xb15d8
													v82 = g21;
													v90 = 0x1000000 * v82;
													v95 = v90 / 0x1000000;
													if ((v90 || 0xffffff) >= 0x1ffffff) {
														// 0xb15e0
														v91 = v95 - 1;
														g27 = v91;
														v96 = *(int32_t *)(g23 - 0x7690) + 368 * v91;
														g31 = v96;
														if (*(int32_t *)(v96 + 52) != 0) {
															// 0xb1600
															if (v82 <= 127) {
																// 0xb1608
																g34 = *(int32_t *)(v96 + 24);
																v83 = function_c9948();
																g29 = v83;
																v84 = g31;
																if (v83 == 0) {
																	// 0xb1618
																	function_c9acc(*(int32_t *)(v84 + 24));
																	// branch -> 0xb16c4
																} else {
																	// 0xb1624
																	v102 = *(int32_t *)(v84 + 32);
																	g11 = v102;
																	v106 = v84;
																	if (v102 >= 1) {
																		// 0xb1630
																		if (function_4d794(v83) > 50) {
																			// 0xb1630
																			v106 = g31;
																			// branch -> 0xb1654
																		} else {
																			// 0xb1640
																			v92 = function_4d794(g29);
																			v85 = g31;
																			v103 = *(int32_t *)(v85 + 32);
																			g40 = v103;
																			if (v103 <= v92) {
																				// 0xb1660
																				v86 = g27;
																				v97 = g32 - *(int32_t *)(v85 + 40);
																				g27 = v97;
																				v88 = v97;
																				v89 = v85;
																				if (v86 == (int32_t) * (char *)*(int32_t *)(g23 - 0x7748)) {
																					// 0xb167c
																					g37 = v97;
																					g41 = *(int32_t *)(v85 + 36);
																					v87 = g35;
																					g38 = v87;
																					g42 = g36;
																					g13 = 8;
																					CelDrawHdrClrHL(181, v97, v87, *(int32_t *)(v85 + 24), v103);
																					v88 = g27;
																					v89 = g31;
																					// branch -> 0xb169c
																				}
																				// 0xb169c
																				v104 = *(int32_t *)(v89 + 32);
																				v105 = *(int32_t *)(v89 + 36);
																				function_4e998(v88, g35, *(int32_t *)(v89 + 24), v104, v105, g36, 8);
																				function_c9acc(*(int32_t *)(g31 + 24));
																				// branch -> 0xb16c4
																				// Detected a possible infinite recursion (goto support failed); quitting...
																			} else {
																				v106 = v85;
																			}
																		}
																		// 0xb1654
																		function_c9acc(*(int32_t *)(v106 + 24));
																		// branch -> 0xb16c4
																		// Detected a possible infinite recursion (goto support failed); quitting...
																	}
																	// 0xb1654
																	function_c9acc(*(int32_t *)(v106 + 24));
																	// branch -> 0xb16c4
																}
																// Detected a possible infinite recursion (goto support failed); quitting...
															}
														}
													}
													// Detected a possible infinite recursion (goto support failed); quitting...
												}
												// 0xb1108
												function_c9acc(*(int32_t *)(v32 + 24));
												// branch -> 0xb1178
											}
											// 0xb1178
											v52 = v12;
											g29 = v52;
											if (__asm_rlwinm_(v52, 0, 26, 26) != 0) {
												// 0xb1184
												v44 = -1 - (int32_t)v17;
												if (v44 <= 3) {
													// 0xb119c
													v53 = g16 + 0x55ec * v44;
													v54 = g35 + *(int32_t *)(v53 + 100);
													v55 = g32 + *(int32_t *)(v53 + 96) - *(int32_t *)(v53 + 148);
													v71 = *(int32_t *)(v53 + 124);
													v72 = *(int32_t *)(v53 + 140);
													g13 = *(int32_t *)(v53 + 144);
													function_af440(v44, g31, g33 - 1, v55, v54, v71, v72, g36, 8);
													if (g17 != 0) {
														// 0xb11e8
														v73 = *(int32_t *)(g30 + 152);
														if (v73 != 0) {
															// 0xb11f4
															if (v73 == 2) {
																// 0xb11fc
																function_b0c10(g28 - 0x3060, g31 - 2, g33 + 1, g20, g36, g32 - 96, g35 - 16);
																// branch -> 0xb121c
															}
															// 0xb121c
															function_b0c10(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
															// branch -> 0xb123c
														}
													}
												}
											}
											// 0xb123c
											if (__asm_rlwinm_(v52, 0, 27, 27) != 0) {
												// 0xb1244
												if (__asm_rlwinm_(v52, 0, 25, 25) == 0) {
													// 0xb124c
													v74 = *(int32_t *)(g23 - 0x77ac);
													if (*(int32_t *)(g16 + 0x55ec * *(int32_t *)v74 + 460) != 0) {
														// 0xb1268
														v36 = g18;
														if (v36 <= 0xffffffff) {
															// 0xb1270
															*(int32_t *)g25 = -1 - v36;
															v56 = *(int32_t *)g25;
															if (v56 <= 199) {
																// 0xb1288
																v57 = *(int32_t *)(g23 - 0x7754) + 232 * v56;
																g30 = v57;
																if (*(int32_t *)(v57 + 160) % 2 == 0) {
																	// 0xb12a0
																	v75 = *(int32_t *)(v57 + 224);
																	if (v75 != 0) {
																		// 0xb12ac
																		g34 = v57 + 84;
																		g27 = g35 + *(int32_t *)(v57 + 60);
																		g26 = g32 + *(int32_t *)(v57 + 56) - *(int32_t *)(v75 + 496);
																		function_c9b28();
																		if (*(int32_t *)g25 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
																			// 0xb12e0
																			v37 = g30;
																			v76 = *(int32_t *)(*(int32_t *)(v37 + 224) + 492);
																			g13 = 8;
																			function_507f4(233, g26, g27, v37 + 84, *(int32_t *)(v37 + 104), v76, g36);
																			// branch -> 0xb1308
																		}
																		// 0xb1308
																		function_c9b70((int32_t *)(g30 + 84));
																		function_aefc4(g31, g33, g26, g27, *(int32_t *)g25, g36, 8);
																		if (g17 != 0) {
																			// 0xb1338
																			if (*(int32_t *)(g30 + 108) == 0) {
																				// 0xb1344
																				function_b0c10(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
																				// branch -> 0xb1364
																			}
																		}
																	}
																}
															}
														}
													}
												} else {
													// 0xb1268
													v36 = g18;
													if (v36 <= 0xffffffff) {
														// 0xb1270
														*(int32_t *)g25 = -1 - v36;
														v56 = *(int32_t *)g25;
														if (v56 <= 199) {
															// 0xb1288
															v57 = *(int32_t *)(g23 - 0x7754) + 232 * v56;
															g30 = v57;
															if (*(int32_t *)(v57 + 160) % 2 == 0) {
																// 0xb12a0
																v75 = *(int32_t *)(v57 + 224);
																if (v75 != 0) {
																	// 0xb12ac
																	g34 = v57 + 84;
																	g27 = g35 + *(int32_t *)(v57 + 60);
																	g26 = g32 + *(int32_t *)(v57 + 56) - *(int32_t *)(v75 + 496);
																	function_c9b28();
																	if (*(int32_t *)g25 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
																		// 0xb12e0
																		v37 = g30;
																		v76 = *(int32_t *)(*(int32_t *)(v37 + 224) + 492);
																		g13 = 8;
																		function_507f4(233, g26, g27, v37 + 84, *(int32_t *)(v37 + 104), v76, g36);
																		// branch -> 0xb1308
																	}
																	// 0xb1308
																	function_c9b70((int32_t *)(g30 + 84));
																	function_aefc4(g31, g33, g26, g27, *(int32_t *)g25, g36, 8);
																	if (g17 != 0) {
																		// 0xb1338
																		if (*(int32_t *)(g30 + 108) == 0) {
																			// 0xb1344
																			function_b0c10(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
																			// branch -> 0xb1364
																		}
																	}
																}
															}
														}
													}
												}
												// 0xb1364
												if (__asm_rlwinm_(v52, 0, 29, 29) != 0) {
													// 0xb136c
													function_af6d0(g31, g33, g32, g35, g36, 8, 1);
													// branch -> 0xb138c
												}
												// 0xb138c
												v45 = 0x1000000 * g22;
												if (v45 >= 0 && (v45 || 0xffffff) >= 0x1ffffff) {
													// 0xb1394
													v46 = v45 / 0x1000000 - 1;
													if (v46 <= 3) {
														// 0xb13a4
														v58 = g16 + 0x55ec * v46;
														v59 = g35 + *(int32_t *)(v58 + 100);
														v60 = g32 + *(int32_t *)(v58 + 96) - *(int32_t *)(v58 + 148);
														v77 = *(int32_t *)(v58 + 140);
														g13 = *(int32_t *)(v58 + 144);
														function_af440(v46, g31, g33, v60, v59, *(int32_t *)(v58 + 124), v77, g36, 8);
														if (g17 != 0) {
															// 0xb13f0
															v78 = *(int32_t *)(g30 + 152);
															if (v78 != 0) {
																// 0xb13fc
																if (v78 == 2) {
																	// 0xb1404
																	function_b0c10(g28 - 0x3060, g31 - 2, g33 + 1, g20, g36, g32 - 96, g35 - 16);
																	// branch -> 0xb1424
																}
																// 0xb1424
																function_b0c10(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
																// branch -> 0xb1444
															}
														}
													}
												}
												// 0xb1444
												if (v15 >= 1) {
													// 0xb1450
													if (__asm_rlwinm_(v52, 0, 25, 25) == 0) {
														// 0xb1458
														v79 = *(int32_t *)(g23 - 0x77ac);
														if (*(int32_t *)(g16 + 0x55ec * *(int32_t *)v79 + 460) != 0) {
															// 0xb1474
															*(int32_t *)g25 = v16 - 1;
															v93 = *(int32_t *)g25;
															if (v93 <= 199) {
																// 0xb148c
																v94 = *(int32_t *)(g23 - 0x7754) + 232 * v93;
																g30 = v94;
																if (*(int32_t *)(v94 + 160) % 2 == 0) {
																	// 0xb14a4
																	v98 = *(int32_t *)(v94 + 224);
																	if (v98 != 0) {
																		// 0xb14b0
																		g34 = v94 + 84;
																		g27 = g35 + *(int32_t *)(v94 + 60);
																		g26 = g32 + *(int32_t *)(v94 + 56) - *(int32_t *)(v98 + 496);
																		function_c9b28();
																		if (*(int32_t *)g25 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
																			// 0xb14e4
																			v80 = g30;
																			v99 = *(int32_t *)(*(int32_t *)(v80 + 224) + 492);
																			g13 = 8;
																			function_507f4(233, g26, g27, v80 + 84, *(int32_t *)(v80 + 104), v99, g36);
																			// branch -> 0xb150c
																		}
																		// 0xb150c
																		function_c9b70((int32_t *)(g30 + 84));
																		function_aefc4(g31, g33, g26, g27, *(int32_t *)g25, g36, 8);
																		if (g17 != 0) {
																			// 0xb153c
																			if (*(int32_t *)(g30 + 108) == 0) {
																				// 0xb1548
																				function_b0c10(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
																				// branch -> 0xb1568
																			}
																		}
																	}
																}
															}
														}
													} else {
														// 0xb1474
														*(int32_t *)g25 = v16 - 1;
														v93 = *(int32_t *)g25;
														if (v93 <= 199) {
															// 0xb148c
															v94 = *(int32_t *)(g23 - 0x7754) + 232 * v93;
															g30 = v94;
															if (*(int32_t *)(v94 + 160) % 2 == 0) {
																// 0xb14a4
																v98 = *(int32_t *)(v94 + 224);
																if (v98 != 0) {
																	// 0xb14b0
																	g34 = v94 + 84;
																	g27 = g35 + *(int32_t *)(v94 + 60);
																	g26 = g32 + *(int32_t *)(v94 + 56) - *(int32_t *)(v98 + 496);
																	function_c9b28();
																	if (*(int32_t *)g25 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
																		// 0xb14e4
																		v80 = g30;
																		v99 = *(int32_t *)(*(int32_t *)(v80 + 224) + 492);
																		g13 = 8;
																		function_507f4(233, g26, g27, v80 + 84, *(int32_t *)(v80 + 104), v99, g36);
																		// branch -> 0xb150c
																	}
																	// 0xb150c
																	function_c9b70((int32_t *)(g30 + 84));
																	function_aefc4(g31, g33, g26, g27, *(int32_t *)g25, g36, 8);
																	if (g17 != 0) {
																		// 0xb153c
																		if (*(int32_t *)(g30 + 108) == 0) {
																			// 0xb1548
																			function_b0c10(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
																			// branch -> 0xb1568
																		}
																	}
																}
															}
														}
													}
													// 0xb1568
													if (v52 % 2 != 0) {
														// 0xb1570
														function_aeb58(g31, g33, g32, g35, g36, 8, 0);
														// branch -> 0xb1590
													}
													// 0xb1590
													if (v9 != 0) {
														// 0xb159c
														v81 = g23;
														v100 = *(int32_t *)(v81 - 0x70cc);
														v101 = *(int32_t *)(v81 - 0x7290);
														if (*(int32_t *)v101 < (int32_t) * (char *)v100) {
															// 0xb15b8
															function_afa48(g31, g33, g32, g35, 0, g36, 8);
															// branch -> 0xb15d8
														}
													}
													// 0xb15d8
													v82 = g21;
													v90 = 0x1000000 * v82;
													v95 = v90 / 0x1000000;
													if ((v90 || 0xffffff) >= 0x1ffffff) {
														// 0xb15e0
														v91 = v95 - 1;
														g27 = v91;
														v96 = *(int32_t *)(g23 - 0x7690) + 368 * v91;
														g31 = v96;
														if (*(int32_t *)(v96 + 52) != 0) {
															// 0xb1600
															if (v82 <= 127) {
																// 0xb1608
																g34 = *(int32_t *)(v96 + 24);
																v83 = function_c9948();
																g29 = v83;
																v84 = g31;
																if (v83 == 0) {
																	// 0xb1618
																	function_c9acc(*(int32_t *)(v84 + 24));
																	// branch -> 0xb16c4
																} else {
																	// 0xb1624
																	v102 = *(int32_t *)(v84 + 32);
																	g11 = v102;
																	v106 = v84;
																	if (v102 >= 1) {
																		// 0xb1630
																		if (function_4d794(v83) > 50) {
																			// 0xb1630
																			v106 = g31;
																			// branch -> 0xb1654
																		} else {
																			// 0xb1640
																			v92 = function_4d794(g29);
																			v85 = g31;
																			v103 = *(int32_t *)(v85 + 32);
																			g40 = v103;
																			if (v103 <= v92) {
																				// 0xb1660
																				v86 = g27;
																				v97 = g32 - *(int32_t *)(v85 + 40);
																				g27 = v97;
																				v88 = v97;
																				v89 = v85;
																				if (v86 == (int32_t) * (char *)*(int32_t *)(g23 - 0x7748)) {
																					// 0xb167c
																					g37 = v97;
																					g41 = *(int32_t *)(v85 + 36);
																					v87 = g35;
																					g38 = v87;
																					g42 = g36;
																					g13 = 8;
																					CelDrawHdrClrHL(181, v97, v87, *(int32_t *)(v85 + 24), v103);
																					v88 = g27;
																					v89 = g31;
																					// branch -> 0xb169c
																				}
																				// 0xb169c
																				v104 = *(int32_t *)(v89 + 32);
																				v105 = *(int32_t *)(v89 + 36);
																				function_4e998(v88, g35, *(int32_t *)(v89 + 24), v104, v105, g36, 8);
																				function_c9acc(*(int32_t *)(g31 + 24));
																				// branch -> 0xb16c4
																				// Detected a possible infinite recursion (goto support failed); quitting...
																			} else {
																				v106 = v85;
																			}
																		}
																		// 0xb1654
																		function_c9acc(*(int32_t *)(v106 + 24));
																		// branch -> 0xb16c4
																		// Detected a possible infinite recursion (goto support failed); quitting...
																	}
																	// 0xb1654
																	function_c9acc(*(int32_t *)(v106 + 24));
																	// branch -> 0xb16c4
																}
																// Detected a possible infinite recursion (goto support failed); quitting...
															}
														}
													}
													// Detected a possible infinite recursion (goto support failed); quitting...
												}
												// 0xb1568
												if (v52 % 2 != 0) {
													// 0xb1570
													function_aeb58(g31, g33, g32, g35, g36, 8, 0);
													// branch -> 0xb1590
												}
												// 0xb1590
												if (v9 != 0) {
													// 0xb159c
													v81 = g23;
													v100 = *(int32_t *)(v81 - 0x70cc);
													v101 = *(int32_t *)(v81 - 0x7290);
													if (*(int32_t *)v101 < (int32_t) * (char *)v100) {
														// 0xb15b8
														function_afa48(g31, g33, g32, g35, 0, g36, 8);
														// branch -> 0xb15d8
													}
												}
												// 0xb15d8
												v82 = g21;
												v90 = 0x1000000 * v82;
												v95 = v90 / 0x1000000;
												if ((v90 || 0xffffff) >= 0x1ffffff) {
													// 0xb15e0
													v91 = v95 - 1;
													g27 = v91;
													v96 = *(int32_t *)(g23 - 0x7690) + 368 * v91;
													g31 = v96;
													if (*(int32_t *)(v96 + 52) != 0) {
														// 0xb1600
														if (v82 <= 127) {
															// 0xb1608
															g34 = *(int32_t *)(v96 + 24);
															v83 = function_c9948();
															g29 = v83;
															v84 = g31;
															if (v83 == 0) {
																// 0xb1618
																function_c9acc(*(int32_t *)(v84 + 24));
																// branch -> 0xb16c4
															} else {
																// 0xb1624
																v102 = *(int32_t *)(v84 + 32);
																g11 = v102;
																v106 = v84;
																if (v102 >= 1) {
																	// 0xb1630
																	if (function_4d794(v83) > 50) {
																		// 0xb1630
																		v106 = g31;
																		// branch -> 0xb1654
																	} else {
																		// 0xb1640
																		v92 = function_4d794(g29);
																		v85 = g31;
																		v103 = *(int32_t *)(v85 + 32);
																		g40 = v103;
																		if (v103 <= v92) {
																			// 0xb1660
																			v86 = g27;
																			v97 = g32 - *(int32_t *)(v85 + 40);
																			g27 = v97;
																			v88 = v97;
																			v89 = v85;
																			if (v86 == (int32_t) * (char *)*(int32_t *)(g23 - 0x7748)) {
																				// 0xb167c
																				g37 = v97;
																				g41 = *(int32_t *)(v85 + 36);
																				v87 = g35;
																				g38 = v87;
																				g42 = g36;
																				g13 = 8;
																				CelDrawHdrClrHL(181, v97, v87, *(int32_t *)(v85 + 24), v103);
																				v88 = g27;
																				v89 = g31;
																				// branch -> 0xb169c
																			}
																			// 0xb169c
																			v104 = *(int32_t *)(v89 + 32);
																			v105 = *(int32_t *)(v89 + 36);
																			function_4e998(v88, g35, *(int32_t *)(v89 + 24), v104, v105, g36, 8);
																			function_c9acc(*(int32_t *)(g31 + 24));
																			// branch -> 0xb16c4
																			// Detected a possible infinite recursion (goto support failed); quitting...
																		} else {
																			v106 = v85;
																		}
																	}
																	// 0xb1654
																	function_c9acc(*(int32_t *)(v106 + 24));
																	// branch -> 0xb16c4
																	// Detected a possible infinite recursion (goto support failed); quitting...
																}
																// 0xb1654
																function_c9acc(*(int32_t *)(v106 + 24));
																// branch -> 0xb16c4
															}
															// Detected a possible infinite recursion (goto support failed); quitting...
														}
													}
												}
												// Detected a possible infinite recursion (goto support failed); quitting...
											}
											// 0xb1364
											if (__asm_rlwinm_(v52, 0, 29, 29) != 0) {
												// 0xb136c
												function_af6d0(g31, g33, g32, g35, g36, 8, 1);
												// branch -> 0xb138c
											}
											// 0xb138c
											v45 = 0x1000000 * g22;
											if (v45 >= 0 && (v45 || 0xffffff) >= 0x1ffffff) {
												// 0xb1394
												v46 = v45 / 0x1000000 - 1;
												if (v46 <= 3) {
													// 0xb13a4
													v58 = g16 + 0x55ec * v46;
													v59 = g35 + *(int32_t *)(v58 + 100);
													v60 = g32 + *(int32_t *)(v58 + 96) - *(int32_t *)(v58 + 148);
													v77 = *(int32_t *)(v58 + 140);
													g13 = *(int32_t *)(v58 + 144);
													function_af440(v46, g31, g33, v60, v59, *(int32_t *)(v58 + 124), v77, g36, 8);
													if (g17 != 0) {
														// 0xb13f0
														v78 = *(int32_t *)(g30 + 152);
														if (v78 != 0) {
															// 0xb13fc
															if (v78 == 2) {
																// 0xb1404
																function_b0c10(g28 - 0x3060, g31 - 2, g33 + 1, g20, g36, g32 - 96, g35 - 16);
																// branch -> 0xb1424
															}
															// 0xb1424
															function_b0c10(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
															// branch -> 0xb1444
														}
													}
												}
											}
											// 0xb1444
											if (v15 >= 1) {
												// 0xb1450
												if (__asm_rlwinm_(v52, 0, 25, 25) == 0) {
													// 0xb1458
													v79 = *(int32_t *)(g23 - 0x77ac);
													if (*(int32_t *)(g16 + 0x55ec * *(int32_t *)v79 + 460) != 0) {
														// 0xb1474
														*(int32_t *)g25 = v16 - 1;
														v93 = *(int32_t *)g25;
														if (v93 <= 199) {
															// 0xb148c
															v94 = *(int32_t *)(g23 - 0x7754) + 232 * v93;
															g30 = v94;
															if (*(int32_t *)(v94 + 160) % 2 == 0) {
																// 0xb14a4
																v98 = *(int32_t *)(v94 + 224);
																if (v98 != 0) {
																	// 0xb14b0
																	g34 = v94 + 84;
																	g27 = g35 + *(int32_t *)(v94 + 60);
																	g26 = g32 + *(int32_t *)(v94 + 56) - *(int32_t *)(v98 + 496);
																	function_c9b28();
																	if (*(int32_t *)g25 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
																		// 0xb14e4
																		v80 = g30;
																		v99 = *(int32_t *)(*(int32_t *)(v80 + 224) + 492);
																		g13 = 8;
																		function_507f4(233, g26, g27, v80 + 84, *(int32_t *)(v80 + 104), v99, g36);
																		// branch -> 0xb150c
																	}
																	// 0xb150c
																	function_c9b70((int32_t *)(g30 + 84));
																	function_aefc4(g31, g33, g26, g27, *(int32_t *)g25, g36, 8);
																	if (g17 != 0) {
																		// 0xb153c
																		if (*(int32_t *)(g30 + 108) == 0) {
																			// 0xb1548
																			function_b0c10(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
																			// branch -> 0xb1568
																		}
																	}
																}
															}
														}
													}
												} else {
													// 0xb1474
													*(int32_t *)g25 = v16 - 1;
													v93 = *(int32_t *)g25;
													if (v93 <= 199) {
														// 0xb148c
														v94 = *(int32_t *)(g23 - 0x7754) + 232 * v93;
														g30 = v94;
														if (*(int32_t *)(v94 + 160) % 2 == 0) {
															// 0xb14a4
															v98 = *(int32_t *)(v94 + 224);
															if (v98 != 0) {
																// 0xb14b0
																g34 = v94 + 84;
																g27 = g35 + *(int32_t *)(v94 + 60);
																g26 = g32 + *(int32_t *)(v94 + 56) - *(int32_t *)(v98 + 496);
																function_c9b28();
																if (*(int32_t *)g25 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
																	// 0xb14e4
																	v80 = g30;
																	v99 = *(int32_t *)(*(int32_t *)(v80 + 224) + 492);
																	g13 = 8;
																	function_507f4(233, g26, g27, v80 + 84, *(int32_t *)(v80 + 104), v99, g36);
																	// branch -> 0xb150c
																}
																// 0xb150c
																function_c9b70((int32_t *)(g30 + 84));
																function_aefc4(g31, g33, g26, g27, *(int32_t *)g25, g36, 8);
																if (g17 != 0) {
																	// 0xb153c
																	if (*(int32_t *)(g30 + 108) == 0) {
																		// 0xb1548
																		function_b0c10(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
																		// branch -> 0xb1568
																	}
																}
															}
														}
													}
												}
												// 0xb1568
												if (v52 % 2 != 0) {
													// 0xb1570
													function_aeb58(g31, g33, g32, g35, g36, 8, 0);
													// branch -> 0xb1590
												}
												// 0xb1590
												if (v9 != 0) {
													// 0xb159c
													v81 = g23;
													v100 = *(int32_t *)(v81 - 0x70cc);
													v101 = *(int32_t *)(v81 - 0x7290);
													if (*(int32_t *)v101 < (int32_t) * (char *)v100) {
														// 0xb15b8
														function_afa48(g31, g33, g32, g35, 0, g36, 8);
														// branch -> 0xb15d8
													}
												}
												// 0xb15d8
												v82 = g21;
												v90 = 0x1000000 * v82;
												v95 = v90 / 0x1000000;
												if ((v90 || 0xffffff) >= 0x1ffffff) {
													// 0xb15e0
													v91 = v95 - 1;
													g27 = v91;
													v96 = *(int32_t *)(g23 - 0x7690) + 368 * v91;
													g31 = v96;
													if (*(int32_t *)(v96 + 52) != 0) {
														// 0xb1600
														if (v82 <= 127) {
															// 0xb1608
															g34 = *(int32_t *)(v96 + 24);
															v83 = function_c9948();
															g29 = v83;
															v84 = g31;
															if (v83 == 0) {
																// 0xb1618
																function_c9acc(*(int32_t *)(v84 + 24));
																// branch -> 0xb16c4
															} else {
																// 0xb1624
																v102 = *(int32_t *)(v84 + 32);
																g11 = v102;
																v106 = v84;
																if (v102 >= 1) {
																	// 0xb1630
																	if (function_4d794(v83) > 50) {
																		// 0xb1630
																		v106 = g31;
																		// branch -> 0xb1654
																	} else {
																		// 0xb1640
																		v92 = function_4d794(g29);
																		v85 = g31;
																		v103 = *(int32_t *)(v85 + 32);
																		g40 = v103;
																		if (v103 <= v92) {
																			// 0xb1660
																			v86 = g27;
																			v97 = g32 - *(int32_t *)(v85 + 40);
																			g27 = v97;
																			v88 = v97;
																			v89 = v85;
																			if (v86 == (int32_t) * (char *)*(int32_t *)(g23 - 0x7748)) {
																				// 0xb167c
																				g37 = v97;
																				g41 = *(int32_t *)(v85 + 36);
																				v87 = g35;
																				g38 = v87;
																				g42 = g36;
																				g13 = 8;
																				CelDrawHdrClrHL(181, v97, v87, *(int32_t *)(v85 + 24), v103);
																				v88 = g27;
																				v89 = g31;
																				// branch -> 0xb169c
																			}
																			// 0xb169c
																			v104 = *(int32_t *)(v89 + 32);
																			v105 = *(int32_t *)(v89 + 36);
																			function_4e998(v88, g35, *(int32_t *)(v89 + 24), v104, v105, g36, 8);
																			function_c9acc(*(int32_t *)(g31 + 24));
																			// branch -> 0xb16c4
																			// Detected a possible infinite recursion (goto support failed); quitting...
																		} else {
																			v106 = v85;
																		}
																	}
																	// 0xb1654
																	function_c9acc(*(int32_t *)(v106 + 24));
																	// branch -> 0xb16c4
																	// Detected a possible infinite recursion (goto support failed); quitting...
																}
																// 0xb1654
																function_c9acc(*(int32_t *)(v106 + 24));
																// branch -> 0xb16c4
															}
															// Detected a possible infinite recursion (goto support failed); quitting...
														}
													}
												}
												// Detected a possible infinite recursion (goto support failed); quitting...
											}
											// 0xb1568
											if (v52 % 2 != 0) {
												// 0xb1570
												function_aeb58(g31, g33, g32, g35, g36, 8, 0);
												// branch -> 0xb1590
											}
											// 0xb1590
											if (v9 != 0) {
												// 0xb159c
												v81 = g23;
												v100 = *(int32_t *)(v81 - 0x70cc);
												v101 = *(int32_t *)(v81 - 0x7290);
												if (*(int32_t *)v101 < (int32_t) * (char *)v100) {
													// 0xb15b8
													function_afa48(g31, g33, g32, g35, 0, g36, 8);
													// branch -> 0xb15d8
												}
											}
											// 0xb15d8
											v82 = g21;
											v90 = 0x1000000 * v82;
											v95 = v90 / 0x1000000;
											if ((v90 || 0xffffff) >= 0x1ffffff) {
												// 0xb15e0
												v91 = v95 - 1;
												g27 = v91;
												v96 = *(int32_t *)(g23 - 0x7690) + 368 * v91;
												g31 = v96;
												if (*(int32_t *)(v96 + 52) != 0) {
													// 0xb1600
													if (v82 <= 127) {
														// 0xb1608
														g34 = *(int32_t *)(v96 + 24);
														v83 = function_c9948();
														g29 = v83;
														v84 = g31;
														if (v83 == 0) {
															// 0xb1618
															function_c9acc(*(int32_t *)(v84 + 24));
															// branch -> 0xb16c4
														} else {
															// 0xb1624
															v102 = *(int32_t *)(v84 + 32);
															g11 = v102;
															v106 = v84;
															if (v102 >= 1) {
																// 0xb1630
																if (function_4d794(v83) > 50) {
																	// 0xb1630
																	v106 = g31;
																	// branch -> 0xb1654
																} else {
																	// 0xb1640
																	v92 = function_4d794(g29);
																	v85 = g31;
																	v103 = *(int32_t *)(v85 + 32);
																	g40 = v103;
																	if (v103 <= v92) {
																		// 0xb1660
																		v86 = g27;
																		v97 = g32 - *(int32_t *)(v85 + 40);
																		g27 = v97;
																		v88 = v97;
																		v89 = v85;
																		if (v86 == (int32_t) * (char *)*(int32_t *)(g23 - 0x7748)) {
																			// 0xb167c
																			g37 = v97;
																			g41 = *(int32_t *)(v85 + 36);
																			v87 = g35;
																			g38 = v87;
																			g42 = g36;
																			g13 = 8;
																			CelDrawHdrClrHL(181, v97, v87, *(int32_t *)(v85 + 24), v103);
																			v88 = g27;
																			v89 = g31;
																			// branch -> 0xb169c
																		}
																		// 0xb169c
																		v104 = *(int32_t *)(v89 + 32);
																		v105 = *(int32_t *)(v89 + 36);
																		function_4e998(v88, g35, *(int32_t *)(v89 + 24), v104, v105, g36, 8);
																		function_c9acc(*(int32_t *)(g31 + 24));
																		// branch -> 0xb16c4
																		// Detected a possible infinite recursion (goto support failed); quitting...
																	} else {
																		v106 = v85;
																	}
																}
																// 0xb1654
																function_c9acc(*(int32_t *)(v106 + 24));
																// branch -> 0xb16c4
																// Detected a possible infinite recursion (goto support failed); quitting...
															}
															// 0xb1654
															function_c9acc(*(int32_t *)(v106 + 24));
															// branch -> 0xb16c4
														}
														// Detected a possible infinite recursion (goto support failed); quitting...
													}
												}
											}
											// Detected a possible infinite recursion (goto support failed); quitting...
										}
									}
								}
								// 0xb1178
								v52 = v12;
								g29 = v52;
								if (__asm_rlwinm_(v52, 0, 26, 26) != 0) {
									// 0xb1184
									v44 = -1 - (int32_t)v17;
									if (v44 <= 3) {
										// 0xb119c
										v53 = g16 + 0x55ec * v44;
										v54 = g35 + *(int32_t *)(v53 + 100);
										v55 = g32 + *(int32_t *)(v53 + 96) - *(int32_t *)(v53 + 148);
										v71 = *(int32_t *)(v53 + 124);
										v72 = *(int32_t *)(v53 + 140);
										g13 = *(int32_t *)(v53 + 144);
										function_af440(v44, g31, g33 - 1, v55, v54, v71, v72, g36, 8);
										if (g17 != 0) {
											// 0xb11e8
											v73 = *(int32_t *)(g30 + 152);
											if (v73 != 0) {
												// 0xb11f4
												if (v73 == 2) {
													// 0xb11fc
													function_b0c10(g28 - 0x3060, g31 - 2, g33 + 1, g20, g36, g32 - 96, g35 - 16);
													// branch -> 0xb121c
												}
												// 0xb121c
												function_b0c10(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
												// branch -> 0xb123c
											}
										}
									}
								}
								// 0xb123c
								if (__asm_rlwinm_(v52, 0, 27, 27) != 0) {
									// 0xb1244
									if (__asm_rlwinm_(v52, 0, 25, 25) == 0) {
										// 0xb124c
										v74 = *(int32_t *)(g23 - 0x77ac);
										if (*(int32_t *)(g16 + 0x55ec * *(int32_t *)v74 + 460) != 0) {
											// 0xb1268
											v36 = g18;
											if (v36 <= 0xffffffff) {
												// 0xb1270
												*(int32_t *)g25 = -1 - v36;
												v56 = *(int32_t *)g25;
												if (v56 <= 199) {
													// 0xb1288
													v57 = *(int32_t *)(g23 - 0x7754) + 232 * v56;
													g30 = v57;
													if (*(int32_t *)(v57 + 160) % 2 == 0) {
														// 0xb12a0
														v75 = *(int32_t *)(v57 + 224);
														if (v75 != 0) {
															// 0xb12ac
															g34 = v57 + 84;
															g27 = g35 + *(int32_t *)(v57 + 60);
															g26 = g32 + *(int32_t *)(v57 + 56) - *(int32_t *)(v75 + 496);
															function_c9b28();
															if (*(int32_t *)g25 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
																// 0xb12e0
																v37 = g30;
																v76 = *(int32_t *)(*(int32_t *)(v37 + 224) + 492);
																g13 = 8;
																function_507f4(233, g26, g27, v37 + 84, *(int32_t *)(v37 + 104), v76, g36);
																// branch -> 0xb1308
															}
															// 0xb1308
															function_c9b70((int32_t *)(g30 + 84));
															function_aefc4(g31, g33, g26, g27, *(int32_t *)g25, g36, 8);
															if (g17 != 0) {
																// 0xb1338
																if (*(int32_t *)(g30 + 108) == 0) {
																	// 0xb1344
																	function_b0c10(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
																	// branch -> 0xb1364
																}
															}
														}
													}
												}
											}
										}
									} else {
										// 0xb1268
										v36 = g18;
										if (v36 <= 0xffffffff) {
											// 0xb1270
											*(int32_t *)g25 = -1 - v36;
											v56 = *(int32_t *)g25;
											if (v56 <= 199) {
												// 0xb1288
												v57 = *(int32_t *)(g23 - 0x7754) + 232 * v56;
												g30 = v57;
												if (*(int32_t *)(v57 + 160) % 2 == 0) {
													// 0xb12a0
													v75 = *(int32_t *)(v57 + 224);
													if (v75 != 0) {
														// 0xb12ac
														g34 = v57 + 84;
														g27 = g35 + *(int32_t *)(v57 + 60);
														g26 = g32 + *(int32_t *)(v57 + 56) - *(int32_t *)(v75 + 496);
														function_c9b28();
														if (*(int32_t *)g25 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
															// 0xb12e0
															v37 = g30;
															v76 = *(int32_t *)(*(int32_t *)(v37 + 224) + 492);
															g13 = 8;
															function_507f4(233, g26, g27, v37 + 84, *(int32_t *)(v37 + 104), v76, g36);
															// branch -> 0xb1308
														}
														// 0xb1308
														function_c9b70((int32_t *)(g30 + 84));
														function_aefc4(g31, g33, g26, g27, *(int32_t *)g25, g36, 8);
														if (g17 != 0) {
															// 0xb1338
															if (*(int32_t *)(g30 + 108) == 0) {
																// 0xb1344
																function_b0c10(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
																// branch -> 0xb1364
															}
														}
													}
												}
											}
										}
									}
									// 0xb1364
									if (__asm_rlwinm_(v52, 0, 29, 29) != 0) {
										// 0xb136c
										function_af6d0(g31, g33, g32, g35, g36, 8, 1);
										// branch -> 0xb138c
									}
									// 0xb138c
									v45 = 0x1000000 * g22;
									if (v45 >= 0 && (v45 || 0xffffff) >= 0x1ffffff) {
										// 0xb1394
										v46 = v45 / 0x1000000 - 1;
										if (v46 <= 3) {
											// 0xb13a4
											v58 = g16 + 0x55ec * v46;
											v59 = g35 + *(int32_t *)(v58 + 100);
											v60 = g32 + *(int32_t *)(v58 + 96) - *(int32_t *)(v58 + 148);
											v77 = *(int32_t *)(v58 + 140);
											g13 = *(int32_t *)(v58 + 144);
											function_af440(v46, g31, g33, v60, v59, *(int32_t *)(v58 + 124), v77, g36, 8);
											if (g17 != 0) {
												// 0xb13f0
												v78 = *(int32_t *)(g30 + 152);
												if (v78 != 0) {
													// 0xb13fc
													if (v78 == 2) {
														// 0xb1404
														function_b0c10(g28 - 0x3060, g31 - 2, g33 + 1, g20, g36, g32 - 96, g35 - 16);
														// branch -> 0xb1424
													}
													// 0xb1424
													function_b0c10(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
													// branch -> 0xb1444
												}
											}
										}
									}
									// 0xb1444
									if (v15 >= 1) {
										// 0xb1450
										if (__asm_rlwinm_(v52, 0, 25, 25) == 0) {
											// 0xb1458
											v79 = *(int32_t *)(g23 - 0x77ac);
											if (*(int32_t *)(g16 + 0x55ec * *(int32_t *)v79 + 460) != 0) {
												// 0xb1474
												*(int32_t *)g25 = v16 - 1;
												v93 = *(int32_t *)g25;
												if (v93 <= 199) {
													// 0xb148c
													v94 = *(int32_t *)(g23 - 0x7754) + 232 * v93;
													g30 = v94;
													if (*(int32_t *)(v94 + 160) % 2 == 0) {
														// 0xb14a4
														v98 = *(int32_t *)(v94 + 224);
														if (v98 != 0) {
															// 0xb14b0
															g34 = v94 + 84;
															g27 = g35 + *(int32_t *)(v94 + 60);
															g26 = g32 + *(int32_t *)(v94 + 56) - *(int32_t *)(v98 + 496);
															function_c9b28();
															if (*(int32_t *)g25 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
																// 0xb14e4
																v80 = g30;
																v99 = *(int32_t *)(*(int32_t *)(v80 + 224) + 492);
																g13 = 8;
																function_507f4(233, g26, g27, v80 + 84, *(int32_t *)(v80 + 104), v99, g36);
																// branch -> 0xb150c
															}
															// 0xb150c
															function_c9b70((int32_t *)(g30 + 84));
															function_aefc4(g31, g33, g26, g27, *(int32_t *)g25, g36, 8);
															if (g17 != 0) {
																// 0xb153c
																if (*(int32_t *)(g30 + 108) == 0) {
																	// 0xb1548
																	function_b0c10(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
																	// branch -> 0xb1568
																}
															}
														}
													}
												}
											}
										} else {
											// 0xb1474
											*(int32_t *)g25 = v16 - 1;
											v93 = *(int32_t *)g25;
											if (v93 <= 199) {
												// 0xb148c
												v94 = *(int32_t *)(g23 - 0x7754) + 232 * v93;
												g30 = v94;
												if (*(int32_t *)(v94 + 160) % 2 == 0) {
													// 0xb14a4
													v98 = *(int32_t *)(v94 + 224);
													if (v98 != 0) {
														// 0xb14b0
														g34 = v94 + 84;
														g27 = g35 + *(int32_t *)(v94 + 60);
														g26 = g32 + *(int32_t *)(v94 + 56) - *(int32_t *)(v98 + 496);
														function_c9b28();
														if (*(int32_t *)g25 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
															// 0xb14e4
															v80 = g30;
															v99 = *(int32_t *)(*(int32_t *)(v80 + 224) + 492);
															g13 = 8;
															function_507f4(233, g26, g27, v80 + 84, *(int32_t *)(v80 + 104), v99, g36);
															// branch -> 0xb150c
														}
														// 0xb150c
														function_c9b70((int32_t *)(g30 + 84));
														function_aefc4(g31, g33, g26, g27, *(int32_t *)g25, g36, 8);
														if (g17 != 0) {
															// 0xb153c
															if (*(int32_t *)(g30 + 108) == 0) {
																// 0xb1548
																function_b0c10(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
																// branch -> 0xb1568
															}
														}
													}
												}
											}
										}
										// 0xb1568
										if (v52 % 2 != 0) {
											// 0xb1570
											function_aeb58(g31, g33, g32, g35, g36, 8, 0);
											// branch -> 0xb1590
										}
										// 0xb1590
										if (v9 != 0) {
											// 0xb159c
											v81 = g23;
											v100 = *(int32_t *)(v81 - 0x70cc);
											v101 = *(int32_t *)(v81 - 0x7290);
											if (*(int32_t *)v101 < (int32_t) * (char *)v100) {
												// 0xb15b8
												function_afa48(g31, g33, g32, g35, 0, g36, 8);
												// branch -> 0xb15d8
											}
										}
										// 0xb15d8
										v82 = g21;
										v90 = 0x1000000 * v82;
										v95 = v90 / 0x1000000;
										if ((v90 || 0xffffff) >= 0x1ffffff) {
											// 0xb15e0
											v91 = v95 - 1;
											g27 = v91;
											v96 = *(int32_t *)(g23 - 0x7690) + 368 * v91;
											g31 = v96;
											if (*(int32_t *)(v96 + 52) != 0) {
												// 0xb1600
												if (v82 <= 127) {
													// 0xb1608
													g34 = *(int32_t *)(v96 + 24);
													v83 = function_c9948();
													g29 = v83;
													v84 = g31;
													if (v83 == 0) {
														// 0xb1618
														function_c9acc(*(int32_t *)(v84 + 24));
														// branch -> 0xb16c4
													} else {
														// 0xb1624
														v102 = *(int32_t *)(v84 + 32);
														g11 = v102;
														v106 = v84;
														if (v102 >= 1) {
															// 0xb1630
															if (function_4d794(v83) > 50) {
																// 0xb1630
																v106 = g31;
																// branch -> 0xb1654
															} else {
																// 0xb1640
																v92 = function_4d794(g29);
																v85 = g31;
																v103 = *(int32_t *)(v85 + 32);
																g40 = v103;
																if (v103 <= v92) {
																	// 0xb1660
																	v86 = g27;
																	v97 = g32 - *(int32_t *)(v85 + 40);
																	g27 = v97;
																	v88 = v97;
																	v89 = v85;
																	if (v86 == (int32_t) * (char *)*(int32_t *)(g23 - 0x7748)) {
																		// 0xb167c
																		g37 = v97;
																		g41 = *(int32_t *)(v85 + 36);
																		v87 = g35;
																		g38 = v87;
																		g42 = g36;
																		g13 = 8;
																		CelDrawHdrClrHL(181, v97, v87, *(int32_t *)(v85 + 24), v103);
																		v88 = g27;
																		v89 = g31;
																		// branch -> 0xb169c
																	}
																	// 0xb169c
																	v104 = *(int32_t *)(v89 + 32);
																	v105 = *(int32_t *)(v89 + 36);
																	function_4e998(v88, g35, *(int32_t *)(v89 + 24), v104, v105, g36, 8);
																	function_c9acc(*(int32_t *)(g31 + 24));
																	// branch -> 0xb16c4
																	// Detected a possible infinite recursion (goto support failed); quitting...
																} else {
																	v106 = v85;
																}
															}
															// 0xb1654
															function_c9acc(*(int32_t *)(v106 + 24));
															// branch -> 0xb16c4
															// Detected a possible infinite recursion (goto support failed); quitting...
														}
														// Detected a possible infinite recursion (goto support failed); quitting...
													}
													// Detected a possible infinite recursion (goto support failed); quitting...
												}
											}
										}
										// Detected a possible infinite recursion (goto support failed); quitting...
									}
									// 0xb1568
									if (v52 % 2 != 0) {
										// 0xb1570
										function_aeb58(g31, g33, g32, g35, g36, 8, 0);
										// branch -> 0xb1590
									}
									// 0xb1590
									if (v9 != 0) {
										// 0xb159c
										v81 = g23;
										v100 = *(int32_t *)(v81 - 0x70cc);
										v101 = *(int32_t *)(v81 - 0x7290);
										if (*(int32_t *)v101 < (int32_t) * (char *)v100) {
											// 0xb15b8
											function_afa48(g31, g33, g32, g35, 0, g36, 8);
											// branch -> 0xb15d8
										}
									}
									// 0xb15d8
									v82 = g21;
									v90 = 0x1000000 * v82;
									v95 = v90 / 0x1000000;
									if ((v90 || 0xffffff) >= 0x1ffffff) {
										// 0xb15e0
										v91 = v95 - 1;
										g27 = v91;
										v96 = *(int32_t *)(g23 - 0x7690) + 368 * v91;
										g31 = v96;
										if (*(int32_t *)(v96 + 52) != 0) {
											// 0xb1600
											if (v82 <= 127) {
												// 0xb1608
												g34 = *(int32_t *)(v96 + 24);
												v83 = function_c9948();
												g29 = v83;
												v84 = g31;
												if (v83 == 0) {
													// 0xb1618
													function_c9acc(*(int32_t *)(v84 + 24));
													// branch -> 0xb16c4
												} else {
													// 0xb1624
													v102 = *(int32_t *)(v84 + 32);
													g11 = v102;
													if (v102 >= 1) {
														// 0xb1630
														if (function_4d794(v83) > 50) {
															// 0xb1630
															// branch -> 0xb1654
														} else {
															// 0xb1640
															v92 = function_4d794(g29);
															v85 = g31;
															v103 = *(int32_t *)(v85 + 32);
															g40 = v103;
															if (v103 <= v92) {
																// 0xb1660
																v86 = g27;
																v97 = g32 - *(int32_t *)(v85 + 40);
																g27 = v97;
																v88 = v97;
																v89 = v85;
																if (v86 == (int32_t) * (char *)*(int32_t *)(g23 - 0x7748)) {
																	// 0xb167c
																	g37 = v97;
																	g41 = *(int32_t *)(v85 + 36);
																	v87 = g35;
																	g38 = v87;
																	g42 = g36;
																	g13 = 8;
																	CelDrawHdrClrHL(181, v97, v87, *(int32_t *)(v85 + 24), v103);
																	v88 = g27;
																	v89 = g31;
																	// branch -> 0xb169c
																}
																// 0xb169c
																v104 = *(int32_t *)(v89 + 32);
																v105 = *(int32_t *)(v89 + 36);
																function_4e998(v88, g35, *(int32_t *)(v89 + 24), v104, v105, g36, 8);
																function_c9acc(*(int32_t *)(g31 + 24));
																// branch -> 0xb16c4
																// Detected a possible infinite recursion (goto support failed); quitting...
															}
														}
														// Detected a possible infinite recursion (goto support failed); quitting...
													}
													// Detected a possible infinite recursion (goto support failed); quitting...
												}
												// Detected a possible infinite recursion (goto support failed); quitting...
											}
										}
									}
									// Detected a possible infinite recursion (goto support failed); quitting...
								}
								// 0xb1364
								if (__asm_rlwinm_(v52, 0, 29, 29) != 0) {
									// 0xb136c
									function_af6d0(g31, g33, g32, g35, g36, 8, 1);
									// branch -> 0xb138c
								}
								// 0xb138c
								v45 = 0x1000000 * g22;
								if (v45 >= 0 && (v45 || 0xffffff) >= 0x1ffffff) {
									// 0xb1394
									v46 = v45 / 0x1000000 - 1;
									if (v46 <= 3) {
										// 0xb13a4
										v58 = g16 + 0x55ec * v46;
										v59 = g35 + *(int32_t *)(v58 + 100);
										v60 = g32 + *(int32_t *)(v58 + 96) - *(int32_t *)(v58 + 148);
										v77 = *(int32_t *)(v58 + 140);
										g13 = *(int32_t *)(v58 + 144);
										function_af440(v46, g31, g33, v60, v59, *(int32_t *)(v58 + 124), v77, g36, 8);
										if (g17 != 0) {
											// 0xb13f0
											v78 = *(int32_t *)(g30 + 152);
											if (v78 != 0) {
												// 0xb13fc
												if (v78 == 2) {
													// 0xb1404
													function_b0c10(g28 - 0x3060, g31 - 2, g33 + 1, g20, g36, g32 - 96, g35 - 16);
													// branch -> 0xb1424
												}
												// 0xb1424
												function_b0c10(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
												// branch -> 0xb1444
											}
										}
									}
								}
								// 0xb1444
								if (v15 >= 1) {
									// 0xb1450
									if (__asm_rlwinm_(v52, 0, 25, 25) == 0) {
										// 0xb1458
										v79 = *(int32_t *)(g23 - 0x77ac);
										if (*(int32_t *)(g16 + 0x55ec * *(int32_t *)v79 + 460) != 0) {
											// 0xb1474
											*(int32_t *)g25 = v16 - 1;
											v93 = *(int32_t *)g25;
											if (v93 <= 199) {
												// 0xb148c
												v94 = *(int32_t *)(g23 - 0x7754) + 232 * v93;
												g30 = v94;
												if (*(int32_t *)(v94 + 160) % 2 == 0) {
													// 0xb14a4
													v98 = *(int32_t *)(v94 + 224);
													if (v98 != 0) {
														// 0xb14b0
														g34 = v94 + 84;
														g27 = g35 + *(int32_t *)(v94 + 60);
														g26 = g32 + *(int32_t *)(v94 + 56) - *(int32_t *)(v98 + 496);
														function_c9b28();
														if (*(int32_t *)g25 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
															// 0xb14e4
															v80 = g30;
															v99 = *(int32_t *)(*(int32_t *)(v80 + 224) + 492);
															g13 = 8;
															function_507f4(233, g26, g27, v80 + 84, *(int32_t *)(v80 + 104), v99, g36);
															// branch -> 0xb150c
														}
														// 0xb150c
														function_c9b70((int32_t *)(g30 + 84));
														function_aefc4(g31, g33, g26, g27, *(int32_t *)g25, g36, 8);
														if (g17 != 0) {
															// 0xb153c
															if (*(int32_t *)(g30 + 108) == 0) {
																// 0xb1548
																function_b0c10(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
																// branch -> 0xb1568
															}
														}
													}
												}
											}
										}
									} else {
										// 0xb1474
										*(int32_t *)g25 = v16 - 1;
										v93 = *(int32_t *)g25;
										if (v93 <= 199) {
											// 0xb148c
											v94 = *(int32_t *)(g23 - 0x7754) + 232 * v93;
											g30 = v94;
											if (*(int32_t *)(v94 + 160) % 2 == 0) {
												// 0xb14a4
												v98 = *(int32_t *)(v94 + 224);
												if (v98 != 0) {
													// 0xb14b0
													g34 = v94 + 84;
													g27 = g35 + *(int32_t *)(v94 + 60);
													g26 = g32 + *(int32_t *)(v94 + 56) - *(int32_t *)(v98 + 496);
													function_c9b28();
													if (*(int32_t *)g25 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
														// 0xb14e4
														v80 = g30;
														v99 = *(int32_t *)(*(int32_t *)(v80 + 224) + 492);
														g13 = 8;
														function_507f4(233, g26, g27, v80 + 84, *(int32_t *)(v80 + 104), v99, g36);
														// branch -> 0xb150c
													}
													// 0xb150c
													function_c9b70((int32_t *)(g30 + 84));
													function_aefc4(g31, g33, g26, g27, *(int32_t *)g25, g36, 8);
													if (g17 != 0) {
														// 0xb153c
														if (*(int32_t *)(g30 + 108) == 0) {
															// 0xb1548
															function_b0c10(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
															// branch -> 0xb1568
														}
													}
												}
											}
										}
									}
									// 0xb1568
									if (v52 % 2 != 0) {
										// 0xb1570
										function_aeb58(g31, g33, g32, g35, g36, 8, 0);
										// branch -> 0xb1590
									}
									// 0xb1590
									if (v9 != 0) {
										// 0xb159c
										v81 = g23;
										v100 = *(int32_t *)(v81 - 0x70cc);
										v101 = *(int32_t *)(v81 - 0x7290);
										if (*(int32_t *)v101 < (int32_t) * (char *)v100) {
											// 0xb15b8
											function_afa48(g31, g33, g32, g35, 0, g36, 8);
											// branch -> 0xb15d8
										}
									}
									// 0xb15d8
									v82 = g21;
									v90 = 0x1000000 * v82;
									v95 = v90 / 0x1000000;
									if ((v90 || 0xffffff) >= 0x1ffffff) {
										// 0xb15e0
										v91 = v95 - 1;
										g27 = v91;
										v96 = *(int32_t *)(g23 - 0x7690) + 368 * v91;
										g31 = v96;
										if (*(int32_t *)(v96 + 52) != 0) {
											// 0xb1600
											if (v82 <= 127) {
												// 0xb1608
												g34 = *(int32_t *)(v96 + 24);
												v83 = function_c9948();
												g29 = v83;
												v84 = g31;
												if (v83 == 0) {
													// 0xb1618
													function_c9acc(*(int32_t *)(v84 + 24));
													// branch -> 0xb16c4
												} else {
													// 0xb1624
													v102 = *(int32_t *)(v84 + 32);
													g11 = v102;
													if (v102 >= 1) {
														// 0xb1630
														if (function_4d794(v83) > 50) {
															// 0xb1630
															// branch -> 0xb1654
														} else {
															// 0xb1640
															v92 = function_4d794(g29);
															v85 = g31;
															v103 = *(int32_t *)(v85 + 32);
															g40 = v103;
															if (v103 <= v92) {
																// 0xb1660
																v86 = g27;
																v97 = g32 - *(int32_t *)(v85 + 40);
																g27 = v97;
																v88 = v97;
																v89 = v85;
																if (v86 == (int32_t) * (char *)*(int32_t *)(g23 - 0x7748)) {
																	// 0xb167c
																	g37 = v97;
																	g41 = *(int32_t *)(v85 + 36);
																	v87 = g35;
																	g38 = v87;
																	g42 = g36;
																	g13 = 8;
																	CelDrawHdrClrHL(181, v97, v87, *(int32_t *)(v85 + 24), v103);
																	v88 = g27;
																	v89 = g31;
																	// branch -> 0xb169c
																}
																// 0xb169c
																v104 = *(int32_t *)(v89 + 32);
																v105 = *(int32_t *)(v89 + 36);
																function_4e998(v88, g35, *(int32_t *)(v89 + 24), v104, v105, g36, 8);
																function_c9acc(*(int32_t *)(g31 + 24));
																// branch -> 0xb16c4
																// Detected a possible infinite recursion (goto support failed); quitting...
															}
														}
														// Detected a possible infinite recursion (goto support failed); quitting...
													}
													// Detected a possible infinite recursion (goto support failed); quitting...
												}
												// Detected a possible infinite recursion (goto support failed); quitting...
											}
										}
									}
									// Detected a possible infinite recursion (goto support failed); quitting...
								}
								// 0xb1568
								if (v52 % 2 != 0) {
									// 0xb1570
									function_aeb58(g31, g33, g32, g35, g36, 8, 0);
									// branch -> 0xb1590
								}
								// 0xb1590
								if (v9 != 0) {
									// 0xb159c
									v81 = g23;
									v100 = *(int32_t *)(v81 - 0x70cc);
									v101 = *(int32_t *)(v81 - 0x7290);
									if (*(int32_t *)v101 < (int32_t) * (char *)v100) {
										// 0xb15b8
										function_afa48(g31, g33, g32, g35, 0, g36, 8);
										// branch -> 0xb15d8
									}
								}
								// 0xb15d8
								v82 = g21;
								v90 = 0x1000000 * v82;
								v95 = v90 / 0x1000000;
								if ((v90 || 0xffffff) >= 0x1ffffff) {
									// 0xb15e0
									v91 = v95 - 1;
									g27 = v91;
									v96 = *(int32_t *)(g23 - 0x7690) + 368 * v91;
									g31 = v96;
									if (*(int32_t *)(v96 + 52) != 0) {
										// 0xb1600
										if (v82 <= 127) {
											// 0xb1608
											g34 = *(int32_t *)(v96 + 24);
											v83 = function_c9948();
											g29 = v83;
											v84 = g31;
											if (v83 == 0) {
												// 0xb1618
												function_c9acc(*(int32_t *)(v84 + 24));
												// branch -> 0xb16c4
											} else {
												// 0xb1624
												v102 = *(int32_t *)(v84 + 32);
												g11 = v102;
												if (v102 >= 1) {
													// 0xb1630
													if (function_4d794(v83) > 50) {
														// 0xb1630
														// branch -> 0xb1654
													} else {
														// 0xb1640
														v92 = function_4d794(g29);
														v85 = g31;
														v103 = *(int32_t *)(v85 + 32);
														g40 = v103;
														if (v103 <= v92) {
															// 0xb1660
															v86 = g27;
															v97 = g32 - *(int32_t *)(v85 + 40);
															g27 = v97;
															v88 = v97;
															v89 = v85;
															if (v86 == (int32_t) * (char *)*(int32_t *)(g23 - 0x7748)) {
																// 0xb167c
																g37 = v97;
																g41 = *(int32_t *)(v85 + 36);
																v87 = g35;
																g38 = v87;
																g42 = g36;
																g13 = 8;
																CelDrawHdrClrHL(181, v97, v87, *(int32_t *)(v85 + 24), v103);
																v88 = g27;
																v89 = g31;
																// branch -> 0xb169c
															}
															// 0xb169c
															v104 = *(int32_t *)(v89 + 32);
															v105 = *(int32_t *)(v89 + 36);
															function_4e998(v88, g35, *(int32_t *)(v89 + 24), v104, v105, g36, 8);
															function_c9acc(*(int32_t *)(g31 + 24));
															// branch -> 0xb16c4
															// Detected a possible infinite recursion (goto support failed); quitting...
														}
													}
													// Detected a possible infinite recursion (goto support failed); quitting...
												}
												// Detected a possible infinite recursion (goto support failed); quitting...
											}
											// Detected a possible infinite recursion (goto support failed); quitting...
										}
									}
								}
								// Detected a possible infinite recursion (goto support failed); quitting...
							}
						}
					}
					// 0xb1004
					function_c9b70((int32_t *)g29);
					// branch -> 0xb1060
				}
				// 0xb1060
				if (v9 != 0) {
					// 0xb106c
					function_afa48(g31, g33, g32, g35, 1, g36, 8);
					// branch -> 0xb108c
				}
				// 0xb108c
				v28 = g21;
				v41 = 0x1000000 * v28;
				v49 = v41 / 0x1000000;
				if ((v41 || 0xffffff) >= 0x1ffffff) {
					// 0xb1094
					v42 = v49 - 1;
					g26 = v42;
					v50 = *(int32_t *)(g23 - 0x7690) + 368 * v42;
					g30 = v50;
					if (*(int32_t *)(v50 + 52) == 0) {
						// 0xb10b4
						if (v28 <= 127) {
							// 0xb10bc
							g34 = *(int32_t *)(v50 + 24);
							v29 = function_c9948();
							v18 = v29;
							v30 = g30;
							if (v29 == 0) {
								// 0xb10cc
								function_c9acc(*(int32_t *)(v30 + 24));
								// branch -> 0xb1178
							} else {
								// 0xb10d8
								v67 = *(int32_t *)(v30 + 32);
								g11 = v67;
								v32 = v30;
								if (v67 >= 1) {
									// 0xb10e4
									if (function_4d794(v29) > 50) {
										// 0xb10e4
										v32 = g30;
										// branch -> 0xb1108
									} else {
										// 0xb10f4
										v43 = function_4d794(v18);
										v31 = g30;
										v68 = *(int32_t *)(v31 + 32);
										g40 = v68;
										if (v68 <= v43) {
											// 0xb1114
											v51 = g32 - *(int32_t *)(v31 + 40);
											g27 = v51;
											v34 = v51;
											v35 = v31;
											if (g26 == (int32_t) * (char *)*(int32_t *)(g23 - 0x7748)) {
												// 0xb1130
												g37 = v51;
												g41 = *(int32_t *)(v31 + 36);
												v33 = g35;
												g38 = v33;
												g42 = g36;
												g13 = 8;
												CelDrawHdrClrHL(181, v51, v33, *(int32_t *)(v31 + 24), v68);
												v34 = g27;
												v35 = g30;
												// branch -> 0xb1150
											}
											// 0xb1150
											v69 = *(int32_t *)(v35 + 32);
											v70 = *(int32_t *)(v35 + 36);
											function_4e998(v34, g35, *(int32_t *)(v35 + 24), v69, v70, g36, 8);
											function_c9acc(*(int32_t *)(g30 + 24));
											// branch -> 0xb1178
											// 0xb1178
											v52 = v12;
											g29 = v52;
											if (__asm_rlwinm_(v52, 0, 26, 26) != 0) {
												// 0xb1184
												v44 = -1 - (int32_t)v17;
												if (v44 <= 3) {
													// 0xb119c
													v53 = g16 + 0x55ec * v44;
													v54 = g35 + *(int32_t *)(v53 + 100);
													v55 = g32 + *(int32_t *)(v53 + 96) - *(int32_t *)(v53 + 148);
													v71 = *(int32_t *)(v53 + 124);
													v72 = *(int32_t *)(v53 + 140);
													g13 = *(int32_t *)(v53 + 144);
													function_af440(v44, g31, g33 - 1, v55, v54, v71, v72, g36, 8);
													if (g17 != 0) {
														// 0xb11e8
														v73 = *(int32_t *)(g30 + 152);
														if (v73 != 0) {
															// 0xb11f4
															if (v73 == 2) {
																// 0xb11fc
																function_b0c10(g28 - 0x3060, g31 - 2, g33 + 1, g20, g36, g32 - 96, g35 - 16);
																// branch -> 0xb121c
															}
															// 0xb121c
															function_b0c10(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
															// branch -> 0xb123c
														}
													}
												}
											}
											// 0xb123c
											if (__asm_rlwinm_(v52, 0, 27, 27) != 0) {
												// 0xb1244
												if (__asm_rlwinm_(v52, 0, 25, 25) == 0) {
													// 0xb124c
													v74 = *(int32_t *)(g23 - 0x77ac);
													if (*(int32_t *)(g16 + 0x55ec * *(int32_t *)v74 + 460) != 0) {
														// 0xb1268
														v36 = g18;
														if (v36 <= 0xffffffff) {
															// 0xb1270
															*(int32_t *)g25 = -1 - v36;
															v56 = *(int32_t *)g25;
															if (v56 <= 199) {
																// 0xb1288
																v57 = *(int32_t *)(g23 - 0x7754) + 232 * v56;
																g30 = v57;
																if (*(int32_t *)(v57 + 160) % 2 == 0) {
																	// 0xb12a0
																	v75 = *(int32_t *)(v57 + 224);
																	if (v75 != 0) {
																		// 0xb12ac
																		g34 = v57 + 84;
																		g27 = g35 + *(int32_t *)(v57 + 60);
																		g26 = g32 + *(int32_t *)(v57 + 56) - *(int32_t *)(v75 + 496);
																		function_c9b28();
																		if (*(int32_t *)g25 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
																			// 0xb12e0
																			v37 = g30;
																			v76 = *(int32_t *)(*(int32_t *)(v37 + 224) + 492);
																			g13 = 8;
																			function_507f4(233, g26, g27, v37 + 84, *(int32_t *)(v37 + 104), v76, g36);
																			// branch -> 0xb1308
																		}
																		// 0xb1308
																		function_c9b70((int32_t *)(g30 + 84));
																		function_aefc4(g31, g33, g26, g27, *(int32_t *)g25, g36, 8);
																		if (g17 != 0) {
																			// 0xb1338
																			if (*(int32_t *)(g30 + 108) == 0) {
																				// 0xb1344
																				function_b0c10(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
																				// branch -> 0xb1364
																			}
																		}
																	}
																}
															}
														}
													}
												} else {
													// 0xb1268
													v36 = g18;
													if (v36 <= 0xffffffff) {
														// 0xb1270
														*(int32_t *)g25 = -1 - v36;
														v56 = *(int32_t *)g25;
														if (v56 <= 199) {
															// 0xb1288
															v57 = *(int32_t *)(g23 - 0x7754) + 232 * v56;
															g30 = v57;
															if (*(int32_t *)(v57 + 160) % 2 == 0) {
																// 0xb12a0
																v75 = *(int32_t *)(v57 + 224);
																if (v75 != 0) {
																	// 0xb12ac
																	g34 = v57 + 84;
																	g27 = g35 + *(int32_t *)(v57 + 60);
																	g26 = g32 + *(int32_t *)(v57 + 56) - *(int32_t *)(v75 + 496);
																	function_c9b28();
																	if (*(int32_t *)g25 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
																		// 0xb12e0
																		v37 = g30;
																		v76 = *(int32_t *)(*(int32_t *)(v37 + 224) + 492);
																		g13 = 8;
																		function_507f4(233, g26, g27, v37 + 84, *(int32_t *)(v37 + 104), v76, g36);
																		// branch -> 0xb1308
																	}
																	// 0xb1308
																	function_c9b70((int32_t *)(g30 + 84));
																	function_aefc4(g31, g33, g26, g27, *(int32_t *)g25, g36, 8);
																	if (g17 != 0) {
																		// 0xb1338
																		if (*(int32_t *)(g30 + 108) == 0) {
																			// 0xb1344
																			function_b0c10(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
																			// branch -> 0xb1364
																		}
																	}
																}
															}
														}
													}
												}
												// 0xb1364
												if (__asm_rlwinm_(v52, 0, 29, 29) != 0) {
													// 0xb136c
													function_af6d0(g31, g33, g32, g35, g36, 8, 1);
													// branch -> 0xb138c
												}
												// 0xb138c
												v45 = 0x1000000 * g22;
												if (v45 >= 0 && (v45 || 0xffffff) >= 0x1ffffff) {
													// 0xb1394
													v46 = v45 / 0x1000000 - 1;
													if (v46 <= 3) {
														// 0xb13a4
														v58 = g16 + 0x55ec * v46;
														v59 = g35 + *(int32_t *)(v58 + 100);
														v60 = g32 + *(int32_t *)(v58 + 96) - *(int32_t *)(v58 + 148);
														v77 = *(int32_t *)(v58 + 140);
														g13 = *(int32_t *)(v58 + 144);
														function_af440(v46, g31, g33, v60, v59, *(int32_t *)(v58 + 124), v77, g36, 8);
														if (g17 != 0) {
															// 0xb13f0
															v78 = *(int32_t *)(g30 + 152);
															if (v78 != 0) {
																// 0xb13fc
																if (v78 == 2) {
																	// 0xb1404
																	function_b0c10(g28 - 0x3060, g31 - 2, g33 + 1, g20, g36, g32 - 96, g35 - 16);
																	// branch -> 0xb1424
																}
																// 0xb1424
																function_b0c10(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
																// branch -> 0xb1444
															}
														}
													}
												}
												// 0xb1444
												if (v15 >= 1) {
													// 0xb1450
													if (__asm_rlwinm_(v52, 0, 25, 25) == 0) {
														// 0xb1458
														v79 = *(int32_t *)(g23 - 0x77ac);
														if (*(int32_t *)(g16 + 0x55ec * *(int32_t *)v79 + 460) != 0) {
															// 0xb1474
															*(int32_t *)g25 = v16 - 1;
															v93 = *(int32_t *)g25;
															if (v93 <= 199) {
																// 0xb148c
																v94 = *(int32_t *)(g23 - 0x7754) + 232 * v93;
																g30 = v94;
																if (*(int32_t *)(v94 + 160) % 2 == 0) {
																	// 0xb14a4
																	v98 = *(int32_t *)(v94 + 224);
																	if (v98 != 0) {
																		// 0xb14b0
																		g34 = v94 + 84;
																		g27 = g35 + *(int32_t *)(v94 + 60);
																		g26 = g32 + *(int32_t *)(v94 + 56) - *(int32_t *)(v98 + 496);
																		function_c9b28();
																		if (*(int32_t *)g25 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
																			// 0xb14e4
																			v80 = g30;
																			v99 = *(int32_t *)(*(int32_t *)(v80 + 224) + 492);
																			g13 = 8;
																			function_507f4(233, g26, g27, v80 + 84, *(int32_t *)(v80 + 104), v99, g36);
																			// branch -> 0xb150c
																		}
																		// 0xb150c
																		function_c9b70((int32_t *)(g30 + 84));
																		function_aefc4(g31, g33, g26, g27, *(int32_t *)g25, g36, 8);
																		if (g17 != 0) {
																			// 0xb153c
																			if (*(int32_t *)(g30 + 108) == 0) {
																				// 0xb1548
																				function_b0c10(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
																				// branch -> 0xb1568
																			}
																		}
																	}
																}
															}
														}
													} else {
														// 0xb1474
														*(int32_t *)g25 = v16 - 1;
														v93 = *(int32_t *)g25;
														if (v93 <= 199) {
															// 0xb148c
															v94 = *(int32_t *)(g23 - 0x7754) + 232 * v93;
															g30 = v94;
															if (*(int32_t *)(v94 + 160) % 2 == 0) {
																// 0xb14a4
																v98 = *(int32_t *)(v94 + 224);
																if (v98 != 0) {
																	// 0xb14b0
																	g34 = v94 + 84;
																	g27 = g35 + *(int32_t *)(v94 + 60);
																	g26 = g32 + *(int32_t *)(v94 + 56) - *(int32_t *)(v98 + 496);
																	function_c9b28();
																	if (*(int32_t *)g25 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
																		// 0xb14e4
																		v80 = g30;
																		v99 = *(int32_t *)(*(int32_t *)(v80 + 224) + 492);
																		g13 = 8;
																		function_507f4(233, g26, g27, v80 + 84, *(int32_t *)(v80 + 104), v99, g36);
																		// branch -> 0xb150c
																	}
																	// 0xb150c
																	function_c9b70((int32_t *)(g30 + 84));
																	function_aefc4(g31, g33, g26, g27, *(int32_t *)g25, g36, 8);
																	if (g17 != 0) {
																		// 0xb153c
																		if (*(int32_t *)(g30 + 108) == 0) {
																			// 0xb1548
																			function_b0c10(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
																			// branch -> 0xb1568
																		}
																	}
																}
															}
														}
													}
													// 0xb1568
													if (v52 % 2 != 0) {
														// 0xb1570
														function_aeb58(g31, g33, g32, g35, g36, 8, 0);
														// branch -> 0xb1590
													}
													// 0xb1590
													if (v9 != 0) {
														// 0xb159c
														v81 = g23;
														v100 = *(int32_t *)(v81 - 0x70cc);
														v101 = *(int32_t *)(v81 - 0x7290);
														if (*(int32_t *)v101 < (int32_t) * (char *)v100) {
															// 0xb15b8
															function_afa48(g31, g33, g32, g35, 0, g36, 8);
															// branch -> 0xb15d8
														}
													}
													// 0xb15d8
													v82 = g21;
													v90 = 0x1000000 * v82;
													v95 = v90 / 0x1000000;
													if ((v90 || 0xffffff) >= 0x1ffffff) {
														// 0xb15e0
														v91 = v95 - 1;
														g27 = v91;
														v96 = *(int32_t *)(g23 - 0x7690) + 368 * v91;
														g31 = v96;
														if (*(int32_t *)(v96 + 52) != 0) {
															// 0xb1600
															if (v82 <= 127) {
																// 0xb1608
																g34 = *(int32_t *)(v96 + 24);
																v83 = function_c9948();
																g29 = v83;
																v84 = g31;
																if (v83 == 0) {
																	// 0xb1618
																	function_c9acc(*(int32_t *)(v84 + 24));
																	// branch -> 0xb16c4
																} else {
																	// 0xb1624
																	v102 = *(int32_t *)(v84 + 32);
																	g11 = v102;
																	if (v102 >= 1) {
																		// 0xb1630
																		if (function_4d794(v83) > 50) {
																			// 0xb1630
																			// branch -> 0xb1654
																		} else {
																			// 0xb1640
																			v92 = function_4d794(g29);
																			v85 = g31;
																			v103 = *(int32_t *)(v85 + 32);
																			g40 = v103;
																			if (v103 <= v92) {
																				// 0xb1660
																				v86 = g27;
																				v97 = g32 - *(int32_t *)(v85 + 40);
																				g27 = v97;
																				v88 = v97;
																				v89 = v85;
																				if (v86 == (int32_t) * (char *)*(int32_t *)(g23 - 0x7748)) {
																					// 0xb167c
																					g37 = v97;
																					g41 = *(int32_t *)(v85 + 36);
																					v87 = g35;
																					g38 = v87;
																					g42 = g36;
																					g13 = 8;
																					CelDrawHdrClrHL(181, v97, v87, *(int32_t *)(v85 + 24), v103);
																					v88 = g27;
																					v89 = g31;
																					// branch -> 0xb169c
																				}
																				// 0xb169c
																				v104 = *(int32_t *)(v89 + 32);
																				v105 = *(int32_t *)(v89 + 36);
																				function_4e998(v88, g35, *(int32_t *)(v89 + 24), v104, v105, g36, 8);
																				function_c9acc(*(int32_t *)(g31 + 24));
																				// branch -> 0xb16c4
																				// Detected a possible infinite recursion (goto support failed); quitting...
																			}
																		}
																		// Detected a possible infinite recursion (goto support failed); quitting...
																	}
																	// Detected a possible infinite recursion (goto support failed); quitting...
																}
																// Detected a possible infinite recursion (goto support failed); quitting...
															}
														}
													}
													// Detected a possible infinite recursion (goto support failed); quitting...
												}
												// 0xb1568
												if (v52 % 2 != 0) {
													// 0xb1570
													function_aeb58(g31, g33, g32, g35, g36, 8, 0);
													// branch -> 0xb1590
												}
												// 0xb1590
												if (v9 != 0) {
													// 0xb159c
													v81 = g23;
													v100 = *(int32_t *)(v81 - 0x70cc);
													v101 = *(int32_t *)(v81 - 0x7290);
													if (*(int32_t *)v101 < (int32_t) * (char *)v100) {
														// 0xb15b8
														function_afa48(g31, g33, g32, g35, 0, g36, 8);
														// branch -> 0xb15d8
													}
												}
												// 0xb15d8
												v82 = g21;
												v90 = 0x1000000 * v82;
												v95 = v90 / 0x1000000;
												if ((v90 || 0xffffff) >= 0x1ffffff) {
													// 0xb15e0
													v91 = v95 - 1;
													g27 = v91;
													v96 = *(int32_t *)(g23 - 0x7690) + 368 * v91;
													g31 = v96;
													if (*(int32_t *)(v96 + 52) != 0) {
														// 0xb1600
														if (v82 <= 127) {
															// 0xb1608
															g34 = *(int32_t *)(v96 + 24);
															v83 = function_c9948();
															g29 = v83;
															v84 = g31;
															if (v83 == 0) {
																// 0xb1618
																function_c9acc(*(int32_t *)(v84 + 24));
																// branch -> 0xb16c4
															} else {
																// 0xb1624
																v102 = *(int32_t *)(v84 + 32);
																g11 = v102;
																if (v102 >= 1) {
																	// 0xb1630
																	if (function_4d794(v83) > 50) {
																		// 0xb1630
																		// branch -> 0xb1654
																	} else {
																		// 0xb1640
																		v92 = function_4d794(g29);
																		v85 = g31;
																		v103 = *(int32_t *)(v85 + 32);
																		g40 = v103;
																		if (v103 <= v92) {
																			// 0xb1660
																			v86 = g27;
																			v97 = g32 - *(int32_t *)(v85 + 40);
																			g27 = v97;
																			v88 = v97;
																			v89 = v85;
																			if (v86 == (int32_t) * (char *)*(int32_t *)(g23 - 0x7748)) {
																				// 0xb167c
																				g37 = v97;
																				g41 = *(int32_t *)(v85 + 36);
																				v87 = g35;
																				g38 = v87;
																				g42 = g36;
																				g13 = 8;
																				CelDrawHdrClrHL(181, v97, v87, *(int32_t *)(v85 + 24), v103);
																				v88 = g27;
																				v89 = g31;
																				// branch -> 0xb169c
																			}
																			// 0xb169c
																			v104 = *(int32_t *)(v89 + 32);
																			v105 = *(int32_t *)(v89 + 36);
																			function_4e998(v88, g35, *(int32_t *)(v89 + 24), v104, v105, g36, 8);
																			function_c9acc(*(int32_t *)(g31 + 24));
																			// branch -> 0xb16c4
																			// Detected a possible infinite recursion (goto support failed); quitting...
																		}
																	}
																	// Detected a possible infinite recursion (goto support failed); quitting...
																}
																// Detected a possible infinite recursion (goto support failed); quitting...
															}
															// Detected a possible infinite recursion (goto support failed); quitting...
														}
													}
												}
												// Detected a possible infinite recursion (goto support failed); quitting...
											}
											// 0xb1364
											if (__asm_rlwinm_(v52, 0, 29, 29) != 0) {
												// 0xb136c
												function_af6d0(g31, g33, g32, g35, g36, 8, 1);
												// branch -> 0xb138c
											}
											// 0xb138c
											v45 = 0x1000000 * g22;
											if (v45 >= 0 && (v45 || 0xffffff) >= 0x1ffffff) {
												// 0xb1394
												v46 = v45 / 0x1000000 - 1;
												if (v46 <= 3) {
													// 0xb13a4
													v58 = g16 + 0x55ec * v46;
													v59 = g35 + *(int32_t *)(v58 + 100);
													v60 = g32 + *(int32_t *)(v58 + 96) - *(int32_t *)(v58 + 148);
													v77 = *(int32_t *)(v58 + 140);
													g13 = *(int32_t *)(v58 + 144);
													function_af440(v46, g31, g33, v60, v59, *(int32_t *)(v58 + 124), v77, g36, 8);
													if (g17 != 0) {
														// 0xb13f0
														v78 = *(int32_t *)(g30 + 152);
														if (v78 != 0) {
															// 0xb13fc
															if (v78 == 2) {
																// 0xb1404
																function_b0c10(g28 - 0x3060, g31 - 2, g33 + 1, g20, g36, g32 - 96, g35 - 16);
																// branch -> 0xb1424
															}
															// 0xb1424
															function_b0c10(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
															// branch -> 0xb1444
														}
													}
												}
											}
											// 0xb1444
											if (v15 >= 1) {
												// 0xb1450
												if (__asm_rlwinm_(v52, 0, 25, 25) == 0) {
													// 0xb1458
													v79 = *(int32_t *)(g23 - 0x77ac);
													if (*(int32_t *)(g16 + 0x55ec * *(int32_t *)v79 + 460) != 0) {
														// 0xb1474
														*(int32_t *)g25 = v16 - 1;
														v93 = *(int32_t *)g25;
														if (v93 <= 199) {
															// 0xb148c
															v94 = *(int32_t *)(g23 - 0x7754) + 232 * v93;
															g30 = v94;
															if (*(int32_t *)(v94 + 160) % 2 == 0) {
																// 0xb14a4
																v98 = *(int32_t *)(v94 + 224);
																if (v98 != 0) {
																	// 0xb14b0
																	g34 = v94 + 84;
																	g27 = g35 + *(int32_t *)(v94 + 60);
																	g26 = g32 + *(int32_t *)(v94 + 56) - *(int32_t *)(v98 + 496);
																	function_c9b28();
																	if (*(int32_t *)g25 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
																		// 0xb14e4
																		v80 = g30;
																		v99 = *(int32_t *)(*(int32_t *)(v80 + 224) + 492);
																		g13 = 8;
																		function_507f4(233, g26, g27, v80 + 84, *(int32_t *)(v80 + 104), v99, g36);
																		// branch -> 0xb150c
																	}
																	// 0xb150c
																	function_c9b70((int32_t *)(g30 + 84));
																	function_aefc4(g31, g33, g26, g27, *(int32_t *)g25, g36, 8);
																	if (g17 != 0) {
																		// 0xb153c
																		if (*(int32_t *)(g30 + 108) == 0) {
																			// 0xb1548
																			function_b0c10(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
																			// branch -> 0xb1568
																		}
																	}
																}
															}
														}
													}
												} else {
													// 0xb1474
													*(int32_t *)g25 = v16 - 1;
													v93 = *(int32_t *)g25;
													if (v93 <= 199) {
														// 0xb148c
														v94 = *(int32_t *)(g23 - 0x7754) + 232 * v93;
														g30 = v94;
														if (*(int32_t *)(v94 + 160) % 2 == 0) {
															// 0xb14a4
															v98 = *(int32_t *)(v94 + 224);
															if (v98 != 0) {
																// 0xb14b0
																g34 = v94 + 84;
																g27 = g35 + *(int32_t *)(v94 + 60);
																g26 = g32 + *(int32_t *)(v94 + 56) - *(int32_t *)(v98 + 496);
																function_c9b28();
																if (*(int32_t *)g25 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
																	// 0xb14e4
																	v80 = g30;
																	v99 = *(int32_t *)(*(int32_t *)(v80 + 224) + 492);
																	g13 = 8;
																	function_507f4(233, g26, g27, v80 + 84, *(int32_t *)(v80 + 104), v99, g36);
																	// branch -> 0xb150c
																}
																// 0xb150c
																function_c9b70((int32_t *)(g30 + 84));
																function_aefc4(g31, g33, g26, g27, *(int32_t *)g25, g36, 8);
																if (g17 != 0) {
																	// 0xb153c
																	if (*(int32_t *)(g30 + 108) == 0) {
																		// 0xb1548
																		function_b0c10(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
																		// branch -> 0xb1568
																	}
																}
															}
														}
													}
												}
												// 0xb1568
												if (v52 % 2 != 0) {
													// 0xb1570
													function_aeb58(g31, g33, g32, g35, g36, 8, 0);
													// branch -> 0xb1590
												}
												// 0xb1590
												if (v9 != 0) {
													// 0xb159c
													v81 = g23;
													v100 = *(int32_t *)(v81 - 0x70cc);
													v101 = *(int32_t *)(v81 - 0x7290);
													if (*(int32_t *)v101 < (int32_t) * (char *)v100) {
														// 0xb15b8
														function_afa48(g31, g33, g32, g35, 0, g36, 8);
														// branch -> 0xb15d8
													}
												}
												// 0xb15d8
												v82 = g21;
												v90 = 0x1000000 * v82;
												v95 = v90 / 0x1000000;
												if ((v90 || 0xffffff) >= 0x1ffffff) {
													// 0xb15e0
													v91 = v95 - 1;
													g27 = v91;
													v96 = *(int32_t *)(g23 - 0x7690) + 368 * v91;
													g31 = v96;
													if (*(int32_t *)(v96 + 52) != 0) {
														// 0xb1600
														if (v82 <= 127) {
															// 0xb1608
															g34 = *(int32_t *)(v96 + 24);
															v83 = function_c9948();
															g29 = v83;
															v84 = g31;
															if (v83 == 0) {
																// 0xb1618
																function_c9acc(*(int32_t *)(v84 + 24));
																// branch -> 0xb16c4
															} else {
																// 0xb1624
																v102 = *(int32_t *)(v84 + 32);
																g11 = v102;
																if (v102 >= 1) {
																	// 0xb1630
																	if (function_4d794(v83) > 50) {
																		// 0xb1630
																		// branch -> 0xb1654
																	} else {
																		// 0xb1640
																		v92 = function_4d794(g29);
																		v85 = g31;
																		v103 = *(int32_t *)(v85 + 32);
																		g40 = v103;
																		if (v103 <= v92) {
																			// 0xb1660
																			v86 = g27;
																			v97 = g32 - *(int32_t *)(v85 + 40);
																			g27 = v97;
																			v88 = v97;
																			v89 = v85;
																			if (v86 == (int32_t) * (char *)*(int32_t *)(g23 - 0x7748)) {
																				// 0xb167c
																				g37 = v97;
																				g41 = *(int32_t *)(v85 + 36);
																				v87 = g35;
																				g38 = v87;
																				g42 = g36;
																				g13 = 8;
																				CelDrawHdrClrHL(181, v97, v87, *(int32_t *)(v85 + 24), v103);
																				v88 = g27;
																				v89 = g31;
																				// branch -> 0xb169c
																			}
																			// 0xb169c
																			v104 = *(int32_t *)(v89 + 32);
																			v105 = *(int32_t *)(v89 + 36);
																			function_4e998(v88, g35, *(int32_t *)(v89 + 24), v104, v105, g36, 8);
																			function_c9acc(*(int32_t *)(g31 + 24));
																			// branch -> 0xb16c4
																			// Detected a possible infinite recursion (goto support failed); quitting...
																		}
																	}
																	// Detected a possible infinite recursion (goto support failed); quitting...
																}
																// Detected a possible infinite recursion (goto support failed); quitting...
															}
															// Detected a possible infinite recursion (goto support failed); quitting...
														}
													}
												}
												// Detected a possible infinite recursion (goto support failed); quitting...
											}
											// 0xb1568
											if (v52 % 2 != 0) {
												// 0xb1570
												function_aeb58(g31, g33, g32, g35, g36, 8, 0);
												// branch -> 0xb1590
											}
											// 0xb1590
											if (v9 != 0) {
												// 0xb159c
												v81 = g23;
												v100 = *(int32_t *)(v81 - 0x70cc);
												v101 = *(int32_t *)(v81 - 0x7290);
												if (*(int32_t *)v101 < (int32_t) * (char *)v100) {
													// 0xb15b8
													function_afa48(g31, g33, g32, g35, 0, g36, 8);
													// branch -> 0xb15d8
												}
											}
											// 0xb15d8
											v82 = g21;
											v90 = 0x1000000 * v82;
											v95 = v90 / 0x1000000;
											if ((v90 || 0xffffff) >= 0x1ffffff) {
												// 0xb15e0
												v91 = v95 - 1;
												g27 = v91;
												v96 = *(int32_t *)(g23 - 0x7690) + 368 * v91;
												g31 = v96;
												if (*(int32_t *)(v96 + 52) != 0) {
													// 0xb1600
													if (v82 <= 127) {
														// 0xb1608
														g34 = *(int32_t *)(v96 + 24);
														v83 = function_c9948();
														g29 = v83;
														v84 = g31;
														if (v83 == 0) {
															// 0xb1618
															function_c9acc(*(int32_t *)(v84 + 24));
															// branch -> 0xb16c4
														} else {
															// 0xb1624
															v102 = *(int32_t *)(v84 + 32);
															g11 = v102;
															if (v102 >= 1) {
																// 0xb1630
																if (function_4d794(v83) > 50) {
																	// 0xb1630
																	// branch -> 0xb1654
																} else {
																	// 0xb1640
																	v92 = function_4d794(g29);
																	v85 = g31;
																	v103 = *(int32_t *)(v85 + 32);
																	g40 = v103;
																	if (v103 <= v92) {
																		// 0xb1660
																		v86 = g27;
																		v97 = g32 - *(int32_t *)(v85 + 40);
																		g27 = v97;
																		v88 = v97;
																		v89 = v85;
																		if (v86 == (int32_t) * (char *)*(int32_t *)(g23 - 0x7748)) {
																			// 0xb167c
																			g37 = v97;
																			g41 = *(int32_t *)(v85 + 36);
																			v87 = g35;
																			g38 = v87;
																			g42 = g36;
																			g13 = 8;
																			CelDrawHdrClrHL(181, v97, v87, *(int32_t *)(v85 + 24), v103);
																			v88 = g27;
																			v89 = g31;
																			// branch -> 0xb169c
																		}
																		// 0xb169c
																		v104 = *(int32_t *)(v89 + 32);
																		v105 = *(int32_t *)(v89 + 36);
																		function_4e998(v88, g35, *(int32_t *)(v89 + 24), v104, v105, g36, 8);
																		function_c9acc(*(int32_t *)(g31 + 24));
																		// branch -> 0xb16c4
																		// Detected a possible infinite recursion (goto support failed); quitting...
																	}
																}
																// Detected a possible infinite recursion (goto support failed); quitting...
															}
															// Detected a possible infinite recursion (goto support failed); quitting...
														}
														// Detected a possible infinite recursion (goto support failed); quitting...
													}
												}
											}
											// Detected a possible infinite recursion (goto support failed); quitting...
										} else {
											v32 = v31;
										}
									}
									// 0xb1108
									function_c9acc(*(int32_t *)(v32 + 24));
									// branch -> 0xb1178
									// 0xb1178
									v52 = v12;
									g29 = v52;
									if (__asm_rlwinm_(v52, 0, 26, 26) != 0) {
										// 0xb1184
										v44 = -1 - (int32_t)v17;
										if (v44 <= 3) {
											// 0xb119c
											v53 = g16 + 0x55ec * v44;
											v54 = g35 + *(int32_t *)(v53 + 100);
											v55 = g32 + *(int32_t *)(v53 + 96) - *(int32_t *)(v53 + 148);
											v71 = *(int32_t *)(v53 + 124);
											v72 = *(int32_t *)(v53 + 140);
											g13 = *(int32_t *)(v53 + 144);
											function_af440(v44, g31, g33 - 1, v55, v54, v71, v72, g36, 8);
											if (g17 != 0) {
												// 0xb11e8
												v73 = *(int32_t *)(g30 + 152);
												if (v73 != 0) {
													// 0xb11f4
													if (v73 == 2) {
														// 0xb11fc
														function_b0c10(g28 - 0x3060, g31 - 2, g33 + 1, g20, g36, g32 - 96, g35 - 16);
														// branch -> 0xb121c
													}
													// 0xb121c
													function_b0c10(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
													// branch -> 0xb123c
												}
											}
										}
									}
									// 0xb123c
									if (__asm_rlwinm_(v52, 0, 27, 27) != 0) {
										// 0xb1244
										if (__asm_rlwinm_(v52, 0, 25, 25) == 0) {
											// 0xb124c
											v74 = *(int32_t *)(g23 - 0x77ac);
											if (*(int32_t *)(g16 + 0x55ec * *(int32_t *)v74 + 460) != 0) {
												// 0xb1268
												v36 = g18;
												if (v36 <= 0xffffffff) {
													// 0xb1270
													*(int32_t *)g25 = -1 - v36;
													v56 = *(int32_t *)g25;
													if (v56 <= 199) {
														// 0xb1288
														v57 = *(int32_t *)(g23 - 0x7754) + 232 * v56;
														g30 = v57;
														if (*(int32_t *)(v57 + 160) % 2 == 0) {
															// 0xb12a0
															v75 = *(int32_t *)(v57 + 224);
															if (v75 != 0) {
																// 0xb12ac
																g34 = v57 + 84;
																g27 = g35 + *(int32_t *)(v57 + 60);
																g26 = g32 + *(int32_t *)(v57 + 56) - *(int32_t *)(v75 + 496);
																function_c9b28();
																if (*(int32_t *)g25 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
																	// 0xb12e0
																	v37 = g30;
																	v76 = *(int32_t *)(*(int32_t *)(v37 + 224) + 492);
																	g13 = 8;
																	function_507f4(233, g26, g27, v37 + 84, *(int32_t *)(v37 + 104), v76, g36);
																	// branch -> 0xb1308
																}
																// 0xb1308
																function_c9b70((int32_t *)(g30 + 84));
																function_aefc4(g31, g33, g26, g27, *(int32_t *)g25, g36, 8);
																if (g17 != 0) {
																	// 0xb1338
																	if (*(int32_t *)(g30 + 108) == 0) {
																		// 0xb1344
																		function_b0c10(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
																		// branch -> 0xb1364
																	}
																}
															}
														}
													}
												}
											}
										} else {
											// 0xb1268
											v36 = g18;
											if (v36 <= 0xffffffff) {
												// 0xb1270
												*(int32_t *)g25 = -1 - v36;
												v56 = *(int32_t *)g25;
												if (v56 <= 199) {
													// 0xb1288
													v57 = *(int32_t *)(g23 - 0x7754) + 232 * v56;
													g30 = v57;
													if (*(int32_t *)(v57 + 160) % 2 == 0) {
														// 0xb12a0
														v75 = *(int32_t *)(v57 + 224);
														if (v75 != 0) {
															// 0xb12ac
															g34 = v57 + 84;
															g27 = g35 + *(int32_t *)(v57 + 60);
															g26 = g32 + *(int32_t *)(v57 + 56) - *(int32_t *)(v75 + 496);
															function_c9b28();
															if (*(int32_t *)g25 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
																// 0xb12e0
																v37 = g30;
																v76 = *(int32_t *)(*(int32_t *)(v37 + 224) + 492);
																g13 = 8;
																function_507f4(233, g26, g27, v37 + 84, *(int32_t *)(v37 + 104), v76, g36);
																// branch -> 0xb1308
															}
															// 0xb1308
															function_c9b70((int32_t *)(g30 + 84));
															function_aefc4(g31, g33, g26, g27, *(int32_t *)g25, g36, 8);
															if (g17 != 0) {
																// 0xb1338
																if (*(int32_t *)(g30 + 108) == 0) {
																	// 0xb1344
																	function_b0c10(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
																	// branch -> 0xb1364
																}
															}
														}
													}
												}
											}
										}
										// 0xb1364
										if (__asm_rlwinm_(v52, 0, 29, 29) != 0) {
											// 0xb136c
											function_af6d0(g31, g33, g32, g35, g36, 8, 1);
											// branch -> 0xb138c
										}
										// 0xb138c
										v45 = 0x1000000 * g22;
										if (v45 >= 0 && (v45 || 0xffffff) >= 0x1ffffff) {
											// 0xb1394
											v46 = v45 / 0x1000000 - 1;
											if (v46 <= 3) {
												// 0xb13a4
												v58 = g16 + 0x55ec * v46;
												v59 = g35 + *(int32_t *)(v58 + 100);
												v60 = g32 + *(int32_t *)(v58 + 96) - *(int32_t *)(v58 + 148);
												v77 = *(int32_t *)(v58 + 140);
												g13 = *(int32_t *)(v58 + 144);
												function_af440(v46, g31, g33, v60, v59, *(int32_t *)(v58 + 124), v77, g36, 8);
												if (g17 != 0) {
													// 0xb13f0
													v78 = *(int32_t *)(g30 + 152);
													if (v78 != 0) {
														// 0xb13fc
														if (v78 == 2) {
															// 0xb1404
															function_b0c10(g28 - 0x3060, g31 - 2, g33 + 1, g20, g36, g32 - 96, g35 - 16);
															// branch -> 0xb1424
														}
														// 0xb1424
														function_b0c10(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
														// branch -> 0xb1444
													}
												}
											}
										}
										// 0xb1444
										if (v15 >= 1) {
											// 0xb1450
											if (__asm_rlwinm_(v52, 0, 25, 25) == 0) {
												// 0xb1458
												v79 = *(int32_t *)(g23 - 0x77ac);
												if (*(int32_t *)(g16 + 0x55ec * *(int32_t *)v79 + 460) != 0) {
													// 0xb1474
													*(int32_t *)g25 = v16 - 1;
													v93 = *(int32_t *)g25;
													if (v93 <= 199) {
														// 0xb148c
														v94 = *(int32_t *)(g23 - 0x7754) + 232 * v93;
														g30 = v94;
														if (*(int32_t *)(v94 + 160) % 2 == 0) {
															// 0xb14a4
															v98 = *(int32_t *)(v94 + 224);
															if (v98 != 0) {
																// 0xb14b0
																g34 = v94 + 84;
																g27 = g35 + *(int32_t *)(v94 + 60);
																g26 = g32 + *(int32_t *)(v94 + 56) - *(int32_t *)(v98 + 496);
																function_c9b28();
																if (*(int32_t *)g25 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
																	// 0xb14e4
																	v80 = g30;
																	v99 = *(int32_t *)(*(int32_t *)(v80 + 224) + 492);
																	g13 = 8;
																	function_507f4(233, g26, g27, v80 + 84, *(int32_t *)(v80 + 104), v99, g36);
																	// branch -> 0xb150c
																}
																// 0xb150c
																function_c9b70((int32_t *)(g30 + 84));
																function_aefc4(g31, g33, g26, g27, *(int32_t *)g25, g36, 8);
																if (g17 != 0) {
																	// 0xb153c
																	if (*(int32_t *)(g30 + 108) == 0) {
																		// 0xb1548
																		function_b0c10(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
																		// branch -> 0xb1568
																	}
																}
															}
														}
													}
												}
											} else {
												// 0xb1474
												*(int32_t *)g25 = v16 - 1;
												v93 = *(int32_t *)g25;
												if (v93 <= 199) {
													// 0xb148c
													v94 = *(int32_t *)(g23 - 0x7754) + 232 * v93;
													g30 = v94;
													if (*(int32_t *)(v94 + 160) % 2 == 0) {
														// 0xb14a4
														v98 = *(int32_t *)(v94 + 224);
														if (v98 != 0) {
															// 0xb14b0
															g34 = v94 + 84;
															g27 = g35 + *(int32_t *)(v94 + 60);
															g26 = g32 + *(int32_t *)(v94 + 56) - *(int32_t *)(v98 + 496);
															function_c9b28();
															if (*(int32_t *)g25 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
																// 0xb14e4
																v80 = g30;
																v99 = *(int32_t *)(*(int32_t *)(v80 + 224) + 492);
																g13 = 8;
																function_507f4(233, g26, g27, v80 + 84, *(int32_t *)(v80 + 104), v99, g36);
																// branch -> 0xb150c
															}
															// 0xb150c
															function_c9b70((int32_t *)(g30 + 84));
															function_aefc4(g31, g33, g26, g27, *(int32_t *)g25, g36, 8);
															if (g17 != 0) {
																// 0xb153c
																if (*(int32_t *)(g30 + 108) == 0) {
																	// 0xb1548
																	function_b0c10(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
																	// branch -> 0xb1568
																}
															}
														}
													}
												}
											}
											// 0xb1568
											if (v52 % 2 != 0) {
												// 0xb1570
												function_aeb58(g31, g33, g32, g35, g36, 8, 0);
												// branch -> 0xb1590
											}
											// 0xb1590
											if (v9 != 0) {
												// 0xb159c
												v81 = g23;
												v100 = *(int32_t *)(v81 - 0x70cc);
												v101 = *(int32_t *)(v81 - 0x7290);
												if (*(int32_t *)v101 < (int32_t) * (char *)v100) {
													// 0xb15b8
													function_afa48(g31, g33, g32, g35, 0, g36, 8);
													// branch -> 0xb15d8
												}
											}
											// 0xb15d8
											v82 = g21;
											v90 = 0x1000000 * v82;
											v95 = v90 / 0x1000000;
											if ((v90 || 0xffffff) >= 0x1ffffff) {
												// 0xb15e0
												v91 = v95 - 1;
												g27 = v91;
												v96 = *(int32_t *)(g23 - 0x7690) + 368 * v91;
												g31 = v96;
												if (*(int32_t *)(v96 + 52) != 0) {
													// 0xb1600
													if (v82 <= 127) {
														// 0xb1608
														g34 = *(int32_t *)(v96 + 24);
														v83 = function_c9948();
														g29 = v83;
														v84 = g31;
														if (v83 == 0) {
															// 0xb1618
															function_c9acc(*(int32_t *)(v84 + 24));
															// branch -> 0xb16c4
														} else {
															// 0xb1624
															v102 = *(int32_t *)(v84 + 32);
															g11 = v102;
															if (v102 >= 1) {
																// 0xb1630
																if (function_4d794(v83) > 50) {
																	// 0xb1630
																	// branch -> 0xb1654
																} else {
																	// 0xb1640
																	v92 = function_4d794(g29);
																	v85 = g31;
																	v103 = *(int32_t *)(v85 + 32);
																	g40 = v103;
																	if (v103 <= v92) {
																		// 0xb1660
																		v86 = g27;
																		v97 = g32 - *(int32_t *)(v85 + 40);
																		g27 = v97;
																		v88 = v97;
																		v89 = v85;
																		if (v86 == (int32_t) * (char *)*(int32_t *)(g23 - 0x7748)) {
																			// 0xb167c
																			g37 = v97;
																			g41 = *(int32_t *)(v85 + 36);
																			v87 = g35;
																			g38 = v87;
																			g42 = g36;
																			g13 = 8;
																			CelDrawHdrClrHL(181, v97, v87, *(int32_t *)(v85 + 24), v103);
																			v88 = g27;
																			v89 = g31;
																			// branch -> 0xb169c
																		}
																		// 0xb169c
																		v104 = *(int32_t *)(v89 + 32);
																		v105 = *(int32_t *)(v89 + 36);
																		function_4e998(v88, g35, *(int32_t *)(v89 + 24), v104, v105, g36, 8);
																		function_c9acc(*(int32_t *)(g31 + 24));
																		// branch -> 0xb16c4
																		// Detected a possible infinite recursion (goto support failed); quitting...
																	}
																}
																// Detected a possible infinite recursion (goto support failed); quitting...
															}
															// Detected a possible infinite recursion (goto support failed); quitting...
														}
														// Detected a possible infinite recursion (goto support failed); quitting...
													}
												}
											}
											// Detected a possible infinite recursion (goto support failed); quitting...
										}
										// 0xb1568
										if (v52 % 2 != 0) {
											// 0xb1570
											function_aeb58(g31, g33, g32, g35, g36, 8, 0);
											// branch -> 0xb1590
										}
										// 0xb1590
										if (v9 != 0) {
											// 0xb159c
											v81 = g23;
											v100 = *(int32_t *)(v81 - 0x70cc);
											v101 = *(int32_t *)(v81 - 0x7290);
											if (*(int32_t *)v101 < (int32_t) * (char *)v100) {
												// 0xb15b8
												function_afa48(g31, g33, g32, g35, 0, g36, 8);
												// branch -> 0xb15d8
											}
										}
										// 0xb15d8
										v82 = g21;
										v90 = 0x1000000 * v82;
										v95 = v90 / 0x1000000;
										if ((v90 || 0xffffff) >= 0x1ffffff) {
											// 0xb15e0
											v91 = v95 - 1;
											g27 = v91;
											v96 = *(int32_t *)(g23 - 0x7690) + 368 * v91;
											g31 = v96;
											if (*(int32_t *)(v96 + 52) != 0) {
												// 0xb1600
												if (v82 <= 127) {
													// 0xb1608
													g34 = *(int32_t *)(v96 + 24);
													v83 = function_c9948();
													g29 = v83;
													v84 = g31;
													if (v83 == 0) {
														// 0xb1618
														function_c9acc(*(int32_t *)(v84 + 24));
														// branch -> 0xb16c4
													} else {
														// 0xb1624
														v102 = *(int32_t *)(v84 + 32);
														g11 = v102;
														if (v102 >= 1) {
															// 0xb1630
															if (function_4d794(v83) > 50) {
																// 0xb1630
																// branch -> 0xb1654
															} else {
																// 0xb1640
																v92 = function_4d794(g29);
																v85 = g31;
																v103 = *(int32_t *)(v85 + 32);
																g40 = v103;
																if (v103 <= v92) {
																	// 0xb1660
																	v86 = g27;
																	v97 = g32 - *(int32_t *)(v85 + 40);
																	g27 = v97;
																	v88 = v97;
																	v89 = v85;
																	if (v86 == (int32_t) * (char *)*(int32_t *)(g23 - 0x7748)) {
																		// 0xb167c
																		g37 = v97;
																		g41 = *(int32_t *)(v85 + 36);
																		v87 = g35;
																		g38 = v87;
																		g42 = g36;
																		g13 = 8;
																		CelDrawHdrClrHL(181, v97, v87, *(int32_t *)(v85 + 24), v103);
																		v88 = g27;
																		v89 = g31;
																		// branch -> 0xb169c
																	}
																	// 0xb169c
																	v104 = *(int32_t *)(v89 + 32);
																	v105 = *(int32_t *)(v89 + 36);
																	function_4e998(v88, g35, *(int32_t *)(v89 + 24), v104, v105, g36, 8);
																	function_c9acc(*(int32_t *)(g31 + 24));
																	// branch -> 0xb16c4
																	// Detected a possible infinite recursion (goto support failed); quitting...
																}
															}
															// Detected a possible infinite recursion (goto support failed); quitting...
														}
														// Detected a possible infinite recursion (goto support failed); quitting...
													}
													// Detected a possible infinite recursion (goto support failed); quitting...
												}
											}
										}
										// Detected a possible infinite recursion (goto support failed); quitting...
									}
									// 0xb1364
									if (__asm_rlwinm_(v52, 0, 29, 29) != 0) {
										// 0xb136c
										function_af6d0(g31, g33, g32, g35, g36, 8, 1);
										// branch -> 0xb138c
									}
									// 0xb138c
									v45 = 0x1000000 * g22;
									if (v45 >= 0 && (v45 || 0xffffff) >= 0x1ffffff) {
										// 0xb1394
										v46 = v45 / 0x1000000 - 1;
										if (v46 <= 3) {
											// 0xb13a4
											v58 = g16 + 0x55ec * v46;
											v59 = g35 + *(int32_t *)(v58 + 100);
											v60 = g32 + *(int32_t *)(v58 + 96) - *(int32_t *)(v58 + 148);
											v77 = *(int32_t *)(v58 + 140);
											g13 = *(int32_t *)(v58 + 144);
											function_af440(v46, g31, g33, v60, v59, *(int32_t *)(v58 + 124), v77, g36, 8);
											if (g17 != 0) {
												// 0xb13f0
												v78 = *(int32_t *)(g30 + 152);
												if (v78 != 0) {
													// 0xb13fc
													if (v78 == 2) {
														// 0xb1404
														function_b0c10(g28 - 0x3060, g31 - 2, g33 + 1, g20, g36, g32 - 96, g35 - 16);
														// branch -> 0xb1424
													}
													// 0xb1424
													function_b0c10(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
													// branch -> 0xb1444
												}
											}
										}
									}
									// 0xb1444
									if (v15 >= 1) {
										// 0xb1450
										if (__asm_rlwinm_(v52, 0, 25, 25) == 0) {
											// 0xb1458
											v79 = *(int32_t *)(g23 - 0x77ac);
											if (*(int32_t *)(g16 + 0x55ec * *(int32_t *)v79 + 460) != 0) {
												// 0xb1474
												*(int32_t *)g25 = v16 - 1;
												v93 = *(int32_t *)g25;
												if (v93 <= 199) {
													// 0xb148c
													v94 = *(int32_t *)(g23 - 0x7754) + 232 * v93;
													g30 = v94;
													if (*(int32_t *)(v94 + 160) % 2 == 0) {
														// 0xb14a4
														v98 = *(int32_t *)(v94 + 224);
														if (v98 != 0) {
															// 0xb14b0
															g34 = v94 + 84;
															g27 = g35 + *(int32_t *)(v94 + 60);
															g26 = g32 + *(int32_t *)(v94 + 56) - *(int32_t *)(v98 + 496);
															function_c9b28();
															if (*(int32_t *)g25 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
																// 0xb14e4
																v80 = g30;
																v99 = *(int32_t *)(*(int32_t *)(v80 + 224) + 492);
																g13 = 8;
																function_507f4(233, g26, g27, v80 + 84, *(int32_t *)(v80 + 104), v99, g36);
																// branch -> 0xb150c
															}
															// 0xb150c
															function_c9b70((int32_t *)(g30 + 84));
															function_aefc4(g31, g33, g26, g27, *(int32_t *)g25, g36, 8);
															if (g17 != 0) {
																// 0xb153c
																if (*(int32_t *)(g30 + 108) == 0) {
																	// 0xb1548
																	function_b0c10(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
																	// branch -> 0xb1568
																}
															}
														}
													}
												}
											}
										} else {
											// 0xb1474
											*(int32_t *)g25 = v16 - 1;
											v93 = *(int32_t *)g25;
											if (v93 <= 199) {
												// 0xb148c
												v94 = *(int32_t *)(g23 - 0x7754) + 232 * v93;
												g30 = v94;
												if (*(int32_t *)(v94 + 160) % 2 == 0) {
													// 0xb14a4
													v98 = *(int32_t *)(v94 + 224);
													if (v98 != 0) {
														// 0xb14b0
														g34 = v94 + 84;
														g27 = g35 + *(int32_t *)(v94 + 60);
														g26 = g32 + *(int32_t *)(v94 + 56) - *(int32_t *)(v98 + 496);
														function_c9b28();
														if (*(int32_t *)g25 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
															// 0xb14e4
															v80 = g30;
															v99 = *(int32_t *)(*(int32_t *)(v80 + 224) + 492);
															g13 = 8;
															function_507f4(233, g26, g27, v80 + 84, *(int32_t *)(v80 + 104), v99, g36);
															// branch -> 0xb150c
														}
														// 0xb150c
														function_c9b70((int32_t *)(g30 + 84));
														function_aefc4(g31, g33, g26, g27, *(int32_t *)g25, g36, 8);
														if (g17 != 0) {
															// 0xb153c
															if (*(int32_t *)(g30 + 108) == 0) {
																// 0xb1548
																function_b0c10(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
																// branch -> 0xb1568
															}
														}
													}
												}
											}
										}
										// 0xb1568
										if (v52 % 2 != 0) {
											// 0xb1570
											function_aeb58(g31, g33, g32, g35, g36, 8, 0);
											// branch -> 0xb1590
										}
										// 0xb1590
										if (v9 != 0) {
											// 0xb159c
											v81 = g23;
											v100 = *(int32_t *)(v81 - 0x70cc);
											v101 = *(int32_t *)(v81 - 0x7290);
											if (*(int32_t *)v101 < (int32_t) * (char *)v100) {
												// 0xb15b8
												function_afa48(g31, g33, g32, g35, 0, g36, 8);
												// branch -> 0xb15d8
											}
										}
										// 0xb15d8
										v82 = g21;
										v90 = 0x1000000 * v82;
										v95 = v90 / 0x1000000;
										if ((v90 || 0xffffff) >= 0x1ffffff) {
											// 0xb15e0
											v91 = v95 - 1;
											g27 = v91;
											v96 = *(int32_t *)(g23 - 0x7690) + 368 * v91;
											g31 = v96;
											if (*(int32_t *)(v96 + 52) != 0) {
												// 0xb1600
												if (v82 <= 127) {
													// 0xb1608
													g34 = *(int32_t *)(v96 + 24);
													v83 = function_c9948();
													g29 = v83;
													v84 = g31;
													if (v83 == 0) {
														// 0xb1618
														function_c9acc(*(int32_t *)(v84 + 24));
														// branch -> 0xb16c4
													} else {
														// 0xb1624
														v102 = *(int32_t *)(v84 + 32);
														g11 = v102;
														if (v102 >= 1) {
															// 0xb1630
															if (function_4d794(v83) > 50) {
																// 0xb1630
																// branch -> 0xb1654
															} else {
																// 0xb1640
																v92 = function_4d794(g29);
																v85 = g31;
																v103 = *(int32_t *)(v85 + 32);
																g40 = v103;
																if (v103 <= v92) {
																	// 0xb1660
																	v86 = g27;
																	v97 = g32 - *(int32_t *)(v85 + 40);
																	g27 = v97;
																	v88 = v97;
																	v89 = v85;
																	if (v86 == (int32_t) * (char *)*(int32_t *)(g23 - 0x7748)) {
																		// 0xb167c
																		g37 = v97;
																		g41 = *(int32_t *)(v85 + 36);
																		v87 = g35;
																		g38 = v87;
																		g42 = g36;
																		g13 = 8;
																		CelDrawHdrClrHL(181, v97, v87, *(int32_t *)(v85 + 24), v103);
																		v88 = g27;
																		v89 = g31;
																		// branch -> 0xb169c
																	}
																	// 0xb169c
																	v104 = *(int32_t *)(v89 + 32);
																	v105 = *(int32_t *)(v89 + 36);
																	function_4e998(v88, g35, *(int32_t *)(v89 + 24), v104, v105, g36, 8);
																	function_c9acc(*(int32_t *)(g31 + 24));
																	// branch -> 0xb16c4
																	// Detected a possible infinite recursion (goto support failed); quitting...
																}
															}
															// Detected a possible infinite recursion (goto support failed); quitting...
														}
														// Detected a possible infinite recursion (goto support failed); quitting...
													}
													// Detected a possible infinite recursion (goto support failed); quitting...
												}
											}
										}
										// Detected a possible infinite recursion (goto support failed); quitting...
									}
									// 0xb1568
									if (v52 % 2 != 0) {
										// 0xb1570
										function_aeb58(g31, g33, g32, g35, g36, 8, 0);
										// branch -> 0xb1590
									}
									// 0xb1590
									if (v9 != 0) {
										// 0xb159c
										v81 = g23;
										v100 = *(int32_t *)(v81 - 0x70cc);
										v101 = *(int32_t *)(v81 - 0x7290);
										if (*(int32_t *)v101 < (int32_t) * (char *)v100) {
											// 0xb15b8
											function_afa48(g31, g33, g32, g35, 0, g36, 8);
											// branch -> 0xb15d8
										}
									}
									// 0xb15d8
									v82 = g21;
									v90 = 0x1000000 * v82;
									v95 = v90 / 0x1000000;
									if ((v90 || 0xffffff) >= 0x1ffffff) {
										// 0xb15e0
										v91 = v95 - 1;
										g27 = v91;
										v96 = *(int32_t *)(g23 - 0x7690) + 368 * v91;
										g31 = v96;
										if (*(int32_t *)(v96 + 52) != 0) {
											// 0xb1600
											if (v82 <= 127) {
												// 0xb1608
												g34 = *(int32_t *)(v96 + 24);
												v83 = function_c9948();
												g29 = v83;
												v84 = g31;
												if (v83 == 0) {
													// 0xb1618
													function_c9acc(*(int32_t *)(v84 + 24));
													// branch -> 0xb16c4
												} else {
													// 0xb1624
													v102 = *(int32_t *)(v84 + 32);
													g11 = v102;
													if (v102 >= 1) {
														// 0xb1630
														if (function_4d794(v83) > 50) {
															// 0xb1630
															// branch -> 0xb1654
														} else {
															// 0xb1640
															v92 = function_4d794(g29);
															v85 = g31;
															v103 = *(int32_t *)(v85 + 32);
															g40 = v103;
															if (v103 <= v92) {
																// 0xb1660
																v86 = g27;
																v97 = g32 - *(int32_t *)(v85 + 40);
																g27 = v97;
																v88 = v97;
																v89 = v85;
																if (v86 == (int32_t) * (char *)*(int32_t *)(g23 - 0x7748)) {
																	// 0xb167c
																	g37 = v97;
																	g41 = *(int32_t *)(v85 + 36);
																	v87 = g35;
																	g38 = v87;
																	g42 = g36;
																	g13 = 8;
																	CelDrawHdrClrHL(181, v97, v87, *(int32_t *)(v85 + 24), v103);
																	v88 = g27;
																	v89 = g31;
																	// branch -> 0xb169c
																}
																// 0xb169c
																v104 = *(int32_t *)(v89 + 32);
																v105 = *(int32_t *)(v89 + 36);
																function_4e998(v88, g35, *(int32_t *)(v89 + 24), v104, v105, g36, 8);
																function_c9acc(*(int32_t *)(g31 + 24));
																// branch -> 0xb16c4
																// Detected a possible infinite recursion (goto support failed); quitting...
															}
														}
														// Detected a possible infinite recursion (goto support failed); quitting...
													}
													// Detected a possible infinite recursion (goto support failed); quitting...
												}
												// Detected a possible infinite recursion (goto support failed); quitting...
											}
										}
									}
									// Detected a possible infinite recursion (goto support failed); quitting...
								}
								// 0xb1108
								function_c9acc(*(int32_t *)(v32 + 24));
								// branch -> 0xb1178
							}
							// 0xb1178
							v52 = v12;
							g29 = v52;
							if (__asm_rlwinm_(v52, 0, 26, 26) != 0) {
								// 0xb1184
								v44 = -1 - (int32_t)v17;
								if (v44 <= 3) {
									// 0xb119c
									v53 = g16 + 0x55ec * v44;
									v54 = g35 + *(int32_t *)(v53 + 100);
									v55 = g32 + *(int32_t *)(v53 + 96) - *(int32_t *)(v53 + 148);
									v71 = *(int32_t *)(v53 + 124);
									v72 = *(int32_t *)(v53 + 140);
									g13 = *(int32_t *)(v53 + 144);
									function_af440(v44, g31, g33 - 1, v55, v54, v71, v72, g36, 8);
									if (g17 != 0) {
										// 0xb11e8
										v73 = *(int32_t *)(g30 + 152);
										if (v73 != 0) {
											// 0xb11f4
											if (v73 == 2) {
												// 0xb11fc
												function_b0c10(g28 - 0x3060, g31 - 2, g33 + 1, g20, g36, g32 - 96, g35 - 16);
												// branch -> 0xb121c
											}
											// 0xb121c
											function_b0c10(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
											// branch -> 0xb123c
										}
									}
								}
							}
							// 0xb123c
							if (__asm_rlwinm_(v52, 0, 27, 27) != 0) {
								// 0xb1244
								if (__asm_rlwinm_(v52, 0, 25, 25) == 0) {
									// 0xb124c
									v74 = *(int32_t *)(g23 - 0x77ac);
									if (*(int32_t *)(g16 + 0x55ec * *(int32_t *)v74 + 460) != 0) {
										// 0xb1268
										v36 = g18;
										if (v36 <= 0xffffffff) {
											// 0xb1270
											*(int32_t *)g25 = -1 - v36;
											v56 = *(int32_t *)g25;
											if (v56 <= 199) {
												// 0xb1288
												v57 = *(int32_t *)(g23 - 0x7754) + 232 * v56;
												g30 = v57;
												if (*(int32_t *)(v57 + 160) % 2 == 0) {
													// 0xb12a0
													v75 = *(int32_t *)(v57 + 224);
													if (v75 != 0) {
														// 0xb12ac
														g34 = v57 + 84;
														g27 = g35 + *(int32_t *)(v57 + 60);
														g26 = g32 + *(int32_t *)(v57 + 56) - *(int32_t *)(v75 + 496);
														function_c9b28();
														if (*(int32_t *)g25 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
															// 0xb12e0
															v37 = g30;
															v76 = *(int32_t *)(*(int32_t *)(v37 + 224) + 492);
															g13 = 8;
															function_507f4(233, g26, g27, v37 + 84, *(int32_t *)(v37 + 104), v76, g36);
															// branch -> 0xb1308
														}
														// 0xb1308
														function_c9b70((int32_t *)(g30 + 84));
														function_aefc4(g31, g33, g26, g27, *(int32_t *)g25, g36, 8);
														if (g17 != 0) {
															// 0xb1338
															if (*(int32_t *)(g30 + 108) == 0) {
																// 0xb1344
																function_b0c10(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
																// branch -> 0xb1364
															}
														}
													}
												}
											}
										}
									}
								} else {
									// 0xb1268
									v36 = g18;
									if (v36 <= 0xffffffff) {
										// 0xb1270
										*(int32_t *)g25 = -1 - v36;
										v56 = *(int32_t *)g25;
										if (v56 <= 199) {
											// 0xb1288
											v57 = *(int32_t *)(g23 - 0x7754) + 232 * v56;
											g30 = v57;
											if (*(int32_t *)(v57 + 160) % 2 == 0) {
												// 0xb12a0
												v75 = *(int32_t *)(v57 + 224);
												if (v75 != 0) {
													// 0xb12ac
													g34 = v57 + 84;
													g27 = g35 + *(int32_t *)(v57 + 60);
													g26 = g32 + *(int32_t *)(v57 + 56) - *(int32_t *)(v75 + 496);
													function_c9b28();
													if (*(int32_t *)g25 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
														// 0xb12e0
														v37 = g30;
														v76 = *(int32_t *)(*(int32_t *)(v37 + 224) + 492);
														g13 = 8;
														function_507f4(233, g26, g27, v37 + 84, *(int32_t *)(v37 + 104), v76, g36);
														// branch -> 0xb1308
													}
													// 0xb1308
													function_c9b70((int32_t *)(g30 + 84));
													function_aefc4(g31, g33, g26, g27, *(int32_t *)g25, g36, 8);
													if (g17 != 0) {
														// 0xb1338
														if (*(int32_t *)(g30 + 108) == 0) {
															// 0xb1344
															function_b0c10(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
															// branch -> 0xb1364
														}
													}
												}
											}
										}
									}
								}
								// 0xb1364
								if (__asm_rlwinm_(v52, 0, 29, 29) != 0) {
									// 0xb136c
									function_af6d0(g31, g33, g32, g35, g36, 8, 1);
									// branch -> 0xb138c
								}
								// 0xb138c
								v45 = 0x1000000 * g22;
								if (v45 >= 0 && (v45 || 0xffffff) >= 0x1ffffff) {
									// 0xb1394
									v46 = v45 / 0x1000000 - 1;
									if (v46 <= 3) {
										// 0xb13a4
										v58 = g16 + 0x55ec * v46;
										v59 = g35 + *(int32_t *)(v58 + 100);
										v60 = g32 + *(int32_t *)(v58 + 96) - *(int32_t *)(v58 + 148);
										v77 = *(int32_t *)(v58 + 140);
										g13 = *(int32_t *)(v58 + 144);
										function_af440(v46, g31, g33, v60, v59, *(int32_t *)(v58 + 124), v77, g36, 8);
										if (g17 != 0) {
											// 0xb13f0
											v78 = *(int32_t *)(g30 + 152);
											if (v78 != 0) {
												// 0xb13fc
												if (v78 == 2) {
													// 0xb1404
													function_b0c10(g28 - 0x3060, g31 - 2, g33 + 1, g20, g36, g32 - 96, g35 - 16);
													// branch -> 0xb1424
												}
												// 0xb1424
												function_b0c10(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
												// branch -> 0xb1444
											}
										}
									}
								}
								// 0xb1444
								if (v15 >= 1) {
									// 0xb1450
									if (__asm_rlwinm_(v52, 0, 25, 25) == 0) {
										// 0xb1458
										v79 = *(int32_t *)(g23 - 0x77ac);
										if (*(int32_t *)(g16 + 0x55ec * *(int32_t *)v79 + 460) != 0) {
											// 0xb1474
											*(int32_t *)g25 = v16 - 1;
											v93 = *(int32_t *)g25;
											if (v93 <= 199) {
												// 0xb148c
												v94 = *(int32_t *)(g23 - 0x7754) + 232 * v93;
												g30 = v94;
												if (*(int32_t *)(v94 + 160) % 2 == 0) {
													// 0xb14a4
													v98 = *(int32_t *)(v94 + 224);
													if (v98 != 0) {
														// 0xb14b0
														g34 = v94 + 84;
														g27 = g35 + *(int32_t *)(v94 + 60);
														g26 = g32 + *(int32_t *)(v94 + 56) - *(int32_t *)(v98 + 496);
														function_c9b28();
														if (*(int32_t *)g25 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
															// 0xb14e4
															v80 = g30;
															v99 = *(int32_t *)(*(int32_t *)(v80 + 224) + 492);
															g13 = 8;
															function_507f4(233, g26, g27, v80 + 84, *(int32_t *)(v80 + 104), v99, g36);
															// branch -> 0xb150c
														}
														// 0xb150c
														function_c9b70((int32_t *)(g30 + 84));
														function_aefc4(g31, g33, g26, g27, *(int32_t *)g25, g36, 8);
														if (g17 != 0) {
															// 0xb153c
															if (*(int32_t *)(g30 + 108) == 0) {
																// 0xb1548
																function_b0c10(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
																// branch -> 0xb1568
															}
														}
													}
												}
											}
										}
									}
									// 0xb1568
									if (v52 % 2 != 0) {
										// 0xb1570
										function_aeb58(g31, g33, g32, g35, g36, 8, 0);
										// branch -> 0xb1590
									}
									// 0xb1590
									if (v9 != 0) {
										// 0xb159c
										v81 = g23;
										v100 = *(int32_t *)(v81 - 0x70cc);
										v101 = *(int32_t *)(v81 - 0x7290);
										if (*(int32_t *)v101 < (int32_t) * (char *)v100) {
											// 0xb15b8
											function_afa48(g31, g33, g32, g35, 0, g36, 8);
											// branch -> 0xb15d8
										}
									}
									// 0xb15d8
									v82 = g21;
									v90 = 0x1000000 * v82;
									if ((v90 || 0xffffff) >= 0x1ffffff) {
										// 0xb15e0
										v91 = v90 / 0x1000000 - 1;
										g27 = v91;
										v96 = *(int32_t *)(g23 - 0x7690) + 368 * v91;
										g31 = v96;
										if (*(int32_t *)(v96 + 52) != 0) {
											// 0xb1600
											if (v82 <= 127) {
												// 0xb1608
												g34 = *(int32_t *)(v96 + 24);
												v83 = function_c9948();
												g29 = v83;
												v84 = g31;
												if (v83 == 0) {
													// 0xb1618
													function_c9acc(*(int32_t *)(v84 + 24));
													// branch -> 0xb16c4
												} else {
													// 0xb1624
													v102 = *(int32_t *)(v84 + 32);
													g11 = v102;
													if (v102 >= 1) {
														// 0xb1630
														if (function_4d794(v83) > 50) {
															// 0xb1630
															// branch -> 0xb1654
														} else {
															// 0xb1640
															v92 = function_4d794(g29);
															v85 = g31;
															v103 = *(int32_t *)(v85 + 32);
															g40 = v103;
															if (v103 <= v92) {
																// 0xb1660
																v86 = g27;
																v97 = g32 - *(int32_t *)(v85 + 40);
																g27 = v97;
																v88 = v97;
																v89 = v85;
																if (v86 == (int32_t) * (char *)*(int32_t *)(g23 - 0x7748)) {
																	// 0xb167c
																	g37 = v97;
																	g41 = *(int32_t *)(v85 + 36);
																	v87 = g35;
																	g38 = v87;
																	g42 = g36;
																	g13 = 8;
																	CelDrawHdrClrHL(181, v97, v87, *(int32_t *)(v85 + 24), v103);
																	v88 = g27;
																	v89 = g31;
																	// branch -> 0xb169c
																}
																// 0xb169c
																v104 = *(int32_t *)(v89 + 32);
																v105 = *(int32_t *)(v89 + 36);
																function_4e998(v88, g35, *(int32_t *)(v89 + 24), v104, v105, g36, 8);
																function_c9acc(*(int32_t *)(g31 + 24));
																// branch -> 0xb16c4
																// Detected a possible infinite recursion (goto support failed); quitting...
															}
														}
														// Detected a possible infinite recursion (goto support failed); quitting...
													}
													// Detected a possible infinite recursion (goto support failed); quitting...
												}
												// Detected a possible infinite recursion (goto support failed); quitting...
											}
										}
									}
									// Detected a possible infinite recursion (goto support failed); quitting...
								}
								// Detected a possible infinite recursion (goto support failed); quitting...
							}
							// 0xb1364
							if (__asm_rlwinm_(v52, 0, 29, 29) != 0) {
								// 0xb136c
								function_af6d0(g31, g33, g32, g35, g36, 8, 1);
								// branch -> 0xb138c
							}
							// 0xb138c
							v45 = 0x1000000 * g22;
							if (v45 >= 0 && (v45 || 0xffffff) >= 0x1ffffff) {
								// 0xb1394
								v46 = v45 / 0x1000000 - 1;
								if (v46 <= 3) {
									// 0xb13a4
									v58 = g16 + 0x55ec * v46;
									v59 = g35 + *(int32_t *)(v58 + 100);
									v60 = g32 + *(int32_t *)(v58 + 96) - *(int32_t *)(v58 + 148);
									v77 = *(int32_t *)(v58 + 140);
									g13 = *(int32_t *)(v58 + 144);
									function_af440(v46, g31, g33, v60, v59, *(int32_t *)(v58 + 124), v77, g36, 8);
									if (g17 != 0) {
										// 0xb13f0
										v78 = *(int32_t *)(g30 + 152);
										if (v78 != 0) {
											// 0xb13fc
											if (v78 == 2) {
												// 0xb1404
												function_b0c10(g28 - 0x3060, g31 - 2, g33 + 1, g20, g36, g32 - 96, g35 - 16);
												// branch -> 0xb1424
											}
											// 0xb1424
											function_b0c10(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
											// branch -> 0xb1444
										}
									}
								}
							}
							// 0xb1444
							if (v15 >= 1) {
								// 0xb1450
								if (__asm_rlwinm_(v52, 0, 25, 25) == 0) {
									// 0xb1458
									v79 = *(int32_t *)(g23 - 0x77ac);
									if (*(int32_t *)(g16 + 0x55ec * *(int32_t *)v79 + 460) != 0) {
										// Detected a possible infinite recursion (goto support failed); quitting...
									}
								}
								// Detected a possible infinite recursion (goto support failed); quitting...
							}
							// Detected a possible infinite recursion (goto support failed); quitting...
						}
					}
				}
				// 0xb1178
				v52 = v12;
				g29 = v52;
				if (__asm_rlwinm_(v52, 0, 26, 26) != 0) {
					// 0xb1184
					v44 = -1 - (int32_t)v17;
					if (v44 <= 3) {
						// 0xb119c
						v53 = g16 + 0x55ec * v44;
						v54 = g35 + *(int32_t *)(v53 + 100);
						v55 = g32 + *(int32_t *)(v53 + 96) - *(int32_t *)(v53 + 148);
						v71 = *(int32_t *)(v53 + 124);
						v72 = *(int32_t *)(v53 + 140);
						g13 = *(int32_t *)(v53 + 144);
						function_af440(v44, g31, g33 - 1, v55, v54, v71, v72, g36, 8);
						if (g17 != 0) {
							// 0xb11e8
							v73 = *(int32_t *)(g30 + 152);
							if (v73 != 0) {
								// 0xb11f4
								if (v73 == 2) {
									// 0xb11fc
									function_b0c10(g28 - 0x3060, g31 - 2, g33 + 1, g20, g36, g32 - 96, g35 - 16);
									// branch -> 0xb121c
								}
								// 0xb121c
								function_b0c10(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
								// branch -> 0xb123c
							}
						}
					}
				}
				// 0xb123c
				if (__asm_rlwinm_(v52, 0, 27, 27) != 0) {
					// 0xb1244
					if (__asm_rlwinm_(v52, 0, 25, 25) == 0) {
						// 0xb124c
						v74 = *(int32_t *)(g23 - 0x77ac);
						if (*(int32_t *)(g16 + 0x55ec * *(int32_t *)v74 + 460) != 0) {
							// 0xb1268
							v36 = g18;
							if (v36 <= 0xffffffff) {
								// 0xb1270
								*(int32_t *)g25 = -1 - v36;
								v56 = *(int32_t *)g25;
								if (v56 <= 199) {
									// 0xb1288
									v57 = *(int32_t *)(g23 - 0x7754) + 232 * v56;
									g30 = v57;
									if (*(int32_t *)(v57 + 160) % 2 == 0) {
										// 0xb12a0
										v75 = *(int32_t *)(v57 + 224);
										if (v75 != 0) {
											// 0xb12ac
											g34 = v57 + 84;
											g27 = g35 + *(int32_t *)(v57 + 60);
											g26 = g32 + *(int32_t *)(v57 + 56) - *(int32_t *)(v75 + 496);
											function_c9b28();
											if (*(int32_t *)g25 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
												// 0xb12e0
												v37 = g30;
												v76 = *(int32_t *)(*(int32_t *)(v37 + 224) + 492);
												g13 = 8;
												function_507f4(233, g26, g27, v37 + 84, *(int32_t *)(v37 + 104), v76, g36);
												// branch -> 0xb1308
											}
											// 0xb1308
											function_c9b70((int32_t *)(g30 + 84));
											function_aefc4(g31, g33, g26, g27, *(int32_t *)g25, g36, 8);
											if (g17 != 0) {
												// 0xb1338
												if (*(int32_t *)(g30 + 108) == 0) {
													// 0xb1344
													function_b0c10(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
													// branch -> 0xb1364
												}
											}
										}
									}
								}
							}
						}
					} else {
						// 0xb1268
						v36 = g18;
						if (v36 <= 0xffffffff) {
							// 0xb1270
							*(int32_t *)g25 = -1 - v36;
							v56 = *(int32_t *)g25;
							if (v56 <= 199) {
								// 0xb1288
								v57 = *(int32_t *)(g23 - 0x7754) + 232 * v56;
								g30 = v57;
								if (*(int32_t *)(v57 + 160) % 2 == 0) {
									// 0xb12a0
									v75 = *(int32_t *)(v57 + 224);
									if (v75 != 0) {
										// 0xb12ac
										g34 = v57 + 84;
										g27 = g35 + *(int32_t *)(v57 + 60);
										g26 = g32 + *(int32_t *)(v57 + 56) - *(int32_t *)(v75 + 496);
										function_c9b28();
										if (*(int32_t *)g25 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
											// 0xb12e0
											v37 = g30;
											v76 = *(int32_t *)(*(int32_t *)(v37 + 224) + 492);
											g13 = 8;
											function_507f4(233, g26, g27, v37 + 84, *(int32_t *)(v37 + 104), v76, g36);
											// branch -> 0xb1308
										}
										// 0xb1308
										function_c9b70((int32_t *)(g30 + 84));
										function_aefc4(g31, g33, g26, g27, *(int32_t *)g25, g36, 8);
										if (g17 != 0) {
											// 0xb1338
											if (*(int32_t *)(g30 + 108) == 0) {
												// 0xb1344
												function_b0c10(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
												// branch -> 0xb1364
											}
										}
									}
								}
							}
						}
					}
					// 0xb1364
					if (__asm_rlwinm_(v52, 0, 29, 29) != 0) {
						// 0xb136c
						function_af6d0(g31, g33, g32, g35, g36, 8, 1);
						// branch -> 0xb138c
					}
					// 0xb138c
					v45 = 0x1000000 * g22;
					if (v45 >= 0 && (v45 || 0xffffff) >= 0x1ffffff) {
						// 0xb1394
						v46 = v45 / 0x1000000 - 1;
						if (v46 <= 3) {
							// 0xb13a4
							v58 = g16 + 0x55ec * v46;
							v59 = g35 + *(int32_t *)(v58 + 100);
							v60 = g32 + *(int32_t *)(v58 + 96) - *(int32_t *)(v58 + 148);
							v77 = *(int32_t *)(v58 + 140);
							g13 = *(int32_t *)(v58 + 144);
							function_af440(v46, g31, g33, v60, v59, *(int32_t *)(v58 + 124), v77, g36, 8);
							if (g17 != 0) {
								// 0xb13f0
								v78 = *(int32_t *)(g30 + 152);
								if (v78 != 0) {
									// 0xb13fc
									if (v78 == 2) {
										// 0xb1404
										function_b0c10(g28 - 0x3060, g31 - 2, g33 + 1, g20, g36, g32 - 96, g35 - 16);
										// branch -> 0xb1424
									}
									// 0xb1424
									function_b0c10(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
									// branch -> 0xb1444
								}
							}
						}
					}
					// 0xb1444
					if (v15 >= 1) {
						// 0xb1450
						if (__asm_rlwinm_(v52, 0, 25, 25) == 0) {
							// 0xb1458
							v79 = *(int32_t *)(g23 - 0x77ac);
							if (*(int32_t *)(g16 + 0x55ec * *(int32_t *)v79 + 460) != 0) {
								// Detected a possible infinite recursion (goto support failed); quitting...
							}
						}
						// Detected a possible infinite recursion (goto support failed); quitting...
					}
					// Detected a possible infinite recursion (goto support failed); quitting...
				}
				// 0xb1364
				if (__asm_rlwinm_(v52, 0, 29, 29) != 0) {
					// 0xb136c
					function_af6d0(g31, g33, g32, g35, g36, 8, 1);
					// branch -> 0xb138c
				}
				// 0xb138c
				v45 = 0x1000000 * g22;
				if (v45 >= 0 && (v45 || 0xffffff) >= 0x1ffffff) {
					// 0xb1394
					v46 = v45 / 0x1000000 - 1;
					if (v46 <= 3) {
						// 0xb13a4
						v58 = g16 + 0x55ec * v46;
						v59 = g35 + *(int32_t *)(v58 + 100);
						v60 = g32 + *(int32_t *)(v58 + 96) - *(int32_t *)(v58 + 148);
						v77 = *(int32_t *)(v58 + 140);
						g13 = *(int32_t *)(v58 + 144);
						function_af440(v46, g31, g33, v60, v59, *(int32_t *)(v58 + 124), v77, g36, 8);
						if (g17 != 0) {
							// 0xb13f0
							v78 = *(int32_t *)(g30 + 152);
							if (v78 != 0) {
								// 0xb13fc
								if (v78 == 2) {
									// 0xb1404
									function_b0c10(g28 - 0x3060, g31 - 2, g33 + 1, g20, g36, g32 - 96, g35 - 16);
									// branch -> 0xb1424
								}
								// 0xb1424
								function_b0c10(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
								// branch -> 0xb1444
							}
						}
					}
				}
				// 0xb1444
				if (v15 >= 1) {
					// 0xb1450
					if (__asm_rlwinm_(v52, 0, 25, 25) == 0) {
						// 0xb1458
						v79 = *(int32_t *)(g23 - 0x77ac);
						if (*(int32_t *)(g16 + 0x55ec * *(int32_t *)v79 + 460) != 0) {
							// Detected a possible infinite recursion (goto support failed); quitting...
						}
					}
					// Detected a possible infinite recursion (goto support failed); quitting...
				}
				// Detected a possible infinite recursion (goto support failed); quitting...
			}
			// 0xb1060
			if (v9 != 0) {
				// 0xb106c
				function_afa48(g31, g33, g32, g35, 1, g36, 8);
				// branch -> 0xb108c
			}
		}
		// 0xb108c
		v28 = g21;
		v41 = 0x1000000 * v28;
		v49 = v41 / 0x1000000;
		if ((v41 || 0xffffff) >= 0x1ffffff) {
			// 0xb1094
			v42 = v49 - 1;
			g26 = v42;
			v50 = *(int32_t *)(g23 - 0x7690) + 368 * v42;
			g30 = v50;
			if (*(int32_t *)(v50 + 52) == 0) {
				// 0xb10b4
				if (v28 <= 127) {
					// 0xb10bc
					g34 = *(int32_t *)(v50 + 24);
					v29 = function_c9948();
					v18 = v29;
					v30 = g30;
					if (v29 == 0) {
						// 0xb10cc
						function_c9acc(*(int32_t *)(v30 + 24));
						// branch -> 0xb1178
					} else {
						// 0xb10d8
						v67 = *(int32_t *)(v30 + 32);
						g11 = v67;
						v32 = v30;
						if (v67 >= 1) {
							// 0xb10e4
							if (function_4d794(v29) > 50) {
								// 0xb10e4
								v32 = g30;
								// branch -> 0xb1108
							} else {
								// 0xb10f4
								v43 = function_4d794(v18);
								v31 = g30;
								v68 = *(int32_t *)(v31 + 32);
								g40 = v68;
								if (v68 <= v43) {
									// 0xb1114
									v51 = g32 - *(int32_t *)(v31 + 40);
									g27 = v51;
									v34 = v51;
									v35 = v31;
									if (g26 == (int32_t) * (char *)*(int32_t *)(g23 - 0x7748)) {
										// 0xb1130
										g37 = v51;
										g41 = *(int32_t *)(v31 + 36);
										v33 = g35;
										g38 = v33;
										g42 = g36;
										g13 = 8;
										CelDrawHdrClrHL(181, v51, v33, *(int32_t *)(v31 + 24), v68);
										v34 = g27;
										v35 = g30;
										// branch -> 0xb1150
									}
									// 0xb1150
									v69 = *(int32_t *)(v35 + 32);
									v70 = *(int32_t *)(v35 + 36);
									function_4e998(v34, g35, *(int32_t *)(v35 + 24), v69, v70, g36, 8);
									function_c9acc(*(int32_t *)(g30 + 24));
									// branch -> 0xb1178
									// 0xb1178
									v52 = v12;
									g29 = v52;
									if (__asm_rlwinm_(v52, 0, 26, 26) != 0) {
										// 0xb1184
										v44 = -1 - (int32_t)v17;
										if (v44 <= 3) {
											// 0xb119c
											v53 = g16 + 0x55ec * v44;
											v54 = g35 + *(int32_t *)(v53 + 100);
											v55 = g32 + *(int32_t *)(v53 + 96) - *(int32_t *)(v53 + 148);
											v71 = *(int32_t *)(v53 + 124);
											v72 = *(int32_t *)(v53 + 140);
											g13 = *(int32_t *)(v53 + 144);
											function_af440(v44, g31, g33 - 1, v55, v54, v71, v72, g36, 8);
											if (g17 != 0) {
												// 0xb11e8
												v73 = *(int32_t *)(g30 + 152);
												if (v73 != 0) {
													// 0xb11f4
													if (v73 == 2) {
														// 0xb11fc
														function_b0c10(g28 - 0x3060, g31 - 2, g33 + 1, g20, g36, g32 - 96, g35 - 16);
														// branch -> 0xb121c
													}
													// 0xb121c
													function_b0c10(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
													// branch -> 0xb123c
												}
											}
										}
									}
									// 0xb123c
									if (__asm_rlwinm_(v52, 0, 27, 27) != 0) {
										// 0xb1244
										if (__asm_rlwinm_(v52, 0, 25, 25) == 0) {
											// 0xb124c
											v74 = *(int32_t *)(g23 - 0x77ac);
											if (*(int32_t *)(g16 + 0x55ec * *(int32_t *)v74 + 460) != 0) {
												// 0xb1268
												v36 = g18;
												if (v36 <= 0xffffffff) {
													// 0xb1270
													*(int32_t *)g25 = -1 - v36;
													v56 = *(int32_t *)g25;
													if (v56 <= 199) {
														// 0xb1288
														v57 = *(int32_t *)(g23 - 0x7754) + 232 * v56;
														g30 = v57;
														if (*(int32_t *)(v57 + 160) % 2 == 0) {
															// 0xb12a0
															v75 = *(int32_t *)(v57 + 224);
															if (v75 != 0) {
																// 0xb12ac
																g34 = v57 + 84;
																g27 = g35 + *(int32_t *)(v57 + 60);
																g26 = g32 + *(int32_t *)(v57 + 56) - *(int32_t *)(v75 + 496);
																function_c9b28();
																if (*(int32_t *)g25 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
																	// 0xb12e0
																	v37 = g30;
																	v76 = *(int32_t *)(*(int32_t *)(v37 + 224) + 492);
																	g13 = 8;
																	function_507f4(233, g26, g27, v37 + 84, *(int32_t *)(v37 + 104), v76, g36);
																	// branch -> 0xb1308
																}
																// 0xb1308
																function_c9b70((int32_t *)(g30 + 84));
																function_aefc4(g31, g33, g26, g27, *(int32_t *)g25, g36, 8);
																if (g17 != 0) {
																	// 0xb1338
																	if (*(int32_t *)(g30 + 108) == 0) {
																		// 0xb1344
																		function_b0c10(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
																		// branch -> 0xb1364
																	}
																}
															}
														}
													}
												}
											}
										} else {
											// 0xb1268
											v36 = g18;
											if (v36 <= 0xffffffff) {
												// 0xb1270
												*(int32_t *)g25 = -1 - v36;
												v56 = *(int32_t *)g25;
												if (v56 <= 199) {
													// 0xb1288
													v57 = *(int32_t *)(g23 - 0x7754) + 232 * v56;
													g30 = v57;
													if (*(int32_t *)(v57 + 160) % 2 == 0) {
														// 0xb12a0
														v75 = *(int32_t *)(v57 + 224);
														if (v75 != 0) {
															// 0xb12ac
															g34 = v57 + 84;
															g27 = g35 + *(int32_t *)(v57 + 60);
															g26 = g32 + *(int32_t *)(v57 + 56) - *(int32_t *)(v75 + 496);
															function_c9b28();
															if (*(int32_t *)g25 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
																// 0xb12e0
																v37 = g30;
																v76 = *(int32_t *)(*(int32_t *)(v37 + 224) + 492);
																g13 = 8;
																function_507f4(233, g26, g27, v37 + 84, *(int32_t *)(v37 + 104), v76, g36);
																// branch -> 0xb1308
															}
															// 0xb1308
															function_c9b70((int32_t *)(g30 + 84));
															function_aefc4(g31, g33, g26, g27, *(int32_t *)g25, g36, 8);
															if (g17 != 0) {
																// 0xb1338
																if (*(int32_t *)(g30 + 108) == 0) {
																	// 0xb1344
																	function_b0c10(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
																	// branch -> 0xb1364
																}
															}
														}
													}
												}
											}
										}
										// 0xb1364
										if (__asm_rlwinm_(v52, 0, 29, 29) != 0) {
											// 0xb136c
											function_af6d0(g31, g33, g32, g35, g36, 8, 1);
											// branch -> 0xb138c
										}
										// 0xb138c
										v45 = 0x1000000 * g22;
										if (v45 >= 0 && (v45 || 0xffffff) >= 0x1ffffff) {
											// 0xb1394
											v46 = v45 / 0x1000000 - 1;
											if (v46 <= 3) {
												// 0xb13a4
												v58 = g16 + 0x55ec * v46;
												v59 = g35 + *(int32_t *)(v58 + 100);
												v60 = g32 + *(int32_t *)(v58 + 96) - *(int32_t *)(v58 + 148);
												v77 = *(int32_t *)(v58 + 140);
												g13 = *(int32_t *)(v58 + 144);
												function_af440(v46, g31, g33, v60, v59, *(int32_t *)(v58 + 124), v77, g36, 8);
												if (g17 != 0) {
													// 0xb13f0
													v78 = *(int32_t *)(g30 + 152);
													if (v78 != 0) {
														// 0xb13fc
														if (v78 == 2) {
															// 0xb1404
															function_b0c10(g28 - 0x3060, g31 - 2, g33 + 1, g20, g36, g32 - 96, g35 - 16);
															// branch -> 0xb1424
														}
														// 0xb1424
														function_b0c10(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
														// branch -> 0xb1444
													}
												}
											}
										}
										// 0xb1444
										if (v15 >= 1) {
											// 0xb1450
											if (__asm_rlwinm_(v52, 0, 25, 25) == 0) {
												// 0xb1458
												v79 = *(int32_t *)(g23 - 0x77ac);
												if (*(int32_t *)(g16 + 0x55ec * *(int32_t *)v79 + 460) != 0) {
													// Detected a possible infinite recursion (goto support failed); quitting...
												}
											}
											// Detected a possible infinite recursion (goto support failed); quitting...
										}
										// Detected a possible infinite recursion (goto support failed); quitting...
									}
									// 0xb1364
									if (__asm_rlwinm_(v52, 0, 29, 29) != 0) {
										// 0xb136c
										function_af6d0(g31, g33, g32, g35, g36, 8, 1);
										// branch -> 0xb138c
									}
									// 0xb138c
									v45 = 0x1000000 * g22;
									if (v45 >= 0 && (v45 || 0xffffff) >= 0x1ffffff) {
										// 0xb1394
										v46 = v45 / 0x1000000 - 1;
										if (v46 <= 3) {
											// 0xb13a4
											v58 = g16 + 0x55ec * v46;
											v59 = g35 + *(int32_t *)(v58 + 100);
											v60 = g32 + *(int32_t *)(v58 + 96) - *(int32_t *)(v58 + 148);
											v77 = *(int32_t *)(v58 + 140);
											g13 = *(int32_t *)(v58 + 144);
											function_af440(v46, g31, g33, v60, v59, *(int32_t *)(v58 + 124), v77, g36, 8);
											if (g17 != 0) {
												// 0xb13f0
												v78 = *(int32_t *)(g30 + 152);
												if (v78 != 0) {
													// 0xb13fc
													if (v78 == 2) {
														// 0xb1404
														function_b0c10(g28 - 0x3060, g31 - 2, g33 + 1, g20, g36, g32 - 96, g35 - 16);
														// branch -> 0xb1424
													}
													// 0xb1424
													function_b0c10(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
													// branch -> 0xb1444
												}
											}
										}
									}
									// 0xb1444
									if (v15 >= 1) {
										// 0xb1450
										if (__asm_rlwinm_(v52, 0, 25, 25) == 0) {
											// 0xb1458
											v79 = *(int32_t *)(g23 - 0x77ac);
											if (*(int32_t *)(g16 + 0x55ec * *(int32_t *)v79 + 460) != 0) {
												// Detected a possible infinite recursion (goto support failed); quitting...
											}
										}
										// Detected a possible infinite recursion (goto support failed); quitting...
									}
									// Detected a possible infinite recursion (goto support failed); quitting...
								} else {
									v32 = v31;
								}
							}
							// 0xb1108
							function_c9acc(*(int32_t *)(v32 + 24));
							// branch -> 0xb1178
							// 0xb1178
							v52 = v12;
							g29 = v52;
							if (__asm_rlwinm_(v52, 0, 26, 26) != 0) {
								// 0xb1184
								v44 = -1 - (int32_t)v17;
								if (v44 <= 3) {
									// 0xb119c
									v53 = g16 + 0x55ec * v44;
									v54 = g35 + *(int32_t *)(v53 + 100);
									v55 = g32 + *(int32_t *)(v53 + 96) - *(int32_t *)(v53 + 148);
									v71 = *(int32_t *)(v53 + 124);
									v72 = *(int32_t *)(v53 + 140);
									g13 = *(int32_t *)(v53 + 144);
									function_af440(v44, g31, g33 - 1, v55, v54, v71, v72, g36, 8);
									if (g17 != 0) {
										// 0xb11e8
										v73 = *(int32_t *)(g30 + 152);
										if (v73 != 0) {
											// 0xb11f4
											if (v73 == 2) {
												// 0xb11fc
												function_b0c10(g28 - 0x3060, g31 - 2, g33 + 1, g20, g36, g32 - 96, g35 - 16);
												// branch -> 0xb121c
											}
											// 0xb121c
											function_b0c10(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
											// branch -> 0xb123c
										}
									}
								}
							}
							// 0xb123c
							if (__asm_rlwinm_(v52, 0, 27, 27) != 0) {
								// 0xb1244
								if (__asm_rlwinm_(v52, 0, 25, 25) == 0) {
									// 0xb124c
									v74 = *(int32_t *)(g23 - 0x77ac);
									if (*(int32_t *)(g16 + 0x55ec * *(int32_t *)v74 + 460) != 0) {
										// 0xb1268
										v36 = g18;
										if (v36 <= 0xffffffff) {
											// 0xb1270
											*(int32_t *)g25 = -1 - v36;
											v56 = *(int32_t *)g25;
											if (v56 <= 199) {
												// 0xb1288
												v57 = *(int32_t *)(g23 - 0x7754) + 232 * v56;
												g30 = v57;
												if (*(int32_t *)(v57 + 160) % 2 == 0) {
													// 0xb12a0
													v75 = *(int32_t *)(v57 + 224);
													if (v75 != 0) {
														// 0xb12ac
														g34 = v57 + 84;
														g27 = g35 + *(int32_t *)(v57 + 60);
														g26 = g32 + *(int32_t *)(v57 + 56) - *(int32_t *)(v75 + 496);
														function_c9b28();
														if (*(int32_t *)g25 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
															// 0xb12e0
															v37 = g30;
															v76 = *(int32_t *)(*(int32_t *)(v37 + 224) + 492);
															g13 = 8;
															function_507f4(233, g26, g27, v37 + 84, *(int32_t *)(v37 + 104), v76, g36);
															// branch -> 0xb1308
														}
														// 0xb1308
														function_c9b70((int32_t *)(g30 + 84));
														function_aefc4(g31, g33, g26, g27, *(int32_t *)g25, g36, 8);
														if (g17 != 0) {
															// 0xb1338
															if (*(int32_t *)(g30 + 108) == 0) {
																// 0xb1344
																function_b0c10(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
																// branch -> 0xb1364
															}
														}
													}
												}
											}
										}
									}
								} else {
									// 0xb1268
									v36 = g18;
									if (v36 <= 0xffffffff) {
										// 0xb1270
										*(int32_t *)g25 = -1 - v36;
										v56 = *(int32_t *)g25;
										if (v56 <= 199) {
											// 0xb1288
											v57 = *(int32_t *)(g23 - 0x7754) + 232 * v56;
											g30 = v57;
											if (*(int32_t *)(v57 + 160) % 2 == 0) {
												// 0xb12a0
												v75 = *(int32_t *)(v57 + 224);
												if (v75 != 0) {
													// 0xb12ac
													g34 = v57 + 84;
													g27 = g35 + *(int32_t *)(v57 + 60);
													g26 = g32 + *(int32_t *)(v57 + 56) - *(int32_t *)(v75 + 496);
													function_c9b28();
													if (*(int32_t *)g25 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
														// 0xb12e0
														v37 = g30;
														v76 = *(int32_t *)(*(int32_t *)(v37 + 224) + 492);
														g13 = 8;
														function_507f4(233, g26, g27, v37 + 84, *(int32_t *)(v37 + 104), v76, g36);
														// branch -> 0xb1308
													}
													// 0xb1308
													function_c9b70((int32_t *)(g30 + 84));
													function_aefc4(g31, g33, g26, g27, *(int32_t *)g25, g36, 8);
													if (g17 != 0) {
														// 0xb1338
														if (*(int32_t *)(g30 + 108) == 0) {
															// 0xb1344
															function_b0c10(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
															// branch -> 0xb1364
														}
													}
												}
											}
										}
									}
								}
								// 0xb1364
								if (__asm_rlwinm_(v52, 0, 29, 29) != 0) {
									// 0xb136c
									function_af6d0(g31, g33, g32, g35, g36, 8, 1);
									// branch -> 0xb138c
								}
								// 0xb138c
								v45 = 0x1000000 * g22;
								if (v45 >= 0 && (v45 || 0xffffff) >= 0x1ffffff) {
									// 0xb1394
									v46 = v45 / 0x1000000 - 1;
									if (v46 <= 3) {
										// 0xb13a4
										v58 = g16 + 0x55ec * v46;
										v59 = g35 + *(int32_t *)(v58 + 100);
										v60 = g32 + *(int32_t *)(v58 + 96) - *(int32_t *)(v58 + 148);
										v77 = *(int32_t *)(v58 + 140);
										g13 = *(int32_t *)(v58 + 144);
										function_af440(v46, g31, g33, v60, v59, *(int32_t *)(v58 + 124), v77, g36, 8);
										if (g17 != 0) {
											// 0xb13f0
											v78 = *(int32_t *)(g30 + 152);
											if (v78 != 0) {
												// 0xb13fc
												if (v78 == 2) {
													// 0xb1404
													function_b0c10(g28 - 0x3060, g31 - 2, g33 + 1, g20, g36, g32 - 96, g35 - 16);
													// branch -> 0xb1424
												}
												// 0xb1424
												function_b0c10(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
												// branch -> 0xb1444
											}
										}
									}
								}
								// 0xb1444
								if (v15 >= 1) {
									// 0xb1450
									if (__asm_rlwinm_(v52, 0, 25, 25) == 0) {
										// 0xb1458
										v79 = *(int32_t *)(g23 - 0x77ac);
										if (*(int32_t *)(g16 + 0x55ec * *(int32_t *)v79 + 460) != 0) {
											// Detected a possible infinite recursion (goto support failed); quitting...
										}
									}
									// Detected a possible infinite recursion (goto support failed); quitting...
								}
								// Detected a possible infinite recursion (goto support failed); quitting...
							}
							// 0xb1364
							if (__asm_rlwinm_(v52, 0, 29, 29) != 0) {
								// 0xb136c
								function_af6d0(g31, g33, g32, g35, g36, 8, 1);
								// branch -> 0xb138c
							}
							// 0xb138c
							v45 = 0x1000000 * g22;
							if (v45 >= 0 && (v45 || 0xffffff) >= 0x1ffffff) {
								// 0xb1394
								v46 = v45 / 0x1000000 - 1;
								if (v46 <= 3) {
									// 0xb13a4
									v58 = g16 + 0x55ec * v46;
									v59 = g35 + *(int32_t *)(v58 + 100);
									v60 = g32 + *(int32_t *)(v58 + 96) - *(int32_t *)(v58 + 148);
									v77 = *(int32_t *)(v58 + 140);
									g13 = *(int32_t *)(v58 + 144);
									function_af440(v46, g31, g33, v60, v59, *(int32_t *)(v58 + 124), v77, g36, 8);
									if (g17 != 0) {
										// 0xb13f0
										v78 = *(int32_t *)(g30 + 152);
										if (v78 != 0) {
											// 0xb13fc
											if (v78 == 2) {
												// 0xb1404
												function_b0c10(g28 - 0x3060, g31 - 2, g33 + 1, g20, g36, g32 - 96, g35 - 16);
												// branch -> 0xb1424
											}
											// 0xb1424
											function_b0c10(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
											// branch -> 0xb1444
										}
									}
								}
							}
							// 0xb1444
							if (v15 >= 1) {
								// 0xb1450
								if (__asm_rlwinm_(v52, 0, 25, 25) == 0) {
									// 0xb1458
									v79 = *(int32_t *)(g23 - 0x77ac);
									if (*(int32_t *)(g16 + 0x55ec * *(int32_t *)v79 + 460) != 0) {
										// Detected a possible infinite recursion (goto support failed); quitting...
									}
								}
								// Detected a possible infinite recursion (goto support failed); quitting...
							}
							// Detected a possible infinite recursion (goto support failed); quitting...
						}
						// 0xb1108
						function_c9acc(*(int32_t *)(v32 + 24));
						// branch -> 0xb1178
					}
					// 0xb1178
					v52 = v12;
					g29 = v52;
					if (__asm_rlwinm_(v52, 0, 26, 26) != 0) {
						// 0xb1184
						v44 = -1 - (int32_t)v17;
						if (v44 <= 3) {
							// 0xb119c
							v53 = g16 + 0x55ec * v44;
							v54 = g35 + *(int32_t *)(v53 + 100);
							v55 = g32 + *(int32_t *)(v53 + 96) - *(int32_t *)(v53 + 148);
							v71 = *(int32_t *)(v53 + 124);
							v72 = *(int32_t *)(v53 + 140);
							g13 = *(int32_t *)(v53 + 144);
							function_af440(v44, g31, g33 - 1, v55, v54, v71, v72, g36, 8);
							if (g17 != 0) {
								// 0xb11e8
								v73 = *(int32_t *)(g30 + 152);
								if (v73 != 0) {
									// 0xb11f4
									if (v73 == 2) {
										// 0xb11fc
										function_b0c10(g28 - 0x3060, g31 - 2, g33 + 1, g20, g36, g32 - 96, g35 - 16);
										// branch -> 0xb121c
									}
									// 0xb121c
									function_b0c10(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
									// branch -> 0xb123c
								}
							}
						}
					}
					// 0xb123c
					if (__asm_rlwinm_(v52, 0, 27, 27) != 0) {
						// 0xb1244
						if (__asm_rlwinm_(v52, 0, 25, 25) == 0) {
							// 0xb124c
							v74 = *(int32_t *)(g23 - 0x77ac);
							if (*(int32_t *)(g16 + 0x55ec * *(int32_t *)v74 + 460) != 0) {
								// 0xb1268
								v36 = g18;
								if (v36 <= 0xffffffff) {
									// 0xb1270
									*(int32_t *)g25 = -1 - v36;
									v56 = *(int32_t *)g25;
									if (v56 <= 199) {
										// 0xb1288
										v57 = *(int32_t *)(g23 - 0x7754) + 232 * v56;
										g30 = v57;
										if (*(int32_t *)(v57 + 160) % 2 == 0) {
											// 0xb12a0
											v75 = *(int32_t *)(v57 + 224);
											if (v75 != 0) {
												// 0xb12ac
												g34 = v57 + 84;
												g27 = g35 + *(int32_t *)(v57 + 60);
												g26 = g32 + *(int32_t *)(v57 + 56) - *(int32_t *)(v75 + 496);
												function_c9b28();
												if (*(int32_t *)g25 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
													// 0xb12e0
													v37 = g30;
													v76 = *(int32_t *)(*(int32_t *)(v37 + 224) + 492);
													g13 = 8;
													function_507f4(233, g26, g27, v37 + 84, *(int32_t *)(v37 + 104), v76, g36);
													// branch -> 0xb1308
												}
												// 0xb1308
												function_c9b70((int32_t *)(g30 + 84));
												function_aefc4(g31, g33, g26, g27, *(int32_t *)g25, g36, 8);
												if (g17 != 0) {
													// 0xb1338
													if (*(int32_t *)(g30 + 108) == 0) {
														// 0xb1344
														function_b0c10(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
														// branch -> 0xb1364
													}
												}
											}
										}
									}
								}
							}
						} else {
							// 0xb1268
							v36 = g18;
							if (v36 <= 0xffffffff) {
								// 0xb1270
								*(int32_t *)g25 = -1 - v36;
								v56 = *(int32_t *)g25;
								if (v56 <= 199) {
									// 0xb1288
									v57 = *(int32_t *)(g23 - 0x7754) + 232 * v56;
									g30 = v57;
									if (*(int32_t *)(v57 + 160) % 2 == 0) {
										// 0xb12a0
										v75 = *(int32_t *)(v57 + 224);
										if (v75 != 0) {
											// 0xb12ac
											g34 = v57 + 84;
											g27 = g35 + *(int32_t *)(v57 + 60);
											g26 = g32 + *(int32_t *)(v57 + 56) - *(int32_t *)(v75 + 496);
											function_c9b28();
											if (*(int32_t *)g25 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
												// 0xb12e0
												v37 = g30;
												v76 = *(int32_t *)(*(int32_t *)(v37 + 224) + 492);
												g13 = 8;
												function_507f4(233, g26, g27, v37 + 84, *(int32_t *)(v37 + 104), v76, g36);
												// branch -> 0xb1308
											}
											// 0xb1308
											function_c9b70((int32_t *)(g30 + 84));
											function_aefc4(g31, g33, g26, g27, *(int32_t *)g25, g36, 8);
											if (g17 != 0) {
												// 0xb1338
												if (*(int32_t *)(g30 + 108) == 0) {
													// 0xb1344
													function_b0c10(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
													// branch -> 0xb1364
												}
											}
										}
									}
								}
							}
						}
						// 0xb1364
						if (__asm_rlwinm_(v52, 0, 29, 29) != 0) {
							// 0xb136c
							function_af6d0(g31, g33, g32, g35, g36, 8, 1);
							// branch -> 0xb138c
						}
						// 0xb138c
						v45 = 0x1000000 * g22;
						if (v45 >= 0 && (v45 || 0xffffff) >= 0x1ffffff) {
							// 0xb1394
							v46 = v45 / 0x1000000 - 1;
							if (v46 <= 3) {
								// 0xb13a4
								v58 = g16 + 0x55ec * v46;
								v59 = g35 + *(int32_t *)(v58 + 100);
								v60 = g32 + *(int32_t *)(v58 + 96) - *(int32_t *)(v58 + 148);
								v77 = *(int32_t *)(v58 + 140);
								g13 = *(int32_t *)(v58 + 144);
								function_af440(v46, g31, g33, v60, v59, *(int32_t *)(v58 + 124), v77, g36, 8);
								if (g17 != 0) {
									// 0xb13f0
									v78 = *(int32_t *)(g30 + 152);
									if (v78 != 0) {
										// 0xb13fc
										if (v78 == 2) {
											// 0xb1404
											function_b0c10(g28 - 0x3060, g31 - 2, g33 + 1, g20, g36, g32 - 96, g35 - 16);
											// branch -> 0xb1424
										}
										// 0xb1424
										function_b0c10(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
										// branch -> 0xb1444
									}
								}
							}
						}
						// 0xb1444
						if (v15 >= 1) {
							// 0xb1450
							if (__asm_rlwinm_(v52, 0, 25, 25) == 0) {
								// 0xb1458
								v79 = *(int32_t *)(g23 - 0x77ac);
								if (*(int32_t *)(g16 + 0x55ec * *(int32_t *)v79 + 460) != 0) {
									// Detected a possible infinite recursion (goto support failed); quitting...
								}
							}
							// Detected a possible infinite recursion (goto support failed); quitting...
						}
						// Detected a possible infinite recursion (goto support failed); quitting...
					}
					// 0xb1364
					if (__asm_rlwinm_(v52, 0, 29, 29) != 0) {
						// 0xb136c
						function_af6d0(g31, g33, g32, g35, g36, 8, 1);
						// branch -> 0xb138c
					}
					// 0xb138c
					v45 = 0x1000000 * g22;
					if (v45 >= 0 && (v45 || 0xffffff) >= 0x1ffffff) {
						// 0xb1394
						v46 = v45 / 0x1000000 - 1;
						if (v46 <= 3) {
							// 0xb13a4
							v58 = g16 + 0x55ec * v46;
							v59 = g35 + *(int32_t *)(v58 + 100);
							v60 = g32 + *(int32_t *)(v58 + 96) - *(int32_t *)(v58 + 148);
							v77 = *(int32_t *)(v58 + 140);
							g13 = *(int32_t *)(v58 + 144);
							function_af440(v46, g31, g33, v60, v59, *(int32_t *)(v58 + 124), v77, g36, 8);
							if (g17 != 0) {
								// 0xb13f0
								v78 = *(int32_t *)(g30 + 152);
								if (v78 != 0) {
									// 0xb13fc
									if (v78 == 2) {
										// 0xb1404
										function_b0c10(g28 - 0x3060, g31 - 2, g33 + 1, g20, g36, g32 - 96, g35 - 16);
										// branch -> 0xb1424
									}
									// 0xb1424
									function_b0c10(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
									// branch -> 0xb1444
								}
							}
						}
					}
					// 0xb1444
					if (v15 >= 1) {
						// 0xb1450
						if (__asm_rlwinm_(v52, 0, 25, 25) == 0) {
							// 0xb1458
							v79 = *(int32_t *)(g23 - 0x77ac);
							if (*(int32_t *)(g16 + 0x55ec * *(int32_t *)v79 + 460) != 0) {
								// Detected a possible infinite recursion (goto support failed); quitting...
							}
						}
						// Detected a possible infinite recursion (goto support failed); quitting...
					}
					// Detected a possible infinite recursion (goto support failed); quitting...
				}
			}
		}
		// 0xb1178
		v52 = v12;
		g29 = v52;
		if (__asm_rlwinm_(v52, 0, 26, 26) != 0) {
			// 0xb1184
			v44 = -1 - (int32_t)v17;
			if (v44 <= 3) {
				// 0xb119c
				v53 = g16 + 0x55ec * v44;
				v54 = g35 + *(int32_t *)(v53 + 100);
				v55 = g32 + *(int32_t *)(v53 + 96) - *(int32_t *)(v53 + 148);
				v71 = *(int32_t *)(v53 + 124);
				v72 = *(int32_t *)(v53 + 140);
				g13 = *(int32_t *)(v53 + 144);
				function_af440(v44, g31, g33 - 1, v55, v54, v71, v72, g36, 8);
				if (g17 != 0) {
					// 0xb11e8
					v73 = *(int32_t *)(g30 + 152);
					if (v73 != 0) {
						// 0xb11f4
						if (v73 == 2) {
							// 0xb11fc
							function_b0c10(g28 - 0x3060, g31 - 2, g33 + 1, g20, g36, g32 - 96, g35 - 16);
							// branch -> 0xb121c
						}
						// 0xb121c
						function_b0c10(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
						// branch -> 0xb123c
					}
				}
			}
		}
		// 0xb123c
		if (__asm_rlwinm_(v52, 0, 27, 27) != 0) {
			// 0xb1244
			if (__asm_rlwinm_(v52, 0, 25, 25) == 0) {
				// 0xb124c
				v74 = *(int32_t *)(g23 - 0x77ac);
				if (*(int32_t *)(g16 + 0x55ec * *(int32_t *)v74 + 460) != 0) {
					// 0xb1268
					v36 = g18;
					if (v36 <= 0xffffffff) {
						// 0xb1270
						*(int32_t *)g25 = -1 - v36;
						v56 = *(int32_t *)g25;
						if (v56 <= 199) {
							// 0xb1288
							v57 = *(int32_t *)(g23 - 0x7754) + 232 * v56;
							g30 = v57;
							if (*(int32_t *)(v57 + 160) % 2 == 0) {
								// 0xb12a0
								v75 = *(int32_t *)(v57 + 224);
								if (v75 != 0) {
									// 0xb12ac
									g34 = v57 + 84;
									g27 = g35 + *(int32_t *)(v57 + 60);
									g26 = g32 + *(int32_t *)(v57 + 56) - *(int32_t *)(v75 + 496);
									function_c9b28();
									if (*(int32_t *)g25 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
										// 0xb12e0
										v37 = g30;
										v76 = *(int32_t *)(*(int32_t *)(v37 + 224) + 492);
										g13 = 8;
										function_507f4(233, g26, g27, v37 + 84, *(int32_t *)(v37 + 104), v76, g36);
										// branch -> 0xb1308
									}
									// 0xb1308
									function_c9b70((int32_t *)(g30 + 84));
									function_aefc4(g31, g33, g26, g27, *(int32_t *)g25, g36, 8);
									if (g17 != 0) {
										// 0xb1338
										if (*(int32_t *)(g30 + 108) == 0) {
											// 0xb1344
											function_b0c10(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
											// branch -> 0xb1364
										}
									}
								}
							}
						}
					}
				}
			} else {
				// 0xb1268
				v36 = g18;
				if (v36 <= 0xffffffff) {
					// 0xb1270
					*(int32_t *)g25 = -1 - v36;
					v56 = *(int32_t *)g25;
					if (v56 <= 199) {
						// 0xb1288
						v57 = *(int32_t *)(g23 - 0x7754) + 232 * v56;
						g30 = v57;
						if (*(int32_t *)(v57 + 160) % 2 == 0) {
							// 0xb12a0
							v75 = *(int32_t *)(v57 + 224);
							if (v75 != 0) {
								// 0xb12ac
								g34 = v57 + 84;
								g27 = g35 + *(int32_t *)(v57 + 60);
								g26 = g32 + *(int32_t *)(v57 + 56) - *(int32_t *)(v75 + 496);
								function_c9b28();
								if (*(int32_t *)g25 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
									// 0xb12e0
									v37 = g30;
									v76 = *(int32_t *)(*(int32_t *)(v37 + 224) + 492);
									g13 = 8;
									function_507f4(233, g26, g27, v37 + 84, *(int32_t *)(v37 + 104), v76, g36);
									// branch -> 0xb1308
								}
								// 0xb1308
								function_c9b70((int32_t *)(g30 + 84));
								function_aefc4(g31, g33, g26, g27, *(int32_t *)g25, g36, 8);
								if (g17 != 0) {
									// 0xb1338
									if (*(int32_t *)(g30 + 108) == 0) {
										// 0xb1344
										function_b0c10(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
										// branch -> 0xb1364
									}
								}
							}
						}
					}
				}
			}
			// 0xb1364
			if (__asm_rlwinm_(v52, 0, 29, 29) != 0) {
				// 0xb136c
				function_af6d0(g31, g33, g32, g35, g36, 8, 1);
				// branch -> 0xb138c
			}
			// 0xb138c
			v45 = 0x1000000 * g22;
			if (v45 >= 0 && (v45 || 0xffffff) >= 0x1ffffff) {
				// 0xb1394
				v46 = v45 / 0x1000000 - 1;
				if (v46 <= 3) {
					// 0xb13a4
					v58 = g16 + 0x55ec * v46;
					v59 = g35 + *(int32_t *)(v58 + 100);
					v60 = g32 + *(int32_t *)(v58 + 96) - *(int32_t *)(v58 + 148);
					v77 = *(int32_t *)(v58 + 140);
					g13 = *(int32_t *)(v58 + 144);
					function_af440(v46, g31, g33, v60, v59, *(int32_t *)(v58 + 124), v77, g36, 8);
					if (g17 != 0) {
						// 0xb13f0
						v78 = *(int32_t *)(g30 + 152);
						if (v78 != 0) {
							// 0xb13fc
							if (v78 == 2) {
								// 0xb1404
								function_b0c10(g28 - 0x3060, g31 - 2, g33 + 1, g20, g36, g32 - 96, g35 - 16);
								// branch -> 0xb1424
							}
							// 0xb1424
							function_b0c10(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
							// branch -> 0xb1444
						}
					}
				}
			}
			// 0xb1444
			if (v15 >= 1) {
				// 0xb1450
				if (__asm_rlwinm_(v52, 0, 25, 25) == 0) {
					// 0xb1458
					v79 = *(int32_t *)(g23 - 0x77ac);
					if (*(int32_t *)(g16 + 0x55ec * *(int32_t *)v79 + 460) != 0) {
						// Detected a possible infinite recursion (goto support failed); quitting...
					}
				}
				// Detected a possible infinite recursion (goto support failed); quitting...
			}
			// Detected a possible infinite recursion (goto support failed); quitting...
		}
		// 0xb1364
		if (__asm_rlwinm_(v52, 0, 29, 29) != 0) {
			// 0xb136c
			function_af6d0(g31, g33, g32, g35, g36, 8, 1);
			// branch -> 0xb138c
		}
		// 0xb138c
		v45 = 0x1000000 * g22;
		if (v45 >= 0 && (v45 || 0xffffff) >= 0x1ffffff) {
			// 0xb1394
			v46 = v45 / 0x1000000 - 1;
			if (v46 <= 3) {
				// 0xb13a4
				v58 = g16 + 0x55ec * v46;
				v59 = g35 + *(int32_t *)(v58 + 100);
				v60 = g32 + *(int32_t *)(v58 + 96) - *(int32_t *)(v58 + 148);
				v77 = *(int32_t *)(v58 + 140);
				g13 = *(int32_t *)(v58 + 144);
				function_af440(v46, g31, g33, v60, v59, *(int32_t *)(v58 + 124), v77, g36, 8);
				if (g17 != 0) {
					// 0xb13f0
					v78 = *(int32_t *)(g30 + 152);
					if (v78 != 0) {
						// 0xb13fc
						if (v78 == 2) {
							// 0xb1404
							function_b0c10(g28 - 0x3060, g31 - 2, g33 + 1, g20, g36, g32 - 96, g35 - 16);
							// branch -> 0xb1424
						}
						// 0xb1424
						function_b0c10(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
						// branch -> 0xb1444
					}
				}
			}
		}
		// 0xb1444
		if (v15 >= 1) {
			// 0xb1450
			if (__asm_rlwinm_(v52, 0, 25, 25) == 0) {
				// 0xb1458
				v79 = *(int32_t *)(g23 - 0x77ac);
				if (*(int32_t *)(g16 + 0x55ec * *(int32_t *)v79 + 460) != 0) {
					// Detected a possible infinite recursion (goto support failed); quitting...
				}
			}
			// Detected a possible infinite recursion (goto support failed); quitting...
		}
		// Detected a possible infinite recursion (goto support failed); quitting...
	}
	// 0xb0f2c
	v19 = g23;
	v20 = v19;
	if (*(int32_t *)*(int32_t *)(v19 - 0x70e4) != 0) {
		// 0xb0f3c
		if (v12 % 2 != 0) {
			// 0xb0f44
			function_aeb58(g31, g33, g32, g35, g36, 8, 1);
			v20 = g23;
			// branch -> 0xb0f64
		} else {
			v20 = v19;
		}
		// 0xb0f64
		v61 = *(int32_t *)(v20 - 0x70cc);
		v62 = *(int32_t *)(v20 - 0x7290);
		if (*(int32_t *)v62 < (int32_t) * (char *)v61) {
			// 0xb0f80
			v38 = 0x1000000 * g26;
			v47 = v38 / 0x1000000;
			if ((v38 || 0xffffff) >= 0x1ffffff) {
				// 0xb0f88
				g30 = *(int32_t *)(v20 - 0x7614) + 80 * (v47 % 32) - 80;
				v39 = __asm_rlwinm(v47, 27, 29, 31);
				v21 = g30;
				v48 = v21 + 0x1000000 * v39 / 0x200000;
				g29 = v48;
				g34 = v48;
				g26 = g32 - *(int32_t *)(v21 + 72);
				v22 = function_c9b28();
				g27 = v22;
				if (v22 == 0) {
					// 0xb0fc8
					function_c9b70((int32_t *)g29);
					// branch -> 0xb1060
				} else {
					// 0xb0fd4
					v63 = *(int32_t *)(g30 + 64);
					g11 = v63;
					if (v63 >= 1) {
						// 0xb0fe0
						if (function_4d794(v22) <= 50) {
							// 0xb0ff0
							v40 = function_4d794(g27);
							v23 = g30;
							v64 = *(int32_t *)(v23 + 64);
							if (v64 <= v40) {
								// 0xb1010
								v65 = *(char *)(v23 + 76);
								g13 = v65;
								v66 = *(int32_t *)(v23 + 68);
								v24 = g26;
								v25 = g35;
								v26 = g29;
								v27 = g36;
								if (v65 == 0) {
									// 0xb103c
									Cl2DecodeFrm6(v24, v25, v26, v64, v66, v27, 8);
									// branch -> 0xb1058
								} else {
									// 0xb101c
									Cl2DecodeFrm5(v24, v25, v26, v64, v66, v27, 8);
									// branch -> 0xb1058
								}
								// 0xb1058
								function_c9b70((int32_t *)g29);
								// branch -> 0xb1060
								// 0xb1060
								if (v9 != 0) {
									// 0xb106c
									function_afa48(g31, g33, g32, g35, 1, g36, 8);
									// branch -> 0xb108c
								}
								// 0xb108c
								v28 = g21;
								v41 = 0x1000000 * v28;
								v49 = v41 / 0x1000000;
								if ((v41 || 0xffffff) >= 0x1ffffff) {
									// 0xb1094
									v42 = v49 - 1;
									g26 = v42;
									v50 = *(int32_t *)(g23 - 0x7690) + 368 * v42;
									g30 = v50;
									if (*(int32_t *)(v50 + 52) == 0) {
										// 0xb10b4
										if (v28 <= 127) {
											// 0xb10bc
											g34 = *(int32_t *)(v50 + 24);
											v29 = function_c9948();
											v18 = v29;
											v30 = g30;
											if (v29 == 0) {
												// 0xb10cc
												function_c9acc(*(int32_t *)(v30 + 24));
												// branch -> 0xb1178
											} else {
												// 0xb10d8
												v67 = *(int32_t *)(v30 + 32);
												g11 = v67;
												v32 = v30;
												if (v67 >= 1) {
													// 0xb10e4
													if (function_4d794(v29) > 50) {
														// 0xb10e4
														v32 = g30;
														// branch -> 0xb1108
													} else {
														// 0xb10f4
														v43 = function_4d794(v18);
														v31 = g30;
														v68 = *(int32_t *)(v31 + 32);
														g40 = v68;
														if (v68 <= v43) {
															// 0xb1114
															v51 = g32 - *(int32_t *)(v31 + 40);
															g27 = v51;
															v34 = v51;
															v35 = v31;
															if (g26 == (int32_t) * (char *)*(int32_t *)(g23 - 0x7748)) {
																// 0xb1130
																g37 = v51;
																g41 = *(int32_t *)(v31 + 36);
																v33 = g35;
																g38 = v33;
																g42 = g36;
																g13 = 8;
																CelDrawHdrClrHL(181, v51, v33, *(int32_t *)(v31 + 24), v68);
																v34 = g27;
																v35 = g30;
																// branch -> 0xb1150
															}
															// 0xb1150
															v69 = *(int32_t *)(v35 + 32);
															v70 = *(int32_t *)(v35 + 36);
															function_4e998(v34, g35, *(int32_t *)(v35 + 24), v69, v70, g36, 8);
															function_c9acc(*(int32_t *)(g30 + 24));
															// branch -> 0xb1178
															// 0xb1178
															v52 = v12;
															g29 = v52;
															if (__asm_rlwinm_(v52, 0, 26, 26) != 0) {
																// 0xb1184
																v44 = -1 - (int32_t)v17;
																if (v44 <= 3) {
																	// 0xb119c
																	v53 = g16 + 0x55ec * v44;
																	v54 = g35 + *(int32_t *)(v53 + 100);
																	v55 = g32 + *(int32_t *)(v53 + 96) - *(int32_t *)(v53 + 148);
																	v71 = *(int32_t *)(v53 + 124);
																	v72 = *(int32_t *)(v53 + 140);
																	g13 = *(int32_t *)(v53 + 144);
																	function_af440(v44, g31, g33 - 1, v55, v54, v71, v72, g36, 8);
																	if (g17 != 0) {
																		// 0xb11e8
																		v73 = *(int32_t *)(g30 + 152);
																		if (v73 != 0) {
																			// 0xb11f4
																			if (v73 == 2) {
																				// 0xb11fc
																				function_b0c10(g28 - 0x3060, g31 - 2, g33 + 1, g20, g36, g32 - 96, g35 - 16);
																				// branch -> 0xb121c
																			}
																			// 0xb121c
																			function_b0c10(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
																			// branch -> 0xb123c
																		}
																	}
																}
															}
															// 0xb123c
															if (__asm_rlwinm_(v52, 0, 27, 27) != 0) {
																// 0xb1244
																if (__asm_rlwinm_(v52, 0, 25, 25) == 0) {
																	// 0xb124c
																	v74 = *(int32_t *)(g23 - 0x77ac);
																	if (*(int32_t *)(g16 + 0x55ec * *(int32_t *)v74 + 460) != 0) {
																		// 0xb1268
																		v36 = g18;
																		if (v36 <= 0xffffffff) {
																			// 0xb1270
																			*(int32_t *)g25 = -1 - v36;
																			v56 = *(int32_t *)g25;
																			if (v56 <= 199) {
																				// 0xb1288
																				v57 = *(int32_t *)(g23 - 0x7754) + 232 * v56;
																				g30 = v57;
																				if (*(int32_t *)(v57 + 160) % 2 == 0) {
																					// 0xb12a0
																					v75 = *(int32_t *)(v57 + 224);
																					if (v75 != 0) {
																						// 0xb12ac
																						g34 = v57 + 84;
																						g27 = g35 + *(int32_t *)(v57 + 60);
																						g26 = g32 + *(int32_t *)(v57 + 56) - *(int32_t *)(v75 + 496);
																						function_c9b28();
																						if (*(int32_t *)g25 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
																							// 0xb12e0
																							v37 = g30;
																							v76 = *(int32_t *)(*(int32_t *)(v37 + 224) + 492);
																							g13 = 8;
																							function_507f4(233, g26, g27, v37 + 84, *(int32_t *)(v37 + 104), v76, g36);
																							// branch -> 0xb1308
																						}
																						// 0xb1308
																						function_c9b70((int32_t *)(g30 + 84));
																						function_aefc4(g31, g33, g26, g27, *(int32_t *)g25, g36, 8);
																						if (g17 != 0) {
																							// 0xb1338
																							if (*(int32_t *)(g30 + 108) == 0) {
																								// 0xb1344
																								function_b0c10(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
																								// branch -> 0xb1364
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
																// 0xb1364
																if (__asm_rlwinm_(v52, 0, 29, 29) != 0) {
																	// 0xb136c
																	function_af6d0(g31, g33, g32, g35, g36, 8, 1);
																	// branch -> 0xb138c
																}
																// 0xb138c
																v45 = 0x1000000 * g22;
																if (v45 >= 0 && (v45 || 0xffffff) >= 0x1ffffff) {
																	// 0xb1394
																	v46 = v45 / 0x1000000 - 1;
																	if (v46 <= 3) {
																		// 0xb13a4
																		v58 = g16 + 0x55ec * v46;
																		v59 = g35 + *(int32_t *)(v58 + 100);
																		v60 = g32 + *(int32_t *)(v58 + 96) - *(int32_t *)(v58 + 148);
																		v77 = *(int32_t *)(v58 + 140);
																		g13 = *(int32_t *)(v58 + 144);
																		function_af440(v46, g31, g33, v60, v59, *(int32_t *)(v58 + 124), v77, g36, 8);
																		if (g17 != 0) {
																			// 0xb13f0
																			v78 = *(int32_t *)(g30 + 152);
																			if (v78 != 0) {
																				// 0xb13fc
																				if (v78 == 2) {
																					// 0xb1404
																					function_b0c10(g28 - 0x3060, g31 - 2, g33 + 1, g20, g36, g32 - 96, g35 - 16);
																					// branch -> 0xb1424
																				}
																				// 0xb1424
																				function_b0c10(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
																				// branch -> 0xb1444
																			}
																		}
																	}
																}
																// 0xb1444
																if (v15 >= 1) {
																	// 0xb1450
																	if (__asm_rlwinm_(v52, 0, 25, 25) == 0) {
																		// 0xb1458
																		v79 = *(int32_t *)(g23 - 0x77ac);
																		if (*(int32_t *)(g16 + 0x55ec * *(int32_t *)v79 + 460) != 0) {
																			// Detected a possible infinite recursion (goto support failed); quitting...
																		}
																	}
																	// Detected a possible infinite recursion (goto support failed); quitting...
																}
																// Detected a possible infinite recursion (goto support failed); quitting...
															}
															// Detected a possible infinite recursion (goto support failed); quitting...
														} else {
															v32 = v31;
														}
													}
													// 0xb1108
													function_c9acc(*(int32_t *)(v32 + 24));
													// branch -> 0xb1178
													// 0xb1178
													v52 = v12;
													g29 = v52;
													if (__asm_rlwinm_(v52, 0, 26, 26) != 0) {
														// 0xb1184
														v44 = -1 - (int32_t)v17;
														if (v44 <= 3) {
															// 0xb119c
															v53 = g16 + 0x55ec * v44;
															v54 = g35 + *(int32_t *)(v53 + 100);
															v55 = g32 + *(int32_t *)(v53 + 96) - *(int32_t *)(v53 + 148);
															v71 = *(int32_t *)(v53 + 124);
															v72 = *(int32_t *)(v53 + 140);
															g13 = *(int32_t *)(v53 + 144);
															function_af440(v44, g31, g33 - 1, v55, v54, v71, v72, g36, 8);
															if (g17 != 0) {
																// 0xb11e8
																v73 = *(int32_t *)(g30 + 152);
																if (v73 != 0) {
																	// 0xb11f4
																	if (v73 == 2) {
																		// 0xb11fc
																		function_b0c10(g28 - 0x3060, g31 - 2, g33 + 1, g20, g36, g32 - 96, g35 - 16);
																		// branch -> 0xb121c
																	}
																	// 0xb121c
																	function_b0c10(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
																	// branch -> 0xb123c
																}
															}
														}
													}
													// 0xb123c
													if (__asm_rlwinm_(v52, 0, 27, 27) != 0) {
														// 0xb1244
														if (__asm_rlwinm_(v52, 0, 25, 25) == 0) {
															// 0xb124c
															v74 = *(int32_t *)(g23 - 0x77ac);
															if (*(int32_t *)(g16 + 0x55ec * *(int32_t *)v74 + 460) != 0) {
																// Detected a possible infinite recursion (goto support failed); quitting...
															}
														}
														// Detected a possible infinite recursion (goto support failed); quitting...
													}
													// Detected a possible infinite recursion (goto support failed); quitting...
												}
												// 0xb1108
												function_c9acc(*(int32_t *)(v32 + 24));
												// branch -> 0xb1178
											}
											// 0xb1178
											v52 = v12;
											g29 = v52;
											if (__asm_rlwinm_(v52, 0, 26, 26) != 0) {
												// 0xb1184
												v44 = -1 - (int32_t)v17;
												if (v44 <= 3) {
													// 0xb119c
													v53 = g16 + 0x55ec * v44;
													v54 = g35 + *(int32_t *)(v53 + 100);
													v55 = g32 + *(int32_t *)(v53 + 96) - *(int32_t *)(v53 + 148);
													v71 = *(int32_t *)(v53 + 124);
													v72 = *(int32_t *)(v53 + 140);
													g13 = *(int32_t *)(v53 + 144);
													function_af440(v44, g31, g33 - 1, v55, v54, v71, v72, g36, 8);
													if (g17 != 0) {
														// 0xb11e8
														v73 = *(int32_t *)(g30 + 152);
														if (v73 != 0) {
															// 0xb11f4
															if (v73 == 2) {
																// 0xb11fc
																function_b0c10(g28 - 0x3060, g31 - 2, g33 + 1, g20, g36, g32 - 96, g35 - 16);
																// branch -> 0xb121c
															}
															// 0xb121c
															function_b0c10(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
															// branch -> 0xb123c
														}
													}
												}
											}
											// 0xb123c
											if (__asm_rlwinm_(v52, 0, 27, 27) != 0) {
												// 0xb1244
												if (__asm_rlwinm_(v52, 0, 25, 25) == 0) {
													// 0xb124c
													v74 = *(int32_t *)(g23 - 0x77ac);
													if (*(int32_t *)(g16 + 0x55ec * *(int32_t *)v74 + 460) != 0) {
														// Detected a possible infinite recursion (goto support failed); quitting...
													}
												}
												// Detected a possible infinite recursion (goto support failed); quitting...
											}
											// Detected a possible infinite recursion (goto support failed); quitting...
										}
									}
								}
								// 0xb1178
								v52 = v12;
								g29 = v52;
								if (__asm_rlwinm_(v52, 0, 26, 26) != 0) {
									// 0xb1184
									v44 = -1 - (int32_t)v17;
									if (v44 <= 3) {
										// 0xb119c
										v53 = g16 + 0x55ec * v44;
										v54 = g35 + *(int32_t *)(v53 + 100);
										v55 = g32 + *(int32_t *)(v53 + 96) - *(int32_t *)(v53 + 148);
										v71 = *(int32_t *)(v53 + 124);
										v72 = *(int32_t *)(v53 + 140);
										g13 = *(int32_t *)(v53 + 144);
										function_af440(v44, g31, g33 - 1, v55, v54, v71, v72, g36, 8);
										if (g17 != 0) {
											// 0xb11e8
											v73 = *(int32_t *)(g30 + 152);
											if (v73 != 0) {
												// 0xb11f4
												if (v73 == 2) {
													// 0xb11fc
													function_b0c10(g28 - 0x3060, g31 - 2, g33 + 1, g20, g36, g32 - 96, g35 - 16);
													// branch -> 0xb121c
												}
												// 0xb121c
												function_b0c10(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
												// branch -> 0xb123c
											}
										}
									}
								}
								// 0xb123c
								if (__asm_rlwinm_(v52, 0, 27, 27) != 0) {
									// 0xb1244
									if (__asm_rlwinm_(v52, 0, 25, 25) == 0) {
										// 0xb124c
										v74 = *(int32_t *)(g23 - 0x77ac);
										if (*(int32_t *)(g16 + 0x55ec * *(int32_t *)v74 + 460) != 0) {
											// Detected a possible infinite recursion (goto support failed); quitting...
										}
									}
									// Detected a possible infinite recursion (goto support failed); quitting...
								}
								// Detected a possible infinite recursion (goto support failed); quitting...
							}
						}
					}
					// 0xb1004
					function_c9b70((int32_t *)g29);
					// branch -> 0xb1060
				}
				// 0xb1060
				if (v9 != 0) {
					// 0xb106c
					function_afa48(g31, g33, g32, g35, 1, g36, 8);
					// branch -> 0xb108c
				}
				// 0xb108c
				v28 = g21;
				v41 = 0x1000000 * v28;
				v49 = v41 / 0x1000000;
				if ((v41 || 0xffffff) >= 0x1ffffff) {
					// 0xb1094
					v42 = v49 - 1;
					g26 = v42;
					v50 = *(int32_t *)(g23 - 0x7690) + 368 * v42;
					g30 = v50;
					if (*(int32_t *)(v50 + 52) == 0) {
						// 0xb10b4
						if (v28 <= 127) {
							// 0xb10bc
							g34 = *(int32_t *)(v50 + 24);
							v29 = function_c9948();
							v18 = v29;
							v30 = g30;
							if (v29 == 0) {
								// 0xb10cc
								function_c9acc(*(int32_t *)(v30 + 24));
								// branch -> 0xb1178
							} else {
								// 0xb10d8
								v67 = *(int32_t *)(v30 + 32);
								g11 = v67;
								v32 = v30;
								if (v67 >= 1) {
									// 0xb10e4
									if (function_4d794(v29) > 50) {
										// 0xb10e4
										v32 = g30;
										// branch -> 0xb1108
									} else {
										// 0xb10f4
										v43 = function_4d794(v18);
										v31 = g30;
										v68 = *(int32_t *)(v31 + 32);
										g40 = v68;
										if (v68 <= v43) {
											// 0xb1114
											v51 = g32 - *(int32_t *)(v31 + 40);
											g27 = v51;
											v34 = v51;
											v35 = v31;
											if (g26 == (int32_t) * (char *)*(int32_t *)(g23 - 0x7748)) {
												// 0xb1130
												g37 = v51;
												g41 = *(int32_t *)(v31 + 36);
												v33 = g35;
												g38 = v33;
												g42 = g36;
												g13 = 8;
												CelDrawHdrClrHL(181, v51, v33, *(int32_t *)(v31 + 24), v68);
												v34 = g27;
												v35 = g30;
												// branch -> 0xb1150
											}
											// 0xb1150
											v69 = *(int32_t *)(v35 + 32);
											v70 = *(int32_t *)(v35 + 36);
											function_4e998(v34, g35, *(int32_t *)(v35 + 24), v69, v70, g36, 8);
											function_c9acc(*(int32_t *)(g30 + 24));
											// branch -> 0xb1178
											// 0xb1178
											v52 = v12;
											g29 = v52;
											if (__asm_rlwinm_(v52, 0, 26, 26) != 0) {
												// 0xb1184
												v44 = -1 - (int32_t)v17;
												if (v44 <= 3) {
													// 0xb119c
													v53 = g16 + 0x55ec * v44;
													v54 = g35 + *(int32_t *)(v53 + 100);
													v55 = g32 + *(int32_t *)(v53 + 96) - *(int32_t *)(v53 + 148);
													v71 = *(int32_t *)(v53 + 124);
													v72 = *(int32_t *)(v53 + 140);
													g13 = *(int32_t *)(v53 + 144);
													function_af440(v44, g31, g33 - 1, v55, v54, v71, v72, g36, 8);
													if (g17 != 0) {
														// 0xb11e8
														v73 = *(int32_t *)(g30 + 152);
														if (v73 != 0) {
															// 0xb11f4
															if (v73 == 2) {
																// 0xb11fc
																function_b0c10(g28 - 0x3060, g31 - 2, g33 + 1, g20, g36, g32 - 96, g35 - 16);
																// branch -> 0xb121c
															}
															// 0xb121c
															function_b0c10(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
															// branch -> 0xb123c
														}
													}
												}
											}
											// 0xb123c
											if (__asm_rlwinm_(v52, 0, 27, 27) != 0) {
												// 0xb1244
												if (__asm_rlwinm_(v52, 0, 25, 25) == 0) {
													// 0xb124c
													v74 = *(int32_t *)(g23 - 0x77ac);
													if (*(int32_t *)(g16 + 0x55ec * *(int32_t *)v74 + 460) != 0) {
														// Detected a possible infinite recursion (goto support failed); quitting...
													}
												}
												// Detected a possible infinite recursion (goto support failed); quitting...
											}
											// Detected a possible infinite recursion (goto support failed); quitting...
										} else {
											v32 = v31;
										}
									}
									// 0xb1108
									function_c9acc(*(int32_t *)(v32 + 24));
									// branch -> 0xb1178
									// 0xb1178
									v52 = v12;
									g29 = v52;
									if (__asm_rlwinm_(v52, 0, 26, 26) != 0) {
										// 0xb1184
										v44 = -1 - (int32_t)v17;
										if (v44 <= 3) {
											// 0xb119c
											v53 = g16 + 0x55ec * v44;
											v54 = g35 + *(int32_t *)(v53 + 100);
											v55 = g32 + *(int32_t *)(v53 + 96) - *(int32_t *)(v53 + 148);
											v71 = *(int32_t *)(v53 + 124);
											v72 = *(int32_t *)(v53 + 140);
											g13 = *(int32_t *)(v53 + 144);
											function_af440(v44, g31, g33 - 1, v55, v54, v71, v72, g36, 8);
											if (g17 != 0) {
												// 0xb11e8
												v73 = *(int32_t *)(g30 + 152);
												if (v73 != 0) {
													// 0xb11f4
													if (v73 == 2) {
														// 0xb11fc
														function_b0c10(g28 - 0x3060, g31 - 2, g33 + 1, g20, g36, g32 - 96, g35 - 16);
														// branch -> 0xb121c
													}
													// 0xb121c
													function_b0c10(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
													// branch -> 0xb123c
												}
											}
										}
									}
									// 0xb123c
									if (__asm_rlwinm_(v52, 0, 27, 27) != 0) {
										// 0xb1244
										if (__asm_rlwinm_(v52, 0, 25, 25) == 0) {
											// 0xb124c
											v74 = *(int32_t *)(g23 - 0x77ac);
											if (*(int32_t *)(g16 + 0x55ec * *(int32_t *)v74 + 460) != 0) {
												// Detected a possible infinite recursion (goto support failed); quitting...
											}
										}
										// Detected a possible infinite recursion (goto support failed); quitting...
									}
									// Detected a possible infinite recursion (goto support failed); quitting...
								}
								// 0xb1108
								function_c9acc(*(int32_t *)(v32 + 24));
								// branch -> 0xb1178
							}
							// 0xb1178
							v52 = v12;
							g29 = v52;
							if (__asm_rlwinm_(v52, 0, 26, 26) != 0) {
								// 0xb1184
								v44 = -1 - (int32_t)v17;
								if (v44 <= 3) {
									// 0xb119c
									v53 = g16 + 0x55ec * v44;
									v54 = g35 + *(int32_t *)(v53 + 100);
									v55 = g32 + *(int32_t *)(v53 + 96) - *(int32_t *)(v53 + 148);
									v71 = *(int32_t *)(v53 + 124);
									v72 = *(int32_t *)(v53 + 140);
									g13 = *(int32_t *)(v53 + 144);
									function_af440(v44, g31, g33 - 1, v55, v54, v71, v72, g36, 8);
									if (g17 != 0) {
										// 0xb11e8
										v73 = *(int32_t *)(g30 + 152);
										if (v73 != 0) {
											// 0xb11f4
											if (v73 == 2) {
												// 0xb11fc
												function_b0c10(g28 - 0x3060, g31 - 2, g33 + 1, g20, g36, g32 - 96, g35 - 16);
												// branch -> 0xb121c
											}
											// 0xb121c
											function_b0c10(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
											// branch -> 0xb123c
										}
									}
								}
							}
							// 0xb123c
							if (__asm_rlwinm_(v52, 0, 27, 27) != 0) {
								// 0xb1244
								if (__asm_rlwinm_(v52, 0, 25, 25) == 0) {
									// 0xb124c
									v74 = *(int32_t *)(g23 - 0x77ac);
									if (*(int32_t *)(g16 + 0x55ec * *(int32_t *)v74 + 460) != 0) {
										// Detected a possible infinite recursion (goto support failed); quitting...
									}
								}
								// Detected a possible infinite recursion (goto support failed); quitting...
							}
							// Detected a possible infinite recursion (goto support failed); quitting...
						}
					}
				}
				// 0xb1178
				v52 = v12;
				g29 = v52;
				if (__asm_rlwinm_(v52, 0, 26, 26) != 0) {
					// 0xb1184
					v44 = -1 - (int32_t)v17;
					if (v44 <= 3) {
						// 0xb119c
						v53 = g16 + 0x55ec * v44;
						v54 = g35 + *(int32_t *)(v53 + 100);
						v55 = g32 + *(int32_t *)(v53 + 96) - *(int32_t *)(v53 + 148);
						v71 = *(int32_t *)(v53 + 124);
						v72 = *(int32_t *)(v53 + 140);
						g13 = *(int32_t *)(v53 + 144);
						function_af440(v44, g31, g33 - 1, v55, v54, v71, v72, g36, 8);
						if (g17 != 0) {
							// 0xb11e8
							v73 = *(int32_t *)(g30 + 152);
							if (v73 != 0) {
								// 0xb11f4
								if (v73 == 2) {
									// 0xb11fc
									function_b0c10(g28 - 0x3060, g31 - 2, g33 + 1, g20, g36, g32 - 96, g35 - 16);
									// branch -> 0xb121c
								}
								// 0xb121c
								function_b0c10(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
								// branch -> 0xb123c
							}
						}
					}
				}
				// 0xb123c
				if (__asm_rlwinm_(v52, 0, 27, 27) != 0) {
					// 0xb1244
					if (__asm_rlwinm_(v52, 0, 25, 25) == 0) {
						// 0xb124c
						v74 = *(int32_t *)(g23 - 0x77ac);
						if (*(int32_t *)(g16 + 0x55ec * *(int32_t *)v74 + 460) != 0) {
							// Detected a possible infinite recursion (goto support failed); quitting...
						}
					}
					// Detected a possible infinite recursion (goto support failed); quitting...
				}
				// Detected a possible infinite recursion (goto support failed); quitting...
			}
			// 0xb1060
			if (v9 != 0) {
				// 0xb106c
				function_afa48(g31, g33, g32, g35, 1, g36, 8);
				// branch -> 0xb108c
			}
		}
		// 0xb108c
		v28 = g21;
		v41 = 0x1000000 * v28;
		v49 = v41 / 0x1000000;
		if ((v41 || 0xffffff) >= 0x1ffffff) {
			// 0xb1094
			v42 = v49 - 1;
			g26 = v42;
			v50 = *(int32_t *)(g23 - 0x7690) + 368 * v42;
			g30 = v50;
			if (*(int32_t *)(v50 + 52) == 0) {
				// 0xb10b4
				if (v28 <= 127) {
					// 0xb10bc
					g34 = *(int32_t *)(v50 + 24);
					v29 = function_c9948();
					v18 = v29;
					v30 = g30;
					if (v29 == 0) {
						// 0xb10cc
						function_c9acc(*(int32_t *)(v30 + 24));
						// branch -> 0xb1178
					} else {
						// 0xb10d8
						v67 = *(int32_t *)(v30 + 32);
						g11 = v67;
						v32 = v30;
						if (v67 >= 1) {
							// 0xb10e4
							if (function_4d794(v29) > 50) {
								// 0xb10e4
								v32 = g30;
								// branch -> 0xb1108
							} else {
								// 0xb10f4
								v43 = function_4d794(v18);
								v31 = g30;
								v68 = *(int32_t *)(v31 + 32);
								g40 = v68;
								if (v68 <= v43) {
									// 0xb1114
									v51 = g32 - *(int32_t *)(v31 + 40);
									g27 = v51;
									v34 = v51;
									v35 = v31;
									if (g26 == (int32_t) * (char *)*(int32_t *)(g23 - 0x7748)) {
										// 0xb1130
										g37 = v51;
										g41 = *(int32_t *)(v31 + 36);
										v33 = g35;
										g38 = v33;
										g42 = g36;
										g13 = 8;
										CelDrawHdrClrHL(181, v51, v33, *(int32_t *)(v31 + 24), v68);
										v34 = g27;
										v35 = g30;
										// branch -> 0xb1150
									}
									// 0xb1150
									v69 = *(int32_t *)(v35 + 32);
									v70 = *(int32_t *)(v35 + 36);
									function_4e998(v34, g35, *(int32_t *)(v35 + 24), v69, v70, g36, 8);
									function_c9acc(*(int32_t *)(g30 + 24));
									// branch -> 0xb1178
									// 0xb1178
									v52 = v12;
									g29 = v52;
									if (__asm_rlwinm_(v52, 0, 26, 26) != 0) {
										// 0xb1184
										v44 = -1 - (int32_t)v17;
										if (v44 <= 3) {
											// 0xb119c
											v53 = g16 + 0x55ec * v44;
											v54 = g35 + *(int32_t *)(v53 + 100);
											v55 = g32 + *(int32_t *)(v53 + 96) - *(int32_t *)(v53 + 148);
											v71 = *(int32_t *)(v53 + 124);
											v72 = *(int32_t *)(v53 + 140);
											g13 = *(int32_t *)(v53 + 144);
											function_af440(v44, g31, g33 - 1, v55, v54, v71, v72, g36, 8);
											if (g17 != 0) {
												// 0xb11e8
												v73 = *(int32_t *)(g30 + 152);
												if (v73 != 0) {
													// 0xb11f4
													if (v73 == 2) {
														// 0xb11fc
														function_b0c10(g28 - 0x3060, g31 - 2, g33 + 1, g20, g36, g32 - 96, g35 - 16);
														// branch -> 0xb121c
													}
													// 0xb121c
													function_b0c10(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
													// branch -> 0xb123c
												}
											}
										}
									}
									// 0xb123c
									if (__asm_rlwinm_(v52, 0, 27, 27) != 0) {
										// 0xb1244
										if (__asm_rlwinm_(v52, 0, 25, 25) == 0) {
											// 0xb124c
											v74 = *(int32_t *)(g23 - 0x77ac);
											if (*(int32_t *)(g16 + 0x55ec * *(int32_t *)v74 + 460) != 0) {
												// Detected a possible infinite recursion (goto support failed); quitting...
											}
										}
										// Detected a possible infinite recursion (goto support failed); quitting...
									}
									// Detected a possible infinite recursion (goto support failed); quitting...
								} else {
									v32 = v31;
								}
							}
							// 0xb1108
							function_c9acc(*(int32_t *)(v32 + 24));
							// branch -> 0xb1178
							// 0xb1178
							v52 = v12;
							g29 = v52;
							if (__asm_rlwinm_(v52, 0, 26, 26) != 0) {
								// 0xb1184
								v44 = -1 - (int32_t)v17;
								if (v44 <= 3) {
									// 0xb119c
									v53 = g16 + 0x55ec * v44;
									v54 = g35 + *(int32_t *)(v53 + 100);
									v55 = g32 + *(int32_t *)(v53 + 96) - *(int32_t *)(v53 + 148);
									v71 = *(int32_t *)(v53 + 124);
									v72 = *(int32_t *)(v53 + 140);
									g13 = *(int32_t *)(v53 + 144);
									function_af440(v44, g31, g33 - 1, v55, v54, v71, v72, g36, 8);
									if (g17 != 0) {
										// 0xb11e8
										v73 = *(int32_t *)(g30 + 152);
										if (v73 != 0) {
											// 0xb11f4
											if (v73 == 2) {
												// 0xb11fc
												function_b0c10(g28 - 0x3060, g31 - 2, g33 + 1, g20, g36, g32 - 96, g35 - 16);
												// branch -> 0xb121c
											}
											// 0xb121c
											function_b0c10(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
											// branch -> 0xb123c
										}
									}
								}
							}
							// 0xb123c
							if (__asm_rlwinm_(v52, 0, 27, 27) != 0) {
								// 0xb1244
								if (__asm_rlwinm_(v52, 0, 25, 25) == 0) {
									// 0xb124c
									v74 = *(int32_t *)(g23 - 0x77ac);
									if (*(int32_t *)(g16 + 0x55ec * *(int32_t *)v74 + 460) != 0) {
										// Detected a possible infinite recursion (goto support failed); quitting...
									}
								}
								// Detected a possible infinite recursion (goto support failed); quitting...
							}
							// Detected a possible infinite recursion (goto support failed); quitting...
						}
						// 0xb1108
						function_c9acc(*(int32_t *)(v32 + 24));
						// branch -> 0xb1178
					}
					// 0xb1178
					v52 = v12;
					g29 = v52;
					if (__asm_rlwinm_(v52, 0, 26, 26) != 0) {
						// 0xb1184
						v44 = -1 - (int32_t)v17;
						if (v44 <= 3) {
							// 0xb119c
							v53 = g16 + 0x55ec * v44;
							v54 = g35 + *(int32_t *)(v53 + 100);
							v55 = g32 + *(int32_t *)(v53 + 96) - *(int32_t *)(v53 + 148);
							v71 = *(int32_t *)(v53 + 124);
							v72 = *(int32_t *)(v53 + 140);
							g13 = *(int32_t *)(v53 + 144);
							function_af440(v44, g31, g33 - 1, v55, v54, v71, v72, g36, 8);
							if (g17 != 0) {
								// 0xb11e8
								v73 = *(int32_t *)(g30 + 152);
								if (v73 != 0) {
									// 0xb11f4
									if (v73 == 2) {
										// 0xb11fc
										function_b0c10(g28 - 0x3060, g31 - 2, g33 + 1, g20, g36, g32 - 96, g35 - 16);
										// branch -> 0xb121c
									}
									// 0xb121c
									function_b0c10(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
									// branch -> 0xb123c
								}
							}
						}
					}
					// 0xb123c
					if (__asm_rlwinm_(v52, 0, 27, 27) != 0) {
						// 0xb1244
						if (__asm_rlwinm_(v52, 0, 25, 25) == 0) {
							// 0xb124c
							v74 = *(int32_t *)(g23 - 0x77ac);
							if (*(int32_t *)(g16 + 0x55ec * *(int32_t *)v74 + 460) != 0) {
								// Detected a possible infinite recursion (goto support failed); quitting...
							}
						}
						// Detected a possible infinite recursion (goto support failed); quitting...
					}
					// Detected a possible infinite recursion (goto support failed); quitting...
				}
			}
		}
		// 0xb1178
		v52 = v12;
		g29 = v52;
		if (__asm_rlwinm_(v52, 0, 26, 26) != 0) {
			// 0xb1184
			v44 = -1 - (int32_t)v17;
			if (v44 <= 3) {
				// 0xb119c
				v53 = g16 + 0x55ec * v44;
				v54 = g35 + *(int32_t *)(v53 + 100);
				v55 = g32 + *(int32_t *)(v53 + 96) - *(int32_t *)(v53 + 148);
				v71 = *(int32_t *)(v53 + 124);
				v72 = *(int32_t *)(v53 + 140);
				g13 = *(int32_t *)(v53 + 144);
				function_af440(v44, g31, g33 - 1, v55, v54, v71, v72, g36, 8);
				if (g17 != 0) {
					// 0xb11e8
					v73 = *(int32_t *)(g30 + 152);
					if (v73 != 0) {
						// 0xb11f4
						if (v73 == 2) {
							// 0xb11fc
							function_b0c10(g28 - 0x3060, g31 - 2, g33 + 1, g20, g36, g32 - 96, g35 - 16);
							// branch -> 0xb121c
						}
						// 0xb121c
						function_b0c10(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
						// branch -> 0xb123c
					}
				}
			}
		}
		// 0xb123c
		if (__asm_rlwinm_(v52, 0, 27, 27) != 0) {
			// 0xb1244
			if (__asm_rlwinm_(v52, 0, 25, 25) == 0) {
				// 0xb124c
				v74 = *(int32_t *)(g23 - 0x77ac);
				if (*(int32_t *)(g16 + 0x55ec * *(int32_t *)v74 + 460) != 0) {
					// Detected a possible infinite recursion (goto support failed); quitting...
				}
			}
			// Detected a possible infinite recursion (goto support failed); quitting...
		}
		// Detected a possible infinite recursion (goto support failed); quitting...
	}
	// 0xb0f64
	v61 = *(int32_t *)(v20 - 0x70cc);
	v62 = *(int32_t *)(v20 - 0x7290);
	if (*(int32_t *)v62 < (int32_t) * (char *)v61) {
		// 0xb0f80
		v38 = 0x1000000 * g26;
		v47 = v38 / 0x1000000;
		if ((v38 || 0xffffff) >= 0x1ffffff) {
			// 0xb0f88
			g30 = *(int32_t *)(v20 - 0x7614) + 80 * (v47 % 32) - 80;
			v39 = __asm_rlwinm(v47, 27, 29, 31);
			v21 = g30;
			v48 = v21 + 0x1000000 * v39 / 0x200000;
			g29 = v48;
			g34 = v48;
			g26 = g32 - *(int32_t *)(v21 + 72);
			v22 = function_c9b28();
			g27 = v22;
			if (v22 == 0) {
				// 0xb0fc8
				function_c9b70((int32_t *)g29);
				// branch -> 0xb1060
			} else {
				// 0xb0fd4
				v63 = *(int32_t *)(g30 + 64);
				g11 = v63;
				if (v63 >= 1) {
					// 0xb0fe0
					if (function_4d794(v22) <= 50) {
						// 0xb0ff0
						v40 = function_4d794(g27);
						v23 = g30;
						v64 = *(int32_t *)(v23 + 64);
						if (v64 <= v40) {
							// 0xb1010
							v65 = *(char *)(v23 + 76);
							g13 = v65;
							v66 = *(int32_t *)(v23 + 68);
							v24 = g26;
							v25 = g35;
							v26 = g29;
							v27 = g36;
							if (v65 == 0) {
								// 0xb103c
								Cl2DecodeFrm6(v24, v25, v26, v64, v66, v27, 8);
								// branch -> 0xb1058
							} else {
								// 0xb101c
								Cl2DecodeFrm5(v24, v25, v26, v64, v66, v27, 8);
								// branch -> 0xb1058
							}
							// 0xb1058
							function_c9b70((int32_t *)g29);
							// branch -> 0xb1060
							// 0xb1060
							if (v9 != 0) {
								// 0xb106c
								function_afa48(g31, g33, g32, g35, 1, g36, 8);
								// branch -> 0xb108c
							}
							// 0xb108c
							v28 = g21;
							v41 = 0x1000000 * v28;
							v49 = v41 / 0x1000000;
							if ((v41 || 0xffffff) >= 0x1ffffff) {
								// 0xb1094
								v42 = v49 - 1;
								g26 = v42;
								v50 = *(int32_t *)(g23 - 0x7690) + 368 * v42;
								g30 = v50;
								if (*(int32_t *)(v50 + 52) == 0) {
									// 0xb10b4
									if (v28 <= 127) {
										// 0xb10bc
										g34 = *(int32_t *)(v50 + 24);
										v29 = function_c9948();
										v18 = v29;
										v30 = g30;
										if (v29 == 0) {
											// 0xb10cc
											function_c9acc(*(int32_t *)(v30 + 24));
											// branch -> 0xb1178
										} else {
											// 0xb10d8
											v67 = *(int32_t *)(v30 + 32);
											g11 = v67;
											v32 = v30;
											if (v67 >= 1) {
												// 0xb10e4
												if (function_4d794(v29) > 50) {
													// 0xb10e4
													v32 = g30;
													// branch -> 0xb1108
												} else {
													// 0xb10f4
													v43 = function_4d794(v18);
													v31 = g30;
													v68 = *(int32_t *)(v31 + 32);
													g40 = v68;
													if (v68 <= v43) {
														// 0xb1114
														v51 = g32 - *(int32_t *)(v31 + 40);
														g27 = v51;
														v34 = v51;
														v35 = v31;
														if (g26 == (int32_t) * (char *)*(int32_t *)(g23 - 0x7748)) {
															// 0xb1130
															g37 = v51;
															g41 = *(int32_t *)(v31 + 36);
															v33 = g35;
															g38 = v33;
															g42 = g36;
															g13 = 8;
															CelDrawHdrClrHL(181, v51, v33, *(int32_t *)(v31 + 24), v68);
															v34 = g27;
															v35 = g30;
															// branch -> 0xb1150
														}
														// 0xb1150
														v69 = *(int32_t *)(v35 + 32);
														v70 = *(int32_t *)(v35 + 36);
														function_4e998(v34, g35, *(int32_t *)(v35 + 24), v69, v70, g36, 8);
														function_c9acc(*(int32_t *)(g30 + 24));
														// branch -> 0xb1178
														// 0xb1178
														v52 = v12;
														g29 = v52;
														if (__asm_rlwinm_(v52, 0, 26, 26) != 0) {
															// 0xb1184
															v44 = -1 - (int32_t)v17;
															if (v44 <= 3) {
																// 0xb119c
																v53 = g16 + 0x55ec * v44;
																v54 = g35 + *(int32_t *)(v53 + 100);
																v55 = g32 + *(int32_t *)(v53 + 96) - *(int32_t *)(v53 + 148);
																v71 = *(int32_t *)(v53 + 124);
																v72 = *(int32_t *)(v53 + 140);
																g13 = *(int32_t *)(v53 + 144);
																function_af440(v44, g31, g33 - 1, v55, v54, v71, v72, g36, 8);
																if (g17 != 0) {
																	// 0xb11e8
																	v73 = *(int32_t *)(g30 + 152);
																	if (v73 != 0) {
																		// 0xb11f4
																		if (v73 == 2) {
																			// 0xb11fc
																			function_b0c10(g28 - 0x3060, g31 - 2, g33 + 1, g20, g36, g32 - 96, g35 - 16);
																			// branch -> 0xb121c
																		}
																		// 0xb121c
																		function_b0c10(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
																		// branch -> 0xb123c
																	}
																}
															}
														}
														// 0xb123c
														if (__asm_rlwinm_(v52, 0, 27, 27) != 0) {
															// 0xb1244
															if (__asm_rlwinm_(v52, 0, 25, 25) == 0) {
																// 0xb124c
																v74 = *(int32_t *)(g23 - 0x77ac);
																if (*(int32_t *)(g16 + 0x55ec * *(int32_t *)v74 + 460) != 0) {
																	// Detected a possible infinite recursion (goto support failed); quitting...
																}
															}
															// Detected a possible infinite recursion (goto support failed); quitting...
														}
														// Detected a possible infinite recursion (goto support failed); quitting...
													} else {
														v32 = v31;
													}
												}
												// 0xb1108
												function_c9acc(*(int32_t *)(v32 + 24));
												// branch -> 0xb1178
												// Detected a possible infinite recursion (goto support failed); quitting...
											}
											// 0xb1108
											function_c9acc(*(int32_t *)(v32 + 24));
											// branch -> 0xb1178
										}
										// Detected a possible infinite recursion (goto support failed); quitting...
									}
								}
							}
							// Detected a possible infinite recursion (goto support failed); quitting...
						}
					}
				}
				// 0xb1004
				function_c9b70((int32_t *)g29);
				// branch -> 0xb1060
			}
			// 0xb1060
			if (v9 != 0) {
				// 0xb106c
				function_afa48(g31, g33, g32, g35, 1, g36, 8);
				// branch -> 0xb108c
			}
			// 0xb108c
			v28 = g21;
			v41 = 0x1000000 * v28;
			v49 = v41 / 0x1000000;
			if ((v41 || 0xffffff) >= 0x1ffffff) {
				// 0xb1094
				v42 = v49 - 1;
				g26 = v42;
				v50 = *(int32_t *)(g23 - 0x7690) + 368 * v42;
				g30 = v50;
				if (*(int32_t *)(v50 + 52) == 0) {
					// 0xb10b4
					if (v28 <= 127) {
						// 0xb10bc
						g34 = *(int32_t *)(v50 + 24);
						v29 = function_c9948();
						v18 = v29;
						v30 = g30;
						if (v29 == 0) {
							// 0xb10cc
							function_c9acc(*(int32_t *)(v30 + 24));
							// branch -> 0xb1178
						} else {
							// 0xb10d8
							v67 = *(int32_t *)(v30 + 32);
							g11 = v67;
							v32 = v30;
							if (v67 >= 1) {
								// 0xb10e4
								if (function_4d794(v29) > 50) {
									// 0xb10e4
									v32 = g30;
									// branch -> 0xb1108
								} else {
									// 0xb10f4
									v43 = function_4d794(v18);
									v31 = g30;
									v68 = *(int32_t *)(v31 + 32);
									g40 = v68;
									if (v68 <= v43) {
										// 0xb1114
										v51 = g32 - *(int32_t *)(v31 + 40);
										g27 = v51;
										v34 = v51;
										v35 = v31;
										if (g26 == (int32_t) * (char *)*(int32_t *)(g23 - 0x7748)) {
											// 0xb1130
											g37 = v51;
											g41 = *(int32_t *)(v31 + 36);
											v33 = g35;
											g38 = v33;
											g42 = g36;
											g13 = 8;
											CelDrawHdrClrHL(181, v51, v33, *(int32_t *)(v31 + 24), v68);
											v34 = g27;
											v35 = g30;
											// branch -> 0xb1150
										}
										// 0xb1150
										v69 = *(int32_t *)(v35 + 32);
										v70 = *(int32_t *)(v35 + 36);
										function_4e998(v34, g35, *(int32_t *)(v35 + 24), v69, v70, g36, 8);
										function_c9acc(*(int32_t *)(g30 + 24));
										// branch -> 0xb1178
										// Detected a possible infinite recursion (goto support failed); quitting...
									} else {
										v32 = v31;
									}
								}
								// 0xb1108
								function_c9acc(*(int32_t *)(v32 + 24));
								// branch -> 0xb1178
								// Detected a possible infinite recursion (goto support failed); quitting...
							}
							// 0xb1108
							function_c9acc(*(int32_t *)(v32 + 24));
							// branch -> 0xb1178
						}
						// Detected a possible infinite recursion (goto support failed); quitting...
					}
				}
			}
			// Detected a possible infinite recursion (goto support failed); quitting...
		}
		// 0xb1060
		if (v9 != 0) {
			// 0xb106c
			function_afa48(g31, g33, g32, g35, 1, g36, 8);
			// branch -> 0xb108c
		}
		// 0xb108c
		v28 = g21;
		v41 = 0x1000000 * v28;
		v49 = v41 / 0x1000000;
		if ((v41 || 0xffffff) >= 0x1ffffff) {
			// 0xb1094
			v42 = v49 - 1;
			g26 = v42;
			v50 = *(int32_t *)(g23 - 0x7690) + 368 * v42;
			g30 = v50;
			if (*(int32_t *)(v50 + 52) == 0) {
				// 0xb10b4
				if (v28 <= 127) {
					// 0xb10bc
					g34 = *(int32_t *)(v50 + 24);
					v29 = function_c9948();
					v18 = v29;
					v30 = g30;
					if (v29 == 0) {
						// 0xb10cc
						function_c9acc(*(int32_t *)(v30 + 24));
						// branch -> 0xb1178
					} else {
						// 0xb10d8
						v67 = *(int32_t *)(v30 + 32);
						g11 = v67;
						v32 = v30;
						if (v67 >= 1) {
							// 0xb10e4
							if (function_4d794(v29) > 50) {
								// 0xb10e4
								v32 = g30;
								// branch -> 0xb1108
							} else {
								// 0xb10f4
								v43 = function_4d794(v18);
								v31 = g30;
								v68 = *(int32_t *)(v31 + 32);
								g40 = v68;
								if (v68 <= v43) {
									// 0xb1114
									v51 = g32 - *(int32_t *)(v31 + 40);
									g27 = v51;
									v34 = v51;
									v35 = v31;
									if (g26 == (int32_t) * (char *)*(int32_t *)(g23 - 0x7748)) {
										// 0xb1130
										g37 = v51;
										g41 = *(int32_t *)(v31 + 36);
										v33 = g35;
										g38 = v33;
										g42 = g36;
										g13 = 8;
										CelDrawHdrClrHL(181, v51, v33, *(int32_t *)(v31 + 24), v68);
										v34 = g27;
										v35 = g30;
										// branch -> 0xb1150
									}
									// 0xb1150
									v69 = *(int32_t *)(v35 + 32);
									v70 = *(int32_t *)(v35 + 36);
									function_4e998(v34, g35, *(int32_t *)(v35 + 24), v69, v70, g36, 8);
									function_c9acc(*(int32_t *)(g30 + 24));
									// branch -> 0xb1178
									// Detected a possible infinite recursion (goto support failed); quitting...
								} else {
									v32 = v31;
								}
							}
							// 0xb1108
							function_c9acc(*(int32_t *)(v32 + 24));
							// branch -> 0xb1178
							// Detected a possible infinite recursion (goto support failed); quitting...
						}
						// 0xb1108
						function_c9acc(*(int32_t *)(v32 + 24));
						// branch -> 0xb1178
					}
					// Detected a possible infinite recursion (goto support failed); quitting...
				}
			}
		}
		// Detected a possible infinite recursion (goto support failed); quitting...
	}
	// 0xb108c
	v28 = g21;
	v41 = 0x1000000 * v28;
	if ((v41 || 0xffffff) >= 0x1ffffff) {
		// 0xb1094
		v42 = v41 / 0x1000000 - 1;
		g26 = v42;
		v50 = *(int32_t *)(g23 - 0x7690) + 368 * v42;
		g30 = v50;
		if (*(int32_t *)(v50 + 52) == 0) {
			// 0xb10b4
			if (v28 <= 127) {
				// 0xb10bc
				g34 = *(int32_t *)(v50 + 24);
				v29 = function_c9948();
				v30 = g30;
				if (v29 == 0) {
					// 0xb10cc
					function_c9acc(*(int32_t *)(v30 + 24));
					// branch -> 0xb1178
				} else {
					// 0xb10d8
					v67 = *(int32_t *)(v30 + 32);
					g11 = v67;
					v32 = v30;
					if (v67 >= 1) {
						// 0xb10e4
						if (function_4d794(v29) > 50) {
							// 0xb10e4
							v32 = g30;
							// branch -> 0xb1108
						} else {
							// 0xb10f4
							v43 = function_4d794(v29);
							v31 = g30;
							v68 = *(int32_t *)(v31 + 32);
							g40 = v68;
							if (v68 <= v43) {
								// 0xb1114
								v51 = g32 - *(int32_t *)(v31 + 40);
								g27 = v51;
								v34 = v51;
								v35 = v31;
								if (g26 == (int32_t) * (char *)*(int32_t *)(g23 - 0x7748)) {
									// 0xb1130
									g37 = v51;
									g41 = *(int32_t *)(v31 + 36);
									v33 = g35;
									g38 = v33;
									g42 = g36;
									g13 = 8;
									CelDrawHdrClrHL(181, v51, v33, *(int32_t *)(v31 + 24), v68);
									v34 = g27;
									v35 = g30;
									// branch -> 0xb1150
								}
								// 0xb1150
								v69 = *(int32_t *)(v35 + 32);
								v70 = *(int32_t *)(v35 + 36);
								function_4e998(v34, g35, *(int32_t *)(v35 + 24), v69, v70, g36, 8);
								function_c9acc(*(int32_t *)(g30 + 24));
								// branch -> 0xb1178
								// Detected a possible infinite recursion (goto support failed); quitting...
							} else {
								v32 = v31;
							}
						}
						// 0xb1108
						function_c9acc(*(int32_t *)(v32 + 24));
						// branch -> 0xb1178
						// Detected a possible infinite recursion (goto support failed); quitting...
					}
					// 0xb1108
					function_c9acc(*(int32_t *)(v32 + 24));
					// branch -> 0xb1178
				}
				// Detected a possible infinite recursion (goto support failed); quitting...
			}
			// Detected a possible infinite recursion (goto support failed); quitting...
		}
	}
	// Detected a possible infinite recursion (goto support failed); quitting...
}

// Address range: 0xb1720 - 0xb1bb0
int32_t scrollrt_draw_lower_2(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7)
{
	// 0xb1720
	g37 = a2;
	g34 = a1;
	int32_t v1 = g10; // 0xb1724
	g30 = *(int32_t *)(g23 - 0x7250);
	g28 = g34;
	g32 = *(int32_t *)(g23 - 0x6f50);
	g19 = *(int32_t *)(g23 - 0x6f48);
	g29 = g37;
	g25 = *(int32_t *)(g23 - 0x7698);
	g27 = a3;
	g17 = *(int32_t *)(g23 - 0x7804);
	g16 = a4;
	g22 = a5;
	g31 = a6;
	int32_t v2 = function_52378(); // 0xb1760
	g20 = 2 * (g31 + 1);
	g26 = *(int32_t *)*(int32_t *)(g23 - 0x7584) + 32 * v2;
	int32_t result;    // r3
	int32_t v3;        // 0xb18e4
	int32_t v4;        // 0xb18ec
	int32_t v5;        // 0xb18f8
	int32_t v6;        // 0xb1908
	int32_t v7;        // 0xb1914
	int32_t v8;        // 0xb191c
	int32_t v9;        // 0xb1a94
	int32_t v10;       // 0xb1aa0
	int32_t v11;       // 0xb1aa8
	int32_t v12;       // 0xb1ad0
	int32_t v13;       // 0xb1b5c
	int32_t v14;       // 0xb18dc
	int32_t v15;       // 0xb18ec
	int32_t v16;       // 0xb18f4
	int32_t v17;       // 0xb18f8
	int32_t v18;       // 0xb1914
	int32_t v19;       // 0xb191c
	int32_t v20;       // 0xb1b1c
	int32_t v21;       // 0xb1b74
	int32_t v22;       // 0xb1a98
	int32_t v23;       // 0xb1aac
	int32_t v24;       // 0xb1ac4
	uint32_t v25;      // 0xb1b48
	int32_t v26;       // 0xb1b7c
	int32_t v27;       // 0xb1a88
	int32_t result4;   // 0xb1ab8
	unsigned char v28; // 0xb1ab4
	unsigned char v29; // 0xb1ae4
	unsigned char v30; // 0xb1af4
	unsigned char v31; // 0xb1b04
	int32_t v32;       // 0xb1a9c
	int32_t result2;   // 0xb1b98
	int32_t v33;       // 0xb1b4c
	if (a7 == 0) {
		// 0xb1720
		v5 = g29;
		v4 = g28;
		v3 = g22;
		// branch -> 0xb18d8
	} else {
		uint32_t v34 = g29; // 0xb1788
		int32_t v35;        // 0xb18c4
		int32_t v36;        // 0xb18c8
		if (v34 >= 0) {
			// 0xb1790
			if (v34 <= 111) {
				uint32_t v37 = g28; // 0xb1798
				if (v37 >= 0) {
					// 0xb17a0
					if (v37 <= 111) {
						int32_t v38 = *(int32_t *)(g23 - 0x757c);                     // 0xb17a8
						int32_t v39 = 224 * v37 + 2 * v34;                            // 0xb17b8
						int32_t v40 = (int32_t) * (int16_t *)(*(int32_t *)v38 + v39); // 0xb17bc
						*(int32_t *)g19 = v40;
						int32_t v41 = g29 + 112 * v37;                                               // 0xb17cc
						unsigned char v42 = *(char *)(*(int32_t *)*(int32_t *)(g23 - 0x758c) + v41); // 0xb17d4
						*(int32_t *)*(int32_t *)(g23 - 0x7290) = (int32_t)v42;
						int32_t v43 = *(int32_t *)g19; // 0xb17e4
						if (v43 != 0) {
							// 0xb17f0
							g36 = g26;
							g33 = 0;
							int32_t v44 = g25 + 4 * g16;                                                 // 0xb1804
							unsigned char v45 = *(char *)(*(int32_t *)(g23 - 0x7230) + v43);             // 0xb180c
							unsigned char v46 = *(char *)(v41 + *(int32_t *)*(int32_t *)(g23 - 0x7588)); // 0xb1810
							unsigned char v47 = *(char *)(*(int32_t *)(g23 - 0x7268) + (int32_t)v46);    // 0xb1824
							*(int32_t *)*(int32_t *)(g23 - 0x7294) = (int32_t)(v47 & v45);
							g35 = g27 + *(int32_t *)v44 - 0x5fe0 + *(int32_t *)g17;
							int32_t v48 = g33; // 0xb1844
							// branch -> 0xb1870
							while (true) {
								uint32_t v49 = *(int32_t *)g30; // 0xb1870
								if (v48 >= (v49 / 2 || v49 & -0x80000000) - 1) {
									int32_t v50 = g20; // 0xb1884
									if (v50 <= 7) {
										int32_t v51 = g27;                                                    // 0xb189c
										int32_t v52 = *(int32_t *)g17 + *(int32_t *)v44 + v51 - 0x3000 * v50; // 0xb18a4
										g13 = 0;
										function_b0e1c(v52, g28, g29, g31, v50, v51, g16);
										// branch -> 0xb18c4
									}
									// 0xb18c4
									v35 = g28 + 1;
									g28 = v35;
									v36 = g29 - 1;
									g29 = v36;
									g27 += 64;
									g26 += 32;
									v5 = v36;
									v4 = v35;
									v3 = g22 - 1;
									// branch -> 0xb18d8
									// 0xb18d8
									v14 = g31 + 1;
									result = v14;
									g18 = g25 + 4 * g16;
									v15 = 224 * v4;
									g21 = v15;
									v16 = 112 * v4;
									g24 = v16;
									v17 = 2 * v5;
									g22 = v17;
									g25 = v3 - 1;
									v10 = v4;
									v9 = v5;
									if (v3 == 0) {
										// 0xb1a68
										if (a7 == 0 || v9 > 111) {
											// 0xb1b9c
											g10 = v1;
											return result;
										}
										// 0xb1a7c
										if (v10 < 112) {
											// 0xb1a88
											v27 = *(int32_t *)(g23 - 0x757c);
											v22 = 2 * v9 + 224 * v10;
											v32 = (int32_t) * (int16_t *)(*(int32_t *)v27 + v22);
											*(int32_t *)g19 = v32;
											v11 = g23;
											v23 = g29 + 112 * v10;
											v28 = *(char *)(*(int32_t *)*(int32_t *)(v11 - 0x758c) + v23);
											result4 = *(int32_t *)(v11 - 0x7290);
											result = result4;
											*(int32_t *)result4 = (int32_t)v28;
											v24 = *(int32_t *)g19;
											if (v24 != 0) {
												// 0xb1ad0
												v12 = g23;
												g36 = g26;
												g33 = 0;
												v29 = *(char *)(v23 + *(int32_t *)*(int32_t *)(v12 - 0x7588));
												v30 = *(char *)(*(int32_t *)(v12 - 0x7230) + v24);
												v31 = *(char *)(*(int32_t *)(v12 - 0x7268) + (int32_t)v29);
												g35 = *(int32_t *)g17 + g27 + *(int32_t *)g18 - 0x6000;
												*(int32_t *)*(int32_t *)(v12 - 0x7294) = (int32_t)(v31 & v30);
												v20 = g33;
												// branch -> 0xb1b48
												while (true) {
													// 0xb1b48
													v25 = *(int32_t *)g30;
													if (v20 < (v25 / 2 || v25 & -0x80000000) - 1) {
														goto lab_0xb1b1c_4;
													}
													// 0xb1b5c
													v13 = g20;
													if (v13 <= 7) {
														// 0xb1b64
														v21 = g27;
														v26 = *(int32_t *)g18 - 0x3000 * v13 + *(int32_t *)g17 + v21;
														g13 = 0;
														result2 = function_b0e1c(v26, g28, g29, g31, v13, v21, g16);
														// branch -> 0xb1b9c
														// 0xb1b9c
														g10 = v1;
														return result2;
													}
												}
											}
										}
										// 0xb1b9c
										g10 = v1;
										return result;
									}
									v8 = v16;
									v18 = v17;
									v7 = v15;
									v19 = v5;
									v6 = v4;
									while (true) {
										// 0xb1a58
										if (v6 <= 111) {
										lab_0xb1a60:
											// 0xb1a60
											if (v19 > -1) {
												// 0xb1900
												int32_t v53; // 0xb1a4c
												int32_t v54; // 0xb1a30
												int32_t v55; // 0xb1a34
												int32_t v56; // 0xb1a38
												int32_t v57; // 0xb1a3c
												int32_t v58; // 0xb1a40
												if (v19 <= 111) {
													// 0xb1908
													if (v6 >= 0) {
														int32_t v59 = *(int32_t *)*(int32_t *)(g23 - 0x757c); // 0xb1918
														result = v19 + v8;
														int32_t v60 = *(int32_t *)(g23 - 0x758c); // 0xb1924
														*(int32_t *)g19 = (int32_t) * (int16_t *)(v59 + v7 + v18);
														unsigned char v61 = *(char *)(result + *(int32_t *)v60); // 0xb1930
														*(int32_t *)*(int32_t *)(g23 - 0x7290) = (int32_t)v61;
														int32_t v62 = *(int32_t *)g19; // 0xb1940
														if (v62 != 0) {
															int32_t v63 = *(int32_t *)(g23 - 0x7588); // 0xb194c
															g33 = g26;
															g35 = 0;
															unsigned char v64 = *(char *)(result + *(int32_t *)v63);         // 0xb1960
															unsigned char v65 = *(char *)(*(int32_t *)(g23 - 0x7230) + v62); // 0xb1974
															g36 = *(int32_t *)g17 + g27 + *(int32_t *)g18 - 0x6000;
															unsigned char v66 = *(char *)(*(int32_t *)(g23 - 0x7268) + (int32_t)v64); // 0xb1984
															*(int32_t *)*(int32_t *)(g23 - 0x7294) = (int32_t)(v66 & v65);
															int32_t v67 = g35; // 0xb1998
															// branch -> 0xb19dc
															while (true) {
																uint32_t v68 = *(int32_t *)g30;            // 0xb19dc
																int32_t v69 = v68 / 2 | v68 & -0x80000000; // 0xb19e0
																result = v69;
																if (v67 < v69 - 1) {
																	// 0xb1998
																	if (g31 <= v67) {
																		uint16_t v70 = *(int16_t *)(g33 + 4); // 0xb19a0
																		*(int32_t *)g32 = (int32_t)v70;
																		if (v70 != 0) {
																			// 0xb19b0
																			function_d8e58(g36);
																			// branch -> 0xb19b8
																		}
																		uint16_t v71 = *(int16_t *)(g33 + 6); // 0xb19b8
																		*(int32_t *)g32 = (int32_t)v71;
																		if (v71 != 0) {
																			// 0xb19c8
																			function_d8e58(g36 + 32);
																			// branch -> 0xb19d0
																		}
																	}
																	// 0xb19d0
																	g33 += 4;
																	int32_t v72 = g35 + 1; // 0xb19d4
																	g35 = v72;
																	g36 -= 0x6000;
																	v67 = v72;
																	// branch -> 0xb19dc
																	continue;
																} else {
																	int32_t v73 = g20; // 0xb19f0
																	if (v73 <= 7) {
																		int32_t v74 = g27;                                                    // 0xb1a08
																		int32_t v75 = *(int32_t *)g18 - 0x6000 * v14 + *(int32_t *)g17 + v74; // 0xb1a1c
																		g13 = 1;
																		result = function_b0e1c(v75, g28, g29, g31, v73, v74, g16);
																		// branch -> 0xb1a30
																	}
																	// 0xb1a30
																	v54 = g21 + 224;
																	g21 = v54;
																	v55 = g24 + 112;
																	g24 = v55;
																	v56 = g28 + 1;
																	g28 = v56;
																	v57 = g22 - 2;
																	g22 = v57;
																	v58 = g29 - 1;
																	g29 = v58;
																	g27 += 64;
																	g26 += 32;
																	v53 = g25;
																	g25 = v53 - 1;
																	if (v53 == 0) {
																		v10 = v56;
																		v9 = v58;
																		// break (via goto) -> 0xb1a68
																		goto lab_0xb1a68;
																	}
																	v8 = v55;
																	v18 = v57;
																	v7 = v54;
																	v19 = v58;
																	v6 = v56;
																	// continue (via goto) -> 0xb1a58
																	goto lab_0xb1a58;
																}
															}
															int32_t v76 = a7; // r0
															int32_t result3;  // 0xb1bac
															if (a7 == 0 || v9 > 111) {
																// 0xb1b9c
																v76 = v1;
																g10 = v1;
																result3 = result;
																return result3;
															}
															// 0xb1a7c
															if (v10 < 112) {
																int32_t v77 = g23; // 0xb1a88
																v27 = *(int32_t *)(v77 - 0x757c);
																result = v27;
																int32_t v78 = 224 * v10;       // 0xb1a8c
																int32_t v79 = v78;             // r4
																int32_t v80 = *(int32_t *)v27; // 0xb1a90
																result = v80;
																v22 = 2 * v9 + v78;
																v76 = v22;
																int16_t v81 = *(int16_t *)(v80 + v22); // 0xb1a9c
																v32 = v81;
																result = v32;
																v76 = 112 * v10;
																int32_t v82 = g19; // 0xb1aa4
																*(int32_t *)v82 = v32;
																v11 = g23;
																int32_t v83 = *(int32_t *)(v11 - 0x758c); // 0xb1aa8
																result = v83;
																int32_t v84 = v76; // 0xb1aac
																int32_t v85 = g29; // 0xb1aac
																v23 = v85 + v84;
																v79 = v23;
																int32_t v86 = *(int32_t *)v83; // 0xb1ab0
																result = v86;
																v28 = *(char *)(v86 + v23);
																v76 = v28;
																result4 = *(int32_t *)(v11 - 0x7290);
																result = result4;
																int32_t v87 = v28; // 0xb1abc
																v76 = v87;
																*(int32_t *)result4 = v87;
																int32_t v88 = g19; // 0xb1ac4
																v24 = *(int32_t *)v88;
																v76 = v24;
																if (v24 != 0) {
																	// 0xb1ad0
																	v12 = g23;
																	int32_t v89 = *(int32_t *)(v12 - 0x7588); // 0xb1ad0
																	result = v89;
																	int32_t v90 = g26; // 0xb1ad4
																	g36 = v90;
																	g33 = 0;
																	int32_t v91 = *(int32_t *)v89; // 0xb1adc
																	int32_t v92 = g18;             // 0xb1ae0
																	int32_t v93 = *(int32_t *)v92; // 0xb1ae0
																	result = v93;
																	int32_t v94 = v79; // 0xb1ae4
																	v29 = *(char *)(v94 + v91);
																	v79 = v29;
																	int32_t v95 = g27;                        // 0xb1ae8
																	int32_t v96 = v95 + v93;                  // 0xb1ae8
																	int32_t v97 = *(int32_t *)(v12 - 0x7230); // 0xb1aec
																	result = v97;
																	int32_t v98 = v96 - 0x6000; // 0xb1af0
																	v30 = *(char *)(v97 + v24);
																	int32_t v99 = v29; // 0xb1af8
																	v76 = v99;
																	int32_t v100 = *(int32_t *)(v12 - 0x7268); // 0xb1afc
																	result = v100;
																	int32_t v101 = g17;              // 0xb1b00
																	int32_t v102 = *(int32_t *)v101; // 0xb1b00
																	v79 = v102;
																	v31 = *(char *)(v100 + v99);
																	v76 = v31;
																	int32_t v103 = *(int32_t *)(v12 - 0x7294); // 0xb1b08
																	result = v103;
																	g35 = v102 + v98;
																	int32_t v104 = v31 & v30; // 0xb1b10
																	v76 = v104;
																	*(int32_t *)v103 = v104;
																	int32_t v105 = g33;
																	v20 = v105;
																	// branch -> 0xb1b48
																	while (true) {
																		// 0xb1b48
																		v25 = *(int32_t *)g30;
																		v33 = v25 / 2 | v25 & -0x80000000;
																		result = v33;
																		if (v20 >= v33 - 1) {
																			// 0xb1b5c
																			v13 = g20;
																			if (v13 <= 7) {
																				// 0xb1b64
																				v21 = g27;
																				v26 = *(int32_t *)g18 - 0x3000 * v13 + *(int32_t *)g17 + v21;
																				g13 = 0;
																				result = function_b0e1c(v26, g28, g29, g31, v13, v21, g16);
																				// branch -> 0xb1b9c
																			}
																			// 0xb1b9c
																			g10 = v1;
																			return result;
																		}
																	lab_0xb1b1c_4:
																		// 0xb1b1c
																		if (g31 <= v20) {
																			uint16_t v106 = *(int16_t *)(g36 + 4); // 0xb1b24
																			*(int32_t *)g32 = (int32_t)v106;
																			if (v106 != 0) {
																				// 0xb1b34
																				function_d8e58(g35);
																				// branch -> 0xb1b3c
																			}
																		}
																		// 0xb1b3c
																		g35 -= 0x6000;
																		g36 += 4;
																		int32_t v107 = g33 + 1; // 0xb1b44
																		g33 = v107;
																		v20 = v107;
																		// branch -> 0xb1b48
																	}
																}
															}
															// 0xb1b9c
															v76 = v1;
															g10 = v1;
															result3 = result;
															return result3;
														}
													}
												}
												// 0xb1a30
												v54 = g21 + 224;
												g21 = v54;
												v55 = g24 + 112;
												g24 = v55;
												v56 = g28 + 1;
												g28 = v56;
												v57 = g22 - 2;
												g22 = v57;
												v58 = g29 - 1;
												g29 = v58;
												g27 += 64;
												g26 += 32;
												v53 = g25;
												g25 = v53 - 1;
												if (v53 == 0) {
													v10 = v56;
													v9 = v58;
													// break -> 0xb1a68
													break;
												}
												v8 = v55;
												v18 = v57;
												v7 = v54;
												v19 = v58;
												v6 = v56;
												// continue -> 0xb1a58
												continue;
											} else {
												v10 = v6;
												v9 = v19;
											}
										} else {
											v10 = v6;
											v9 = v19;
										}
									}
									// 0xb1a68
									if (a7 == 0 || v9 > 111) {
										// 0xb1b9c
										g10 = v1;
										return result;
									}
									// 0xb1a7c
									if (v10 < 112) {
										// 0xb1a88
										v27 = *(int32_t *)(g23 - 0x757c);
										v22 = 2 * v9 + 224 * v10;
										v32 = (int32_t) * (int16_t *)(*(int32_t *)v27 + v22);
										*(int32_t *)g19 = v32;
										v11 = g23;
										v23 = g29 + 112 * v10;
										v28 = *(char *)(*(int32_t *)*(int32_t *)(v11 - 0x758c) + v23);
										result4 = *(int32_t *)(v11 - 0x7290);
										result = result4;
										*(int32_t *)result4 = (int32_t)v28;
										v24 = *(int32_t *)g19;
										if (v24 != 0) {
											// 0xb1ad0
											v12 = g23;
											g36 = g26;
											g33 = 0;
											v29 = *(char *)(v23 + *(int32_t *)*(int32_t *)(v12 - 0x7588));
											v30 = *(char *)(*(int32_t *)(v12 - 0x7230) + v24);
											v31 = *(char *)(*(int32_t *)(v12 - 0x7268) + (int32_t)v29);
											g35 = *(int32_t *)g17 + g27 + *(int32_t *)g18 - 0x6000;
											*(int32_t *)*(int32_t *)(v12 - 0x7294) = (int32_t)(v31 & v30);
											v20 = g33;
											// branch -> 0xb1b48
											while (true) {
												// 0xb1b48
												v25 = *(int32_t *)g30;
												if (v20 < (v25 / 2 || v25 & -0x80000000) - 1) {
													goto lab_0xb1b1c_4;
												}
												// 0xb1b5c
												v13 = g20;
												if (v13 <= 7) {
													// 0xb1b64
													v21 = g27;
													v26 = *(int32_t *)g18 - 0x3000 * v13 + *(int32_t *)g17 + v21;
													g13 = 0;
													result2 = function_b0e1c(v26, g28, g29, g31, v13, v21, g16);
													// branch -> 0xb1b9c
													// 0xb1b9c
													g10 = v1;
													return result2;
												}
											}
										}
									}
									// 0xb1b9c
									g10 = v1;
									return result;
								}
								// 0xb1844
								if (g31 <= v48) {
									uint16_t v108 = *(int16_t *)(g36 + 6); // 0xb184c
									*(int32_t *)g32 = (int32_t)v108;
									if (v108 != 0) {
										// 0xb185c
										function_d8e58(g35);
										// branch -> 0xb1864
									}
								}
								// 0xb1864
								g35 -= 0x6000;
								g36 += 4;
								int32_t v109 = g33 + 1; // 0xb186c
								g33 = v109;
								v48 = v109;
								// branch -> 0xb1870
							}
						}
					}
				}
			}
		}
		// 0xb18c4
		v35 = g28 + 1;
		g28 = v35;
		v36 = g29 - 1;
		g29 = v36;
		g27 += 64;
		g26 += 32;
		v5 = v36;
		v4 = v35;
		v3 = g22 - 1;
		// branch -> 0xb18d8
	}
	// 0xb18d8
	v14 = g31 + 1;
	result = v14;
	g18 = g25 + 4 * g16;
	v15 = 224 * v4;
	g21 = v15;
	v16 = 112 * v4;
	g24 = v16;
	v17 = 2 * v5;
	g22 = v17;
	g25 = v3 - 1;
	v10 = v4;
	v9 = v5;
	if (v3 != 0) {
		v8 = v16;
		v18 = v17;
		v7 = v15;
		v19 = v5;
		v6 = v4;
	lab_0xb1a58:
		while (true) {
			// 0xb1a58
			if (v6 <= 111) {
				goto lab_0xb1a60;
			}
			v10 = v6;
			v9 = v19;
			// 0xb1a68
			if (a7 == 0 || v9 > 111) {
				// 0xb1b9c
				g10 = v1;
				return result;
			}
			// 0xb1a7c
			if (v10 < 112) {
				// 0xb1a88
				v27 = *(int32_t *)(g23 - 0x757c);
				v22 = 2 * v9 + 224 * v10;
				v32 = (int32_t) * (int16_t *)(*(int32_t *)v27 + v22);
				*(int32_t *)g19 = v32;
				v11 = g23;
				v23 = g29 + 112 * v10;
				v28 = *(char *)(*(int32_t *)*(int32_t *)(v11 - 0x758c) + v23);
				result4 = *(int32_t *)(v11 - 0x7290);
				result = result4;
				*(int32_t *)result4 = (int32_t)v28;
				v24 = *(int32_t *)g19;
				if (v24 != 0) {
					// 0xb1ad0
					v12 = g23;
					g36 = g26;
					g33 = 0;
					v29 = *(char *)(v23 + *(int32_t *)*(int32_t *)(v12 - 0x7588));
					v30 = *(char *)(*(int32_t *)(v12 - 0x7230) + v24);
					v31 = *(char *)(*(int32_t *)(v12 - 0x7268) + (int32_t)v29);
					g35 = *(int32_t *)g17 + g27 + *(int32_t *)g18 - 0x6000;
					*(int32_t *)*(int32_t *)(v12 - 0x7294) = (int32_t)(v31 & v30);
					v20 = g33;
					// branch -> 0xb1b48
					while (true) {
						// 0xb1b48
						v25 = *(int32_t *)g30;
						if (v20 < (v25 / 2 || v25 & -0x80000000) - 1) {
							goto lab_0xb1b1c_4;
						}
						// 0xb1b5c
						v13 = g20;
						if (v13 <= 7) {
							// 0xb1b64
							v21 = g27;
							v26 = *(int32_t *)g18 - 0x3000 * v13 + *(int32_t *)g17 + v21;
							g13 = 0;
							result2 = function_b0e1c(v26, g28, g29, g31, v13, v21, g16);
							// branch -> 0xb1b9c
							// 0xb1b9c
							g10 = v1;
							return result2;
						}
					}
				}
			}
			// 0xb1b9c
			g10 = v1;
			return result;
		}
	}
lab_0xb1a68:
	// 0xb1a68
	if (a7 == 0 || v9 > 111 || v10 >= 112) {
		// 0xb1b9c
		g10 = v1;
		return result;
	}
	// 0xb1a88
	v27 = *(int32_t *)(g23 - 0x757c);
	v22 = 2 * v9 + 224 * v10;
	v32 = (int32_t) * (int16_t *)(*(int32_t *)v27 + v22);
	*(int32_t *)g19 = v32;
	v11 = g23;
	v23 = g29 + 112 * v10;
	v28 = *(char *)(*(int32_t *)*(int32_t *)(v11 - 0x758c) + v23);
	result4 = *(int32_t *)(v11 - 0x7290);
	*(int32_t *)result4 = (int32_t)v28;
	v24 = *(int32_t *)g19;
	if (v24 != 0) {
		// 0xb1ad0
		v12 = g23;
		g36 = g26;
		g33 = 0;
		v29 = *(char *)(v23 + *(int32_t *)*(int32_t *)(v12 - 0x7588));
		v30 = *(char *)(*(int32_t *)(v12 - 0x7230) + v24);
		v31 = *(char *)(*(int32_t *)(v12 - 0x7268) + (int32_t)v29);
		g35 = *(int32_t *)g17 + g27 + *(int32_t *)g18 - 0x6000;
		*(int32_t *)*(int32_t *)(v12 - 0x7294) = (int32_t)(v31 & v30);
		v20 = g33;
		// branch -> 0xb1b48
		while (true) {
			// 0xb1b48
			v25 = *(int32_t *)g30;
			v33 = v25 / 2 | v25 & -0x80000000;
			result = v33;
			if (v20 < v33 - 1) {
				goto lab_0xb1b1c_4;
			}
			// 0xb1b5c
			v13 = g20;
			if (v13 > 7) {
				// 0xb1b9c
				g10 = v1;
				return result;
			}
			// 0xb1b64
			v21 = g27;
			v26 = *(int32_t *)g18 - 0x3000 * v13 + *(int32_t *)g17 + v21;
			g13 = 0;
			result2 = function_b0e1c(v26, g28, g29, g31, v13, v21, g16);
			// branch -> 0xb1b9c
			// 0xb1b9c
			g10 = v1;
			return result2;
		}
	}
	// 0xb1b9c
	g10 = v1;
	return result4;
}

// Address range: 0xb1bb0 - 0xb1d74
int32_t function_b1bb0(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7)
{
	// 0xb1bb0
	g29 = a1;
	g30 = a2;
	int32_t v1 = *(int32_t *)(g23 - 0x6f48); // 0xb1bc8
	g31 = a3;
	int32_t v2 = *(int32_t *)(g23 - 0x7588); // 0xb1bd8
	g32 = a4;
	g33 = a5;
	int32_t v3 = *(int32_t *)(g23 - 0x6f50); // r20
	int32_t v4 = *(int32_t *)(g23 - 0x6f4c); // r21
	g35 = a6;
	g36 = a7;
	int32_t v5 = *(int32_t *)(g23 - 0x758c);             // 0xb1c08
	int32_t v6 = *(int32_t *)*(int32_t *)(g23 - 0x757c); // 0xb1c10
	int32_t v7 = a3 + 112 * a2;                          // r11
	int16_t v8 = *(int16_t *)(v6 + 2 * a3 + 224 * a2);   // 0xb1c28
	*(int32_t *)v1 = (int32_t)v8;
	char v9 = *(char *)(v7 + *(int32_t *)v5); // 0xb1c38
	*(int32_t *)*(int32_t *)(g23 - 0x7290) = (int32_t)v9;
	char v10 = *(char *)(v7 + *(int32_t *)v2); // 0xb1c50
	g34 = g30;
	unsigned char v11 = *(char *)(*(int32_t *)(g23 - 0x7230) + *(int32_t *)v1); // 0xb1c58
	char v12 = *(char *)(*(int32_t *)(g23 - 0x7268) + (int32_t)v10);            // 0xb1c60
	g37 = g31;
	*(int32_t *)*(int32_t *)(g23 - 0x7294) = (int32_t)(v12 & v11);
	int32_t v13 = function_52378(); // 0xb1c70
	*(char *)v4 = 1;
	int32_t v14 = 32 * v13 + *(int32_t *)*(int32_t *)(g23 - 0x7584); // 0xb1c88
	int32_t v15 = v14;                                               // r18
	uint16_t v16 = *(int16_t *)v14;                                  // 0xb1c8c
	*(int32_t *)v3 = (int32_t)v16;
	if (v16 != 0) {
		// 0xb1c9c
		drawUpperScreen(a1);
		// branch -> 0xb1ca4
	}
	// 0xb1ca4
	*(char *)v4 = 2;
	uint16_t v17 = *(int16_t *)(v15 + 2); // 0xb1cac
	*(int32_t *)v3 = (int32_t)v17;
	if (v17 != 0) {
		// 0xb1cbc
		drawUpperScreen(a1 + 32);
		// branch -> 0xb1cc4
	}
	// 0xb1cc4
	v15 += 4;
	*(char *)v4 = 0;
	int32_t v18 = 1; // 0xb1cd8
	// branch -> 0xb1d1c
	while (true) {
		// 0xb1d1c
		v4 = v18;
		uint32_t v19 = *(int32_t *)*(int32_t *)(g23 - 0x7250); // 0xb1d1c
		if (v18 >= (v19 / 2 || v19 & -0x80000000) - 1) {
			// 0xb1d30
			g13 = 0;
			int32_t result = scrollrt_draw_dungeon(g29, g30, g31, g32, g33, g35, g36); // r3
			*(int32_t *)g28 = g19;
			*(int32_t *)g27 = g18;
			*(int32_t *)g26 = g17;
			return result;
		}
		// 0xb1cd8
		a1 -= 0x6000;
		if (g32 >= v18) {
			uint16_t v20 = *(int16_t *)v15; // 0xb1ce4
			*(int32_t *)v3 = (int32_t)v20;
			if (v20 != 0) {
				// 0xb1cf4
				drawUpperScreen(a1);
				// branch -> 0xb1cfc
			}
			uint16_t v21 = *(int16_t *)(v15 + 2); // 0xb1cfc
			*(int32_t *)v3 = (int32_t)v21;
			if (v21 != 0) {
				// 0xb1d0c
				drawUpperScreen(a1 + 32);
				// branch -> 0xb1d14
			}
			// 0xb1d14
			v15 += 4;
			v18 = v4 + 1;
			// branch -> 0xb1d1c
			continue;
		}
		// 0xb1d14
		v15 += 4;
		v18 = v4 + 1;
		// branch -> 0xb1d1c
	}
}

// Address range: 0xb1d74 - 0xb2678
int32_t scrollrt_draw_dungeon(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7)
{
	g31 = a2;
	int32_t v1 = g10; // 0xb1d7c
	g33 = a3;
	int32_t v2 = 112 * a2; // 0xb1d8c
	g20 = a4;
	int32_t v3 = 224 * a2; // 0xb1d9c
	int32_t v4 = 2 * a3;   // 0xb1da8
	g19 = v4 + v3;
	g17 = g13;
	g16 = *(int32_t *)(g23 - 0x77a8);
	int32_t v5 = a3 + v2;                                // 0xb1dc8
	int32_t v6 = *(int32_t *)*(int32_t *)(g23 - 0x7680); // 0xb1dd0
	g27 = v6;
	int32_t v7 = *(int32_t *)*(int32_t *)(g23 - 0x767c); // 0xb1dd4
	int32_t v8 = *(int32_t *)*(int32_t *)(g23 - 0x768c); // 0xb1df4
	g30 = v8;
	g28 = a1;
	unsigned char v9 = *(char *)(*(int32_t *)*(int32_t *)(g23 - 0x7684) + v5);  // 0xb1e04
	unsigned char v10 = *(char *)(*(int32_t *)*(int32_t *)(g23 - 0x7630) + v5); // 0xb1e0c
	g26 = v10;
	g36 = a5;
	g32 = a6;
	char v11 = *(char *)(*(int32_t *)*(int32_t *)(g23 - 0x7598) + v5); // 0xb1e20
	char v12 = *(char *)(*(int32_t *)*(int32_t *)(g23 - 0x779c) + v5); // 0xb1e24
	int32_t v13 = v12;                                                 // 0xb1e24
	g24 = v13;
	g35 = a7;
	g21 = (int32_t) * (char *)(v8 + v5);
	g22 = (int32_t) * (char *)(v6 + v5);
	char v14 = *(char *)(*(int32_t *)*(int32_t *)(g23 - 0x7588) + v5); // 0xb1e34
	g25 = *(int32_t *)(g23 - 0x6f54);
	uint16_t v15 = *(int16_t *)(g19 + v7);  // 0xb1e40
	int32_t v16 = v15;                      // 0xb1e40
	char v17 = *(char *)(v6 + v2 + a3 - 1); // 0xb1e4c
	g18 = (int32_t) * (int16_t *)(v7 + v3 + v4 - 2);
	int32_t v18;       // r25
	int32_t v19;       // 0xb1e84
	int32_t v20;       // 0xb1ee4
	int32_t v21;       // 0xb1efc
	int32_t v22;       // 0xb1f14
	int32_t v23;       // 0xb1f50
	int32_t v24;       // 0xb1f98
	int32_t v25;       // 0xb1f9c
	int32_t v26;       // 0xb1fa0
	int32_t v27;       // 0xb1fa4
	uint32_t v28;      // 0xb1fe4
	int32_t v29;       // 0xb2018
	int32_t v30;       // 0xb2024
	int32_t v31;       // 0xb2054
	int32_t v32;       // 0xb2060
	int32_t v33;       // 0xb2094
	int32_t v34;       // 0xb20ac
	int32_t v35;       // 0xb20b8
	uint32_t v36;      // 0xb21c0
	int32_t v37;       // 0xb2238
	int32_t v38;       // 0xb1ed8
	int32_t v39;       // 0xb1ef8
	int32_t v40;       // 0xb1f4c
	int32_t v41;       // 0xb1fe4
	int32_t v42;       // 0xb1ff4
	int32_t v43;       // 0xb2050
	int32_t v44;       // 0xb20e8
	int32_t v45;       // 0xb22e4
	int32_t v46;       // 0xb22f0
	int32_t v47;       // 0xb1ed8
	int32_t v48;       // 0xb1f08
	int32_t v49;       // 0xb1fe4
	int32_t v50;       // 0xb1ffc
	int32_t v51;       // 0xb2080
	int32_t v52;       // 0xb20d0
	int32_t v53;       // 0xb20fc
	int32_t v54;       // 0xb2114
	int32_t v55;       // 0xb2120
	uint32_t v56;      // 0xb21d4
	int32_t v57;       // 0xb21e8
	int32_t v58;       // 0xb2300
	int32_t v59;       // 0xb2318
	int32_t v60;       // 0xb2324
	int32_t v61;       // 0xb1ebc
	int32_t v62;       // 0xb1ec4
	uint32_t v63;      // 0xb1f2c
	uint32_t v64;      // 0xb1f50
	unsigned char v65; // 0xb1f68
	int32_t v66;       // 0xb1f94
	uint32_t v67;      // 0xb2030
	uint32_t v68;      // 0xb2054
	int32_t v69;       // 0xb2090
	int32_t v70;       // 0xb20b0
	int32_t v71;       // 0xb20b8
	int32_t v72;       // 0xb2128
	int32_t v73;       // 0xb212c
	int32_t v74;       // 0xb2140
	int32_t v75;       // 0xb21a4
	int32_t v76;       // 0xb21f8
	int32_t v77;       // 0xb2248
	int32_t v78;       // 0xb2334
	int32_t v79;       // 0xb2348
	int32_t v80;       // 0xb23b0
	if (*(int32_t *)*(int32_t *)(g23 - 0x7608) != 0) {
		// 0xb1e5c
		if (__asm_rlwinm_(v13, 0, 25, 25) != 0) {
			// 0xb1e64
			CelDecodeHdrOnly(g28, *(int32_t *)*(int32_t *)(g23 - 0x760c), 1, 64, 0, g36);
			// branch -> 0xb1e84
		}
		// 0xb1e84
		v19 = g23;
		v20 = v19;
		if (*(int32_t *)*(int32_t *)(v19 - 0x70e4) != 0) {
			// 0xb1e94
			if (v12 % 2 != 0) {
				// 0xb1e9c
				DrawMissile(g31, g33, g32, g35, 0, g36, 1);
				v20 = g23;
				// branch -> 0xb1ebc
			} else {
				v20 = v19;
			}
		}
		// 0xb1ebc
		v61 = *(int32_t *)(v20 - 0x70cc);
		v62 = *(int32_t *)(v20 - 0x7290);
		if (*(int32_t *)v62 < (int32_t) * (char *)v61) {
			// 0xb1ed8
			v38 = 0x1000000 * g26;
			v47 = v38 / 0x1000000;
			if ((v38 || 0xffffff) >= 0x1ffffff) {
				// 0xb1ee0
				g30 = *(int32_t *)(v20 - 0x7614) + 80 * (v47 % 32) - 80;
				v39 = __asm_rlwinm(v47, 27, 29, 31);
				v21 = g30;
				v48 = v21 + 0x1000000 * v39 / 0x200000;
				g29 = v48;
				g34 = v48;
				g26 = g32 - *(int32_t *)(v21 + 72);
				v22 = function_c9b28();
				g27 = v22;
				int32_t v81;   // 0xb243c
				int32_t v82;   // 0xb24f4
				uint32_t v83;  // 0xb2530
				int32_t v84;   // 0xb2564
				int32_t v85;   // 0xb2570
				int32_t v86;   // 0xb25a0
				int32_t v87;   // 0xb25c8
				int32_t v88;   // 0xb25e0
				int32_t v89;   // 0xb25f8
				int32_t v90;   // 0xb2604
				int32_t v91;   // 0xb2530
				int32_t v92;   // 0xb2540
				int32_t v93;   // 0xb259c
				uint32_t v94;  // 0xb23d8
				int32_t v95;   // 0xb23ec
				int32_t v96;   // 0xb2530
				int32_t v97;   // 0xb2548
				int32_t v98;   // 0xb25cc
				int32_t v99;   // 0xb23fc
				int32_t v100;  // 0xb244c
				int32_t v101;  // 0xb24f4
				int32_t v102;  // 0xb24fc
				uint32_t v103; // 0xb257c
				uint32_t v104; // 0xb25a0
				int32_t v105;  // 0xb25dc
				int32_t v106;  // 0xb25fc
				int32_t v107;  // 0xb2604
				if (v22 == 0) {
					// 0xb1f20
					function_c9b70((int32_t *)g29);
					// branch -> 0xb1fb8
				} else {
					// 0xb1f2c
					v63 = *(int32_t *)(g30 + 64);
					g11 = v63;
					if (v63 >= 1) {
						// 0xb1f38
						if (function_4d794(v22) <= 50) {
							// 0xb1f48
							v40 = function_4d794(g27);
							v23 = g30;
							v64 = *(int32_t *)(v23 + 64);
							if (v64 <= v40) {
								// 0xb1f68
								v65 = *(char *)(v23 + 76);
								g13 = v65;
								v66 = *(int32_t *)(v23 + 68);
								v24 = g26;
								v25 = g35;
								v26 = g29;
								v27 = g36;
								if (v65 == 0) {
									// 0xb1f94
									function_50650(v24, v25, v26, v64, v66, 0, v27);
									// branch -> 0xb1fb0
								} else {
									// 0xb1f74
									function_5053c(v24, v25, v26, v64, v66, 0, v27);
									// branch -> 0xb1fb0
								}
								// 0xb1fb0
								function_c9b70((int32_t *)g29);
								// branch -> 0xb1fb8
								// 0xb1fb8
								if (v9 != 0) {
									// 0xb1fc4
									DrawObject(g31, g33, g32, g35, 1, 0, g36);
									// branch -> 0xb1fe4
								}
								// 0xb1fe4
								v28 = g21;
								v41 = 0x1000000 * v28;
								v49 = v41 / 0x1000000;
								int32_t v108; // 0xb25ac
								if ((v41 || 0xffffff) >= 0x1ffffff) {
									// 0xb1fec
									v42 = v49 - 1;
									g26 = v42;
									v50 = *(int32_t *)(g23 - 0x7690) + 368 * v42;
									g30 = v50;
									if (*(int32_t *)(v50 + 52) == 0) {
										// 0xb200c
										if (v28 <= 127) {
											// 0xb2014
											g34 = *(int32_t *)(v50 + 24);
											v29 = function_c9948();
											v18 = v29;
											v30 = g30;
											if (v29 == 0) {
												// 0xb2024
												function_c9acc(*(int32_t *)(v30 + 24));
												// branch -> 0xb20d0
											} else {
												// 0xb2030
												v67 = *(int32_t *)(v30 + 32);
												g11 = v67;
												v32 = v30;
												if (v67 >= 1) {
													// 0xb203c
													int32_t v109;       // r3
													int32_t v110;       // 0xb2630
													int32_t result;     // 0xb2674
													int32_t v111;       // 0xb21e0
													int32_t v112;       // 0xb23e4
													int32_t v113;       // 0xb2544
													int32_t v114;       // 0xb25b0
													int32_t v115;       // 0xb2618
													int32_t v116;       // 0xb21b0
													int32_t v117;       // 0xb23bc
													int32_t v118;       // 0xb2504
													int32_t v119;       // 0xb2658
													int32_t v120;       // 0xb2330
													unsigned char v121; // 0xb263c
													if (function_4d794(v29) > 50) {
														// 0xb203c
														v32 = g30;
														// branch -> 0xb2060
													} else {
														// 0xb204c
														v43 = function_4d794(v18);
														v31 = g30;
														v68 = *(int32_t *)(v31 + 32);
														g40 = v68;
														if (v68 <= v43) {
															// 0xb206c
															v51 = g32 - *(int32_t *)(v31 + 40);
															g27 = v51;
															v34 = v51;
															v35 = v31;
															if (g26 == (int32_t) * (char *)*(int32_t *)(g23 - 0x7748)) {
																// 0xb2088
																g37 = v51;
																v69 = *(int32_t *)(v31 + 36);
																g41 = v69;
																v33 = g35;
																g38 = v33;
																g13 = g36;
																g42 = 0;
																CelDecodeClr(181, v51, v33, *(int32_t *)(v31 + 24), v68, v69, 0);
																v34 = g27;
																v35 = g30;
																// branch -> 0xb20a8
															}
															// 0xb20a8
															v70 = *(int32_t *)(v35 + 32);
															v71 = *(int32_t *)(v35 + 36);
															CelDecodeHdrLightOnly(v34, g35, *(int32_t *)(v35 + 24), v70, v71, 0, g36);
															v109 = function_c9acc(*(int32_t *)(g30 + 24));
															// branch -> 0xb20d0
															// 0xb20d0
															v52 = v12;
															g29 = v52;
															if (__asm_rlwinm_(v52, 0, 26, 26) != 0) {
																// 0xb20dc
																v44 = -1 - (int32_t)v17;
																v109 = v44;
																if (v44 <= 3) {
																	// 0xb20f4
																	v53 = g16 + 0x55ec * v44;
																	v54 = g35 + *(int32_t *)(v53 + 100);
																	v55 = g32 + *(int32_t *)(v53 + 96) - *(int32_t *)(v53 + 148);
																	v72 = *(int32_t *)(v53 + 124);
																	v73 = *(int32_t *)(v53 + 140);
																	g13 = *(int32_t *)(v53 + 144);
																	v109 = function_af18c(v44, g31, g33 - 1, v55, v54, v72, v73, 0, g36);
																	if (g17 != 0) {
																		// 0xb2140
																		v74 = *(int32_t *)(g30 + 152);
																		if (v74 != 0) {
																			// 0xb214c
																			if (v74 == 2) {
																				// 0xb2154
																				function_b1bb0(g28 - 0x3060, g31 - 2, g33 + 1, g20, g36, g32 - 96, g35 - 16);
																				// branch -> 0xb2174
																			}
																			// 0xb2174
																			v109 = function_b1bb0(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
																			// branch -> 0xb2194
																		}
																	}
																}
															}
															// 0xb2194
															if (__asm_rlwinm_(v52, 0, 27, 27) == 0) {
																// 0xb22bc
																if (__asm_rlwinm_(v52, 0, 29, 29) != 0) {
																	// 0xb22c4
																	v109 = function_af6d0(g31, g33, g32, g35, 0, g36, 0);
																	// branch -> 0xb22e4
																}
																// 0xb22e4
																v45 = 0x1000000 * g22;
																if (v45 >= 0 && (v45 || 0xffffff) >= 0x1ffffff) {
																	// 0xb22ec
																	v46 = v45 / 0x1000000 - 1;
																	v109 = v46;
																	if (v46 <= 3) {
																		// 0xb22fc
																		v58 = g16 + 0x55ec * v46;
																		v59 = g35 + *(int32_t *)(v58 + 100);
																		v60 = g32 + *(int32_t *)(v58 + 96) - *(int32_t *)(v58 + 148);
																		v120 = *(int32_t *)(v58 + 124);
																		v78 = *(int32_t *)(v58 + 140);
																		g13 = *(int32_t *)(v58 + 144);
																		v109 = function_af18c(v46, g31, g33, v60, v59, v120, v78, 0, g36);
																		if (g17 != 0) {
																			// 0xb2348
																			v79 = *(int32_t *)(g30 + 152);
																			if (v79 != 0) {
																				// 0xb2354
																				if (v79 == 2) {
																					// 0xb235c
																					function_b1bb0(g28 - 0x3060, g31 - 2, g33 + 1, g20, g36, g32 - 96, g35 - 16);
																					// branch -> 0xb237c
																				}
																				// 0xb237c
																				v109 = function_b1bb0(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
																				// branch -> 0xb239c
																			}
																		}
																	}
																}
																// 0xb239c
																if (v15 < 1) {
																	// 0xb24c0
																	if (v52 % 2 != 0) {
																		// 0xb24c8
																		v109 = DrawMissile(g31, g33, g32, g35, 0, g36, 0);
																		// branch -> 0xb24e8
																	}
																	// 0xb24e8
																	if (v9 != 0) {
																		// 0xb24f4
																		v82 = g23;
																		v118 = *(int32_t *)*(int32_t *)(v82 - 0x7290);
																		v109 = v118;
																		if (v118 < (int32_t) * (char *)*(int32_t *)(v82 - 0x70cc)) {
																			// 0xb2510
																			v109 = DrawObject(g31, g33, g32, g35, 0, 0, g36);
																			// branch -> 0xb2530
																		}
																	}
																	// 0xb2530
																	v83 = g21;
																	v91 = 0x1000000 * v83;
																	if ((v91 || 0xffffff) >= 0x1ffffff) {
																		// 0xb2538
																		v92 = v91 / 0x1000000 - 1;
																		g27 = v92;
																		v113 = 368 * v92;
																		v109 = v113;
																		v97 = *(int32_t *)(g23 - 0x7690) + v113;
																		g31 = v97;
																		if (*(int32_t *)(v97 + 52) != 0) {
																			// 0xb2558
																			if (v83 <= 127) {
																				// 0xb2560
																				g34 = *(int32_t *)(v97 + 24);
																				v84 = function_c9948();
																				g29 = v84;
																				v85 = g31;
																				if (v84 == 0) {
																					// 0xb2570
																					v109 = function_c9acc(*(int32_t *)(v85 + 24));
																					// branch -> 0xb261c
																				} else {
																					// 0xb257c
																					v103 = *(int32_t *)(v85 + 32);
																					g11 = v103;
																					if (v103 >= 1) {
																						// 0xb2588
																						if (function_4d794(v84) > 50) {
																							// 0xb2588
																							v108 = g31;
																							// branch -> 0xb25ac
																						} else {
																							// 0xb2598
																							v93 = function_4d794(g29);
																							v86 = g31;
																							v104 = *(int32_t *)(v86 + 32);
																							g40 = v104;
																							if (v104 <= v93) {
																								// 0xb25b8
																								v87 = g27;
																								v98 = g32 - *(int32_t *)(v86 + 40);
																								g27 = v98;
																								v89 = v98;
																								v90 = v86;
																								if (v87 == (int32_t) * (char *)*(int32_t *)(g23 - 0x7748)) {
																									// 0xb25d4
																									g37 = v98;
																									v105 = *(int32_t *)(v86 + 36);
																									g41 = v105;
																									v88 = g35;
																									g38 = v88;
																									g13 = g36;
																									g42 = 0;
																									CelDecodeClr(181, v98, v88, *(int32_t *)(v86 + 24), v104, v105, 0);
																									v89 = g27;
																									v90 = g31;
																									// branch -> 0xb25f4
																								}
																								// 0xb25f4
																								v106 = *(int32_t *)(v90 + 32);
																								v107 = *(int32_t *)(v90 + 36);
																								CelDecodeHdrLightOnly(v89, g35, *(int32_t *)(v90 + 24), v106, v107, 0, g36);
																								v115 = function_c9acc(*(int32_t *)(g31 + 24));
																								// branch -> 0xb261c
																								// 0xb261c
																								if (v11 == 0) {
																									// 0xb261c
																									result = v115;
																									// branch -> 0xb2664
																								} else {
																									// 0xb2628
																									v110 = g23;
																									g41 = g36;
																									v121 = *(char *)(*(int32_t *)(v110 - 0x7268) + (int32_t)v14);
																									*(int32_t *)*(int32_t *)(v110 - 0x7294) = (int32_t)v121;
																									v119 = *(int32_t *)*(int32_t *)(v110 - 0x7574);
																									result = CelDecodeHdrLightTrans(g28, v119, (int32_t)v11, 64, 0);
																									// branch -> 0xb2664
																								}
																								// 0xb2664
																								g10 = v1;
																								return result;
																							}
																							v108 = v86;
																						}
																						// 0xb25ac
																						v114 = function_c9acc(*(int32_t *)(v108 + 24));
																						// branch -> 0xb261c
																						// 0xb261c
																						if (v11 == 0) {
																							// 0xb261c
																							result = v114;
																							// branch -> 0xb2664
																						} else {
																							// 0xb2628
																							v110 = g23;
																							g41 = g36;
																							v121 = *(char *)(*(int32_t *)(v110 - 0x7268) + (int32_t)v14);
																							*(int32_t *)*(int32_t *)(v110 - 0x7294) = (int32_t)v121;
																							v119 = *(int32_t *)*(int32_t *)(v110 - 0x7574);
																							result = CelDecodeHdrLightTrans(g28, v119, (int32_t)v11, 64, 0);
																							// branch -> 0xb2664
																						}
																						// 0xb2664
																						g10 = v1;
																						return result;
																					}
																					// 0xb25ac
																					v109 = function_c9acc(*(int32_t *)(v85 + 24));
																					// branch -> 0xb261c
																				}
																				// 0xb261c
																				if (v11 == 0) {
																					// 0xb261c
																					result = v109;
																					// branch -> 0xb2664
																				} else {
																					// 0xb2628
																					v110 = g23;
																					g41 = g36;
																					v121 = *(char *)(*(int32_t *)(v110 - 0x7268) + (int32_t)v14);
																					*(int32_t *)*(int32_t *)(v110 - 0x7294) = (int32_t)v121;
																					v119 = *(int32_t *)*(int32_t *)(v110 - 0x7574);
																					result = CelDecodeHdrLightTrans(g28, v119, (int32_t)v11, 64, 0);
																					// branch -> 0xb2664
																				}
																				// 0xb2664
																				g10 = v1;
																				return result;
																			}
																		}
																	}
																	// 0xb261c
																	if (v11 == 0) {
																		// 0xb261c
																		result = v109;
																		// branch -> 0xb2664
																	} else {
																		// 0xb2628
																		v110 = g23;
																		g41 = g36;
																		v121 = *(char *)(*(int32_t *)(v110 - 0x7268) + (int32_t)v14);
																		*(int32_t *)*(int32_t *)(v110 - 0x7294) = (int32_t)v121;
																		v119 = *(int32_t *)*(int32_t *)(v110 - 0x7574);
																		result = CelDecodeHdrLightTrans(g28, v119, (int32_t)v11, 64, 0);
																		// branch -> 0xb2664
																	}
																	// 0xb2664
																	g10 = v1;
																	return result;
																}
																// 0xb23a8
																if (__asm_rlwinm_(v52, 0, 25, 25) == 0) {
																	// 0xb23b0
																	v117 = g16 + 0x55ec * *(int32_t *)*(int32_t *)(g23 - 0x77ac);
																	v109 = v117;
																	if (*(int32_t *)(v117 + 460) != 0) {
																		// 0xb23cc
																		v109 = v16;
																		*(int32_t *)g25 = v16 - 1;
																		v94 = *(int32_t *)g25;
																		if (v94 <= 199) {
																			// 0xb23e4
																			v112 = 232 * v94;
																			v109 = v112;
																			v95 = *(int32_t *)(g23 - 0x7754) + v112;
																			g30 = v95;
																			if (*(int32_t *)(v95 + 160) % 2 == 0) {
																				// 0xb23fc
																				v99 = *(int32_t *)(v95 + 224);
																				if (v99 != 0) {
																					// 0xb2408
																					g34 = v95 + 84;
																					g27 = g35 + *(int32_t *)(v95 + 60);
																					g26 = g32 + *(int32_t *)(v95 + 56) - *(int32_t *)(v99 + 496);
																					function_c9b28();
																					if (*(int32_t *)g25 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
																						// 0xb243c
																						v81 = g30;
																						v100 = *(int32_t *)(*(int32_t *)(v81 + 224) + 492);
																						g13 = g36;
																						function_50478(233, g26, g27, v81 + 84, *(int32_t *)(v81 + 104), v100, 0);
																						// branch -> 0xb2464
																					}
																					// 0xb2464
																					function_c9b70((int32_t *)(g30 + 84));
																					v109 = function_aedfc(g31, g33, g26, g27, *(int32_t *)g25, 0, g36);
																					if (g17 != 0) {
																						// 0xb2494
																						if (*(int32_t *)(g30 + 108) == 0) {
																							// 0xb24a0
																							v109 = function_b1bb0(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
																							// branch -> 0xb24c0
																						}
																					}
																				}
																			}
																		}
																	}
																} else {
																	// 0xb23cc
																	v109 = v16;
																	*(int32_t *)g25 = v16 - 1;
																	v94 = *(int32_t *)g25;
																	if (v94 <= 199) {
																		// 0xb23e4
																		v112 = 232 * v94;
																		v109 = v112;
																		v95 = *(int32_t *)(g23 - 0x7754) + v112;
																		g30 = v95;
																		if (*(int32_t *)(v95 + 160) % 2 == 0) {
																			// 0xb23fc
																			v99 = *(int32_t *)(v95 + 224);
																			if (v99 != 0) {
																				// 0xb2408
																				g34 = v95 + 84;
																				g27 = g35 + *(int32_t *)(v95 + 60);
																				g26 = g32 + *(int32_t *)(v95 + 56) - *(int32_t *)(v99 + 496);
																				function_c9b28();
																				if (*(int32_t *)g25 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
																					// 0xb243c
																					v81 = g30;
																					v100 = *(int32_t *)(*(int32_t *)(v81 + 224) + 492);
																					g13 = g36;
																					function_50478(233, g26, g27, v81 + 84, *(int32_t *)(v81 + 104), v100, 0);
																					// branch -> 0xb2464
																				}
																				// 0xb2464
																				function_c9b70((int32_t *)(g30 + 84));
																				v109 = function_aedfc(g31, g33, g26, g27, *(int32_t *)g25, 0, g36);
																				if (g17 != 0) {
																					// 0xb2494
																					if (*(int32_t *)(g30 + 108) == 0) {
																						// 0xb24a0
																						v109 = function_b1bb0(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
																						// branch -> 0xb24c0
																					}
																				}
																			}
																		}
																	}
																}
																// 0xb24c0
																if (v52 % 2 != 0) {
																	// 0xb24c8
																	v109 = DrawMissile(g31, g33, g32, g35, 0, g36, 0);
																	// branch -> 0xb24e8
																}
																// 0xb24e8
																if (v9 != 0) {
																	// 0xb24f4
																	v82 = g23;
																	v118 = *(int32_t *)*(int32_t *)(v82 - 0x7290);
																	v109 = v118;
																	if (v118 < (int32_t) * (char *)*(int32_t *)(v82 - 0x70cc)) {
																		// 0xb2510
																		v109 = DrawObject(g31, g33, g32, g35, 0, 0, g36);
																		// branch -> 0xb2530
																	}
																}
																// 0xb2530
																v83 = g21;
																v91 = 0x1000000 * v83;
																if ((v91 || 0xffffff) >= 0x1ffffff) {
																	// 0xb2538
																	v92 = v91 / 0x1000000 - 1;
																	g27 = v92;
																	v113 = 368 * v92;
																	v109 = v113;
																	v97 = *(int32_t *)(g23 - 0x7690) + v113;
																	g31 = v97;
																	if (*(int32_t *)(v97 + 52) != 0) {
																		// 0xb2558
																		if (v83 <= 127) {
																			// 0xb2560
																			g34 = *(int32_t *)(v97 + 24);
																			v84 = function_c9948();
																			g29 = v84;
																			v85 = g31;
																			if (v84 == 0) {
																				// 0xb2570
																				v109 = function_c9acc(*(int32_t *)(v85 + 24));
																				// branch -> 0xb261c
																			} else {
																				// 0xb257c
																				v103 = *(int32_t *)(v85 + 32);
																				g11 = v103;
																				if (v103 >= 1) {
																					// 0xb2588
																					if (function_4d794(v84) > 50) {
																						// 0xb2588
																						v108 = g31;
																						// branch -> 0xb25ac
																					} else {
																						// 0xb2598
																						v93 = function_4d794(g29);
																						v86 = g31;
																						v104 = *(int32_t *)(v86 + 32);
																						g40 = v104;
																						if (v104 <= v93) {
																							// 0xb25b8
																							v87 = g27;
																							v98 = g32 - *(int32_t *)(v86 + 40);
																							g27 = v98;
																							v89 = v98;
																							v90 = v86;
																							if (v87 == (int32_t) * (char *)*(int32_t *)(g23 - 0x7748)) {
																								// 0xb25d4
																								g37 = v98;
																								v105 = *(int32_t *)(v86 + 36);
																								g41 = v105;
																								v88 = g35;
																								g38 = v88;
																								g13 = g36;
																								g42 = 0;
																								CelDecodeClr(181, v98, v88, *(int32_t *)(v86 + 24), v104, v105, 0);
																								v89 = g27;
																								v90 = g31;
																								// branch -> 0xb25f4
																							}
																							// 0xb25f4
																							v106 = *(int32_t *)(v90 + 32);
																							v107 = *(int32_t *)(v90 + 36);
																							CelDecodeHdrLightOnly(v89, g35, *(int32_t *)(v90 + 24), v106, v107, 0, g36);
																							v115 = function_c9acc(*(int32_t *)(g31 + 24));
																							// branch -> 0xb261c
																							// 0xb261c
																							if (v11 == 0) {
																								// 0xb261c
																								result = v115;
																								// branch -> 0xb2664
																							} else {
																								// 0xb2628
																								v110 = g23;
																								g41 = g36;
																								v121 = *(char *)(*(int32_t *)(v110 - 0x7268) + (int32_t)v14);
																								*(int32_t *)*(int32_t *)(v110 - 0x7294) = (int32_t)v121;
																								v119 = *(int32_t *)*(int32_t *)(v110 - 0x7574);
																								result = CelDecodeHdrLightTrans(g28, v119, (int32_t)v11, 64, 0);
																								// branch -> 0xb2664
																							}
																							// 0xb2664
																							g10 = v1;
																							return result;
																						}
																						v108 = v86;
																					}
																					// 0xb25ac
																					v114 = function_c9acc(*(int32_t *)(v108 + 24));
																					// branch -> 0xb261c
																					// 0xb261c
																					if (v11 == 0) {
																						// 0xb261c
																						result = v114;
																						// branch -> 0xb2664
																					} else {
																						// 0xb2628
																						v110 = g23;
																						g41 = g36;
																						v121 = *(char *)(*(int32_t *)(v110 - 0x7268) + (int32_t)v14);
																						*(int32_t *)*(int32_t *)(v110 - 0x7294) = (int32_t)v121;
																						v119 = *(int32_t *)*(int32_t *)(v110 - 0x7574);
																						result = CelDecodeHdrLightTrans(g28, v119, (int32_t)v11, 64, 0);
																						// branch -> 0xb2664
																					}
																					// 0xb2664
																					g10 = v1;
																					return result;
																				}
																				// 0xb25ac
																				v109 = function_c9acc(*(int32_t *)(v85 + 24));
																				// branch -> 0xb261c
																			}
																			// 0xb261c
																			if (v11 == 0) {
																				// 0xb261c
																				result = v109;
																				// branch -> 0xb2664
																			} else {
																				// 0xb2628
																				v110 = g23;
																				g41 = g36;
																				v121 = *(char *)(*(int32_t *)(v110 - 0x7268) + (int32_t)v14);
																				*(int32_t *)*(int32_t *)(v110 - 0x7294) = (int32_t)v121;
																				v119 = *(int32_t *)*(int32_t *)(v110 - 0x7574);
																				result = CelDecodeHdrLightTrans(g28, v119, (int32_t)v11, 64, 0);
																				// branch -> 0xb2664
																			}
																			// 0xb2664
																			g10 = v1;
																			return result;
																		}
																	}
																}
																// 0xb261c
																if (v11 == 0) {
																	// 0xb261c
																	result = v109;
																	// branch -> 0xb2664
																} else {
																	// 0xb2628
																	v110 = g23;
																	g41 = g36;
																	v121 = *(char *)(*(int32_t *)(v110 - 0x7268) + (int32_t)v14);
																	*(int32_t *)*(int32_t *)(v110 - 0x7294) = (int32_t)v121;
																	v119 = *(int32_t *)*(int32_t *)(v110 - 0x7574);
																	result = CelDecodeHdrLightTrans(g28, v119, (int32_t)v11, 64, 0);
																	// branch -> 0xb2664
																}
																// 0xb2664
																g10 = v1;
																return result;
															}
															// 0xb219c
															if (__asm_rlwinm_(v52, 0, 25, 25) == 0) {
																// 0xb21a4
																v116 = g16 + 0x55ec * *(int32_t *)*(int32_t *)(g23 - 0x77ac);
																v109 = v116;
																if (*(int32_t *)(v116 + 460) != 0) {
																	// 0xb21c0
																	v36 = g18;
																	if (v36 <= 0xffffffff) {
																		// 0xb21c8
																		*(int32_t *)g25 = -1 - v36;
																		v56 = *(int32_t *)g25;
																		if (v56 <= 199) {
																			// 0xb21e0
																			v111 = 232 * v56;
																			v109 = v111;
																			v57 = *(int32_t *)(g23 - 0x7754) + v111;
																			g30 = v57;
																			if (*(int32_t *)(v57 + 160) % 2 == 0) {
																				// 0xb21f8
																				v76 = *(int32_t *)(v57 + 224);
																				if (v76 != 0) {
																					// 0xb2204
																					g34 = v57 + 84;
																					g27 = g35 + *(int32_t *)(v57 + 60);
																					g26 = g32 + *(int32_t *)(v57 + 56) - *(int32_t *)(v76 + 496);
																					function_c9b28();
																					if (*(int32_t *)g25 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
																						// 0xb2238
																						v37 = g30;
																						v77 = *(int32_t *)(*(int32_t *)(v37 + 224) + 492);
																						g13 = g36;
																						function_50478(233, g26, g27, v37 + 84, *(int32_t *)(v37 + 104), v77, 0);
																						// branch -> 0xb2260
																					}
																					// 0xb2260
																					function_c9b70((int32_t *)(g30 + 84));
																					v109 = function_aedfc(g31, g33, g26, g27, *(int32_t *)g25, 0, g36);
																					if (g17 != 0) {
																						// 0xb2290
																						if (*(int32_t *)(g30 + 108) == 0) {
																							// 0xb229c
																							v109 = function_b1bb0(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
																							// branch -> 0xb22bc
																						}
																					}
																				}
																			}
																		}
																	}
																}
															} else {
																// 0xb21c0
																v36 = g18;
																if (v36 <= 0xffffffff) {
																	// 0xb21c8
																	*(int32_t *)g25 = -1 - v36;
																	v56 = *(int32_t *)g25;
																	if (v56 <= 199) {
																		// 0xb21e0
																		v111 = 232 * v56;
																		v109 = v111;
																		v57 = *(int32_t *)(g23 - 0x7754) + v111;
																		g30 = v57;
																		if (*(int32_t *)(v57 + 160) % 2 == 0) {
																			// 0xb21f8
																			v76 = *(int32_t *)(v57 + 224);
																			if (v76 != 0) {
																				// 0xb2204
																				g34 = v57 + 84;
																				g27 = g35 + *(int32_t *)(v57 + 60);
																				g26 = g32 + *(int32_t *)(v57 + 56) - *(int32_t *)(v76 + 496);
																				function_c9b28();
																				if (*(int32_t *)g25 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
																					// 0xb2238
																					v37 = g30;
																					v77 = *(int32_t *)(*(int32_t *)(v37 + 224) + 492);
																					g13 = g36;
																					function_50478(233, g26, g27, v37 + 84, *(int32_t *)(v37 + 104), v77, 0);
																					// branch -> 0xb2260
																				}
																				// 0xb2260
																				function_c9b70((int32_t *)(g30 + 84));
																				v109 = function_aedfc(g31, g33, g26, g27, *(int32_t *)g25, 0, g36);
																				if (g17 != 0) {
																					// 0xb2290
																					if (*(int32_t *)(g30 + 108) == 0) {
																						// 0xb229c
																						v109 = function_b1bb0(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
																						// branch -> 0xb22bc
																					}
																				}
																			}
																		}
																	}
																}
															}
															// 0xb22bc
															if (__asm_rlwinm_(v52, 0, 29, 29) != 0) {
																// 0xb22c4
																v109 = function_af6d0(g31, g33, g32, g35, 0, g36, 0);
																// branch -> 0xb22e4
															}
															// 0xb22e4
															v45 = 0x1000000 * g22;
															if (v45 >= 0 && (v45 || 0xffffff) >= 0x1ffffff) {
																// 0xb22ec
																v46 = v45 / 0x1000000 - 1;
																v109 = v46;
																if (v46 <= 3) {
																	// 0xb22fc
																	v58 = g16 + 0x55ec * v46;
																	v59 = g35 + *(int32_t *)(v58 + 100);
																	v60 = g32 + *(int32_t *)(v58 + 96) - *(int32_t *)(v58 + 148);
																	v120 = *(int32_t *)(v58 + 124);
																	v78 = *(int32_t *)(v58 + 140);
																	g13 = *(int32_t *)(v58 + 144);
																	v109 = function_af18c(v46, g31, g33, v60, v59, v120, v78, 0, g36);
																	if (g17 != 0) {
																		// 0xb2348
																		v79 = *(int32_t *)(g30 + 152);
																		if (v79 != 0) {
																			// 0xb2354
																			if (v79 == 2) {
																				// 0xb235c
																				function_b1bb0(g28 - 0x3060, g31 - 2, g33 + 1, g20, g36, g32 - 96, g35 - 16);
																				// branch -> 0xb237c
																			}
																			// 0xb237c
																			v109 = function_b1bb0(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
																			// branch -> 0xb239c
																		}
																	}
																}
															}
															// 0xb239c
															if (v15 < 1) {
																// 0xb24c0
																if (v52 % 2 != 0) {
																	// 0xb24c8
																	v109 = DrawMissile(g31, g33, g32, g35, 0, g36, 0);
																	// branch -> 0xb24e8
																}
																// 0xb24e8
																if (v9 != 0) {
																	// 0xb24f4
																	v82 = g23;
																	v118 = *(int32_t *)*(int32_t *)(v82 - 0x7290);
																	v109 = v118;
																	if (v118 < (int32_t) * (char *)*(int32_t *)(v82 - 0x70cc)) {
																		// 0xb2510
																		v109 = DrawObject(g31, g33, g32, g35, 0, 0, g36);
																		// branch -> 0xb2530
																	}
																}
																// 0xb2530
																v83 = g21;
																v91 = 0x1000000 * v83;
																if ((v91 || 0xffffff) >= 0x1ffffff) {
																	// 0xb2538
																	v92 = v91 / 0x1000000 - 1;
																	g27 = v92;
																	v113 = 368 * v92;
																	v109 = v113;
																	v97 = *(int32_t *)(g23 - 0x7690) + v113;
																	g31 = v97;
																	if (*(int32_t *)(v97 + 52) != 0) {
																		// 0xb2558
																		if (v83 <= 127) {
																			// 0xb2560
																			g34 = *(int32_t *)(v97 + 24);
																			v84 = function_c9948();
																			g29 = v84;
																			v85 = g31;
																			if (v84 == 0) {
																				// 0xb2570
																				v109 = function_c9acc(*(int32_t *)(v85 + 24));
																				// branch -> 0xb261c
																			} else {
																				// 0xb257c
																				v103 = *(int32_t *)(v85 + 32);
																				g11 = v103;
																				if (v103 >= 1) {
																					// 0xb2588
																					if (function_4d794(v84) > 50) {
																						// 0xb2588
																						v108 = g31;
																						// branch -> 0xb25ac
																					} else {
																						// 0xb2598
																						v93 = function_4d794(g29);
																						v86 = g31;
																						v104 = *(int32_t *)(v86 + 32);
																						g40 = v104;
																						if (v104 <= v93) {
																							// 0xb25b8
																							v87 = g27;
																							v98 = g32 - *(int32_t *)(v86 + 40);
																							g27 = v98;
																							v89 = v98;
																							v90 = v86;
																							if (v87 == (int32_t) * (char *)*(int32_t *)(g23 - 0x7748)) {
																								// 0xb25d4
																								g37 = v98;
																								v105 = *(int32_t *)(v86 + 36);
																								g41 = v105;
																								v88 = g35;
																								g38 = v88;
																								g13 = g36;
																								g42 = 0;
																								CelDecodeClr(181, v98, v88, *(int32_t *)(v86 + 24), v104, v105, 0);
																								v89 = g27;
																								v90 = g31;
																								// branch -> 0xb25f4
																							}
																							// 0xb25f4
																							v106 = *(int32_t *)(v90 + 32);
																							v107 = *(int32_t *)(v90 + 36);
																							CelDecodeHdrLightOnly(v89, g35, *(int32_t *)(v90 + 24), v106, v107, 0, g36);
																							v115 = function_c9acc(*(int32_t *)(g31 + 24));
																							// branch -> 0xb261c
																							// 0xb261c
																							if (v11 == 0) {
																								// 0xb261c
																								result = v115;
																								// branch -> 0xb2664
																							} else {
																								// 0xb2628
																								v110 = g23;
																								g41 = g36;
																								v121 = *(char *)(*(int32_t *)(v110 - 0x7268) + (int32_t)v14);
																								*(int32_t *)*(int32_t *)(v110 - 0x7294) = (int32_t)v121;
																								v119 = *(int32_t *)*(int32_t *)(v110 - 0x7574);
																								result = CelDecodeHdrLightTrans(g28, v119, (int32_t)v11, 64, 0);
																								// branch -> 0xb2664
																							}
																							// 0xb2664
																							g10 = v1;
																							return result;
																						}
																						v108 = v86;
																					}
																					// 0xb25ac
																					v114 = function_c9acc(*(int32_t *)(v108 + 24));
																					// branch -> 0xb261c
																					// 0xb261c
																					if (v11 == 0) {
																						// 0xb261c
																						result = v114;
																						// branch -> 0xb2664
																					} else {
																						// 0xb2628
																						v110 = g23;
																						g41 = g36;
																						v121 = *(char *)(*(int32_t *)(v110 - 0x7268) + (int32_t)v14);
																						*(int32_t *)*(int32_t *)(v110 - 0x7294) = (int32_t)v121;
																						v119 = *(int32_t *)*(int32_t *)(v110 - 0x7574);
																						result = CelDecodeHdrLightTrans(g28, v119, (int32_t)v11, 64, 0);
																						// branch -> 0xb2664
																					}
																					// 0xb2664
																					g10 = v1;
																					return result;
																				}
																				// 0xb25ac
																				v109 = function_c9acc(*(int32_t *)(v85 + 24));
																				// branch -> 0xb261c
																			}
																			// 0xb261c
																			if (v11 == 0) {
																				// 0xb261c
																				result = v109;
																				// branch -> 0xb2664
																			} else {
																				// 0xb2628
																				v110 = g23;
																				g41 = g36;
																				v121 = *(char *)(*(int32_t *)(v110 - 0x7268) + (int32_t)v14);
																				*(int32_t *)*(int32_t *)(v110 - 0x7294) = (int32_t)v121;
																				v119 = *(int32_t *)*(int32_t *)(v110 - 0x7574);
																				result = CelDecodeHdrLightTrans(g28, v119, (int32_t)v11, 64, 0);
																				// branch -> 0xb2664
																			}
																			// 0xb2664
																			g10 = v1;
																			return result;
																		}
																	}
																}
																// 0xb261c
																if (v11 == 0) {
																	// 0xb261c
																	result = v109;
																	// branch -> 0xb2664
																} else {
																	// 0xb2628
																	v110 = g23;
																	g41 = g36;
																	v121 = *(char *)(*(int32_t *)(v110 - 0x7268) + (int32_t)v14);
																	*(int32_t *)*(int32_t *)(v110 - 0x7294) = (int32_t)v121;
																	v119 = *(int32_t *)*(int32_t *)(v110 - 0x7574);
																	result = CelDecodeHdrLightTrans(g28, v119, (int32_t)v11, 64, 0);
																	// branch -> 0xb2664
																}
																// 0xb2664
																g10 = v1;
																return result;
															}
															// 0xb23a8
															if (__asm_rlwinm_(v52, 0, 25, 25) == 0) {
																// 0xb23b0
																v117 = g16 + 0x55ec * *(int32_t *)*(int32_t *)(g23 - 0x77ac);
																v109 = v117;
																if (*(int32_t *)(v117 + 460) != 0) {
																	// 0xb23cc
																	v109 = v16;
																	*(int32_t *)g25 = v16 - 1;
																	v94 = *(int32_t *)g25;
																	if (v94 <= 199) {
																		// 0xb23e4
																		v112 = 232 * v94;
																		v109 = v112;
																		v95 = *(int32_t *)(g23 - 0x7754) + v112;
																		g30 = v95;
																		if (*(int32_t *)(v95 + 160) % 2 == 0) {
																			// 0xb23fc
																			v99 = *(int32_t *)(v95 + 224);
																			if (v99 != 0) {
																				// 0xb2408
																				g34 = v95 + 84;
																				g27 = g35 + *(int32_t *)(v95 + 60);
																				g26 = g32 + *(int32_t *)(v95 + 56) - *(int32_t *)(v99 + 496);
																				function_c9b28();
																				if (*(int32_t *)g25 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
																					// 0xb243c
																					v81 = g30;
																					v100 = *(int32_t *)(*(int32_t *)(v81 + 224) + 492);
																					g13 = g36;
																					function_50478(233, g26, g27, v81 + 84, *(int32_t *)(v81 + 104), v100, 0);
																					// branch -> 0xb2464
																				}
																				// 0xb2464
																				function_c9b70((int32_t *)(g30 + 84));
																				v109 = function_aedfc(g31, g33, g26, g27, *(int32_t *)g25, 0, g36);
																				if (g17 != 0) {
																					// 0xb2494
																					if (*(int32_t *)(g30 + 108) == 0) {
																						// 0xb24a0
																						v109 = function_b1bb0(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
																						// branch -> 0xb24c0
																					}
																				}
																			}
																		}
																	}
																}
															} else {
																// 0xb23cc
																v109 = v16;
																*(int32_t *)g25 = v16 - 1;
																v94 = *(int32_t *)g25;
																if (v94 <= 199) {
																	// 0xb23e4
																	v112 = 232 * v94;
																	v109 = v112;
																	v95 = *(int32_t *)(g23 - 0x7754) + v112;
																	g30 = v95;
																	if (*(int32_t *)(v95 + 160) % 2 == 0) {
																		// 0xb23fc
																		v99 = *(int32_t *)(v95 + 224);
																		if (v99 != 0) {
																			// 0xb2408
																			g34 = v95 + 84;
																			g27 = g35 + *(int32_t *)(v95 + 60);
																			g26 = g32 + *(int32_t *)(v95 + 56) - *(int32_t *)(v99 + 496);
																			function_c9b28();
																			if (*(int32_t *)g25 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
																				// 0xb243c
																				v81 = g30;
																				v100 = *(int32_t *)(*(int32_t *)(v81 + 224) + 492);
																				g13 = g36;
																				function_50478(233, g26, g27, v81 + 84, *(int32_t *)(v81 + 104), v100, 0);
																				// branch -> 0xb2464
																			}
																			// 0xb2464
																			function_c9b70((int32_t *)(g30 + 84));
																			v109 = function_aedfc(g31, g33, g26, g27, *(int32_t *)g25, 0, g36);
																			if (g17 != 0) {
																				// 0xb2494
																				if (*(int32_t *)(g30 + 108) == 0) {
																					// 0xb24a0
																					v109 = function_b1bb0(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
																					// branch -> 0xb24c0
																				}
																			}
																		}
																	}
																}
															}
															// 0xb24c0
															if (v52 % 2 != 0) {
																// 0xb24c8
																v109 = DrawMissile(g31, g33, g32, g35, 0, g36, 0);
																// branch -> 0xb24e8
															}
															// 0xb24e8
															if (v9 != 0) {
																// 0xb24f4
																v82 = g23;
																v118 = *(int32_t *)*(int32_t *)(v82 - 0x7290);
																v109 = v118;
																if (v118 < (int32_t) * (char *)*(int32_t *)(v82 - 0x70cc)) {
																	// 0xb2510
																	v109 = DrawObject(g31, g33, g32, g35, 0, 0, g36);
																	// branch -> 0xb2530
																}
															}
															// 0xb2530
															v83 = g21;
															v91 = 0x1000000 * v83;
															if ((v91 || 0xffffff) >= 0x1ffffff) {
																// 0xb2538
																v92 = v91 / 0x1000000 - 1;
																g27 = v92;
																v113 = 368 * v92;
																v109 = v113;
																v97 = *(int32_t *)(g23 - 0x7690) + v113;
																g31 = v97;
																if (*(int32_t *)(v97 + 52) != 0) {
																	// 0xb2558
																	if (v83 <= 127) {
																		// 0xb2560
																		g34 = *(int32_t *)(v97 + 24);
																		v84 = function_c9948();
																		g29 = v84;
																		v85 = g31;
																		if (v84 == 0) {
																			// 0xb2570
																			v109 = function_c9acc(*(int32_t *)(v85 + 24));
																			// branch -> 0xb261c
																		} else {
																			// 0xb257c
																			v103 = *(int32_t *)(v85 + 32);
																			g11 = v103;
																			if (v103 >= 1) {
																				// 0xb2588
																				if (function_4d794(v84) > 50) {
																					// 0xb2588
																					v108 = g31;
																					// branch -> 0xb25ac
																				} else {
																					// 0xb2598
																					v93 = function_4d794(g29);
																					v86 = g31;
																					v104 = *(int32_t *)(v86 + 32);
																					g40 = v104;
																					if (v104 <= v93) {
																						// 0xb25b8
																						v87 = g27;
																						v98 = g32 - *(int32_t *)(v86 + 40);
																						g27 = v98;
																						v89 = v98;
																						v90 = v86;
																						if (v87 == (int32_t) * (char *)*(int32_t *)(g23 - 0x7748)) {
																							// 0xb25d4
																							g37 = v98;
																							v105 = *(int32_t *)(v86 + 36);
																							g41 = v105;
																							v88 = g35;
																							g38 = v88;
																							g13 = g36;
																							g42 = 0;
																							CelDecodeClr(181, v98, v88, *(int32_t *)(v86 + 24), v104, v105, 0);
																							v89 = g27;
																							v90 = g31;
																							// branch -> 0xb25f4
																						}
																						// 0xb25f4
																						v106 = *(int32_t *)(v90 + 32);
																						v107 = *(int32_t *)(v90 + 36);
																						CelDecodeHdrLightOnly(v89, g35, *(int32_t *)(v90 + 24), v106, v107, 0, g36);
																						v115 = function_c9acc(*(int32_t *)(g31 + 24));
																						// branch -> 0xb261c
																						// 0xb261c
																						if (v11 == 0) {
																							// 0xb261c
																							result = v115;
																							// branch -> 0xb2664
																						} else {
																							// 0xb2628
																							v110 = g23;
																							g41 = g36;
																							v121 = *(char *)(*(int32_t *)(v110 - 0x7268) + (int32_t)v14);
																							*(int32_t *)*(int32_t *)(v110 - 0x7294) = (int32_t)v121;
																							v119 = *(int32_t *)*(int32_t *)(v110 - 0x7574);
																							result = CelDecodeHdrLightTrans(g28, v119, (int32_t)v11, 64, 0);
																							// branch -> 0xb2664
																						}
																						// 0xb2664
																						g10 = v1;
																						return result;
																					}
																					v108 = v86;
																				}
																				// 0xb25ac
																				v114 = function_c9acc(*(int32_t *)(v108 + 24));
																				// branch -> 0xb261c
																				// 0xb261c
																				if (v11 == 0) {
																					// 0xb261c
																					result = v114;
																					// branch -> 0xb2664
																				} else {
																					// 0xb2628
																					v110 = g23;
																					g41 = g36;
																					v121 = *(char *)(*(int32_t *)(v110 - 0x7268) + (int32_t)v14);
																					*(int32_t *)*(int32_t *)(v110 - 0x7294) = (int32_t)v121;
																					v119 = *(int32_t *)*(int32_t *)(v110 - 0x7574);
																					result = CelDecodeHdrLightTrans(g28, v119, (int32_t)v11, 64, 0);
																					// branch -> 0xb2664
																				}
																				// 0xb2664
																				g10 = v1;
																				return result;
																			}
																			// 0xb25ac
																			v109 = function_c9acc(*(int32_t *)(v85 + 24));
																			// branch -> 0xb261c
																		}
																		// 0xb261c
																		if (v11 == 0) {
																			// 0xb261c
																			result = v109;
																			// branch -> 0xb2664
																		} else {
																			// 0xb2628
																			v110 = g23;
																			g41 = g36;
																			v121 = *(char *)(*(int32_t *)(v110 - 0x7268) + (int32_t)v14);
																			*(int32_t *)*(int32_t *)(v110 - 0x7294) = (int32_t)v121;
																			v119 = *(int32_t *)*(int32_t *)(v110 - 0x7574);
																			result = CelDecodeHdrLightTrans(g28, v119, (int32_t)v11, 64, 0);
																			// branch -> 0xb2664
																		}
																		// 0xb2664
																		g10 = v1;
																		return result;
																	}
																}
															}
															// 0xb261c
															if (v11 == 0) {
																// 0xb261c
																result = v109;
																// branch -> 0xb2664
															} else {
																// 0xb2628
																v110 = g23;
																g41 = g36;
																v121 = *(char *)(*(int32_t *)(v110 - 0x7268) + (int32_t)v14);
																*(int32_t *)*(int32_t *)(v110 - 0x7294) = (int32_t)v121;
																v119 = *(int32_t *)*(int32_t *)(v110 - 0x7574);
																result = CelDecodeHdrLightTrans(g28, v119, (int32_t)v11, 64, 0);
																// branch -> 0xb2664
															}
															// 0xb2664
															g10 = v1;
															return result;
														}
														v32 = v31;
													}
													// 0xb2060
													v109 = function_c9acc(*(int32_t *)(v32 + 24));
													// branch -> 0xb20d0
													// 0xb20d0
													v52 = v12;
													g29 = v52;
													if (__asm_rlwinm_(v52, 0, 26, 26) != 0) {
														// 0xb20dc
														v44 = -1 - (int32_t)v17;
														v109 = v44;
														if (v44 <= 3) {
															// 0xb20f4
															v53 = g16 + 0x55ec * v44;
															v54 = g35 + *(int32_t *)(v53 + 100);
															v55 = g32 + *(int32_t *)(v53 + 96) - *(int32_t *)(v53 + 148);
															v72 = *(int32_t *)(v53 + 124);
															v73 = *(int32_t *)(v53 + 140);
															g13 = *(int32_t *)(v53 + 144);
															v109 = function_af18c(v44, g31, g33 - 1, v55, v54, v72, v73, 0, g36);
															if (g17 != 0) {
																// 0xb2140
																v74 = *(int32_t *)(g30 + 152);
																if (v74 != 0) {
																	// 0xb214c
																	if (v74 == 2) {
																		// 0xb2154
																		function_b1bb0(g28 - 0x3060, g31 - 2, g33 + 1, g20, g36, g32 - 96, g35 - 16);
																		// branch -> 0xb2174
																	}
																	// 0xb2174
																	v109 = function_b1bb0(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
																	// branch -> 0xb2194
																}
															}
														}
													}
													// 0xb2194
													if (__asm_rlwinm_(v52, 0, 27, 27) != 0) {
														// 0xb219c
														if (__asm_rlwinm_(v52, 0, 25, 25) == 0) {
															// 0xb21a4
															v116 = g16 + 0x55ec * *(int32_t *)*(int32_t *)(g23 - 0x77ac);
															v109 = v116;
															if (*(int32_t *)(v116 + 460) != 0) {
																// 0xb21c0
																v36 = g18;
																if (v36 <= 0xffffffff) {
																	// 0xb21c8
																	*(int32_t *)g25 = -1 - v36;
																	v56 = *(int32_t *)g25;
																	if (v56 <= 199) {
																		// 0xb21e0
																		v111 = 232 * v56;
																		v109 = v111;
																		v57 = *(int32_t *)(g23 - 0x7754) + v111;
																		g30 = v57;
																		if (*(int32_t *)(v57 + 160) % 2 == 0) {
																			// 0xb21f8
																			v76 = *(int32_t *)(v57 + 224);
																			if (v76 != 0) {
																				// 0xb2204
																				g34 = v57 + 84;
																				g27 = g35 + *(int32_t *)(v57 + 60);
																				g26 = g32 + *(int32_t *)(v57 + 56) - *(int32_t *)(v76 + 496);
																				function_c9b28();
																				if (*(int32_t *)g25 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
																					// 0xb2238
																					v37 = g30;
																					v77 = *(int32_t *)(*(int32_t *)(v37 + 224) + 492);
																					g13 = g36;
																					function_50478(233, g26, g27, v37 + 84, *(int32_t *)(v37 + 104), v77, 0);
																					// branch -> 0xb2260
																				}
																				// 0xb2260
																				function_c9b70((int32_t *)(g30 + 84));
																				v109 = function_aedfc(g31, g33, g26, g27, *(int32_t *)g25, 0, g36);
																				if (g17 != 0) {
																					// 0xb2290
																					if (*(int32_t *)(g30 + 108) == 0) {
																						// 0xb229c
																						v109 = function_b1bb0(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
																						// branch -> 0xb22bc
																					}
																				}
																			}
																		}
																	}
																}
															}
														} else {
															// 0xb21c0
															v36 = g18;
															if (v36 <= 0xffffffff) {
																// 0xb21c8
																*(int32_t *)g25 = -1 - v36;
																v56 = *(int32_t *)g25;
																if (v56 <= 199) {
																	// 0xb21e0
																	v111 = 232 * v56;
																	v109 = v111;
																	v57 = *(int32_t *)(g23 - 0x7754) + v111;
																	g30 = v57;
																	if (*(int32_t *)(v57 + 160) % 2 == 0) {
																		// 0xb21f8
																		v76 = *(int32_t *)(v57 + 224);
																		if (v76 != 0) {
																			// 0xb2204
																			g34 = v57 + 84;
																			g27 = g35 + *(int32_t *)(v57 + 60);
																			g26 = g32 + *(int32_t *)(v57 + 56) - *(int32_t *)(v76 + 496);
																			function_c9b28();
																			if (*(int32_t *)g25 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
																				// 0xb2238
																				v37 = g30;
																				v77 = *(int32_t *)(*(int32_t *)(v37 + 224) + 492);
																				g13 = g36;
																				function_50478(233, g26, g27, v37 + 84, *(int32_t *)(v37 + 104), v77, 0);
																				// branch -> 0xb2260
																			}
																			// 0xb2260
																			function_c9b70((int32_t *)(g30 + 84));
																			v109 = function_aedfc(g31, g33, g26, g27, *(int32_t *)g25, 0, g36);
																			if (g17 != 0) {
																				// 0xb2290
																				if (*(int32_t *)(g30 + 108) == 0) {
																					// 0xb229c
																					v109 = function_b1bb0(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
																					// branch -> 0xb22bc
																				}
																			}
																		}
																	}
																}
															}
														}
														// 0xb22bc
														if (__asm_rlwinm_(v52, 0, 29, 29) != 0) {
															// 0xb22c4
															v109 = function_af6d0(g31, g33, g32, g35, 0, g36, 0);
															// branch -> 0xb22e4
														}
														// 0xb22e4
														v45 = 0x1000000 * g22;
														if (v45 >= 0 && (v45 || 0xffffff) >= 0x1ffffff) {
															// 0xb22ec
															v46 = v45 / 0x1000000 - 1;
															v109 = v46;
															if (v46 <= 3) {
																// 0xb22fc
																v58 = g16 + 0x55ec * v46;
																v59 = g35 + *(int32_t *)(v58 + 100);
																v60 = g32 + *(int32_t *)(v58 + 96) - *(int32_t *)(v58 + 148);
																v120 = *(int32_t *)(v58 + 124);
																v78 = *(int32_t *)(v58 + 140);
																g13 = *(int32_t *)(v58 + 144);
																v109 = function_af18c(v46, g31, g33, v60, v59, v120, v78, 0, g36);
																if (g17 != 0) {
																	// 0xb2348
																	v79 = *(int32_t *)(g30 + 152);
																	if (v79 != 0) {
																		// 0xb2354
																		if (v79 == 2) {
																			// 0xb235c
																			function_b1bb0(g28 - 0x3060, g31 - 2, g33 + 1, g20, g36, g32 - 96, g35 - 16);
																			// branch -> 0xb237c
																		}
																		// 0xb237c
																		v109 = function_b1bb0(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
																		// branch -> 0xb239c
																	}
																}
															}
														}
														// 0xb239c
														if (v15 < 1) {
															// 0xb24c0
															if (v52 % 2 != 0) {
																// 0xb24c8
																v109 = DrawMissile(g31, g33, g32, g35, 0, g36, 0);
																// branch -> 0xb24e8
															}
															// 0xb24e8
															if (v9 != 0) {
																// 0xb24f4
																v82 = g23;
																v118 = *(int32_t *)*(int32_t *)(v82 - 0x7290);
																v109 = v118;
																if (v118 < (int32_t) * (char *)*(int32_t *)(v82 - 0x70cc)) {
																	// 0xb2510
																	v109 = DrawObject(g31, g33, g32, g35, 0, 0, g36);
																	// branch -> 0xb2530
																}
															}
															// 0xb2530
															v83 = g21;
															v91 = 0x1000000 * v83;
															if ((v91 || 0xffffff) >= 0x1ffffff) {
																// 0xb2538
																v92 = v91 / 0x1000000 - 1;
																g27 = v92;
																v113 = 368 * v92;
																v109 = v113;
																v97 = *(int32_t *)(g23 - 0x7690) + v113;
																g31 = v97;
																if (*(int32_t *)(v97 + 52) != 0) {
																	// 0xb2558
																	if (v83 <= 127) {
																		// 0xb2560
																		g34 = *(int32_t *)(v97 + 24);
																		v84 = function_c9948();
																		g29 = v84;
																		v85 = g31;
																		if (v84 == 0) {
																			// 0xb2570
																			v109 = function_c9acc(*(int32_t *)(v85 + 24));
																			// branch -> 0xb261c
																		} else {
																			// 0xb257c
																			v103 = *(int32_t *)(v85 + 32);
																			g11 = v103;
																			if (v103 >= 1) {
																				// 0xb2588
																				if (function_4d794(v84) > 50) {
																					// 0xb2588
																					v108 = g31;
																					// branch -> 0xb25ac
																				} else {
																					// 0xb2598
																					v93 = function_4d794(g29);
																					v86 = g31;
																					v104 = *(int32_t *)(v86 + 32);
																					g40 = v104;
																					if (v104 <= v93) {
																						// 0xb25b8
																						v87 = g27;
																						v98 = g32 - *(int32_t *)(v86 + 40);
																						g27 = v98;
																						v89 = v98;
																						v90 = v86;
																						if (v87 == (int32_t) * (char *)*(int32_t *)(g23 - 0x7748)) {
																							// 0xb25d4
																							g37 = v98;
																							v105 = *(int32_t *)(v86 + 36);
																							g41 = v105;
																							v88 = g35;
																							g38 = v88;
																							g13 = g36;
																							g42 = 0;
																							CelDecodeClr(181, v98, v88, *(int32_t *)(v86 + 24), v104, v105, 0);
																							v89 = g27;
																							v90 = g31;
																							// branch -> 0xb25f4
																						}
																						// 0xb25f4
																						v106 = *(int32_t *)(v90 + 32);
																						v107 = *(int32_t *)(v90 + 36);
																						CelDecodeHdrLightOnly(v89, g35, *(int32_t *)(v90 + 24), v106, v107, 0, g36);
																						v115 = function_c9acc(*(int32_t *)(g31 + 24));
																						// branch -> 0xb261c
																						// 0xb261c
																						if (v11 == 0) {
																							// 0xb261c
																							result = v115;
																							// branch -> 0xb2664
																						} else {
																							// 0xb2628
																							v110 = g23;
																							g41 = g36;
																							v121 = *(char *)(*(int32_t *)(v110 - 0x7268) + (int32_t)v14);
																							*(int32_t *)*(int32_t *)(v110 - 0x7294) = (int32_t)v121;
																							v119 = *(int32_t *)*(int32_t *)(v110 - 0x7574);
																							result = CelDecodeHdrLightTrans(g28, v119, (int32_t)v11, 64, 0);
																							// branch -> 0xb2664
																						}
																						// 0xb2664
																						g10 = v1;
																						return result;
																					}
																					v108 = v86;
																				}
																				// 0xb25ac
																				v114 = function_c9acc(*(int32_t *)(v108 + 24));
																				// branch -> 0xb261c
																				// 0xb261c
																				if (v11 == 0) {
																					// 0xb261c
																					result = v114;
																					// branch -> 0xb2664
																				} else {
																					// 0xb2628
																					v110 = g23;
																					g41 = g36;
																					v121 = *(char *)(*(int32_t *)(v110 - 0x7268) + (int32_t)v14);
																					*(int32_t *)*(int32_t *)(v110 - 0x7294) = (int32_t)v121;
																					v119 = *(int32_t *)*(int32_t *)(v110 - 0x7574);
																					result = CelDecodeHdrLightTrans(g28, v119, (int32_t)v11, 64, 0);
																					// branch -> 0xb2664
																				}
																				// 0xb2664
																				g10 = v1;
																				return result;
																			}
																			// 0xb25ac
																			v109 = function_c9acc(*(int32_t *)(v85 + 24));
																			// branch -> 0xb261c
																		}
																		// 0xb261c
																		if (v11 == 0) {
																			// 0xb261c
																			result = v109;
																			// branch -> 0xb2664
																		} else {
																			// 0xb2628
																			v110 = g23;
																			g41 = g36;
																			v121 = *(char *)(*(int32_t *)(v110 - 0x7268) + (int32_t)v14);
																			*(int32_t *)*(int32_t *)(v110 - 0x7294) = (int32_t)v121;
																			v119 = *(int32_t *)*(int32_t *)(v110 - 0x7574);
																			result = CelDecodeHdrLightTrans(g28, v119, (int32_t)v11, 64, 0);
																			// branch -> 0xb2664
																		}
																		// 0xb2664
																		g10 = v1;
																		return result;
																	}
																}
															}
															// 0xb261c
															if (v11 == 0) {
																// 0xb261c
																result = v109;
																// branch -> 0xb2664
															} else {
																// 0xb2628
																v110 = g23;
																g41 = g36;
																v121 = *(char *)(*(int32_t *)(v110 - 0x7268) + (int32_t)v14);
																*(int32_t *)*(int32_t *)(v110 - 0x7294) = (int32_t)v121;
																v119 = *(int32_t *)*(int32_t *)(v110 - 0x7574);
																result = CelDecodeHdrLightTrans(g28, v119, (int32_t)v11, 64, 0);
																// branch -> 0xb2664
															}
															// 0xb2664
															g10 = v1;
															return result;
														}
														// 0xb23a8
														if (__asm_rlwinm_(v52, 0, 25, 25) == 0) {
															// 0xb23b0
															v117 = g16 + 0x55ec * *(int32_t *)*(int32_t *)(g23 - 0x77ac);
															v109 = v117;
															if (*(int32_t *)(v117 + 460) != 0) {
																// 0xb23cc
																v109 = v16;
																*(int32_t *)g25 = v16 - 1;
																v94 = *(int32_t *)g25;
																if (v94 <= 199) {
																	// 0xb23e4
																	v112 = 232 * v94;
																	v109 = v112;
																	v95 = *(int32_t *)(g23 - 0x7754) + v112;
																	g30 = v95;
																	if (*(int32_t *)(v95 + 160) % 2 == 0) {
																		// 0xb23fc
																		v99 = *(int32_t *)(v95 + 224);
																		if (v99 != 0) {
																			// 0xb2408
																			g34 = v95 + 84;
																			g27 = g35 + *(int32_t *)(v95 + 60);
																			g26 = g32 + *(int32_t *)(v95 + 56) - *(int32_t *)(v99 + 496);
																			function_c9b28();
																			if (*(int32_t *)g25 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
																				// 0xb243c
																				v81 = g30;
																				v100 = *(int32_t *)(*(int32_t *)(v81 + 224) + 492);
																				g13 = g36;
																				function_50478(233, g26, g27, v81 + 84, *(int32_t *)(v81 + 104), v100, 0);
																				// branch -> 0xb2464
																			}
																			// 0xb2464
																			function_c9b70((int32_t *)(g30 + 84));
																			v109 = function_aedfc(g31, g33, g26, g27, *(int32_t *)g25, 0, g36);
																			if (g17 != 0) {
																				// 0xb2494
																				if (*(int32_t *)(g30 + 108) == 0) {
																					// 0xb24a0
																					v109 = function_b1bb0(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
																					// branch -> 0xb24c0
																				}
																			}
																		}
																	}
																}
															}
														} else {
															// 0xb23cc
															v109 = v16;
															*(int32_t *)g25 = v16 - 1;
															v94 = *(int32_t *)g25;
															if (v94 <= 199) {
																// 0xb23e4
																v112 = 232 * v94;
																v109 = v112;
																v95 = *(int32_t *)(g23 - 0x7754) + v112;
																g30 = v95;
																if (*(int32_t *)(v95 + 160) % 2 == 0) {
																	// 0xb23fc
																	v99 = *(int32_t *)(v95 + 224);
																	if (v99 != 0) {
																		// 0xb2408
																		g34 = v95 + 84;
																		g27 = g35 + *(int32_t *)(v95 + 60);
																		g26 = g32 + *(int32_t *)(v95 + 56) - *(int32_t *)(v99 + 496);
																		function_c9b28();
																		if (*(int32_t *)g25 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
																			// 0xb243c
																			v81 = g30;
																			v100 = *(int32_t *)(*(int32_t *)(v81 + 224) + 492);
																			g13 = g36;
																			function_50478(233, g26, g27, v81 + 84, *(int32_t *)(v81 + 104), v100, 0);
																			// branch -> 0xb2464
																		}
																		// 0xb2464
																		function_c9b70((int32_t *)(g30 + 84));
																		v109 = function_aedfc(g31, g33, g26, g27, *(int32_t *)g25, 0, g36);
																		if (g17 != 0) {
																			// 0xb2494
																			if (*(int32_t *)(g30 + 108) == 0) {
																				// 0xb24a0
																				v109 = function_b1bb0(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
																				// branch -> 0xb24c0
																			}
																		}
																	}
																}
															}
														}
														// 0xb24c0
														if (v52 % 2 != 0) {
															// 0xb24c8
															v109 = DrawMissile(g31, g33, g32, g35, 0, g36, 0);
															// branch -> 0xb24e8
														}
														// 0xb24e8
														if (v9 != 0) {
															// 0xb24f4
															v82 = g23;
															v118 = *(int32_t *)*(int32_t *)(v82 - 0x7290);
															v109 = v118;
															if (v118 < (int32_t) * (char *)*(int32_t *)(v82 - 0x70cc)) {
																// 0xb2510
																v109 = DrawObject(g31, g33, g32, g35, 0, 0, g36);
																// branch -> 0xb2530
															}
														}
														// 0xb2530
														v83 = g21;
														v91 = 0x1000000 * v83;
														if ((v91 || 0xffffff) >= 0x1ffffff) {
															// 0xb2538
															v92 = v91 / 0x1000000 - 1;
															g27 = v92;
															v113 = 368 * v92;
															v109 = v113;
															v97 = *(int32_t *)(g23 - 0x7690) + v113;
															g31 = v97;
															if (*(int32_t *)(v97 + 52) != 0) {
																// 0xb2558
																if (v83 <= 127) {
																	// 0xb2560
																	g34 = *(int32_t *)(v97 + 24);
																	v84 = function_c9948();
																	g29 = v84;
																	v85 = g31;
																	if (v84 == 0) {
																		// 0xb2570
																		v109 = function_c9acc(*(int32_t *)(v85 + 24));
																		// branch -> 0xb261c
																	} else {
																		// 0xb257c
																		v103 = *(int32_t *)(v85 + 32);
																		g11 = v103;
																		if (v103 >= 1) {
																			// 0xb2588
																			if (function_4d794(v84) > 50) {
																				// 0xb2588
																				v108 = g31;
																				// branch -> 0xb25ac
																			} else {
																				// 0xb2598
																				v93 = function_4d794(g29);
																				v86 = g31;
																				v104 = *(int32_t *)(v86 + 32);
																				g40 = v104;
																				if (v104 <= v93) {
																					// 0xb25b8
																					v87 = g27;
																					v98 = g32 - *(int32_t *)(v86 + 40);
																					g27 = v98;
																					v89 = v98;
																					v90 = v86;
																					if (v87 == (int32_t) * (char *)*(int32_t *)(g23 - 0x7748)) {
																						// 0xb25d4
																						g37 = v98;
																						v105 = *(int32_t *)(v86 + 36);
																						g41 = v105;
																						v88 = g35;
																						g38 = v88;
																						g13 = g36;
																						g42 = 0;
																						CelDecodeClr(181, v98, v88, *(int32_t *)(v86 + 24), v104, v105, 0);
																						v89 = g27;
																						v90 = g31;
																						// branch -> 0xb25f4
																					}
																					// 0xb25f4
																					v106 = *(int32_t *)(v90 + 32);
																					v107 = *(int32_t *)(v90 + 36);
																					CelDecodeHdrLightOnly(v89, g35, *(int32_t *)(v90 + 24), v106, v107, 0, g36);
																					v115 = function_c9acc(*(int32_t *)(g31 + 24));
																					// branch -> 0xb261c
																					// 0xb261c
																					if (v11 == 0) {
																						// 0xb261c
																						result = v115;
																						// branch -> 0xb2664
																					} else {
																						// 0xb2628
																						v110 = g23;
																						g41 = g36;
																						v121 = *(char *)(*(int32_t *)(v110 - 0x7268) + (int32_t)v14);
																						*(int32_t *)*(int32_t *)(v110 - 0x7294) = (int32_t)v121;
																						v119 = *(int32_t *)*(int32_t *)(v110 - 0x7574);
																						result = CelDecodeHdrLightTrans(g28, v119, (int32_t)v11, 64, 0);
																						// branch -> 0xb2664
																					}
																					// 0xb2664
																					g10 = v1;
																					return result;
																				}
																				v108 = v86;
																			}
																			// 0xb25ac
																			v114 = function_c9acc(*(int32_t *)(v108 + 24));
																			// branch -> 0xb261c
																			// 0xb261c
																			if (v11 == 0) {
																				// 0xb261c
																				result = v114;
																				// branch -> 0xb2664
																			} else {
																				// 0xb2628
																				v110 = g23;
																				g41 = g36;
																				v121 = *(char *)(*(int32_t *)(v110 - 0x7268) + (int32_t)v14);
																				*(int32_t *)*(int32_t *)(v110 - 0x7294) = (int32_t)v121;
																				v119 = *(int32_t *)*(int32_t *)(v110 - 0x7574);
																				result = CelDecodeHdrLightTrans(g28, v119, (int32_t)v11, 64, 0);
																				// branch -> 0xb2664
																			}
																			// 0xb2664
																			g10 = v1;
																			return result;
																		}
																		// 0xb25ac
																		v109 = function_c9acc(*(int32_t *)(v85 + 24));
																		// branch -> 0xb261c
																	}
																	// 0xb261c
																	if (v11 == 0) {
																		// 0xb261c
																		result = v109;
																		// branch -> 0xb2664
																	} else {
																		// 0xb2628
																		v110 = g23;
																		g41 = g36;
																		v121 = *(char *)(*(int32_t *)(v110 - 0x7268) + (int32_t)v14);
																		*(int32_t *)*(int32_t *)(v110 - 0x7294) = (int32_t)v121;
																		v119 = *(int32_t *)*(int32_t *)(v110 - 0x7574);
																		result = CelDecodeHdrLightTrans(g28, v119, (int32_t)v11, 64, 0);
																		// branch -> 0xb2664
																	}
																	// 0xb2664
																	g10 = v1;
																	return result;
																}
															}
														}
														// 0xb261c
														if (v11 == 0) {
															// 0xb261c
															result = v109;
															// branch -> 0xb2664
														} else {
															// 0xb2628
															v110 = g23;
															g41 = g36;
															v121 = *(char *)(*(int32_t *)(v110 - 0x7268) + (int32_t)v14);
															*(int32_t *)*(int32_t *)(v110 - 0x7294) = (int32_t)v121;
															v119 = *(int32_t *)*(int32_t *)(v110 - 0x7574);
															result = CelDecodeHdrLightTrans(g28, v119, (int32_t)v11, 64, 0);
															// branch -> 0xb2664
														}
														// 0xb2664
														g10 = v1;
														return result;
													}
													// 0xb22bc
													if (__asm_rlwinm_(v52, 0, 29, 29) != 0) {
														// 0xb22c4
														function_af6d0(g31, g33, g32, g35, 0, g36, 0);
														// branch -> 0xb22e4
													}
													// 0xb22e4
													v45 = 0x1000000 * g22;
													if (v45 >= 0 && (v45 || 0xffffff) >= 0x1ffffff) {
														// 0xb22ec
														v46 = v45 / 0x1000000 - 1;
														if (v46 <= 3) {
															// 0xb22fc
															v58 = g16 + 0x55ec * v46;
															v59 = g35 + *(int32_t *)(v58 + 100);
															v60 = g32 + *(int32_t *)(v58 + 96) - *(int32_t *)(v58 + 148);
															v78 = *(int32_t *)(v58 + 140);
															g13 = *(int32_t *)(v58 + 144);
															function_af18c(v46, g31, g33, v60, v59, *(int32_t *)(v58 + 124), v78, 0, g36);
															if (g17 != 0) {
																// 0xb2348
																v79 = *(int32_t *)(g30 + 152);
																if (v79 != 0) {
																	// 0xb2354
																	if (v79 == 2) {
																		// 0xb235c
																		function_b1bb0(g28 - 0x3060, g31 - 2, g33 + 1, g20, g36, g32 - 96, g35 - 16);
																		// branch -> 0xb237c
																	}
																	// 0xb237c
																	function_b1bb0(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
																	// branch -> 0xb239c
																}
															}
														}
													}
													// 0xb239c
													if (v15 >= 1) {
														// 0xb23a8
														if (__asm_rlwinm_(v52, 0, 25, 25) == 0) {
															// 0xb23b0
															v80 = *(int32_t *)(g23 - 0x77ac);
															if (*(int32_t *)(g16 + 0x55ec * *(int32_t *)v80 + 460) != 0) {
																// 0xb23cc
																*(int32_t *)g25 = v16 - 1;
																v94 = *(int32_t *)g25;
																if (v94 <= 199) {
																	// 0xb23e4
																	v95 = *(int32_t *)(g23 - 0x7754) + 232 * v94;
																	g30 = v95;
																	if (*(int32_t *)(v95 + 160) % 2 == 0) {
																		// 0xb23fc
																		v99 = *(int32_t *)(v95 + 224);
																		if (v99 != 0) {
																			// 0xb2408
																			g34 = v95 + 84;
																			g27 = g35 + *(int32_t *)(v95 + 60);
																			g26 = g32 + *(int32_t *)(v95 + 56) - *(int32_t *)(v99 + 496);
																			function_c9b28();
																			if (*(int32_t *)g25 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
																				// 0xb243c
																				v81 = g30;
																				v100 = *(int32_t *)(*(int32_t *)(v81 + 224) + 492);
																				g13 = g36;
																				function_50478(233, g26, g27, v81 + 84, *(int32_t *)(v81 + 104), v100, 0);
																				// branch -> 0xb2464
																			}
																			// 0xb2464
																			function_c9b70((int32_t *)(g30 + 84));
																			function_aedfc(g31, g33, g26, g27, *(int32_t *)g25, 0, g36);
																			if (g17 != 0) {
																				// 0xb2494
																				if (*(int32_t *)(g30 + 108) == 0) {
																					// 0xb24a0
																					function_b1bb0(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
																					// branch -> 0xb24c0
																				}
																			}
																		}
																	}
																}
															}
														} else {
															// 0xb23cc
															*(int32_t *)g25 = v16 - 1;
															v94 = *(int32_t *)g25;
															if (v94 <= 199) {
																// 0xb23e4
																v95 = *(int32_t *)(g23 - 0x7754) + 232 * v94;
																g30 = v95;
																if (*(int32_t *)(v95 + 160) % 2 == 0) {
																	// 0xb23fc
																	v99 = *(int32_t *)(v95 + 224);
																	if (v99 != 0) {
																		// 0xb2408
																		g34 = v95 + 84;
																		g27 = g35 + *(int32_t *)(v95 + 60);
																		g26 = g32 + *(int32_t *)(v95 + 56) - *(int32_t *)(v99 + 496);
																		function_c9b28();
																		if (*(int32_t *)g25 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
																			// 0xb243c
																			v81 = g30;
																			v100 = *(int32_t *)(*(int32_t *)(v81 + 224) + 492);
																			g13 = g36;
																			function_50478(233, g26, g27, v81 + 84, *(int32_t *)(v81 + 104), v100, 0);
																			// branch -> 0xb2464
																		}
																		// 0xb2464
																		function_c9b70((int32_t *)(g30 + 84));
																		function_aedfc(g31, g33, g26, g27, *(int32_t *)g25, 0, g36);
																		if (g17 != 0) {
																			// 0xb2494
																			if (*(int32_t *)(g30 + 108) == 0) {
																				// 0xb24a0
																				function_b1bb0(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
																				// branch -> 0xb24c0
																			}
																		}
																	}
																}
															}
														}
														// 0xb24c0
														if (v52 % 2 != 0) {
															// 0xb24c8
															DrawMissile(g31, g33, g32, g35, 0, g36, 0);
															// branch -> 0xb24e8
														}
														// 0xb24e8
														if (v9 != 0) {
															// 0xb24f4
															v82 = g23;
															v101 = *(int32_t *)(v82 - 0x70cc);
															v102 = *(int32_t *)(v82 - 0x7290);
															if (*(int32_t *)v102 < (int32_t) * (char *)v101) {
																// 0xb2510
																DrawObject(g31, g33, g32, g35, 0, 0, g36);
																// branch -> 0xb2530
															}
														}
														// 0xb2530
														v83 = g21;
														v91 = 0x1000000 * v83;
														v96 = v91 / 0x1000000;
														if ((v91 || 0xffffff) >= 0x1ffffff) {
															// 0xb2538
															v92 = v96 - 1;
															g27 = v92;
															v97 = *(int32_t *)(g23 - 0x7690) + 368 * v92;
															g31 = v97;
															if (*(int32_t *)(v97 + 52) != 0) {
																// 0xb2558
																if (v83 <= 127) {
																	// 0xb2560
																	g34 = *(int32_t *)(v97 + 24);
																	v84 = function_c9948();
																	g29 = v84;
																	v85 = g31;
																	if (v84 == 0) {
																		// 0xb2570
																		function_c9acc(*(int32_t *)(v85 + 24));
																		// branch -> 0xb261c
																	} else {
																		// 0xb257c
																		v103 = *(int32_t *)(v85 + 32);
																		g11 = v103;
																		v108 = v85;
																		if (v103 >= 1) {
																			// 0xb2588
																			if (function_4d794(v84) > 50) {
																				// 0xb2588
																				v108 = g31;
																				// branch -> 0xb25ac
																			} else {
																				// 0xb2598
																				v93 = function_4d794(g29);
																				v86 = g31;
																				v104 = *(int32_t *)(v86 + 32);
																				g40 = v104;
																				if (v104 <= v93) {
																					// 0xb25b8
																					v87 = g27;
																					v98 = g32 - *(int32_t *)(v86 + 40);
																					g27 = v98;
																					v89 = v98;
																					v90 = v86;
																					if (v87 == (int32_t) * (char *)*(int32_t *)(g23 - 0x7748)) {
																						// 0xb25d4
																						g37 = v98;
																						v105 = *(int32_t *)(v86 + 36);
																						g41 = v105;
																						v88 = g35;
																						g38 = v88;
																						g13 = g36;
																						g42 = 0;
																						CelDecodeClr(181, v98, v88, *(int32_t *)(v86 + 24), v104, v105, 0);
																						v89 = g27;
																						v90 = g31;
																						// branch -> 0xb25f4
																					}
																					// 0xb25f4
																					v106 = *(int32_t *)(v90 + 32);
																					v107 = *(int32_t *)(v90 + 36);
																					CelDecodeHdrLightOnly(v89, g35, *(int32_t *)(v90 + 24), v106, v107, 0, g36);
																					v115 = function_c9acc(*(int32_t *)(g31 + 24));
																					// branch -> 0xb261c
																					// 0xb261c
																					if (v11 == 0) {
																						// 0xb261c
																						result = v115;
																						// branch -> 0xb2664
																					} else {
																						// 0xb2628
																						v110 = g23;
																						g41 = g36;
																						v121 = *(char *)(*(int32_t *)(v110 - 0x7268) + (int32_t)v14);
																						*(int32_t *)*(int32_t *)(v110 - 0x7294) = (int32_t)v121;
																						v119 = *(int32_t *)*(int32_t *)(v110 - 0x7574);
																						result = CelDecodeHdrLightTrans(g28, v119, (int32_t)v11, 64, 0);
																						// branch -> 0xb2664
																					}
																					// 0xb2664
																					g10 = v1;
																					return result;
																				}
																				v108 = v86;
																			}
																			// 0xb25ac
																			function_c9acc(*(int32_t *)(v108 + 24));
																			// branch -> 0xb261c
																			// Detected a possible infinite recursion (goto support failed); quitting...
																		}
																		// 0xb25ac
																		function_c9acc(*(int32_t *)(v108 + 24));
																		// branch -> 0xb261c
																	}
																	// Detected a possible infinite recursion (goto support failed); quitting...
																}
															}
														}
														// Detected a possible infinite recursion (goto support failed); quitting...
													}
													// 0xb24c0
													if (v52 % 2 != 0) {
														// 0xb24c8
														DrawMissile(g31, g33, g32, g35, 0, g36, 0);
														// branch -> 0xb24e8
													}
													// 0xb24e8
													if (v9 != 0) {
														// 0xb24f4
														v82 = g23;
														v101 = *(int32_t *)(v82 - 0x70cc);
														v102 = *(int32_t *)(v82 - 0x7290);
														if (*(int32_t *)v102 < (int32_t) * (char *)v101) {
															// 0xb2510
															DrawObject(g31, g33, g32, g35, 0, 0, g36);
															// branch -> 0xb2530
														}
													}
													// 0xb2530
													v83 = g21;
													v91 = 0x1000000 * v83;
													v96 = v91 / 0x1000000;
													if ((v91 || 0xffffff) >= 0x1ffffff) {
														// 0xb2538
														v92 = v96 - 1;
														g27 = v92;
														v97 = *(int32_t *)(g23 - 0x7690) + 368 * v92;
														g31 = v97;
														if (*(int32_t *)(v97 + 52) != 0) {
															// 0xb2558
															if (v83 <= 127) {
																// 0xb2560
																g34 = *(int32_t *)(v97 + 24);
																v84 = function_c9948();
																g29 = v84;
																v85 = g31;
																if (v84 == 0) {
																	// 0xb2570
																	function_c9acc(*(int32_t *)(v85 + 24));
																	// branch -> 0xb261c
																} else {
																	// 0xb257c
																	v103 = *(int32_t *)(v85 + 32);
																	g11 = v103;
																	v108 = v85;
																	if (v103 >= 1) {
																		// 0xb2588
																		if (function_4d794(v84) > 50) {
																			// 0xb2588
																			v108 = g31;
																			// branch -> 0xb25ac
																		} else {
																			// 0xb2598
																			v93 = function_4d794(g29);
																			v86 = g31;
																			v104 = *(int32_t *)(v86 + 32);
																			g40 = v104;
																			if (v104 <= v93) {
																				// 0xb25b8
																				v87 = g27;
																				v98 = g32 - *(int32_t *)(v86 + 40);
																				g27 = v98;
																				v89 = v98;
																				v90 = v86;
																				if (v87 == (int32_t) * (char *)*(int32_t *)(g23 - 0x7748)) {
																					// 0xb25d4
																					g37 = v98;
																					v105 = *(int32_t *)(v86 + 36);
																					g41 = v105;
																					v88 = g35;
																					g38 = v88;
																					g13 = g36;
																					g42 = 0;
																					CelDecodeClr(181, v98, v88, *(int32_t *)(v86 + 24), v104, v105, 0);
																					v89 = g27;
																					v90 = g31;
																					// branch -> 0xb25f4
																				}
																				// 0xb25f4
																				v106 = *(int32_t *)(v90 + 32);
																				v107 = *(int32_t *)(v90 + 36);
																				CelDecodeHdrLightOnly(v89, g35, *(int32_t *)(v90 + 24), v106, v107, 0, g36);
																				function_c9acc(*(int32_t *)(g31 + 24));
																				// branch -> 0xb261c
																				// Detected a possible infinite recursion (goto support failed); quitting...
																			} else {
																				v108 = v86;
																			}
																		}
																		// 0xb25ac
																		function_c9acc(*(int32_t *)(v108 + 24));
																		// branch -> 0xb261c
																		// Detected a possible infinite recursion (goto support failed); quitting...
																	}
																	// 0xb25ac
																	function_c9acc(*(int32_t *)(v108 + 24));
																	// branch -> 0xb261c
																}
																// Detected a possible infinite recursion (goto support failed); quitting...
															}
														}
													}
													// Detected a possible infinite recursion (goto support failed); quitting...
												}
												// 0xb2060
												function_c9acc(*(int32_t *)(v32 + 24));
												// branch -> 0xb20d0
											}
											// 0xb20d0
											v52 = v12;
											g29 = v52;
											if (__asm_rlwinm_(v52, 0, 26, 26) != 0) {
												// 0xb20dc
												v44 = -1 - (int32_t)v17;
												if (v44 <= 3) {
													// 0xb20f4
													v53 = g16 + 0x55ec * v44;
													v54 = g35 + *(int32_t *)(v53 + 100);
													v55 = g32 + *(int32_t *)(v53 + 96) - *(int32_t *)(v53 + 148);
													v72 = *(int32_t *)(v53 + 124);
													v73 = *(int32_t *)(v53 + 140);
													g13 = *(int32_t *)(v53 + 144);
													function_af18c(v44, g31, g33 - 1, v55, v54, v72, v73, 0, g36);
													if (g17 != 0) {
														// 0xb2140
														v74 = *(int32_t *)(g30 + 152);
														if (v74 != 0) {
															// 0xb214c
															if (v74 == 2) {
																// 0xb2154
																function_b1bb0(g28 - 0x3060, g31 - 2, g33 + 1, g20, g36, g32 - 96, g35 - 16);
																// branch -> 0xb2174
															}
															// 0xb2174
															function_b1bb0(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
															// branch -> 0xb2194
														}
													}
												}
											}
											// 0xb2194
											if (__asm_rlwinm_(v52, 0, 27, 27) != 0) {
												// 0xb219c
												if (__asm_rlwinm_(v52, 0, 25, 25) == 0) {
													// 0xb21a4
													v75 = *(int32_t *)(g23 - 0x77ac);
													if (*(int32_t *)(g16 + 0x55ec * *(int32_t *)v75 + 460) != 0) {
														// 0xb21c0
														v36 = g18;
														if (v36 <= 0xffffffff) {
															// 0xb21c8
															*(int32_t *)g25 = -1 - v36;
															v56 = *(int32_t *)g25;
															if (v56 <= 199) {
																// 0xb21e0
																v57 = *(int32_t *)(g23 - 0x7754) + 232 * v56;
																g30 = v57;
																if (*(int32_t *)(v57 + 160) % 2 == 0) {
																	// 0xb21f8
																	v76 = *(int32_t *)(v57 + 224);
																	if (v76 != 0) {
																		// 0xb2204
																		g34 = v57 + 84;
																		g27 = g35 + *(int32_t *)(v57 + 60);
																		g26 = g32 + *(int32_t *)(v57 + 56) - *(int32_t *)(v76 + 496);
																		function_c9b28();
																		if (*(int32_t *)g25 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
																			// 0xb2238
																			v37 = g30;
																			v77 = *(int32_t *)(*(int32_t *)(v37 + 224) + 492);
																			g13 = g36;
																			function_50478(233, g26, g27, v37 + 84, *(int32_t *)(v37 + 104), v77, 0);
																			// branch -> 0xb2260
																		}
																		// 0xb2260
																		function_c9b70((int32_t *)(g30 + 84));
																		function_aedfc(g31, g33, g26, g27, *(int32_t *)g25, 0, g36);
																		if (g17 != 0) {
																			// 0xb2290
																			if (*(int32_t *)(g30 + 108) == 0) {
																				// 0xb229c
																				function_b1bb0(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
																				// branch -> 0xb22bc
																			}
																		}
																	}
																}
															}
														}
													}
												} else {
													// 0xb21c0
													v36 = g18;
													if (v36 <= 0xffffffff) {
														// 0xb21c8
														*(int32_t *)g25 = -1 - v36;
														v56 = *(int32_t *)g25;
														if (v56 <= 199) {
															// 0xb21e0
															v57 = *(int32_t *)(g23 - 0x7754) + 232 * v56;
															g30 = v57;
															if (*(int32_t *)(v57 + 160) % 2 == 0) {
																// 0xb21f8
																v76 = *(int32_t *)(v57 + 224);
																if (v76 != 0) {
																	// 0xb2204
																	g34 = v57 + 84;
																	g27 = g35 + *(int32_t *)(v57 + 60);
																	g26 = g32 + *(int32_t *)(v57 + 56) - *(int32_t *)(v76 + 496);
																	function_c9b28();
																	if (*(int32_t *)g25 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
																		// 0xb2238
																		v37 = g30;
																		v77 = *(int32_t *)(*(int32_t *)(v37 + 224) + 492);
																		g13 = g36;
																		function_50478(233, g26, g27, v37 + 84, *(int32_t *)(v37 + 104), v77, 0);
																		// branch -> 0xb2260
																	}
																	// 0xb2260
																	function_c9b70((int32_t *)(g30 + 84));
																	function_aedfc(g31, g33, g26, g27, *(int32_t *)g25, 0, g36);
																	if (g17 != 0) {
																		// 0xb2290
																		if (*(int32_t *)(g30 + 108) == 0) {
																			// 0xb229c
																			function_b1bb0(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
																			// branch -> 0xb22bc
																		}
																	}
																}
															}
														}
													}
												}
												// 0xb22bc
												if (__asm_rlwinm_(v52, 0, 29, 29) != 0) {
													// 0xb22c4
													function_af6d0(g31, g33, g32, g35, 0, g36, 0);
													// branch -> 0xb22e4
												}
												// 0xb22e4
												v45 = 0x1000000 * g22;
												if (v45 >= 0 && (v45 || 0xffffff) >= 0x1ffffff) {
													// 0xb22ec
													v46 = v45 / 0x1000000 - 1;
													if (v46 <= 3) {
														// 0xb22fc
														v58 = g16 + 0x55ec * v46;
														v59 = g35 + *(int32_t *)(v58 + 100);
														v60 = g32 + *(int32_t *)(v58 + 96) - *(int32_t *)(v58 + 148);
														v78 = *(int32_t *)(v58 + 140);
														g13 = *(int32_t *)(v58 + 144);
														function_af18c(v46, g31, g33, v60, v59, *(int32_t *)(v58 + 124), v78, 0, g36);
														if (g17 != 0) {
															// 0xb2348
															v79 = *(int32_t *)(g30 + 152);
															if (v79 != 0) {
																// 0xb2354
																if (v79 == 2) {
																	// 0xb235c
																	function_b1bb0(g28 - 0x3060, g31 - 2, g33 + 1, g20, g36, g32 - 96, g35 - 16);
																	// branch -> 0xb237c
																}
																// 0xb237c
																function_b1bb0(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
																// branch -> 0xb239c
															}
														}
													}
												}
												// 0xb239c
												if (v15 >= 1) {
													// 0xb23a8
													if (__asm_rlwinm_(v52, 0, 25, 25) == 0) {
														// 0xb23b0
														v80 = *(int32_t *)(g23 - 0x77ac);
														if (*(int32_t *)(g16 + 0x55ec * *(int32_t *)v80 + 460) != 0) {
															// 0xb23cc
															*(int32_t *)g25 = v16 - 1;
															v94 = *(int32_t *)g25;
															if (v94 <= 199) {
																// 0xb23e4
																v95 = *(int32_t *)(g23 - 0x7754) + 232 * v94;
																g30 = v95;
																if (*(int32_t *)(v95 + 160) % 2 == 0) {
																	// 0xb23fc
																	v99 = *(int32_t *)(v95 + 224);
																	if (v99 != 0) {
																		// 0xb2408
																		g34 = v95 + 84;
																		g27 = g35 + *(int32_t *)(v95 + 60);
																		g26 = g32 + *(int32_t *)(v95 + 56) - *(int32_t *)(v99 + 496);
																		function_c9b28();
																		if (*(int32_t *)g25 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
																			// 0xb243c
																			v81 = g30;
																			v100 = *(int32_t *)(*(int32_t *)(v81 + 224) + 492);
																			g13 = g36;
																			function_50478(233, g26, g27, v81 + 84, *(int32_t *)(v81 + 104), v100, 0);
																			// branch -> 0xb2464
																		}
																		// 0xb2464
																		function_c9b70((int32_t *)(g30 + 84));
																		function_aedfc(g31, g33, g26, g27, *(int32_t *)g25, 0, g36);
																		if (g17 != 0) {
																			// 0xb2494
																			if (*(int32_t *)(g30 + 108) == 0) {
																				// 0xb24a0
																				function_b1bb0(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
																				// branch -> 0xb24c0
																			}
																		}
																	}
																}
															}
														}
													} else {
														// 0xb23cc
														*(int32_t *)g25 = v16 - 1;
														v94 = *(int32_t *)g25;
														if (v94 <= 199) {
															// 0xb23e4
															v95 = *(int32_t *)(g23 - 0x7754) + 232 * v94;
															g30 = v95;
															if (*(int32_t *)(v95 + 160) % 2 == 0) {
																// 0xb23fc
																v99 = *(int32_t *)(v95 + 224);
																if (v99 != 0) {
																	// 0xb2408
																	g34 = v95 + 84;
																	g27 = g35 + *(int32_t *)(v95 + 60);
																	g26 = g32 + *(int32_t *)(v95 + 56) - *(int32_t *)(v99 + 496);
																	function_c9b28();
																	if (*(int32_t *)g25 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
																		// 0xb243c
																		v81 = g30;
																		v100 = *(int32_t *)(*(int32_t *)(v81 + 224) + 492);
																		g13 = g36;
																		function_50478(233, g26, g27, v81 + 84, *(int32_t *)(v81 + 104), v100, 0);
																		// branch -> 0xb2464
																	}
																	// 0xb2464
																	function_c9b70((int32_t *)(g30 + 84));
																	function_aedfc(g31, g33, g26, g27, *(int32_t *)g25, 0, g36);
																	if (g17 != 0) {
																		// 0xb2494
																		if (*(int32_t *)(g30 + 108) == 0) {
																			// 0xb24a0
																			function_b1bb0(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
																			// branch -> 0xb24c0
																		}
																	}
																}
															}
														}
													}
													// 0xb24c0
													if (v52 % 2 != 0) {
														// 0xb24c8
														DrawMissile(g31, g33, g32, g35, 0, g36, 0);
														// branch -> 0xb24e8
													}
													// 0xb24e8
													if (v9 != 0) {
														// 0xb24f4
														v82 = g23;
														v101 = *(int32_t *)(v82 - 0x70cc);
														v102 = *(int32_t *)(v82 - 0x7290);
														if (*(int32_t *)v102 < (int32_t) * (char *)v101) {
															// 0xb2510
															DrawObject(g31, g33, g32, g35, 0, 0, g36);
															// branch -> 0xb2530
														}
													}
													// 0xb2530
													v83 = g21;
													v91 = 0x1000000 * v83;
													v96 = v91 / 0x1000000;
													if ((v91 || 0xffffff) >= 0x1ffffff) {
														// 0xb2538
														v92 = v96 - 1;
														g27 = v92;
														v97 = *(int32_t *)(g23 - 0x7690) + 368 * v92;
														g31 = v97;
														if (*(int32_t *)(v97 + 52) != 0) {
															// 0xb2558
															if (v83 <= 127) {
																// 0xb2560
																g34 = *(int32_t *)(v97 + 24);
																v84 = function_c9948();
																g29 = v84;
																v85 = g31;
																if (v84 == 0) {
																	// 0xb2570
																	function_c9acc(*(int32_t *)(v85 + 24));
																	// branch -> 0xb261c
																} else {
																	// 0xb257c
																	v103 = *(int32_t *)(v85 + 32);
																	g11 = v103;
																	v108 = v85;
																	if (v103 >= 1) {
																		// 0xb2588
																		if (function_4d794(v84) > 50) {
																			// 0xb2588
																			v108 = g31;
																			// branch -> 0xb25ac
																		} else {
																			// 0xb2598
																			v93 = function_4d794(g29);
																			v86 = g31;
																			v104 = *(int32_t *)(v86 + 32);
																			g40 = v104;
																			if (v104 <= v93) {
																				// 0xb25b8
																				v87 = g27;
																				v98 = g32 - *(int32_t *)(v86 + 40);
																				g27 = v98;
																				v89 = v98;
																				v90 = v86;
																				if (v87 == (int32_t) * (char *)*(int32_t *)(g23 - 0x7748)) {
																					// 0xb25d4
																					g37 = v98;
																					v105 = *(int32_t *)(v86 + 36);
																					g41 = v105;
																					v88 = g35;
																					g38 = v88;
																					g13 = g36;
																					g42 = 0;
																					CelDecodeClr(181, v98, v88, *(int32_t *)(v86 + 24), v104, v105, 0);
																					v89 = g27;
																					v90 = g31;
																					// branch -> 0xb25f4
																				}
																				// 0xb25f4
																				v106 = *(int32_t *)(v90 + 32);
																				v107 = *(int32_t *)(v90 + 36);
																				CelDecodeHdrLightOnly(v89, g35, *(int32_t *)(v90 + 24), v106, v107, 0, g36);
																				function_c9acc(*(int32_t *)(g31 + 24));
																				// branch -> 0xb261c
																				// Detected a possible infinite recursion (goto support failed); quitting...
																			} else {
																				v108 = v86;
																			}
																		}
																		// 0xb25ac
																		function_c9acc(*(int32_t *)(v108 + 24));
																		// branch -> 0xb261c
																		// Detected a possible infinite recursion (goto support failed); quitting...
																	}
																	// 0xb25ac
																	function_c9acc(*(int32_t *)(v108 + 24));
																	// branch -> 0xb261c
																}
																// Detected a possible infinite recursion (goto support failed); quitting...
															}
														}
													}
													// Detected a possible infinite recursion (goto support failed); quitting...
												}
												// 0xb24c0
												if (v52 % 2 != 0) {
													// 0xb24c8
													DrawMissile(g31, g33, g32, g35, 0, g36, 0);
													// branch -> 0xb24e8
												}
												// 0xb24e8
												if (v9 != 0) {
													// 0xb24f4
													v82 = g23;
													v101 = *(int32_t *)(v82 - 0x70cc);
													v102 = *(int32_t *)(v82 - 0x7290);
													if (*(int32_t *)v102 < (int32_t) * (char *)v101) {
														// 0xb2510
														DrawObject(g31, g33, g32, g35, 0, 0, g36);
														// branch -> 0xb2530
													}
												}
												// 0xb2530
												v83 = g21;
												v91 = 0x1000000 * v83;
												v96 = v91 / 0x1000000;
												if ((v91 || 0xffffff) >= 0x1ffffff) {
													// 0xb2538
													v92 = v96 - 1;
													g27 = v92;
													v97 = *(int32_t *)(g23 - 0x7690) + 368 * v92;
													g31 = v97;
													if (*(int32_t *)(v97 + 52) != 0) {
														// 0xb2558
														if (v83 <= 127) {
															// 0xb2560
															g34 = *(int32_t *)(v97 + 24);
															v84 = function_c9948();
															g29 = v84;
															v85 = g31;
															if (v84 == 0) {
																// 0xb2570
																function_c9acc(*(int32_t *)(v85 + 24));
																// branch -> 0xb261c
															} else {
																// 0xb257c
																v103 = *(int32_t *)(v85 + 32);
																g11 = v103;
																v108 = v85;
																if (v103 >= 1) {
																	// 0xb2588
																	if (function_4d794(v84) > 50) {
																		// 0xb2588
																		v108 = g31;
																		// branch -> 0xb25ac
																	} else {
																		// 0xb2598
																		v93 = function_4d794(g29);
																		v86 = g31;
																		v104 = *(int32_t *)(v86 + 32);
																		g40 = v104;
																		if (v104 <= v93) {
																			// 0xb25b8
																			v87 = g27;
																			v98 = g32 - *(int32_t *)(v86 + 40);
																			g27 = v98;
																			v89 = v98;
																			v90 = v86;
																			if (v87 == (int32_t) * (char *)*(int32_t *)(g23 - 0x7748)) {
																				// 0xb25d4
																				g37 = v98;
																				v105 = *(int32_t *)(v86 + 36);
																				g41 = v105;
																				v88 = g35;
																				g38 = v88;
																				g13 = g36;
																				g42 = 0;
																				CelDecodeClr(181, v98, v88, *(int32_t *)(v86 + 24), v104, v105, 0);
																				v89 = g27;
																				v90 = g31;
																				// branch -> 0xb25f4
																			}
																			// 0xb25f4
																			v106 = *(int32_t *)(v90 + 32);
																			v107 = *(int32_t *)(v90 + 36);
																			CelDecodeHdrLightOnly(v89, g35, *(int32_t *)(v90 + 24), v106, v107, 0, g36);
																			function_c9acc(*(int32_t *)(g31 + 24));
																			// branch -> 0xb261c
																			// Detected a possible infinite recursion (goto support failed); quitting...
																		} else {
																			v108 = v86;
																		}
																	}
																	// 0xb25ac
																	function_c9acc(*(int32_t *)(v108 + 24));
																	// branch -> 0xb261c
																	// Detected a possible infinite recursion (goto support failed); quitting...
																}
																// 0xb25ac
																function_c9acc(*(int32_t *)(v108 + 24));
																// branch -> 0xb261c
															}
															// Detected a possible infinite recursion (goto support failed); quitting...
														}
													}
												}
												// Detected a possible infinite recursion (goto support failed); quitting...
											}
											// 0xb22bc
											if (__asm_rlwinm_(v52, 0, 29, 29) != 0) {
												// 0xb22c4
												function_af6d0(g31, g33, g32, g35, 0, g36, 0);
												// branch -> 0xb22e4
											}
											// 0xb22e4
											v45 = 0x1000000 * g22;
											if (v45 >= 0 && (v45 || 0xffffff) >= 0x1ffffff) {
												// 0xb22ec
												v46 = v45 / 0x1000000 - 1;
												if (v46 <= 3) {
													// 0xb22fc
													v58 = g16 + 0x55ec * v46;
													v59 = g35 + *(int32_t *)(v58 + 100);
													v60 = g32 + *(int32_t *)(v58 + 96) - *(int32_t *)(v58 + 148);
													v78 = *(int32_t *)(v58 + 140);
													g13 = *(int32_t *)(v58 + 144);
													function_af18c(v46, g31, g33, v60, v59, *(int32_t *)(v58 + 124), v78, 0, g36);
													if (g17 != 0) {
														// 0xb2348
														v79 = *(int32_t *)(g30 + 152);
														if (v79 != 0) {
															// 0xb2354
															if (v79 == 2) {
																// 0xb235c
																function_b1bb0(g28 - 0x3060, g31 - 2, g33 + 1, g20, g36, g32 - 96, g35 - 16);
																// branch -> 0xb237c
															}
															// 0xb237c
															function_b1bb0(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
															// branch -> 0xb239c
														}
													}
												}
											}
											// 0xb239c
											if (v15 >= 1) {
												// 0xb23a8
												if (__asm_rlwinm_(v52, 0, 25, 25) == 0) {
													// 0xb23b0
													v80 = *(int32_t *)(g23 - 0x77ac);
													if (*(int32_t *)(g16 + 0x55ec * *(int32_t *)v80 + 460) != 0) {
														// 0xb23cc
														*(int32_t *)g25 = v16 - 1;
														v94 = *(int32_t *)g25;
														if (v94 <= 199) {
															// 0xb23e4
															v95 = *(int32_t *)(g23 - 0x7754) + 232 * v94;
															g30 = v95;
															if (*(int32_t *)(v95 + 160) % 2 == 0) {
																// 0xb23fc
																v99 = *(int32_t *)(v95 + 224);
																if (v99 != 0) {
																	// 0xb2408
																	g34 = v95 + 84;
																	g27 = g35 + *(int32_t *)(v95 + 60);
																	g26 = g32 + *(int32_t *)(v95 + 56) - *(int32_t *)(v99 + 496);
																	function_c9b28();
																	if (*(int32_t *)g25 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
																		// 0xb243c
																		v81 = g30;
																		v100 = *(int32_t *)(*(int32_t *)(v81 + 224) + 492);
																		g13 = g36;
																		function_50478(233, g26, g27, v81 + 84, *(int32_t *)(v81 + 104), v100, 0);
																		// branch -> 0xb2464
																	}
																	// 0xb2464
																	function_c9b70((int32_t *)(g30 + 84));
																	function_aedfc(g31, g33, g26, g27, *(int32_t *)g25, 0, g36);
																	if (g17 != 0) {
																		// 0xb2494
																		if (*(int32_t *)(g30 + 108) == 0) {
																			// 0xb24a0
																			function_b1bb0(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
																			// branch -> 0xb24c0
																		}
																	}
																}
															}
														}
													}
												} else {
													// 0xb23cc
													*(int32_t *)g25 = v16 - 1;
													v94 = *(int32_t *)g25;
													if (v94 <= 199) {
														// 0xb23e4
														v95 = *(int32_t *)(g23 - 0x7754) + 232 * v94;
														g30 = v95;
														if (*(int32_t *)(v95 + 160) % 2 == 0) {
															// 0xb23fc
															v99 = *(int32_t *)(v95 + 224);
															if (v99 != 0) {
																// 0xb2408
																g34 = v95 + 84;
																g27 = g35 + *(int32_t *)(v95 + 60);
																g26 = g32 + *(int32_t *)(v95 + 56) - *(int32_t *)(v99 + 496);
																function_c9b28();
																if (*(int32_t *)g25 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
																	// 0xb243c
																	v81 = g30;
																	v100 = *(int32_t *)(*(int32_t *)(v81 + 224) + 492);
																	g13 = g36;
																	function_50478(233, g26, g27, v81 + 84, *(int32_t *)(v81 + 104), v100, 0);
																	// branch -> 0xb2464
																}
																// 0xb2464
																function_c9b70((int32_t *)(g30 + 84));
																function_aedfc(g31, g33, g26, g27, *(int32_t *)g25, 0, g36);
																if (g17 != 0) {
																	// 0xb2494
																	if (*(int32_t *)(g30 + 108) == 0) {
																		// 0xb24a0
																		function_b1bb0(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
																		// branch -> 0xb24c0
																	}
																}
															}
														}
													}
												}
												// 0xb24c0
												if (v52 % 2 != 0) {
													// 0xb24c8
													DrawMissile(g31, g33, g32, g35, 0, g36, 0);
													// branch -> 0xb24e8
												}
												// 0xb24e8
												if (v9 != 0) {
													// 0xb24f4
													v82 = g23;
													v101 = *(int32_t *)(v82 - 0x70cc);
													v102 = *(int32_t *)(v82 - 0x7290);
													if (*(int32_t *)v102 < (int32_t) * (char *)v101) {
														// 0xb2510
														DrawObject(g31, g33, g32, g35, 0, 0, g36);
														// branch -> 0xb2530
													}
												}
												// 0xb2530
												v83 = g21;
												v91 = 0x1000000 * v83;
												v96 = v91 / 0x1000000;
												if ((v91 || 0xffffff) >= 0x1ffffff) {
													// 0xb2538
													v92 = v96 - 1;
													g27 = v92;
													v97 = *(int32_t *)(g23 - 0x7690) + 368 * v92;
													g31 = v97;
													if (*(int32_t *)(v97 + 52) != 0) {
														// 0xb2558
														if (v83 <= 127) {
															// 0xb2560
															g34 = *(int32_t *)(v97 + 24);
															v84 = function_c9948();
															g29 = v84;
															v85 = g31;
															if (v84 == 0) {
																// 0xb2570
																function_c9acc(*(int32_t *)(v85 + 24));
																// branch -> 0xb261c
															} else {
																// 0xb257c
																v103 = *(int32_t *)(v85 + 32);
																g11 = v103;
																v108 = v85;
																if (v103 >= 1) {
																	// 0xb2588
																	if (function_4d794(v84) > 50) {
																		// 0xb2588
																		v108 = g31;
																		// branch -> 0xb25ac
																	} else {
																		// 0xb2598
																		v93 = function_4d794(g29);
																		v86 = g31;
																		v104 = *(int32_t *)(v86 + 32);
																		g40 = v104;
																		if (v104 <= v93) {
																			// 0xb25b8
																			v87 = g27;
																			v98 = g32 - *(int32_t *)(v86 + 40);
																			g27 = v98;
																			v89 = v98;
																			v90 = v86;
																			if (v87 == (int32_t) * (char *)*(int32_t *)(g23 - 0x7748)) {
																				// 0xb25d4
																				g37 = v98;
																				v105 = *(int32_t *)(v86 + 36);
																				g41 = v105;
																				v88 = g35;
																				g38 = v88;
																				g13 = g36;
																				g42 = 0;
																				CelDecodeClr(181, v98, v88, *(int32_t *)(v86 + 24), v104, v105, 0);
																				v89 = g27;
																				v90 = g31;
																				// branch -> 0xb25f4
																			}
																			// 0xb25f4
																			v106 = *(int32_t *)(v90 + 32);
																			v107 = *(int32_t *)(v90 + 36);
																			CelDecodeHdrLightOnly(v89, g35, *(int32_t *)(v90 + 24), v106, v107, 0, g36);
																			function_c9acc(*(int32_t *)(g31 + 24));
																			// branch -> 0xb261c
																			// Detected a possible infinite recursion (goto support failed); quitting...
																		} else {
																			v108 = v86;
																		}
																	}
																	// 0xb25ac
																	function_c9acc(*(int32_t *)(v108 + 24));
																	// branch -> 0xb261c
																	// Detected a possible infinite recursion (goto support failed); quitting...
																}
																// 0xb25ac
																function_c9acc(*(int32_t *)(v108 + 24));
																// branch -> 0xb261c
															}
															// Detected a possible infinite recursion (goto support failed); quitting...
														}
													}
												}
												// Detected a possible infinite recursion (goto support failed); quitting...
											}
											// 0xb24c0
											if (v52 % 2 != 0) {
												// 0xb24c8
												DrawMissile(g31, g33, g32, g35, 0, g36, 0);
												// branch -> 0xb24e8
											}
											// 0xb24e8
											if (v9 != 0) {
												// 0xb24f4
												v82 = g23;
												v101 = *(int32_t *)(v82 - 0x70cc);
												v102 = *(int32_t *)(v82 - 0x7290);
												if (*(int32_t *)v102 < (int32_t) * (char *)v101) {
													// 0xb2510
													DrawObject(g31, g33, g32, g35, 0, 0, g36);
													// branch -> 0xb2530
												}
											}
											// 0xb2530
											v83 = g21;
											v91 = 0x1000000 * v83;
											v96 = v91 / 0x1000000;
											if ((v91 || 0xffffff) >= 0x1ffffff) {
												// 0xb2538
												v92 = v96 - 1;
												g27 = v92;
												v97 = *(int32_t *)(g23 - 0x7690) + 368 * v92;
												g31 = v97;
												if (*(int32_t *)(v97 + 52) != 0) {
													// 0xb2558
													if (v83 <= 127) {
														// 0xb2560
														g34 = *(int32_t *)(v97 + 24);
														v84 = function_c9948();
														g29 = v84;
														v85 = g31;
														if (v84 == 0) {
															// 0xb2570
															function_c9acc(*(int32_t *)(v85 + 24));
															// branch -> 0xb261c
														} else {
															// 0xb257c
															v103 = *(int32_t *)(v85 + 32);
															g11 = v103;
															v108 = v85;
															if (v103 >= 1) {
																// 0xb2588
																if (function_4d794(v84) > 50) {
																	// 0xb2588
																	v108 = g31;
																	// branch -> 0xb25ac
																} else {
																	// 0xb2598
																	v93 = function_4d794(g29);
																	v86 = g31;
																	v104 = *(int32_t *)(v86 + 32);
																	g40 = v104;
																	if (v104 <= v93) {
																		// 0xb25b8
																		v87 = g27;
																		v98 = g32 - *(int32_t *)(v86 + 40);
																		g27 = v98;
																		v89 = v98;
																		v90 = v86;
																		if (v87 == (int32_t) * (char *)*(int32_t *)(g23 - 0x7748)) {
																			// 0xb25d4
																			g37 = v98;
																			v105 = *(int32_t *)(v86 + 36);
																			g41 = v105;
																			v88 = g35;
																			g38 = v88;
																			g13 = g36;
																			g42 = 0;
																			CelDecodeClr(181, v98, v88, *(int32_t *)(v86 + 24), v104, v105, 0);
																			v89 = g27;
																			v90 = g31;
																			// branch -> 0xb25f4
																		}
																		// 0xb25f4
																		v106 = *(int32_t *)(v90 + 32);
																		v107 = *(int32_t *)(v90 + 36);
																		CelDecodeHdrLightOnly(v89, g35, *(int32_t *)(v90 + 24), v106, v107, 0, g36);
																		function_c9acc(*(int32_t *)(g31 + 24));
																		// branch -> 0xb261c
																		// Detected a possible infinite recursion (goto support failed); quitting...
																	} else {
																		v108 = v86;
																	}
																}
																// 0xb25ac
																function_c9acc(*(int32_t *)(v108 + 24));
																// branch -> 0xb261c
																// Detected a possible infinite recursion (goto support failed); quitting...
															}
															// 0xb25ac
															function_c9acc(*(int32_t *)(v108 + 24));
															// branch -> 0xb261c
														}
														// Detected a possible infinite recursion (goto support failed); quitting...
													}
												}
											}
											// Detected a possible infinite recursion (goto support failed); quitting...
										}
									}
								}
								// 0xb20d0
								v52 = v12;
								g29 = v52;
								if (__asm_rlwinm_(v52, 0, 26, 26) != 0) {
									// 0xb20dc
									v44 = -1 - (int32_t)v17;
									if (v44 <= 3) {
										// 0xb20f4
										v53 = g16 + 0x55ec * v44;
										v54 = g35 + *(int32_t *)(v53 + 100);
										v55 = g32 + *(int32_t *)(v53 + 96) - *(int32_t *)(v53 + 148);
										v72 = *(int32_t *)(v53 + 124);
										v73 = *(int32_t *)(v53 + 140);
										g13 = *(int32_t *)(v53 + 144);
										function_af18c(v44, g31, g33 - 1, v55, v54, v72, v73, 0, g36);
										if (g17 != 0) {
											// 0xb2140
											v74 = *(int32_t *)(g30 + 152);
											if (v74 != 0) {
												// 0xb214c
												if (v74 == 2) {
													// 0xb2154
													function_b1bb0(g28 - 0x3060, g31 - 2, g33 + 1, g20, g36, g32 - 96, g35 - 16);
													// branch -> 0xb2174
												}
												// 0xb2174
												function_b1bb0(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
												// branch -> 0xb2194
											}
										}
									}
								}
								// 0xb2194
								if (__asm_rlwinm_(v52, 0, 27, 27) != 0) {
									// 0xb219c
									if (__asm_rlwinm_(v52, 0, 25, 25) == 0) {
										// 0xb21a4
										v75 = *(int32_t *)(g23 - 0x77ac);
										if (*(int32_t *)(g16 + 0x55ec * *(int32_t *)v75 + 460) != 0) {
											// 0xb21c0
											v36 = g18;
											if (v36 <= 0xffffffff) {
												// 0xb21c8
												*(int32_t *)g25 = -1 - v36;
												v56 = *(int32_t *)g25;
												if (v56 <= 199) {
													// 0xb21e0
													v57 = *(int32_t *)(g23 - 0x7754) + 232 * v56;
													g30 = v57;
													if (*(int32_t *)(v57 + 160) % 2 == 0) {
														// 0xb21f8
														v76 = *(int32_t *)(v57 + 224);
														if (v76 != 0) {
															// 0xb2204
															g34 = v57 + 84;
															g27 = g35 + *(int32_t *)(v57 + 60);
															g26 = g32 + *(int32_t *)(v57 + 56) - *(int32_t *)(v76 + 496);
															function_c9b28();
															if (*(int32_t *)g25 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
																// 0xb2238
																v37 = g30;
																v77 = *(int32_t *)(*(int32_t *)(v37 + 224) + 492);
																g13 = g36;
																function_50478(233, g26, g27, v37 + 84, *(int32_t *)(v37 + 104), v77, 0);
																// branch -> 0xb2260
															}
															// 0xb2260
															function_c9b70((int32_t *)(g30 + 84));
															function_aedfc(g31, g33, g26, g27, *(int32_t *)g25, 0, g36);
															if (g17 != 0) {
																// 0xb2290
																if (*(int32_t *)(g30 + 108) == 0) {
																	// 0xb229c
																	function_b1bb0(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
																	// branch -> 0xb22bc
																}
															}
														}
													}
												}
											}
										}
									} else {
										// 0xb21c0
										v36 = g18;
										if (v36 <= 0xffffffff) {
											// 0xb21c8
											*(int32_t *)g25 = -1 - v36;
											v56 = *(int32_t *)g25;
											if (v56 <= 199) {
												// 0xb21e0
												v57 = *(int32_t *)(g23 - 0x7754) + 232 * v56;
												g30 = v57;
												if (*(int32_t *)(v57 + 160) % 2 == 0) {
													// 0xb21f8
													v76 = *(int32_t *)(v57 + 224);
													if (v76 != 0) {
														// 0xb2204
														g34 = v57 + 84;
														g27 = g35 + *(int32_t *)(v57 + 60);
														g26 = g32 + *(int32_t *)(v57 + 56) - *(int32_t *)(v76 + 496);
														function_c9b28();
														if (*(int32_t *)g25 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
															// 0xb2238
															v37 = g30;
															v77 = *(int32_t *)(*(int32_t *)(v37 + 224) + 492);
															g13 = g36;
															function_50478(233, g26, g27, v37 + 84, *(int32_t *)(v37 + 104), v77, 0);
															// branch -> 0xb2260
														}
														// 0xb2260
														function_c9b70((int32_t *)(g30 + 84));
														function_aedfc(g31, g33, g26, g27, *(int32_t *)g25, 0, g36);
														if (g17 != 0) {
															// 0xb2290
															if (*(int32_t *)(g30 + 108) == 0) {
																// 0xb229c
																function_b1bb0(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
																// branch -> 0xb22bc
															}
														}
													}
												}
											}
										}
									}
									// 0xb22bc
									if (__asm_rlwinm_(v52, 0, 29, 29) != 0) {
										// 0xb22c4
										function_af6d0(g31, g33, g32, g35, 0, g36, 0);
										// branch -> 0xb22e4
									}
									// 0xb22e4
									v45 = 0x1000000 * g22;
									if (v45 >= 0 && (v45 || 0xffffff) >= 0x1ffffff) {
										// 0xb22ec
										v46 = v45 / 0x1000000 - 1;
										if (v46 <= 3) {
											// 0xb22fc
											v58 = g16 + 0x55ec * v46;
											v59 = g35 + *(int32_t *)(v58 + 100);
											v60 = g32 + *(int32_t *)(v58 + 96) - *(int32_t *)(v58 + 148);
											v78 = *(int32_t *)(v58 + 140);
											g13 = *(int32_t *)(v58 + 144);
											function_af18c(v46, g31, g33, v60, v59, *(int32_t *)(v58 + 124), v78, 0, g36);
											if (g17 != 0) {
												// 0xb2348
												v79 = *(int32_t *)(g30 + 152);
												if (v79 != 0) {
													// 0xb2354
													if (v79 == 2) {
														// 0xb235c
														function_b1bb0(g28 - 0x3060, g31 - 2, g33 + 1, g20, g36, g32 - 96, g35 - 16);
														// branch -> 0xb237c
													}
													// 0xb237c
													function_b1bb0(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
													// branch -> 0xb239c
												}
											}
										}
									}
									// 0xb239c
									if (v15 >= 1) {
										// 0xb23a8
										if (__asm_rlwinm_(v52, 0, 25, 25) == 0) {
											// 0xb23b0
											v80 = *(int32_t *)(g23 - 0x77ac);
											if (*(int32_t *)(g16 + 0x55ec * *(int32_t *)v80 + 460) != 0) {
												// 0xb23cc
												*(int32_t *)g25 = v16 - 1;
												v94 = *(int32_t *)g25;
												if (v94 <= 199) {
													// 0xb23e4
													v95 = *(int32_t *)(g23 - 0x7754) + 232 * v94;
													g30 = v95;
													if (*(int32_t *)(v95 + 160) % 2 == 0) {
														// 0xb23fc
														v99 = *(int32_t *)(v95 + 224);
														if (v99 != 0) {
															// 0xb2408
															g34 = v95 + 84;
															g27 = g35 + *(int32_t *)(v95 + 60);
															g26 = g32 + *(int32_t *)(v95 + 56) - *(int32_t *)(v99 + 496);
															function_c9b28();
															if (*(int32_t *)g25 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
																// 0xb243c
																v81 = g30;
																v100 = *(int32_t *)(*(int32_t *)(v81 + 224) + 492);
																g13 = g36;
																function_50478(233, g26, g27, v81 + 84, *(int32_t *)(v81 + 104), v100, 0);
																// branch -> 0xb2464
															}
															// 0xb2464
															function_c9b70((int32_t *)(g30 + 84));
															function_aedfc(g31, g33, g26, g27, *(int32_t *)g25, 0, g36);
															if (g17 != 0) {
																// 0xb2494
																if (*(int32_t *)(g30 + 108) == 0) {
																	// 0xb24a0
																	function_b1bb0(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
																	// branch -> 0xb24c0
																}
															}
														}
													}
												}
											}
										} else {
											// 0xb23cc
											*(int32_t *)g25 = v16 - 1;
											v94 = *(int32_t *)g25;
											if (v94 <= 199) {
												// 0xb23e4
												v95 = *(int32_t *)(g23 - 0x7754) + 232 * v94;
												g30 = v95;
												if (*(int32_t *)(v95 + 160) % 2 == 0) {
													// 0xb23fc
													v99 = *(int32_t *)(v95 + 224);
													if (v99 != 0) {
														// 0xb2408
														g34 = v95 + 84;
														g27 = g35 + *(int32_t *)(v95 + 60);
														g26 = g32 + *(int32_t *)(v95 + 56) - *(int32_t *)(v99 + 496);
														function_c9b28();
														if (*(int32_t *)g25 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
															// 0xb243c
															v81 = g30;
															v100 = *(int32_t *)(*(int32_t *)(v81 + 224) + 492);
															g13 = g36;
															function_50478(233, g26, g27, v81 + 84, *(int32_t *)(v81 + 104), v100, 0);
															// branch -> 0xb2464
														}
														// 0xb2464
														function_c9b70((int32_t *)(g30 + 84));
														function_aedfc(g31, g33, g26, g27, *(int32_t *)g25, 0, g36);
														if (g17 != 0) {
															// 0xb2494
															if (*(int32_t *)(g30 + 108) == 0) {
																// 0xb24a0
																function_b1bb0(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
																// branch -> 0xb24c0
															}
														}
													}
												}
											}
										}
										// 0xb24c0
										if (v52 % 2 != 0) {
											// 0xb24c8
											DrawMissile(g31, g33, g32, g35, 0, g36, 0);
											// branch -> 0xb24e8
										}
										// 0xb24e8
										if (v9 != 0) {
											// 0xb24f4
											v82 = g23;
											v101 = *(int32_t *)(v82 - 0x70cc);
											v102 = *(int32_t *)(v82 - 0x7290);
											if (*(int32_t *)v102 < (int32_t) * (char *)v101) {
												// 0xb2510
												DrawObject(g31, g33, g32, g35, 0, 0, g36);
												// branch -> 0xb2530
											}
										}
										// 0xb2530
										v83 = g21;
										v91 = 0x1000000 * v83;
										v96 = v91 / 0x1000000;
										if ((v91 || 0xffffff) >= 0x1ffffff) {
											// 0xb2538
											v92 = v96 - 1;
											g27 = v92;
											v97 = *(int32_t *)(g23 - 0x7690) + 368 * v92;
											g31 = v97;
											if (*(int32_t *)(v97 + 52) != 0) {
												// 0xb2558
												if (v83 <= 127) {
													// 0xb2560
													g34 = *(int32_t *)(v97 + 24);
													v84 = function_c9948();
													g29 = v84;
													v85 = g31;
													if (v84 == 0) {
														// 0xb2570
														function_c9acc(*(int32_t *)(v85 + 24));
														// branch -> 0xb261c
													} else {
														// 0xb257c
														v103 = *(int32_t *)(v85 + 32);
														g11 = v103;
														v108 = v85;
														if (v103 >= 1) {
															// 0xb2588
															if (function_4d794(v84) > 50) {
																// 0xb2588
																v108 = g31;
																// branch -> 0xb25ac
															} else {
																// 0xb2598
																v93 = function_4d794(g29);
																v86 = g31;
																v104 = *(int32_t *)(v86 + 32);
																g40 = v104;
																if (v104 <= v93) {
																	// 0xb25b8
																	v87 = g27;
																	v98 = g32 - *(int32_t *)(v86 + 40);
																	g27 = v98;
																	v89 = v98;
																	v90 = v86;
																	if (v87 == (int32_t) * (char *)*(int32_t *)(g23 - 0x7748)) {
																		// 0xb25d4
																		g37 = v98;
																		v105 = *(int32_t *)(v86 + 36);
																		g41 = v105;
																		v88 = g35;
																		g38 = v88;
																		g13 = g36;
																		g42 = 0;
																		CelDecodeClr(181, v98, v88, *(int32_t *)(v86 + 24), v104, v105, 0);
																		v89 = g27;
																		v90 = g31;
																		// branch -> 0xb25f4
																	}
																	// 0xb25f4
																	v106 = *(int32_t *)(v90 + 32);
																	v107 = *(int32_t *)(v90 + 36);
																	CelDecodeHdrLightOnly(v89, g35, *(int32_t *)(v90 + 24), v106, v107, 0, g36);
																	function_c9acc(*(int32_t *)(g31 + 24));
																	// branch -> 0xb261c
																	// Detected a possible infinite recursion (goto support failed); quitting...
																} else {
																	v108 = v86;
																}
															}
															// 0xb25ac
															function_c9acc(*(int32_t *)(v108 + 24));
															// branch -> 0xb261c
															// Detected a possible infinite recursion (goto support failed); quitting...
														}
														// Detected a possible infinite recursion (goto support failed); quitting...
													}
													// Detected a possible infinite recursion (goto support failed); quitting...
												}
											}
										}
										// Detected a possible infinite recursion (goto support failed); quitting...
									}
									// 0xb24c0
									if (v52 % 2 != 0) {
										// 0xb24c8
										DrawMissile(g31, g33, g32, g35, 0, g36, 0);
										// branch -> 0xb24e8
									}
									// 0xb24e8
									if (v9 != 0) {
										// 0xb24f4
										v82 = g23;
										v101 = *(int32_t *)(v82 - 0x70cc);
										v102 = *(int32_t *)(v82 - 0x7290);
										if (*(int32_t *)v102 < (int32_t) * (char *)v101) {
											// 0xb2510
											DrawObject(g31, g33, g32, g35, 0, 0, g36);
											// branch -> 0xb2530
										}
									}
									// 0xb2530
									v83 = g21;
									v91 = 0x1000000 * v83;
									v96 = v91 / 0x1000000;
									if ((v91 || 0xffffff) >= 0x1ffffff) {
										// 0xb2538
										v92 = v96 - 1;
										g27 = v92;
										v97 = *(int32_t *)(g23 - 0x7690) + 368 * v92;
										g31 = v97;
										if (*(int32_t *)(v97 + 52) != 0) {
											// 0xb2558
											if (v83 <= 127) {
												// 0xb2560
												g34 = *(int32_t *)(v97 + 24);
												v84 = function_c9948();
												g29 = v84;
												v85 = g31;
												if (v84 == 0) {
													// 0xb2570
													function_c9acc(*(int32_t *)(v85 + 24));
													// branch -> 0xb261c
												} else {
													// 0xb257c
													v103 = *(int32_t *)(v85 + 32);
													g11 = v103;
													if (v103 >= 1) {
														// 0xb2588
														if (function_4d794(v84) > 50) {
															// 0xb2588
															// branch -> 0xb25ac
														} else {
															// 0xb2598
															v93 = function_4d794(g29);
															v86 = g31;
															v104 = *(int32_t *)(v86 + 32);
															g40 = v104;
															if (v104 <= v93) {
																// 0xb25b8
																v87 = g27;
																v98 = g32 - *(int32_t *)(v86 + 40);
																g27 = v98;
																v89 = v98;
																v90 = v86;
																if (v87 == (int32_t) * (char *)*(int32_t *)(g23 - 0x7748)) {
																	// 0xb25d4
																	g37 = v98;
																	v105 = *(int32_t *)(v86 + 36);
																	g41 = v105;
																	v88 = g35;
																	g38 = v88;
																	g13 = g36;
																	g42 = 0;
																	CelDecodeClr(181, v98, v88, *(int32_t *)(v86 + 24), v104, v105, 0);
																	v89 = g27;
																	v90 = g31;
																	// branch -> 0xb25f4
																}
																// 0xb25f4
																v106 = *(int32_t *)(v90 + 32);
																v107 = *(int32_t *)(v90 + 36);
																CelDecodeHdrLightOnly(v89, g35, *(int32_t *)(v90 + 24), v106, v107, 0, g36);
																function_c9acc(*(int32_t *)(g31 + 24));
																// branch -> 0xb261c
																// Detected a possible infinite recursion (goto support failed); quitting...
															}
														}
														// Detected a possible infinite recursion (goto support failed); quitting...
													}
													// Detected a possible infinite recursion (goto support failed); quitting...
												}
												// Detected a possible infinite recursion (goto support failed); quitting...
											}
										}
									}
									// Detected a possible infinite recursion (goto support failed); quitting...
								}
								// 0xb22bc
								if (__asm_rlwinm_(v52, 0, 29, 29) != 0) {
									// 0xb22c4
									function_af6d0(g31, g33, g32, g35, 0, g36, 0);
									// branch -> 0xb22e4
								}
								// 0xb22e4
								v45 = 0x1000000 * g22;
								if (v45 >= 0 && (v45 || 0xffffff) >= 0x1ffffff) {
									// 0xb22ec
									v46 = v45 / 0x1000000 - 1;
									if (v46 <= 3) {
										// 0xb22fc
										v58 = g16 + 0x55ec * v46;
										v59 = g35 + *(int32_t *)(v58 + 100);
										v60 = g32 + *(int32_t *)(v58 + 96) - *(int32_t *)(v58 + 148);
										v78 = *(int32_t *)(v58 + 140);
										g13 = *(int32_t *)(v58 + 144);
										function_af18c(v46, g31, g33, v60, v59, *(int32_t *)(v58 + 124), v78, 0, g36);
										if (g17 != 0) {
											// 0xb2348
											v79 = *(int32_t *)(g30 + 152);
											if (v79 != 0) {
												// 0xb2354
												if (v79 == 2) {
													// 0xb235c
													function_b1bb0(g28 - 0x3060, g31 - 2, g33 + 1, g20, g36, g32 - 96, g35 - 16);
													// branch -> 0xb237c
												}
												// 0xb237c
												function_b1bb0(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
												// branch -> 0xb239c
											}
										}
									}
								}
								// 0xb239c
								if (v15 >= 1) {
									// 0xb23a8
									if (__asm_rlwinm_(v52, 0, 25, 25) == 0) {
										// 0xb23b0
										v80 = *(int32_t *)(g23 - 0x77ac);
										if (*(int32_t *)(g16 + 0x55ec * *(int32_t *)v80 + 460) != 0) {
											// 0xb23cc
											*(int32_t *)g25 = v16 - 1;
											v94 = *(int32_t *)g25;
											if (v94 <= 199) {
												// 0xb23e4
												v95 = *(int32_t *)(g23 - 0x7754) + 232 * v94;
												g30 = v95;
												if (*(int32_t *)(v95 + 160) % 2 == 0) {
													// 0xb23fc
													v99 = *(int32_t *)(v95 + 224);
													if (v99 != 0) {
														// 0xb2408
														g34 = v95 + 84;
														g27 = g35 + *(int32_t *)(v95 + 60);
														g26 = g32 + *(int32_t *)(v95 + 56) - *(int32_t *)(v99 + 496);
														function_c9b28();
														if (*(int32_t *)g25 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
															// 0xb243c
															v81 = g30;
															v100 = *(int32_t *)(*(int32_t *)(v81 + 224) + 492);
															g13 = g36;
															function_50478(233, g26, g27, v81 + 84, *(int32_t *)(v81 + 104), v100, 0);
															// branch -> 0xb2464
														}
														// 0xb2464
														function_c9b70((int32_t *)(g30 + 84));
														function_aedfc(g31, g33, g26, g27, *(int32_t *)g25, 0, g36);
														if (g17 != 0) {
															// 0xb2494
															if (*(int32_t *)(g30 + 108) == 0) {
																// 0xb24a0
																function_b1bb0(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
																// branch -> 0xb24c0
															}
														}
													}
												}
											}
										}
									} else {
										// 0xb23cc
										*(int32_t *)g25 = v16 - 1;
										v94 = *(int32_t *)g25;
										if (v94 <= 199) {
											// 0xb23e4
											v95 = *(int32_t *)(g23 - 0x7754) + 232 * v94;
											g30 = v95;
											if (*(int32_t *)(v95 + 160) % 2 == 0) {
												// 0xb23fc
												v99 = *(int32_t *)(v95 + 224);
												if (v99 != 0) {
													// 0xb2408
													g34 = v95 + 84;
													g27 = g35 + *(int32_t *)(v95 + 60);
													g26 = g32 + *(int32_t *)(v95 + 56) - *(int32_t *)(v99 + 496);
													function_c9b28();
													if (*(int32_t *)g25 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
														// 0xb243c
														v81 = g30;
														v100 = *(int32_t *)(*(int32_t *)(v81 + 224) + 492);
														g13 = g36;
														function_50478(233, g26, g27, v81 + 84, *(int32_t *)(v81 + 104), v100, 0);
														// branch -> 0xb2464
													}
													// 0xb2464
													function_c9b70((int32_t *)(g30 + 84));
													function_aedfc(g31, g33, g26, g27, *(int32_t *)g25, 0, g36);
													if (g17 != 0) {
														// 0xb2494
														if (*(int32_t *)(g30 + 108) == 0) {
															// 0xb24a0
															function_b1bb0(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
															// branch -> 0xb24c0
														}
													}
												}
											}
										}
									}
									// 0xb24c0
									if (v52 % 2 != 0) {
										// 0xb24c8
										DrawMissile(g31, g33, g32, g35, 0, g36, 0);
										// branch -> 0xb24e8
									}
									// 0xb24e8
									if (v9 != 0) {
										// 0xb24f4
										v82 = g23;
										v101 = *(int32_t *)(v82 - 0x70cc);
										v102 = *(int32_t *)(v82 - 0x7290);
										if (*(int32_t *)v102 < (int32_t) * (char *)v101) {
											// 0xb2510
											DrawObject(g31, g33, g32, g35, 0, 0, g36);
											// branch -> 0xb2530
										}
									}
									// 0xb2530
									v83 = g21;
									v91 = 0x1000000 * v83;
									v96 = v91 / 0x1000000;
									if ((v91 || 0xffffff) >= 0x1ffffff) {
										// 0xb2538
										v92 = v96 - 1;
										g27 = v92;
										v97 = *(int32_t *)(g23 - 0x7690) + 368 * v92;
										g31 = v97;
										if (*(int32_t *)(v97 + 52) != 0) {
											// 0xb2558
											if (v83 <= 127) {
												// 0xb2560
												g34 = *(int32_t *)(v97 + 24);
												v84 = function_c9948();
												g29 = v84;
												v85 = g31;
												if (v84 == 0) {
													// 0xb2570
													function_c9acc(*(int32_t *)(v85 + 24));
													// branch -> 0xb261c
												} else {
													// 0xb257c
													v103 = *(int32_t *)(v85 + 32);
													g11 = v103;
													if (v103 >= 1) {
														// 0xb2588
														if (function_4d794(v84) > 50) {
															// 0xb2588
															// branch -> 0xb25ac
														} else {
															// 0xb2598
															v93 = function_4d794(g29);
															v86 = g31;
															v104 = *(int32_t *)(v86 + 32);
															g40 = v104;
															if (v104 <= v93) {
																// 0xb25b8
																v87 = g27;
																v98 = g32 - *(int32_t *)(v86 + 40);
																g27 = v98;
																v89 = v98;
																v90 = v86;
																if (v87 == (int32_t) * (char *)*(int32_t *)(g23 - 0x7748)) {
																	// 0xb25d4
																	g37 = v98;
																	v105 = *(int32_t *)(v86 + 36);
																	g41 = v105;
																	v88 = g35;
																	g38 = v88;
																	g13 = g36;
																	g42 = 0;
																	CelDecodeClr(181, v98, v88, *(int32_t *)(v86 + 24), v104, v105, 0);
																	v89 = g27;
																	v90 = g31;
																	// branch -> 0xb25f4
																}
																// 0xb25f4
																v106 = *(int32_t *)(v90 + 32);
																v107 = *(int32_t *)(v90 + 36);
																CelDecodeHdrLightOnly(v89, g35, *(int32_t *)(v90 + 24), v106, v107, 0, g36);
																function_c9acc(*(int32_t *)(g31 + 24));
																// branch -> 0xb261c
																// Detected a possible infinite recursion (goto support failed); quitting...
															}
														}
														// Detected a possible infinite recursion (goto support failed); quitting...
													}
													// Detected a possible infinite recursion (goto support failed); quitting...
												}
												// Detected a possible infinite recursion (goto support failed); quitting...
											}
										}
									}
									// Detected a possible infinite recursion (goto support failed); quitting...
								}
								// 0xb24c0
								if (v52 % 2 != 0) {
									// 0xb24c8
									DrawMissile(g31, g33, g32, g35, 0, g36, 0);
									// branch -> 0xb24e8
								}
								// 0xb24e8
								if (v9 != 0) {
									// 0xb24f4
									v82 = g23;
									v101 = *(int32_t *)(v82 - 0x70cc);
									v102 = *(int32_t *)(v82 - 0x7290);
									if (*(int32_t *)v102 < (int32_t) * (char *)v101) {
										// 0xb2510
										DrawObject(g31, g33, g32, g35, 0, 0, g36);
										// branch -> 0xb2530
									}
								}
								// 0xb2530
								v83 = g21;
								v91 = 0x1000000 * v83;
								v96 = v91 / 0x1000000;
								if ((v91 || 0xffffff) >= 0x1ffffff) {
									// 0xb2538
									v92 = v96 - 1;
									g27 = v92;
									v97 = *(int32_t *)(g23 - 0x7690) + 368 * v92;
									g31 = v97;
									if (*(int32_t *)(v97 + 52) != 0) {
										// 0xb2558
										if (v83 <= 127) {
											// 0xb2560
											g34 = *(int32_t *)(v97 + 24);
											v84 = function_c9948();
											g29 = v84;
											v85 = g31;
											if (v84 == 0) {
												// 0xb2570
												function_c9acc(*(int32_t *)(v85 + 24));
												// branch -> 0xb261c
											} else {
												// 0xb257c
												v103 = *(int32_t *)(v85 + 32);
												g11 = v103;
												if (v103 >= 1) {
													// 0xb2588
													if (function_4d794(v84) > 50) {
														// 0xb2588
														// branch -> 0xb25ac
													} else {
														// 0xb2598
														v93 = function_4d794(g29);
														v86 = g31;
														v104 = *(int32_t *)(v86 + 32);
														g40 = v104;
														if (v104 <= v93) {
															// 0xb25b8
															v87 = g27;
															v98 = g32 - *(int32_t *)(v86 + 40);
															g27 = v98;
															v89 = v98;
															v90 = v86;
															if (v87 == (int32_t) * (char *)*(int32_t *)(g23 - 0x7748)) {
																// 0xb25d4
																g37 = v98;
																v105 = *(int32_t *)(v86 + 36);
																g41 = v105;
																v88 = g35;
																g38 = v88;
																g13 = g36;
																g42 = 0;
																CelDecodeClr(181, v98, v88, *(int32_t *)(v86 + 24), v104, v105, 0);
																v89 = g27;
																v90 = g31;
																// branch -> 0xb25f4
															}
															// 0xb25f4
															v106 = *(int32_t *)(v90 + 32);
															v107 = *(int32_t *)(v90 + 36);
															CelDecodeHdrLightOnly(v89, g35, *(int32_t *)(v90 + 24), v106, v107, 0, g36);
															function_c9acc(*(int32_t *)(g31 + 24));
															// branch -> 0xb261c
															// Detected a possible infinite recursion (goto support failed); quitting...
														}
													}
													// Detected a possible infinite recursion (goto support failed); quitting...
												}
												// Detected a possible infinite recursion (goto support failed); quitting...
											}
											// Detected a possible infinite recursion (goto support failed); quitting...
										}
									}
								}
								// Detected a possible infinite recursion (goto support failed); quitting...
							}
						}
					}
					// 0xb1f5c
					function_c9b70((int32_t *)g29);
					// branch -> 0xb1fb8
				}
				// 0xb1fb8
				if (v9 != 0) {
					// 0xb1fc4
					DrawObject(g31, g33, g32, g35, 1, 0, g36);
					// branch -> 0xb1fe4
				}
				// 0xb1fe4
				v28 = g21;
				v41 = 0x1000000 * v28;
				v49 = v41 / 0x1000000;
				if ((v41 || 0xffffff) >= 0x1ffffff) {
					// 0xb1fec
					v42 = v49 - 1;
					g26 = v42;
					v50 = *(int32_t *)(g23 - 0x7690) + 368 * v42;
					g30 = v50;
					if (*(int32_t *)(v50 + 52) == 0) {
						// 0xb200c
						if (v28 <= 127) {
							// 0xb2014
							g34 = *(int32_t *)(v50 + 24);
							v29 = function_c9948();
							v18 = v29;
							v30 = g30;
							if (v29 == 0) {
								// 0xb2024
								function_c9acc(*(int32_t *)(v30 + 24));
								// branch -> 0xb20d0
							} else {
								// 0xb2030
								v67 = *(int32_t *)(v30 + 32);
								g11 = v67;
								v32 = v30;
								if (v67 >= 1) {
									// 0xb203c
									if (function_4d794(v29) > 50) {
										// 0xb203c
										v32 = g30;
										// branch -> 0xb2060
									} else {
										// 0xb204c
										v43 = function_4d794(v18);
										v31 = g30;
										v68 = *(int32_t *)(v31 + 32);
										g40 = v68;
										if (v68 <= v43) {
											// 0xb206c
											v51 = g32 - *(int32_t *)(v31 + 40);
											g27 = v51;
											v34 = v51;
											v35 = v31;
											if (g26 == (int32_t) * (char *)*(int32_t *)(g23 - 0x7748)) {
												// 0xb2088
												g37 = v51;
												v69 = *(int32_t *)(v31 + 36);
												g41 = v69;
												v33 = g35;
												g38 = v33;
												g13 = g36;
												g42 = 0;
												CelDecodeClr(181, v51, v33, *(int32_t *)(v31 + 24), v68, v69, 0);
												v34 = g27;
												v35 = g30;
												// branch -> 0xb20a8
											}
											// 0xb20a8
											v70 = *(int32_t *)(v35 + 32);
											v71 = *(int32_t *)(v35 + 36);
											CelDecodeHdrLightOnly(v34, g35, *(int32_t *)(v35 + 24), v70, v71, 0, g36);
											function_c9acc(*(int32_t *)(g30 + 24));
											// branch -> 0xb20d0
											// 0xb20d0
											v52 = v12;
											g29 = v52;
											if (__asm_rlwinm_(v52, 0, 26, 26) != 0) {
												// 0xb20dc
												v44 = -1 - (int32_t)v17;
												if (v44 <= 3) {
													// 0xb20f4
													v53 = g16 + 0x55ec * v44;
													v54 = g35 + *(int32_t *)(v53 + 100);
													v55 = g32 + *(int32_t *)(v53 + 96) - *(int32_t *)(v53 + 148);
													v72 = *(int32_t *)(v53 + 124);
													v73 = *(int32_t *)(v53 + 140);
													g13 = *(int32_t *)(v53 + 144);
													function_af18c(v44, g31, g33 - 1, v55, v54, v72, v73, 0, g36);
													if (g17 != 0) {
														// 0xb2140
														v74 = *(int32_t *)(g30 + 152);
														if (v74 != 0) {
															// 0xb214c
															if (v74 == 2) {
																// 0xb2154
																function_b1bb0(g28 - 0x3060, g31 - 2, g33 + 1, g20, g36, g32 - 96, g35 - 16);
																// branch -> 0xb2174
															}
															// 0xb2174
															function_b1bb0(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
															// branch -> 0xb2194
														}
													}
												}
											}
											// 0xb2194
											if (__asm_rlwinm_(v52, 0, 27, 27) != 0) {
												// 0xb219c
												if (__asm_rlwinm_(v52, 0, 25, 25) == 0) {
													// 0xb21a4
													v75 = *(int32_t *)(g23 - 0x77ac);
													if (*(int32_t *)(g16 + 0x55ec * *(int32_t *)v75 + 460) != 0) {
														// 0xb21c0
														v36 = g18;
														if (v36 <= 0xffffffff) {
															// 0xb21c8
															*(int32_t *)g25 = -1 - v36;
															v56 = *(int32_t *)g25;
															if (v56 <= 199) {
																// 0xb21e0
																v57 = *(int32_t *)(g23 - 0x7754) + 232 * v56;
																g30 = v57;
																if (*(int32_t *)(v57 + 160) % 2 == 0) {
																	// 0xb21f8
																	v76 = *(int32_t *)(v57 + 224);
																	if (v76 != 0) {
																		// 0xb2204
																		g34 = v57 + 84;
																		g27 = g35 + *(int32_t *)(v57 + 60);
																		g26 = g32 + *(int32_t *)(v57 + 56) - *(int32_t *)(v76 + 496);
																		function_c9b28();
																		if (*(int32_t *)g25 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
																			// 0xb2238
																			v37 = g30;
																			v77 = *(int32_t *)(*(int32_t *)(v37 + 224) + 492);
																			g13 = g36;
																			function_50478(233, g26, g27, v37 + 84, *(int32_t *)(v37 + 104), v77, 0);
																			// branch -> 0xb2260
																		}
																		// 0xb2260
																		function_c9b70((int32_t *)(g30 + 84));
																		function_aedfc(g31, g33, g26, g27, *(int32_t *)g25, 0, g36);
																		if (g17 != 0) {
																			// 0xb2290
																			if (*(int32_t *)(g30 + 108) == 0) {
																				// 0xb229c
																				function_b1bb0(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
																				// branch -> 0xb22bc
																			}
																		}
																	}
																}
															}
														}
													}
												} else {
													// 0xb21c0
													v36 = g18;
													if (v36 <= 0xffffffff) {
														// 0xb21c8
														*(int32_t *)g25 = -1 - v36;
														v56 = *(int32_t *)g25;
														if (v56 <= 199) {
															// 0xb21e0
															v57 = *(int32_t *)(g23 - 0x7754) + 232 * v56;
															g30 = v57;
															if (*(int32_t *)(v57 + 160) % 2 == 0) {
																// 0xb21f8
																v76 = *(int32_t *)(v57 + 224);
																if (v76 != 0) {
																	// 0xb2204
																	g34 = v57 + 84;
																	g27 = g35 + *(int32_t *)(v57 + 60);
																	g26 = g32 + *(int32_t *)(v57 + 56) - *(int32_t *)(v76 + 496);
																	function_c9b28();
																	if (*(int32_t *)g25 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
																		// 0xb2238
																		v37 = g30;
																		v77 = *(int32_t *)(*(int32_t *)(v37 + 224) + 492);
																		g13 = g36;
																		function_50478(233, g26, g27, v37 + 84, *(int32_t *)(v37 + 104), v77, 0);
																		// branch -> 0xb2260
																	}
																	// 0xb2260
																	function_c9b70((int32_t *)(g30 + 84));
																	function_aedfc(g31, g33, g26, g27, *(int32_t *)g25, 0, g36);
																	if (g17 != 0) {
																		// 0xb2290
																		if (*(int32_t *)(g30 + 108) == 0) {
																			// 0xb229c
																			function_b1bb0(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
																			// branch -> 0xb22bc
																		}
																	}
																}
															}
														}
													}
												}
												// 0xb22bc
												if (__asm_rlwinm_(v52, 0, 29, 29) != 0) {
													// 0xb22c4
													function_af6d0(g31, g33, g32, g35, 0, g36, 0);
													// branch -> 0xb22e4
												}
												// 0xb22e4
												v45 = 0x1000000 * g22;
												if (v45 >= 0 && (v45 || 0xffffff) >= 0x1ffffff) {
													// 0xb22ec
													v46 = v45 / 0x1000000 - 1;
													if (v46 <= 3) {
														// 0xb22fc
														v58 = g16 + 0x55ec * v46;
														v59 = g35 + *(int32_t *)(v58 + 100);
														v60 = g32 + *(int32_t *)(v58 + 96) - *(int32_t *)(v58 + 148);
														v78 = *(int32_t *)(v58 + 140);
														g13 = *(int32_t *)(v58 + 144);
														function_af18c(v46, g31, g33, v60, v59, *(int32_t *)(v58 + 124), v78, 0, g36);
														if (g17 != 0) {
															// 0xb2348
															v79 = *(int32_t *)(g30 + 152);
															if (v79 != 0) {
																// 0xb2354
																if (v79 == 2) {
																	// 0xb235c
																	function_b1bb0(g28 - 0x3060, g31 - 2, g33 + 1, g20, g36, g32 - 96, g35 - 16);
																	// branch -> 0xb237c
																}
																// 0xb237c
																function_b1bb0(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
																// branch -> 0xb239c
															}
														}
													}
												}
												// 0xb239c
												if (v15 >= 1) {
													// 0xb23a8
													if (__asm_rlwinm_(v52, 0, 25, 25) == 0) {
														// 0xb23b0
														v80 = *(int32_t *)(g23 - 0x77ac);
														if (*(int32_t *)(g16 + 0x55ec * *(int32_t *)v80 + 460) != 0) {
															// 0xb23cc
															*(int32_t *)g25 = v16 - 1;
															v94 = *(int32_t *)g25;
															if (v94 <= 199) {
																// 0xb23e4
																v95 = *(int32_t *)(g23 - 0x7754) + 232 * v94;
																g30 = v95;
																if (*(int32_t *)(v95 + 160) % 2 == 0) {
																	// 0xb23fc
																	v99 = *(int32_t *)(v95 + 224);
																	if (v99 != 0) {
																		// 0xb2408
																		g34 = v95 + 84;
																		g27 = g35 + *(int32_t *)(v95 + 60);
																		g26 = g32 + *(int32_t *)(v95 + 56) - *(int32_t *)(v99 + 496);
																		function_c9b28();
																		if (*(int32_t *)g25 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
																			// 0xb243c
																			v81 = g30;
																			v100 = *(int32_t *)(*(int32_t *)(v81 + 224) + 492);
																			g13 = g36;
																			function_50478(233, g26, g27, v81 + 84, *(int32_t *)(v81 + 104), v100, 0);
																			// branch -> 0xb2464
																		}
																		// 0xb2464
																		function_c9b70((int32_t *)(g30 + 84));
																		function_aedfc(g31, g33, g26, g27, *(int32_t *)g25, 0, g36);
																		if (g17 != 0) {
																			// 0xb2494
																			if (*(int32_t *)(g30 + 108) == 0) {
																				// 0xb24a0
																				function_b1bb0(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
																				// branch -> 0xb24c0
																			}
																		}
																	}
																}
															}
														}
													} else {
														// 0xb23cc
														*(int32_t *)g25 = v16 - 1;
														v94 = *(int32_t *)g25;
														if (v94 <= 199) {
															// 0xb23e4
															v95 = *(int32_t *)(g23 - 0x7754) + 232 * v94;
															g30 = v95;
															if (*(int32_t *)(v95 + 160) % 2 == 0) {
																// 0xb23fc
																v99 = *(int32_t *)(v95 + 224);
																if (v99 != 0) {
																	// 0xb2408
																	g34 = v95 + 84;
																	g27 = g35 + *(int32_t *)(v95 + 60);
																	g26 = g32 + *(int32_t *)(v95 + 56) - *(int32_t *)(v99 + 496);
																	function_c9b28();
																	if (*(int32_t *)g25 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
																		// 0xb243c
																		v81 = g30;
																		v100 = *(int32_t *)(*(int32_t *)(v81 + 224) + 492);
																		g13 = g36;
																		function_50478(233, g26, g27, v81 + 84, *(int32_t *)(v81 + 104), v100, 0);
																		// branch -> 0xb2464
																	}
																	// 0xb2464
																	function_c9b70((int32_t *)(g30 + 84));
																	function_aedfc(g31, g33, g26, g27, *(int32_t *)g25, 0, g36);
																	if (g17 != 0) {
																		// 0xb2494
																		if (*(int32_t *)(g30 + 108) == 0) {
																			// 0xb24a0
																			function_b1bb0(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
																			// branch -> 0xb24c0
																		}
																	}
																}
															}
														}
													}
													// 0xb24c0
													if (v52 % 2 != 0) {
														// 0xb24c8
														DrawMissile(g31, g33, g32, g35, 0, g36, 0);
														// branch -> 0xb24e8
													}
													// 0xb24e8
													if (v9 != 0) {
														// 0xb24f4
														v82 = g23;
														v101 = *(int32_t *)(v82 - 0x70cc);
														v102 = *(int32_t *)(v82 - 0x7290);
														if (*(int32_t *)v102 < (int32_t) * (char *)v101) {
															// 0xb2510
															DrawObject(g31, g33, g32, g35, 0, 0, g36);
															// branch -> 0xb2530
														}
													}
													// 0xb2530
													v83 = g21;
													v91 = 0x1000000 * v83;
													v96 = v91 / 0x1000000;
													if ((v91 || 0xffffff) >= 0x1ffffff) {
														// 0xb2538
														v92 = v96 - 1;
														g27 = v92;
														v97 = *(int32_t *)(g23 - 0x7690) + 368 * v92;
														g31 = v97;
														if (*(int32_t *)(v97 + 52) != 0) {
															// 0xb2558
															if (v83 <= 127) {
																// 0xb2560
																g34 = *(int32_t *)(v97 + 24);
																v84 = function_c9948();
																g29 = v84;
																v85 = g31;
																if (v84 == 0) {
																	// 0xb2570
																	function_c9acc(*(int32_t *)(v85 + 24));
																	// branch -> 0xb261c
																} else {
																	// 0xb257c
																	v103 = *(int32_t *)(v85 + 32);
																	g11 = v103;
																	if (v103 >= 1) {
																		// 0xb2588
																		if (function_4d794(v84) > 50) {
																			// 0xb2588
																			// branch -> 0xb25ac
																		} else {
																			// 0xb2598
																			v93 = function_4d794(g29);
																			v86 = g31;
																			v104 = *(int32_t *)(v86 + 32);
																			g40 = v104;
																			if (v104 <= v93) {
																				// 0xb25b8
																				v87 = g27;
																				v98 = g32 - *(int32_t *)(v86 + 40);
																				g27 = v98;
																				v89 = v98;
																				v90 = v86;
																				if (v87 == (int32_t) * (char *)*(int32_t *)(g23 - 0x7748)) {
																					// 0xb25d4
																					g37 = v98;
																					v105 = *(int32_t *)(v86 + 36);
																					g41 = v105;
																					v88 = g35;
																					g38 = v88;
																					g13 = g36;
																					g42 = 0;
																					CelDecodeClr(181, v98, v88, *(int32_t *)(v86 + 24), v104, v105, 0);
																					v89 = g27;
																					v90 = g31;
																					// branch -> 0xb25f4
																				}
																				// 0xb25f4
																				v106 = *(int32_t *)(v90 + 32);
																				v107 = *(int32_t *)(v90 + 36);
																				CelDecodeHdrLightOnly(v89, g35, *(int32_t *)(v90 + 24), v106, v107, 0, g36);
																				function_c9acc(*(int32_t *)(g31 + 24));
																				// branch -> 0xb261c
																				// Detected a possible infinite recursion (goto support failed); quitting...
																			}
																		}
																		// Detected a possible infinite recursion (goto support failed); quitting...
																	}
																	// Detected a possible infinite recursion (goto support failed); quitting...
																}
																// Detected a possible infinite recursion (goto support failed); quitting...
															}
														}
													}
													// Detected a possible infinite recursion (goto support failed); quitting...
												}
												// 0xb24c0
												if (v52 % 2 != 0) {
													// 0xb24c8
													DrawMissile(g31, g33, g32, g35, 0, g36, 0);
													// branch -> 0xb24e8
												}
												// 0xb24e8
												if (v9 != 0) {
													// 0xb24f4
													v82 = g23;
													v101 = *(int32_t *)(v82 - 0x70cc);
													v102 = *(int32_t *)(v82 - 0x7290);
													if (*(int32_t *)v102 < (int32_t) * (char *)v101) {
														// 0xb2510
														DrawObject(g31, g33, g32, g35, 0, 0, g36);
														// branch -> 0xb2530
													}
												}
												// 0xb2530
												v83 = g21;
												v91 = 0x1000000 * v83;
												v96 = v91 / 0x1000000;
												if ((v91 || 0xffffff) >= 0x1ffffff) {
													// 0xb2538
													v92 = v96 - 1;
													g27 = v92;
													v97 = *(int32_t *)(g23 - 0x7690) + 368 * v92;
													g31 = v97;
													if (*(int32_t *)(v97 + 52) != 0) {
														// 0xb2558
														if (v83 <= 127) {
															// 0xb2560
															g34 = *(int32_t *)(v97 + 24);
															v84 = function_c9948();
															g29 = v84;
															v85 = g31;
															if (v84 == 0) {
																// 0xb2570
																function_c9acc(*(int32_t *)(v85 + 24));
																// branch -> 0xb261c
															} else {
																// 0xb257c
																v103 = *(int32_t *)(v85 + 32);
																g11 = v103;
																if (v103 >= 1) {
																	// 0xb2588
																	if (function_4d794(v84) > 50) {
																		// 0xb2588
																		// branch -> 0xb25ac
																	} else {
																		// 0xb2598
																		v93 = function_4d794(g29);
																		v86 = g31;
																		v104 = *(int32_t *)(v86 + 32);
																		g40 = v104;
																		if (v104 <= v93) {
																			// 0xb25b8
																			v87 = g27;
																			v98 = g32 - *(int32_t *)(v86 + 40);
																			g27 = v98;
																			v89 = v98;
																			v90 = v86;
																			if (v87 == (int32_t) * (char *)*(int32_t *)(g23 - 0x7748)) {
																				// 0xb25d4
																				g37 = v98;
																				v105 = *(int32_t *)(v86 + 36);
																				g41 = v105;
																				v88 = g35;
																				g38 = v88;
																				g13 = g36;
																				g42 = 0;
																				CelDecodeClr(181, v98, v88, *(int32_t *)(v86 + 24), v104, v105, 0);
																				v89 = g27;
																				v90 = g31;
																				// branch -> 0xb25f4
																			}
																			// 0xb25f4
																			v106 = *(int32_t *)(v90 + 32);
																			v107 = *(int32_t *)(v90 + 36);
																			CelDecodeHdrLightOnly(v89, g35, *(int32_t *)(v90 + 24), v106, v107, 0, g36);
																			function_c9acc(*(int32_t *)(g31 + 24));
																			// branch -> 0xb261c
																			// Detected a possible infinite recursion (goto support failed); quitting...
																		}
																	}
																	// Detected a possible infinite recursion (goto support failed); quitting...
																}
																// Detected a possible infinite recursion (goto support failed); quitting...
															}
															// Detected a possible infinite recursion (goto support failed); quitting...
														}
													}
												}
												// Detected a possible infinite recursion (goto support failed); quitting...
											}
											// 0xb22bc
											if (__asm_rlwinm_(v52, 0, 29, 29) != 0) {
												// 0xb22c4
												function_af6d0(g31, g33, g32, g35, 0, g36, 0);
												// branch -> 0xb22e4
											}
											// 0xb22e4
											v45 = 0x1000000 * g22;
											if (v45 >= 0 && (v45 || 0xffffff) >= 0x1ffffff) {
												// 0xb22ec
												v46 = v45 / 0x1000000 - 1;
												if (v46 <= 3) {
													// 0xb22fc
													v58 = g16 + 0x55ec * v46;
													v59 = g35 + *(int32_t *)(v58 + 100);
													v60 = g32 + *(int32_t *)(v58 + 96) - *(int32_t *)(v58 + 148);
													v78 = *(int32_t *)(v58 + 140);
													g13 = *(int32_t *)(v58 + 144);
													function_af18c(v46, g31, g33, v60, v59, *(int32_t *)(v58 + 124), v78, 0, g36);
													if (g17 != 0) {
														// 0xb2348
														v79 = *(int32_t *)(g30 + 152);
														if (v79 != 0) {
															// 0xb2354
															if (v79 == 2) {
																// 0xb235c
																function_b1bb0(g28 - 0x3060, g31 - 2, g33 + 1, g20, g36, g32 - 96, g35 - 16);
																// branch -> 0xb237c
															}
															// 0xb237c
															function_b1bb0(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
															// branch -> 0xb239c
														}
													}
												}
											}
											// 0xb239c
											if (v15 >= 1) {
												// 0xb23a8
												if (__asm_rlwinm_(v52, 0, 25, 25) == 0) {
													// 0xb23b0
													v80 = *(int32_t *)(g23 - 0x77ac);
													if (*(int32_t *)(g16 + 0x55ec * *(int32_t *)v80 + 460) != 0) {
														// 0xb23cc
														*(int32_t *)g25 = v16 - 1;
														v94 = *(int32_t *)g25;
														if (v94 <= 199) {
															// 0xb23e4
															v95 = *(int32_t *)(g23 - 0x7754) + 232 * v94;
															g30 = v95;
															if (*(int32_t *)(v95 + 160) % 2 == 0) {
																// 0xb23fc
																v99 = *(int32_t *)(v95 + 224);
																if (v99 != 0) {
																	// 0xb2408
																	g34 = v95 + 84;
																	g27 = g35 + *(int32_t *)(v95 + 60);
																	g26 = g32 + *(int32_t *)(v95 + 56) - *(int32_t *)(v99 + 496);
																	function_c9b28();
																	if (*(int32_t *)g25 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
																		// 0xb243c
																		v81 = g30;
																		v100 = *(int32_t *)(*(int32_t *)(v81 + 224) + 492);
																		g13 = g36;
																		function_50478(233, g26, g27, v81 + 84, *(int32_t *)(v81 + 104), v100, 0);
																		// branch -> 0xb2464
																	}
																	// 0xb2464
																	function_c9b70((int32_t *)(g30 + 84));
																	function_aedfc(g31, g33, g26, g27, *(int32_t *)g25, 0, g36);
																	if (g17 != 0) {
																		// 0xb2494
																		if (*(int32_t *)(g30 + 108) == 0) {
																			// 0xb24a0
																			function_b1bb0(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
																			// branch -> 0xb24c0
																		}
																	}
																}
															}
														}
													}
												} else {
													// 0xb23cc
													*(int32_t *)g25 = v16 - 1;
													v94 = *(int32_t *)g25;
													if (v94 <= 199) {
														// 0xb23e4
														v95 = *(int32_t *)(g23 - 0x7754) + 232 * v94;
														g30 = v95;
														if (*(int32_t *)(v95 + 160) % 2 == 0) {
															// 0xb23fc
															v99 = *(int32_t *)(v95 + 224);
															if (v99 != 0) {
																// 0xb2408
																g34 = v95 + 84;
																g27 = g35 + *(int32_t *)(v95 + 60);
																g26 = g32 + *(int32_t *)(v95 + 56) - *(int32_t *)(v99 + 496);
																function_c9b28();
																if (*(int32_t *)g25 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
																	// 0xb243c
																	v81 = g30;
																	v100 = *(int32_t *)(*(int32_t *)(v81 + 224) + 492);
																	g13 = g36;
																	function_50478(233, g26, g27, v81 + 84, *(int32_t *)(v81 + 104), v100, 0);
																	// branch -> 0xb2464
																}
																// 0xb2464
																function_c9b70((int32_t *)(g30 + 84));
																function_aedfc(g31, g33, g26, g27, *(int32_t *)g25, 0, g36);
																if (g17 != 0) {
																	// 0xb2494
																	if (*(int32_t *)(g30 + 108) == 0) {
																		// 0xb24a0
																		function_b1bb0(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
																		// branch -> 0xb24c0
																	}
																}
															}
														}
													}
												}
												// 0xb24c0
												if (v52 % 2 != 0) {
													// 0xb24c8
													DrawMissile(g31, g33, g32, g35, 0, g36, 0);
													// branch -> 0xb24e8
												}
												// 0xb24e8
												if (v9 != 0) {
													// 0xb24f4
													v82 = g23;
													v101 = *(int32_t *)(v82 - 0x70cc);
													v102 = *(int32_t *)(v82 - 0x7290);
													if (*(int32_t *)v102 < (int32_t) * (char *)v101) {
														// 0xb2510
														DrawObject(g31, g33, g32, g35, 0, 0, g36);
														// branch -> 0xb2530
													}
												}
												// 0xb2530
												v83 = g21;
												v91 = 0x1000000 * v83;
												v96 = v91 / 0x1000000;
												if ((v91 || 0xffffff) >= 0x1ffffff) {
													// 0xb2538
													v92 = v96 - 1;
													g27 = v92;
													v97 = *(int32_t *)(g23 - 0x7690) + 368 * v92;
													g31 = v97;
													if (*(int32_t *)(v97 + 52) != 0) {
														// 0xb2558
														if (v83 <= 127) {
															// 0xb2560
															g34 = *(int32_t *)(v97 + 24);
															v84 = function_c9948();
															g29 = v84;
															v85 = g31;
															if (v84 == 0) {
																// 0xb2570
																function_c9acc(*(int32_t *)(v85 + 24));
																// branch -> 0xb261c
															} else {
																// 0xb257c
																v103 = *(int32_t *)(v85 + 32);
																g11 = v103;
																if (v103 >= 1) {
																	// 0xb2588
																	if (function_4d794(v84) > 50) {
																		// 0xb2588
																		// branch -> 0xb25ac
																	} else {
																		// 0xb2598
																		v93 = function_4d794(g29);
																		v86 = g31;
																		v104 = *(int32_t *)(v86 + 32);
																		g40 = v104;
																		if (v104 <= v93) {
																			// 0xb25b8
																			v87 = g27;
																			v98 = g32 - *(int32_t *)(v86 + 40);
																			g27 = v98;
																			v89 = v98;
																			v90 = v86;
																			if (v87 == (int32_t) * (char *)*(int32_t *)(g23 - 0x7748)) {
																				// 0xb25d4
																				g37 = v98;
																				v105 = *(int32_t *)(v86 + 36);
																				g41 = v105;
																				v88 = g35;
																				g38 = v88;
																				g13 = g36;
																				g42 = 0;
																				CelDecodeClr(181, v98, v88, *(int32_t *)(v86 + 24), v104, v105, 0);
																				v89 = g27;
																				v90 = g31;
																				// branch -> 0xb25f4
																			}
																			// 0xb25f4
																			v106 = *(int32_t *)(v90 + 32);
																			v107 = *(int32_t *)(v90 + 36);
																			CelDecodeHdrLightOnly(v89, g35, *(int32_t *)(v90 + 24), v106, v107, 0, g36);
																			function_c9acc(*(int32_t *)(g31 + 24));
																			// branch -> 0xb261c
																			// Detected a possible infinite recursion (goto support failed); quitting...
																		}
																	}
																	// Detected a possible infinite recursion (goto support failed); quitting...
																}
																// Detected a possible infinite recursion (goto support failed); quitting...
															}
															// Detected a possible infinite recursion (goto support failed); quitting...
														}
													}
												}
												// Detected a possible infinite recursion (goto support failed); quitting...
											}
											// 0xb24c0
											if (v52 % 2 != 0) {
												// 0xb24c8
												DrawMissile(g31, g33, g32, g35, 0, g36, 0);
												// branch -> 0xb24e8
											}
											// 0xb24e8
											if (v9 != 0) {
												// 0xb24f4
												v82 = g23;
												v101 = *(int32_t *)(v82 - 0x70cc);
												v102 = *(int32_t *)(v82 - 0x7290);
												if (*(int32_t *)v102 < (int32_t) * (char *)v101) {
													// 0xb2510
													DrawObject(g31, g33, g32, g35, 0, 0, g36);
													// branch -> 0xb2530
												}
											}
											// 0xb2530
											v83 = g21;
											v91 = 0x1000000 * v83;
											v96 = v91 / 0x1000000;
											if ((v91 || 0xffffff) >= 0x1ffffff) {
												// 0xb2538
												v92 = v96 - 1;
												g27 = v92;
												v97 = *(int32_t *)(g23 - 0x7690) + 368 * v92;
												g31 = v97;
												if (*(int32_t *)(v97 + 52) != 0) {
													// 0xb2558
													if (v83 <= 127) {
														// 0xb2560
														g34 = *(int32_t *)(v97 + 24);
														v84 = function_c9948();
														g29 = v84;
														v85 = g31;
														if (v84 == 0) {
															// 0xb2570
															function_c9acc(*(int32_t *)(v85 + 24));
															// branch -> 0xb261c
														} else {
															// 0xb257c
															v103 = *(int32_t *)(v85 + 32);
															g11 = v103;
															if (v103 >= 1) {
																// 0xb2588
																if (function_4d794(v84) > 50) {
																	// 0xb2588
																	// branch -> 0xb25ac
																} else {
																	// 0xb2598
																	v93 = function_4d794(g29);
																	v86 = g31;
																	v104 = *(int32_t *)(v86 + 32);
																	g40 = v104;
																	if (v104 <= v93) {
																		// 0xb25b8
																		v87 = g27;
																		v98 = g32 - *(int32_t *)(v86 + 40);
																		g27 = v98;
																		v89 = v98;
																		v90 = v86;
																		if (v87 == (int32_t) * (char *)*(int32_t *)(g23 - 0x7748)) {
																			// 0xb25d4
																			g37 = v98;
																			v105 = *(int32_t *)(v86 + 36);
																			g41 = v105;
																			v88 = g35;
																			g38 = v88;
																			g13 = g36;
																			g42 = 0;
																			CelDecodeClr(181, v98, v88, *(int32_t *)(v86 + 24), v104, v105, 0);
																			v89 = g27;
																			v90 = g31;
																			// branch -> 0xb25f4
																		}
																		// 0xb25f4
																		v106 = *(int32_t *)(v90 + 32);
																		v107 = *(int32_t *)(v90 + 36);
																		CelDecodeHdrLightOnly(v89, g35, *(int32_t *)(v90 + 24), v106, v107, 0, g36);
																		function_c9acc(*(int32_t *)(g31 + 24));
																		// branch -> 0xb261c
																		// Detected a possible infinite recursion (goto support failed); quitting...
																	}
																}
																// Detected a possible infinite recursion (goto support failed); quitting...
															}
															// Detected a possible infinite recursion (goto support failed); quitting...
														}
														// Detected a possible infinite recursion (goto support failed); quitting...
													}
												}
											}
											// Detected a possible infinite recursion (goto support failed); quitting...
										} else {
											v32 = v31;
										}
									}
									// 0xb2060
									function_c9acc(*(int32_t *)(v32 + 24));
									// branch -> 0xb20d0
									// 0xb20d0
									v52 = v12;
									g29 = v52;
									if (__asm_rlwinm_(v52, 0, 26, 26) != 0) {
										// 0xb20dc
										v44 = -1 - (int32_t)v17;
										if (v44 <= 3) {
											// 0xb20f4
											v53 = g16 + 0x55ec * v44;
											v54 = g35 + *(int32_t *)(v53 + 100);
											v55 = g32 + *(int32_t *)(v53 + 96) - *(int32_t *)(v53 + 148);
											v72 = *(int32_t *)(v53 + 124);
											v73 = *(int32_t *)(v53 + 140);
											g13 = *(int32_t *)(v53 + 144);
											function_af18c(v44, g31, g33 - 1, v55, v54, v72, v73, 0, g36);
											if (g17 != 0) {
												// 0xb2140
												v74 = *(int32_t *)(g30 + 152);
												if (v74 != 0) {
													// 0xb214c
													if (v74 == 2) {
														// 0xb2154
														function_b1bb0(g28 - 0x3060, g31 - 2, g33 + 1, g20, g36, g32 - 96, g35 - 16);
														// branch -> 0xb2174
													}
													// 0xb2174
													function_b1bb0(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
													// branch -> 0xb2194
												}
											}
										}
									}
									// 0xb2194
									if (__asm_rlwinm_(v52, 0, 27, 27) != 0) {
										// 0xb219c
										if (__asm_rlwinm_(v52, 0, 25, 25) == 0) {
											// 0xb21a4
											v75 = *(int32_t *)(g23 - 0x77ac);
											if (*(int32_t *)(g16 + 0x55ec * *(int32_t *)v75 + 460) != 0) {
												// 0xb21c0
												v36 = g18;
												if (v36 <= 0xffffffff) {
													// 0xb21c8
													*(int32_t *)g25 = -1 - v36;
													v56 = *(int32_t *)g25;
													if (v56 <= 199) {
														// 0xb21e0
														v57 = *(int32_t *)(g23 - 0x7754) + 232 * v56;
														g30 = v57;
														if (*(int32_t *)(v57 + 160) % 2 == 0) {
															// 0xb21f8
															v76 = *(int32_t *)(v57 + 224);
															if (v76 != 0) {
																// 0xb2204
																g34 = v57 + 84;
																g27 = g35 + *(int32_t *)(v57 + 60);
																g26 = g32 + *(int32_t *)(v57 + 56) - *(int32_t *)(v76 + 496);
																function_c9b28();
																if (*(int32_t *)g25 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
																	// 0xb2238
																	v37 = g30;
																	v77 = *(int32_t *)(*(int32_t *)(v37 + 224) + 492);
																	g13 = g36;
																	function_50478(233, g26, g27, v37 + 84, *(int32_t *)(v37 + 104), v77, 0);
																	// branch -> 0xb2260
																}
																// 0xb2260
																function_c9b70((int32_t *)(g30 + 84));
																function_aedfc(g31, g33, g26, g27, *(int32_t *)g25, 0, g36);
																if (g17 != 0) {
																	// 0xb2290
																	if (*(int32_t *)(g30 + 108) == 0) {
																		// 0xb229c
																		function_b1bb0(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
																		// branch -> 0xb22bc
																	}
																}
															}
														}
													}
												}
											}
										} else {
											// 0xb21c0
											v36 = g18;
											if (v36 <= 0xffffffff) {
												// 0xb21c8
												*(int32_t *)g25 = -1 - v36;
												v56 = *(int32_t *)g25;
												if (v56 <= 199) {
													// 0xb21e0
													v57 = *(int32_t *)(g23 - 0x7754) + 232 * v56;
													g30 = v57;
													if (*(int32_t *)(v57 + 160) % 2 == 0) {
														// 0xb21f8
														v76 = *(int32_t *)(v57 + 224);
														if (v76 != 0) {
															// 0xb2204
															g34 = v57 + 84;
															g27 = g35 + *(int32_t *)(v57 + 60);
															g26 = g32 + *(int32_t *)(v57 + 56) - *(int32_t *)(v76 + 496);
															function_c9b28();
															if (*(int32_t *)g25 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
																// 0xb2238
																v37 = g30;
																v77 = *(int32_t *)(*(int32_t *)(v37 + 224) + 492);
																g13 = g36;
																function_50478(233, g26, g27, v37 + 84, *(int32_t *)(v37 + 104), v77, 0);
																// branch -> 0xb2260
															}
															// 0xb2260
															function_c9b70((int32_t *)(g30 + 84));
															function_aedfc(g31, g33, g26, g27, *(int32_t *)g25, 0, g36);
															if (g17 != 0) {
																// 0xb2290
																if (*(int32_t *)(g30 + 108) == 0) {
																	// 0xb229c
																	function_b1bb0(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
																	// branch -> 0xb22bc
																}
															}
														}
													}
												}
											}
										}
										// 0xb22bc
										if (__asm_rlwinm_(v52, 0, 29, 29) != 0) {
											// 0xb22c4
											function_af6d0(g31, g33, g32, g35, 0, g36, 0);
											// branch -> 0xb22e4
										}
										// 0xb22e4
										v45 = 0x1000000 * g22;
										if (v45 >= 0 && (v45 || 0xffffff) >= 0x1ffffff) {
											// 0xb22ec
											v46 = v45 / 0x1000000 - 1;
											if (v46 <= 3) {
												// 0xb22fc
												v58 = g16 + 0x55ec * v46;
												v59 = g35 + *(int32_t *)(v58 + 100);
												v60 = g32 + *(int32_t *)(v58 + 96) - *(int32_t *)(v58 + 148);
												v78 = *(int32_t *)(v58 + 140);
												g13 = *(int32_t *)(v58 + 144);
												function_af18c(v46, g31, g33, v60, v59, *(int32_t *)(v58 + 124), v78, 0, g36);
												if (g17 != 0) {
													// 0xb2348
													v79 = *(int32_t *)(g30 + 152);
													if (v79 != 0) {
														// 0xb2354
														if (v79 == 2) {
															// 0xb235c
															function_b1bb0(g28 - 0x3060, g31 - 2, g33 + 1, g20, g36, g32 - 96, g35 - 16);
															// branch -> 0xb237c
														}
														// 0xb237c
														function_b1bb0(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
														// branch -> 0xb239c
													}
												}
											}
										}
										// 0xb239c
										if (v15 >= 1) {
											// 0xb23a8
											if (__asm_rlwinm_(v52, 0, 25, 25) == 0) {
												// 0xb23b0
												v80 = *(int32_t *)(g23 - 0x77ac);
												if (*(int32_t *)(g16 + 0x55ec * *(int32_t *)v80 + 460) != 0) {
													// 0xb23cc
													*(int32_t *)g25 = v16 - 1;
													v94 = *(int32_t *)g25;
													if (v94 <= 199) {
														// 0xb23e4
														v95 = *(int32_t *)(g23 - 0x7754) + 232 * v94;
														g30 = v95;
														if (*(int32_t *)(v95 + 160) % 2 == 0) {
															// 0xb23fc
															v99 = *(int32_t *)(v95 + 224);
															if (v99 != 0) {
																// 0xb2408
																g34 = v95 + 84;
																g27 = g35 + *(int32_t *)(v95 + 60);
																g26 = g32 + *(int32_t *)(v95 + 56) - *(int32_t *)(v99 + 496);
																function_c9b28();
																if (*(int32_t *)g25 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
																	// 0xb243c
																	v81 = g30;
																	v100 = *(int32_t *)(*(int32_t *)(v81 + 224) + 492);
																	g13 = g36;
																	function_50478(233, g26, g27, v81 + 84, *(int32_t *)(v81 + 104), v100, 0);
																	// branch -> 0xb2464
																}
																// 0xb2464
																function_c9b70((int32_t *)(g30 + 84));
																function_aedfc(g31, g33, g26, g27, *(int32_t *)g25, 0, g36);
																if (g17 != 0) {
																	// 0xb2494
																	if (*(int32_t *)(g30 + 108) == 0) {
																		// 0xb24a0
																		function_b1bb0(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
																		// branch -> 0xb24c0
																	}
																}
															}
														}
													}
												}
											} else {
												// 0xb23cc
												*(int32_t *)g25 = v16 - 1;
												v94 = *(int32_t *)g25;
												if (v94 <= 199) {
													// 0xb23e4
													v95 = *(int32_t *)(g23 - 0x7754) + 232 * v94;
													g30 = v95;
													if (*(int32_t *)(v95 + 160) % 2 == 0) {
														// 0xb23fc
														v99 = *(int32_t *)(v95 + 224);
														if (v99 != 0) {
															// 0xb2408
															g34 = v95 + 84;
															g27 = g35 + *(int32_t *)(v95 + 60);
															g26 = g32 + *(int32_t *)(v95 + 56) - *(int32_t *)(v99 + 496);
															function_c9b28();
															if (*(int32_t *)g25 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
																// 0xb243c
																v81 = g30;
																v100 = *(int32_t *)(*(int32_t *)(v81 + 224) + 492);
																g13 = g36;
																function_50478(233, g26, g27, v81 + 84, *(int32_t *)(v81 + 104), v100, 0);
																// branch -> 0xb2464
															}
															// 0xb2464
															function_c9b70((int32_t *)(g30 + 84));
															function_aedfc(g31, g33, g26, g27, *(int32_t *)g25, 0, g36);
															if (g17 != 0) {
																// 0xb2494
																if (*(int32_t *)(g30 + 108) == 0) {
																	// 0xb24a0
																	function_b1bb0(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
																	// branch -> 0xb24c0
																}
															}
														}
													}
												}
											}
											// 0xb24c0
											if (v52 % 2 != 0) {
												// 0xb24c8
												DrawMissile(g31, g33, g32, g35, 0, g36, 0);
												// branch -> 0xb24e8
											}
											// 0xb24e8
											if (v9 != 0) {
												// 0xb24f4
												v82 = g23;
												v101 = *(int32_t *)(v82 - 0x70cc);
												v102 = *(int32_t *)(v82 - 0x7290);
												if (*(int32_t *)v102 < (int32_t) * (char *)v101) {
													// 0xb2510
													DrawObject(g31, g33, g32, g35, 0, 0, g36);
													// branch -> 0xb2530
												}
											}
											// 0xb2530
											v83 = g21;
											v91 = 0x1000000 * v83;
											v96 = v91 / 0x1000000;
											if ((v91 || 0xffffff) >= 0x1ffffff) {
												// 0xb2538
												v92 = v96 - 1;
												g27 = v92;
												v97 = *(int32_t *)(g23 - 0x7690) + 368 * v92;
												g31 = v97;
												if (*(int32_t *)(v97 + 52) != 0) {
													// 0xb2558
													if (v83 <= 127) {
														// 0xb2560
														g34 = *(int32_t *)(v97 + 24);
														v84 = function_c9948();
														g29 = v84;
														v85 = g31;
														if (v84 == 0) {
															// 0xb2570
															function_c9acc(*(int32_t *)(v85 + 24));
															// branch -> 0xb261c
														} else {
															// 0xb257c
															v103 = *(int32_t *)(v85 + 32);
															g11 = v103;
															if (v103 >= 1) {
																// 0xb2588
																if (function_4d794(v84) > 50) {
																	// 0xb2588
																	// branch -> 0xb25ac
																} else {
																	// 0xb2598
																	v93 = function_4d794(g29);
																	v86 = g31;
																	v104 = *(int32_t *)(v86 + 32);
																	g40 = v104;
																	if (v104 <= v93) {
																		// 0xb25b8
																		v87 = g27;
																		v98 = g32 - *(int32_t *)(v86 + 40);
																		g27 = v98;
																		v89 = v98;
																		v90 = v86;
																		if (v87 == (int32_t) * (char *)*(int32_t *)(g23 - 0x7748)) {
																			// 0xb25d4
																			g37 = v98;
																			v105 = *(int32_t *)(v86 + 36);
																			g41 = v105;
																			v88 = g35;
																			g38 = v88;
																			g13 = g36;
																			g42 = 0;
																			CelDecodeClr(181, v98, v88, *(int32_t *)(v86 + 24), v104, v105, 0);
																			v89 = g27;
																			v90 = g31;
																			// branch -> 0xb25f4
																		}
																		// 0xb25f4
																		v106 = *(int32_t *)(v90 + 32);
																		v107 = *(int32_t *)(v90 + 36);
																		CelDecodeHdrLightOnly(v89, g35, *(int32_t *)(v90 + 24), v106, v107, 0, g36);
																		function_c9acc(*(int32_t *)(g31 + 24));
																		// branch -> 0xb261c
																		// Detected a possible infinite recursion (goto support failed); quitting...
																	}
																}
																// Detected a possible infinite recursion (goto support failed); quitting...
															}
															// Detected a possible infinite recursion (goto support failed); quitting...
														}
														// Detected a possible infinite recursion (goto support failed); quitting...
													}
												}
											}
											// Detected a possible infinite recursion (goto support failed); quitting...
										}
										// 0xb24c0
										if (v52 % 2 != 0) {
											// 0xb24c8
											DrawMissile(g31, g33, g32, g35, 0, g36, 0);
											// branch -> 0xb24e8
										}
										// 0xb24e8
										if (v9 != 0) {
											// 0xb24f4
											v82 = g23;
											v101 = *(int32_t *)(v82 - 0x70cc);
											v102 = *(int32_t *)(v82 - 0x7290);
											if (*(int32_t *)v102 < (int32_t) * (char *)v101) {
												// 0xb2510
												DrawObject(g31, g33, g32, g35, 0, 0, g36);
												// branch -> 0xb2530
											}
										}
										// 0xb2530
										v83 = g21;
										v91 = 0x1000000 * v83;
										v96 = v91 / 0x1000000;
										if ((v91 || 0xffffff) >= 0x1ffffff) {
											// 0xb2538
											v92 = v96 - 1;
											g27 = v92;
											v97 = *(int32_t *)(g23 - 0x7690) + 368 * v92;
											g31 = v97;
											if (*(int32_t *)(v97 + 52) != 0) {
												// 0xb2558
												if (v83 <= 127) {
													// 0xb2560
													g34 = *(int32_t *)(v97 + 24);
													v84 = function_c9948();
													g29 = v84;
													v85 = g31;
													if (v84 == 0) {
														// 0xb2570
														function_c9acc(*(int32_t *)(v85 + 24));
														// branch -> 0xb261c
													} else {
														// 0xb257c
														v103 = *(int32_t *)(v85 + 32);
														g11 = v103;
														if (v103 >= 1) {
															// 0xb2588
															if (function_4d794(v84) > 50) {
																// 0xb2588
																// branch -> 0xb25ac
															} else {
																// 0xb2598
																v93 = function_4d794(g29);
																v86 = g31;
																v104 = *(int32_t *)(v86 + 32);
																g40 = v104;
																if (v104 <= v93) {
																	// 0xb25b8
																	v87 = g27;
																	v98 = g32 - *(int32_t *)(v86 + 40);
																	g27 = v98;
																	v89 = v98;
																	v90 = v86;
																	if (v87 == (int32_t) * (char *)*(int32_t *)(g23 - 0x7748)) {
																		// 0xb25d4
																		g37 = v98;
																		v105 = *(int32_t *)(v86 + 36);
																		g41 = v105;
																		v88 = g35;
																		g38 = v88;
																		g13 = g36;
																		g42 = 0;
																		CelDecodeClr(181, v98, v88, *(int32_t *)(v86 + 24), v104, v105, 0);
																		v89 = g27;
																		v90 = g31;
																		// branch -> 0xb25f4
																	}
																	// 0xb25f4
																	v106 = *(int32_t *)(v90 + 32);
																	v107 = *(int32_t *)(v90 + 36);
																	CelDecodeHdrLightOnly(v89, g35, *(int32_t *)(v90 + 24), v106, v107, 0, g36);
																	function_c9acc(*(int32_t *)(g31 + 24));
																	// branch -> 0xb261c
																	// Detected a possible infinite recursion (goto support failed); quitting...
																}
															}
															// Detected a possible infinite recursion (goto support failed); quitting...
														}
														// Detected a possible infinite recursion (goto support failed); quitting...
													}
													// Detected a possible infinite recursion (goto support failed); quitting...
												}
											}
										}
										// Detected a possible infinite recursion (goto support failed); quitting...
									}
									// 0xb22bc
									if (__asm_rlwinm_(v52, 0, 29, 29) != 0) {
										// 0xb22c4
										function_af6d0(g31, g33, g32, g35, 0, g36, 0);
										// branch -> 0xb22e4
									}
									// 0xb22e4
									v45 = 0x1000000 * g22;
									if (v45 >= 0 && (v45 || 0xffffff) >= 0x1ffffff) {
										// 0xb22ec
										v46 = v45 / 0x1000000 - 1;
										if (v46 <= 3) {
											// 0xb22fc
											v58 = g16 + 0x55ec * v46;
											v59 = g35 + *(int32_t *)(v58 + 100);
											v60 = g32 + *(int32_t *)(v58 + 96) - *(int32_t *)(v58 + 148);
											v78 = *(int32_t *)(v58 + 140);
											g13 = *(int32_t *)(v58 + 144);
											function_af18c(v46, g31, g33, v60, v59, *(int32_t *)(v58 + 124), v78, 0, g36);
											if (g17 != 0) {
												// 0xb2348
												v79 = *(int32_t *)(g30 + 152);
												if (v79 != 0) {
													// 0xb2354
													if (v79 == 2) {
														// 0xb235c
														function_b1bb0(g28 - 0x3060, g31 - 2, g33 + 1, g20, g36, g32 - 96, g35 - 16);
														// branch -> 0xb237c
													}
													// 0xb237c
													function_b1bb0(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
													// branch -> 0xb239c
												}
											}
										}
									}
									// 0xb239c
									if (v15 >= 1) {
										// 0xb23a8
										if (__asm_rlwinm_(v52, 0, 25, 25) == 0) {
											// 0xb23b0
											v80 = *(int32_t *)(g23 - 0x77ac);
											if (*(int32_t *)(g16 + 0x55ec * *(int32_t *)v80 + 460) != 0) {
												// 0xb23cc
												*(int32_t *)g25 = v16 - 1;
												v94 = *(int32_t *)g25;
												if (v94 <= 199) {
													// 0xb23e4
													v95 = *(int32_t *)(g23 - 0x7754) + 232 * v94;
													g30 = v95;
													if (*(int32_t *)(v95 + 160) % 2 == 0) {
														// 0xb23fc
														v99 = *(int32_t *)(v95 + 224);
														if (v99 != 0) {
															// 0xb2408
															g34 = v95 + 84;
															g27 = g35 + *(int32_t *)(v95 + 60);
															g26 = g32 + *(int32_t *)(v95 + 56) - *(int32_t *)(v99 + 496);
															function_c9b28();
															if (*(int32_t *)g25 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
																// 0xb243c
																v81 = g30;
																v100 = *(int32_t *)(*(int32_t *)(v81 + 224) + 492);
																g13 = g36;
																function_50478(233, g26, g27, v81 + 84, *(int32_t *)(v81 + 104), v100, 0);
																// branch -> 0xb2464
															}
															// 0xb2464
															function_c9b70((int32_t *)(g30 + 84));
															function_aedfc(g31, g33, g26, g27, *(int32_t *)g25, 0, g36);
															if (g17 != 0) {
																// 0xb2494
																if (*(int32_t *)(g30 + 108) == 0) {
																	// 0xb24a0
																	function_b1bb0(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
																	// branch -> 0xb24c0
																}
															}
														}
													}
												}
											}
										} else {
											// 0xb23cc
											*(int32_t *)g25 = v16 - 1;
											v94 = *(int32_t *)g25;
											if (v94 <= 199) {
												// 0xb23e4
												v95 = *(int32_t *)(g23 - 0x7754) + 232 * v94;
												g30 = v95;
												if (*(int32_t *)(v95 + 160) % 2 == 0) {
													// 0xb23fc
													v99 = *(int32_t *)(v95 + 224);
													if (v99 != 0) {
														// 0xb2408
														g34 = v95 + 84;
														g27 = g35 + *(int32_t *)(v95 + 60);
														g26 = g32 + *(int32_t *)(v95 + 56) - *(int32_t *)(v99 + 496);
														function_c9b28();
														if (*(int32_t *)g25 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
															// 0xb243c
															v81 = g30;
															v100 = *(int32_t *)(*(int32_t *)(v81 + 224) + 492);
															g13 = g36;
															function_50478(233, g26, g27, v81 + 84, *(int32_t *)(v81 + 104), v100, 0);
															// branch -> 0xb2464
														}
														// 0xb2464
														function_c9b70((int32_t *)(g30 + 84));
														function_aedfc(g31, g33, g26, g27, *(int32_t *)g25, 0, g36);
														if (g17 != 0) {
															// 0xb2494
															if (*(int32_t *)(g30 + 108) == 0) {
																// 0xb24a0
																function_b1bb0(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
																// branch -> 0xb24c0
															}
														}
													}
												}
											}
										}
										// 0xb24c0
										if (v52 % 2 != 0) {
											// 0xb24c8
											DrawMissile(g31, g33, g32, g35, 0, g36, 0);
											// branch -> 0xb24e8
										}
										// 0xb24e8
										if (v9 != 0) {
											// 0xb24f4
											v82 = g23;
											v101 = *(int32_t *)(v82 - 0x70cc);
											v102 = *(int32_t *)(v82 - 0x7290);
											if (*(int32_t *)v102 < (int32_t) * (char *)v101) {
												// 0xb2510
												DrawObject(g31, g33, g32, g35, 0, 0, g36);
												// branch -> 0xb2530
											}
										}
										// 0xb2530
										v83 = g21;
										v91 = 0x1000000 * v83;
										v96 = v91 / 0x1000000;
										if ((v91 || 0xffffff) >= 0x1ffffff) {
											// 0xb2538
											v92 = v96 - 1;
											g27 = v92;
											v97 = *(int32_t *)(g23 - 0x7690) + 368 * v92;
											g31 = v97;
											if (*(int32_t *)(v97 + 52) != 0) {
												// 0xb2558
												if (v83 <= 127) {
													// 0xb2560
													g34 = *(int32_t *)(v97 + 24);
													v84 = function_c9948();
													g29 = v84;
													v85 = g31;
													if (v84 == 0) {
														// 0xb2570
														function_c9acc(*(int32_t *)(v85 + 24));
														// branch -> 0xb261c
													} else {
														// 0xb257c
														v103 = *(int32_t *)(v85 + 32);
														g11 = v103;
														if (v103 >= 1) {
															// 0xb2588
															if (function_4d794(v84) > 50) {
																// 0xb2588
																// branch -> 0xb25ac
															} else {
																// 0xb2598
																v93 = function_4d794(g29);
																v86 = g31;
																v104 = *(int32_t *)(v86 + 32);
																g40 = v104;
																if (v104 <= v93) {
																	// 0xb25b8
																	v87 = g27;
																	v98 = g32 - *(int32_t *)(v86 + 40);
																	g27 = v98;
																	v89 = v98;
																	v90 = v86;
																	if (v87 == (int32_t) * (char *)*(int32_t *)(g23 - 0x7748)) {
																		// 0xb25d4
																		g37 = v98;
																		v105 = *(int32_t *)(v86 + 36);
																		g41 = v105;
																		v88 = g35;
																		g38 = v88;
																		g13 = g36;
																		g42 = 0;
																		CelDecodeClr(181, v98, v88, *(int32_t *)(v86 + 24), v104, v105, 0);
																		v89 = g27;
																		v90 = g31;
																		// branch -> 0xb25f4
																	}
																	// 0xb25f4
																	v106 = *(int32_t *)(v90 + 32);
																	v107 = *(int32_t *)(v90 + 36);
																	CelDecodeHdrLightOnly(v89, g35, *(int32_t *)(v90 + 24), v106, v107, 0, g36);
																	function_c9acc(*(int32_t *)(g31 + 24));
																	// branch -> 0xb261c
																	// Detected a possible infinite recursion (goto support failed); quitting...
																}
															}
															// Detected a possible infinite recursion (goto support failed); quitting...
														}
														// Detected a possible infinite recursion (goto support failed); quitting...
													}
													// Detected a possible infinite recursion (goto support failed); quitting...
												}
											}
										}
										// Detected a possible infinite recursion (goto support failed); quitting...
									}
									// 0xb24c0
									if (v52 % 2 != 0) {
										// 0xb24c8
										DrawMissile(g31, g33, g32, g35, 0, g36, 0);
										// branch -> 0xb24e8
									}
									// 0xb24e8
									if (v9 != 0) {
										// 0xb24f4
										v82 = g23;
										v101 = *(int32_t *)(v82 - 0x70cc);
										v102 = *(int32_t *)(v82 - 0x7290);
										if (*(int32_t *)v102 < (int32_t) * (char *)v101) {
											// 0xb2510
											DrawObject(g31, g33, g32, g35, 0, 0, g36);
											// branch -> 0xb2530
										}
									}
									// 0xb2530
									v83 = g21;
									v91 = 0x1000000 * v83;
									v96 = v91 / 0x1000000;
									if ((v91 || 0xffffff) >= 0x1ffffff) {
										// 0xb2538
										v92 = v96 - 1;
										g27 = v92;
										v97 = *(int32_t *)(g23 - 0x7690) + 368 * v92;
										g31 = v97;
										if (*(int32_t *)(v97 + 52) != 0) {
											// 0xb2558
											if (v83 <= 127) {
												// 0xb2560
												g34 = *(int32_t *)(v97 + 24);
												v84 = function_c9948();
												g29 = v84;
												v85 = g31;
												if (v84 == 0) {
													// 0xb2570
													function_c9acc(*(int32_t *)(v85 + 24));
													// branch -> 0xb261c
												} else {
													// 0xb257c
													v103 = *(int32_t *)(v85 + 32);
													g11 = v103;
													if (v103 >= 1) {
														// 0xb2588
														if (function_4d794(v84) > 50) {
															// 0xb2588
															// branch -> 0xb25ac
														} else {
															// 0xb2598
															v93 = function_4d794(g29);
															v86 = g31;
															v104 = *(int32_t *)(v86 + 32);
															g40 = v104;
															if (v104 <= v93) {
																// 0xb25b8
																v87 = g27;
																v98 = g32 - *(int32_t *)(v86 + 40);
																g27 = v98;
																v89 = v98;
																v90 = v86;
																if (v87 == (int32_t) * (char *)*(int32_t *)(g23 - 0x7748)) {
																	// 0xb25d4
																	g37 = v98;
																	v105 = *(int32_t *)(v86 + 36);
																	g41 = v105;
																	v88 = g35;
																	g38 = v88;
																	g13 = g36;
																	g42 = 0;
																	CelDecodeClr(181, v98, v88, *(int32_t *)(v86 + 24), v104, v105, 0);
																	v89 = g27;
																	v90 = g31;
																	// branch -> 0xb25f4
																}
																// 0xb25f4
																v106 = *(int32_t *)(v90 + 32);
																v107 = *(int32_t *)(v90 + 36);
																CelDecodeHdrLightOnly(v89, g35, *(int32_t *)(v90 + 24), v106, v107, 0, g36);
																function_c9acc(*(int32_t *)(g31 + 24));
																// branch -> 0xb261c
																// Detected a possible infinite recursion (goto support failed); quitting...
															}
														}
														// Detected a possible infinite recursion (goto support failed); quitting...
													}
													// Detected a possible infinite recursion (goto support failed); quitting...
												}
												// Detected a possible infinite recursion (goto support failed); quitting...
											}
										}
									}
									// Detected a possible infinite recursion (goto support failed); quitting...
								}
								// 0xb2060
								function_c9acc(*(int32_t *)(v32 + 24));
								// branch -> 0xb20d0
							}
							// 0xb20d0
							v52 = v12;
							g29 = v52;
							if (__asm_rlwinm_(v52, 0, 26, 26) != 0) {
								// 0xb20dc
								v44 = -1 - (int32_t)v17;
								if (v44 <= 3) {
									// 0xb20f4
									v53 = g16 + 0x55ec * v44;
									v54 = g35 + *(int32_t *)(v53 + 100);
									v55 = g32 + *(int32_t *)(v53 + 96) - *(int32_t *)(v53 + 148);
									v72 = *(int32_t *)(v53 + 124);
									v73 = *(int32_t *)(v53 + 140);
									g13 = *(int32_t *)(v53 + 144);
									function_af18c(v44, g31, g33 - 1, v55, v54, v72, v73, 0, g36);
									if (g17 != 0) {
										// 0xb2140
										v74 = *(int32_t *)(g30 + 152);
										if (v74 != 0) {
											// 0xb214c
											if (v74 == 2) {
												// 0xb2154
												function_b1bb0(g28 - 0x3060, g31 - 2, g33 + 1, g20, g36, g32 - 96, g35 - 16);
												// branch -> 0xb2174
											}
											// 0xb2174
											function_b1bb0(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
											// branch -> 0xb2194
										}
									}
								}
							}
							// 0xb2194
							if (__asm_rlwinm_(v52, 0, 27, 27) != 0) {
								// 0xb219c
								if (__asm_rlwinm_(v52, 0, 25, 25) == 0) {
									// 0xb21a4
									v75 = *(int32_t *)(g23 - 0x77ac);
									if (*(int32_t *)(g16 + 0x55ec * *(int32_t *)v75 + 460) != 0) {
										// 0xb21c0
										v36 = g18;
										if (v36 <= 0xffffffff) {
											// 0xb21c8
											*(int32_t *)g25 = -1 - v36;
											v56 = *(int32_t *)g25;
											if (v56 <= 199) {
												// 0xb21e0
												v57 = *(int32_t *)(g23 - 0x7754) + 232 * v56;
												g30 = v57;
												if (*(int32_t *)(v57 + 160) % 2 == 0) {
													// 0xb21f8
													v76 = *(int32_t *)(v57 + 224);
													if (v76 != 0) {
														// 0xb2204
														g34 = v57 + 84;
														g27 = g35 + *(int32_t *)(v57 + 60);
														g26 = g32 + *(int32_t *)(v57 + 56) - *(int32_t *)(v76 + 496);
														function_c9b28();
														if (*(int32_t *)g25 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
															// 0xb2238
															v37 = g30;
															v77 = *(int32_t *)(*(int32_t *)(v37 + 224) + 492);
															g13 = g36;
															function_50478(233, g26, g27, v37 + 84, *(int32_t *)(v37 + 104), v77, 0);
															// branch -> 0xb2260
														}
														// 0xb2260
														function_c9b70((int32_t *)(g30 + 84));
														function_aedfc(g31, g33, g26, g27, *(int32_t *)g25, 0, g36);
														if (g17 != 0) {
															// 0xb2290
															if (*(int32_t *)(g30 + 108) == 0) {
																// 0xb229c
																function_b1bb0(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
																// branch -> 0xb22bc
															}
														}
													}
												}
											}
										}
									}
								} else {
									// 0xb21c0
									v36 = g18;
									if (v36 <= 0xffffffff) {
										// 0xb21c8
										*(int32_t *)g25 = -1 - v36;
										v56 = *(int32_t *)g25;
										if (v56 <= 199) {
											// 0xb21e0
											v57 = *(int32_t *)(g23 - 0x7754) + 232 * v56;
											g30 = v57;
											if (*(int32_t *)(v57 + 160) % 2 == 0) {
												// 0xb21f8
												v76 = *(int32_t *)(v57 + 224);
												if (v76 != 0) {
													// 0xb2204
													g34 = v57 + 84;
													g27 = g35 + *(int32_t *)(v57 + 60);
													g26 = g32 + *(int32_t *)(v57 + 56) - *(int32_t *)(v76 + 496);
													function_c9b28();
													if (*(int32_t *)g25 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
														// 0xb2238
														v37 = g30;
														v77 = *(int32_t *)(*(int32_t *)(v37 + 224) + 492);
														g13 = g36;
														function_50478(233, g26, g27, v37 + 84, *(int32_t *)(v37 + 104), v77, 0);
														// branch -> 0xb2260
													}
													// 0xb2260
													function_c9b70((int32_t *)(g30 + 84));
													function_aedfc(g31, g33, g26, g27, *(int32_t *)g25, 0, g36);
													if (g17 != 0) {
														// 0xb2290
														if (*(int32_t *)(g30 + 108) == 0) {
															// 0xb229c
															function_b1bb0(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
															// branch -> 0xb22bc
														}
													}
												}
											}
										}
									}
								}
								// 0xb22bc
								if (__asm_rlwinm_(v52, 0, 29, 29) != 0) {
									// 0xb22c4
									function_af6d0(g31, g33, g32, g35, 0, g36, 0);
									// branch -> 0xb22e4
								}
								// 0xb22e4
								v45 = 0x1000000 * g22;
								if (v45 >= 0 && (v45 || 0xffffff) >= 0x1ffffff) {
									// 0xb22ec
									v46 = v45 / 0x1000000 - 1;
									if (v46 <= 3) {
										// 0xb22fc
										v58 = g16 + 0x55ec * v46;
										v59 = g35 + *(int32_t *)(v58 + 100);
										v60 = g32 + *(int32_t *)(v58 + 96) - *(int32_t *)(v58 + 148);
										v78 = *(int32_t *)(v58 + 140);
										g13 = *(int32_t *)(v58 + 144);
										function_af18c(v46, g31, g33, v60, v59, *(int32_t *)(v58 + 124), v78, 0, g36);
										if (g17 != 0) {
											// 0xb2348
											v79 = *(int32_t *)(g30 + 152);
											if (v79 != 0) {
												// 0xb2354
												if (v79 == 2) {
													// 0xb235c
													function_b1bb0(g28 - 0x3060, g31 - 2, g33 + 1, g20, g36, g32 - 96, g35 - 16);
													// branch -> 0xb237c
												}
												// 0xb237c
												function_b1bb0(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
												// branch -> 0xb239c
											}
										}
									}
								}
								// 0xb239c
								if (v15 >= 1) {
									// 0xb23a8
									if (__asm_rlwinm_(v52, 0, 25, 25) == 0) {
										// 0xb23b0
										v80 = *(int32_t *)(g23 - 0x77ac);
										if (*(int32_t *)(g16 + 0x55ec * *(int32_t *)v80 + 460) != 0) {
											// 0xb23cc
											*(int32_t *)g25 = v16 - 1;
											v94 = *(int32_t *)g25;
											if (v94 <= 199) {
												// 0xb23e4
												v95 = *(int32_t *)(g23 - 0x7754) + 232 * v94;
												g30 = v95;
												if (*(int32_t *)(v95 + 160) % 2 == 0) {
													// 0xb23fc
													v99 = *(int32_t *)(v95 + 224);
													if (v99 != 0) {
														// 0xb2408
														g34 = v95 + 84;
														g27 = g35 + *(int32_t *)(v95 + 60);
														g26 = g32 + *(int32_t *)(v95 + 56) - *(int32_t *)(v99 + 496);
														function_c9b28();
														if (*(int32_t *)g25 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
															// 0xb243c
															v81 = g30;
															v100 = *(int32_t *)(*(int32_t *)(v81 + 224) + 492);
															g13 = g36;
															function_50478(233, g26, g27, v81 + 84, *(int32_t *)(v81 + 104), v100, 0);
															// branch -> 0xb2464
														}
														// 0xb2464
														function_c9b70((int32_t *)(g30 + 84));
														function_aedfc(g31, g33, g26, g27, *(int32_t *)g25, 0, g36);
														if (g17 != 0) {
															// 0xb2494
															if (*(int32_t *)(g30 + 108) == 0) {
																// 0xb24a0
																function_b1bb0(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
																// branch -> 0xb24c0
															}
														}
													}
												}
											}
										}
									}
									// 0xb24c0
									if (v52 % 2 != 0) {
										// 0xb24c8
										DrawMissile(g31, g33, g32, g35, 0, g36, 0);
										// branch -> 0xb24e8
									}
									// 0xb24e8
									if (v9 != 0) {
										// 0xb24f4
										v82 = g23;
										v101 = *(int32_t *)(v82 - 0x70cc);
										v102 = *(int32_t *)(v82 - 0x7290);
										if (*(int32_t *)v102 < (int32_t) * (char *)v101) {
											// 0xb2510
											DrawObject(g31, g33, g32, g35, 0, 0, g36);
											// branch -> 0xb2530
										}
									}
									// 0xb2530
									v83 = g21;
									v91 = 0x1000000 * v83;
									if ((v91 || 0xffffff) >= 0x1ffffff) {
										// 0xb2538
										v92 = v91 / 0x1000000 - 1;
										g27 = v92;
										v97 = *(int32_t *)(g23 - 0x7690) + 368 * v92;
										g31 = v97;
										if (*(int32_t *)(v97 + 52) != 0) {
											// 0xb2558
											if (v83 <= 127) {
												// 0xb2560
												g34 = *(int32_t *)(v97 + 24);
												v84 = function_c9948();
												g29 = v84;
												v85 = g31;
												if (v84 == 0) {
													// 0xb2570
													function_c9acc(*(int32_t *)(v85 + 24));
													// branch -> 0xb261c
												} else {
													// 0xb257c
													v103 = *(int32_t *)(v85 + 32);
													g11 = v103;
													if (v103 >= 1) {
														// 0xb2588
														if (function_4d794(v84) > 50) {
															// 0xb2588
															// branch -> 0xb25ac
														} else {
															// 0xb2598
															v93 = function_4d794(g29);
															v86 = g31;
															v104 = *(int32_t *)(v86 + 32);
															g40 = v104;
															if (v104 <= v93) {
																// 0xb25b8
																v87 = g27;
																v98 = g32 - *(int32_t *)(v86 + 40);
																g27 = v98;
																v89 = v98;
																v90 = v86;
																if (v87 == (int32_t) * (char *)*(int32_t *)(g23 - 0x7748)) {
																	// 0xb25d4
																	g37 = v98;
																	v105 = *(int32_t *)(v86 + 36);
																	g41 = v105;
																	v88 = g35;
																	g38 = v88;
																	g13 = g36;
																	g42 = 0;
																	CelDecodeClr(181, v98, v88, *(int32_t *)(v86 + 24), v104, v105, 0);
																	v89 = g27;
																	v90 = g31;
																	// branch -> 0xb25f4
																}
																// 0xb25f4
																v106 = *(int32_t *)(v90 + 32);
																v107 = *(int32_t *)(v90 + 36);
																CelDecodeHdrLightOnly(v89, g35, *(int32_t *)(v90 + 24), v106, v107, 0, g36);
																function_c9acc(*(int32_t *)(g31 + 24));
																// branch -> 0xb261c
																// Detected a possible infinite recursion (goto support failed); quitting...
															}
														}
														// Detected a possible infinite recursion (goto support failed); quitting...
													}
													// Detected a possible infinite recursion (goto support failed); quitting...
												}
												// Detected a possible infinite recursion (goto support failed); quitting...
											}
										}
									}
									// Detected a possible infinite recursion (goto support failed); quitting...
								}
								// Detected a possible infinite recursion (goto support failed); quitting...
							}
							// 0xb22bc
							if (__asm_rlwinm_(v52, 0, 29, 29) != 0) {
								// 0xb22c4
								function_af6d0(g31, g33, g32, g35, 0, g36, 0);
								// branch -> 0xb22e4
							}
							// 0xb22e4
							v45 = 0x1000000 * g22;
							if (v45 >= 0 && (v45 || 0xffffff) >= 0x1ffffff) {
								// 0xb22ec
								v46 = v45 / 0x1000000 - 1;
								if (v46 <= 3) {
									// 0xb22fc
									v58 = g16 + 0x55ec * v46;
									v59 = g35 + *(int32_t *)(v58 + 100);
									v60 = g32 + *(int32_t *)(v58 + 96) - *(int32_t *)(v58 + 148);
									v78 = *(int32_t *)(v58 + 140);
									g13 = *(int32_t *)(v58 + 144);
									function_af18c(v46, g31, g33, v60, v59, *(int32_t *)(v58 + 124), v78, 0, g36);
									if (g17 != 0) {
										// 0xb2348
										v79 = *(int32_t *)(g30 + 152);
										if (v79 != 0) {
											// 0xb2354
											if (v79 == 2) {
												// 0xb235c
												function_b1bb0(g28 - 0x3060, g31 - 2, g33 + 1, g20, g36, g32 - 96, g35 - 16);
												// branch -> 0xb237c
											}
											// 0xb237c
											function_b1bb0(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
											// branch -> 0xb239c
										}
									}
								}
							}
							// 0xb239c
							if (v15 >= 1) {
								// 0xb23a8
								if (__asm_rlwinm_(v52, 0, 25, 25) == 0) {
									// 0xb23b0
									v80 = *(int32_t *)(g23 - 0x77ac);
									if (*(int32_t *)(g16 + 0x55ec * *(int32_t *)v80 + 460) != 0) {
										// Detected a possible infinite recursion (goto support failed); quitting...
									}
								}
								// Detected a possible infinite recursion (goto support failed); quitting...
							}
							// Detected a possible infinite recursion (goto support failed); quitting...
						}
					}
				}
				// 0xb20d0
				v52 = v12;
				g29 = v52;
				if (__asm_rlwinm_(v52, 0, 26, 26) != 0) {
					// 0xb20dc
					v44 = -1 - (int32_t)v17;
					if (v44 <= 3) {
						// 0xb20f4
						v53 = g16 + 0x55ec * v44;
						v54 = g35 + *(int32_t *)(v53 + 100);
						v55 = g32 + *(int32_t *)(v53 + 96) - *(int32_t *)(v53 + 148);
						v72 = *(int32_t *)(v53 + 124);
						v73 = *(int32_t *)(v53 + 140);
						g13 = *(int32_t *)(v53 + 144);
						function_af18c(v44, g31, g33 - 1, v55, v54, v72, v73, 0, g36);
						if (g17 != 0) {
							// 0xb2140
							v74 = *(int32_t *)(g30 + 152);
							if (v74 != 0) {
								// 0xb214c
								if (v74 == 2) {
									// 0xb2154
									function_b1bb0(g28 - 0x3060, g31 - 2, g33 + 1, g20, g36, g32 - 96, g35 - 16);
									// branch -> 0xb2174
								}
								// 0xb2174
								function_b1bb0(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
								// branch -> 0xb2194
							}
						}
					}
				}
				// 0xb2194
				if (__asm_rlwinm_(v52, 0, 27, 27) != 0) {
					// 0xb219c
					if (__asm_rlwinm_(v52, 0, 25, 25) == 0) {
						// 0xb21a4
						v75 = *(int32_t *)(g23 - 0x77ac);
						if (*(int32_t *)(g16 + 0x55ec * *(int32_t *)v75 + 460) != 0) {
							// 0xb21c0
							v36 = g18;
							if (v36 <= 0xffffffff) {
								// 0xb21c8
								*(int32_t *)g25 = -1 - v36;
								v56 = *(int32_t *)g25;
								if (v56 <= 199) {
									// 0xb21e0
									v57 = *(int32_t *)(g23 - 0x7754) + 232 * v56;
									g30 = v57;
									if (*(int32_t *)(v57 + 160) % 2 == 0) {
										// 0xb21f8
										v76 = *(int32_t *)(v57 + 224);
										if (v76 != 0) {
											// 0xb2204
											g34 = v57 + 84;
											g27 = g35 + *(int32_t *)(v57 + 60);
											g26 = g32 + *(int32_t *)(v57 + 56) - *(int32_t *)(v76 + 496);
											function_c9b28();
											if (*(int32_t *)g25 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
												// 0xb2238
												v37 = g30;
												v77 = *(int32_t *)(*(int32_t *)(v37 + 224) + 492);
												g13 = g36;
												function_50478(233, g26, g27, v37 + 84, *(int32_t *)(v37 + 104), v77, 0);
												// branch -> 0xb2260
											}
											// 0xb2260
											function_c9b70((int32_t *)(g30 + 84));
											function_aedfc(g31, g33, g26, g27, *(int32_t *)g25, 0, g36);
											if (g17 != 0) {
												// 0xb2290
												if (*(int32_t *)(g30 + 108) == 0) {
													// 0xb229c
													function_b1bb0(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
													// branch -> 0xb22bc
												}
											}
										}
									}
								}
							}
						}
					} else {
						// 0xb21c0
						v36 = g18;
						if (v36 <= 0xffffffff) {
							// 0xb21c8
							*(int32_t *)g25 = -1 - v36;
							v56 = *(int32_t *)g25;
							if (v56 <= 199) {
								// 0xb21e0
								v57 = *(int32_t *)(g23 - 0x7754) + 232 * v56;
								g30 = v57;
								if (*(int32_t *)(v57 + 160) % 2 == 0) {
									// 0xb21f8
									v76 = *(int32_t *)(v57 + 224);
									if (v76 != 0) {
										// 0xb2204
										g34 = v57 + 84;
										g27 = g35 + *(int32_t *)(v57 + 60);
										g26 = g32 + *(int32_t *)(v57 + 56) - *(int32_t *)(v76 + 496);
										function_c9b28();
										if (*(int32_t *)g25 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
											// 0xb2238
											v37 = g30;
											v77 = *(int32_t *)(*(int32_t *)(v37 + 224) + 492);
											g13 = g36;
											function_50478(233, g26, g27, v37 + 84, *(int32_t *)(v37 + 104), v77, 0);
											// branch -> 0xb2260
										}
										// 0xb2260
										function_c9b70((int32_t *)(g30 + 84));
										function_aedfc(g31, g33, g26, g27, *(int32_t *)g25, 0, g36);
										if (g17 != 0) {
											// 0xb2290
											if (*(int32_t *)(g30 + 108) == 0) {
												// 0xb229c
												function_b1bb0(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
												// branch -> 0xb22bc
											}
										}
									}
								}
							}
						}
					}
					// 0xb22bc
					if (__asm_rlwinm_(v52, 0, 29, 29) != 0) {
						// 0xb22c4
						function_af6d0(g31, g33, g32, g35, 0, g36, 0);
						// branch -> 0xb22e4
					}
					// 0xb22e4
					v45 = 0x1000000 * g22;
					if (v45 >= 0 && (v45 || 0xffffff) >= 0x1ffffff) {
						// 0xb22ec
						v46 = v45 / 0x1000000 - 1;
						if (v46 <= 3) {
							// 0xb22fc
							v58 = g16 + 0x55ec * v46;
							v59 = g35 + *(int32_t *)(v58 + 100);
							v60 = g32 + *(int32_t *)(v58 + 96) - *(int32_t *)(v58 + 148);
							v78 = *(int32_t *)(v58 + 140);
							g13 = *(int32_t *)(v58 + 144);
							function_af18c(v46, g31, g33, v60, v59, *(int32_t *)(v58 + 124), v78, 0, g36);
							if (g17 != 0) {
								// 0xb2348
								v79 = *(int32_t *)(g30 + 152);
								if (v79 != 0) {
									// 0xb2354
									if (v79 == 2) {
										// 0xb235c
										function_b1bb0(g28 - 0x3060, g31 - 2, g33 + 1, g20, g36, g32 - 96, g35 - 16);
										// branch -> 0xb237c
									}
									// 0xb237c
									function_b1bb0(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
									// branch -> 0xb239c
								}
							}
						}
					}
					// 0xb239c
					if (v15 >= 1) {
						// 0xb23a8
						if (__asm_rlwinm_(v52, 0, 25, 25) == 0) {
							// 0xb23b0
							v80 = *(int32_t *)(g23 - 0x77ac);
							if (*(int32_t *)(g16 + 0x55ec * *(int32_t *)v80 + 460) != 0) {
								// Detected a possible infinite recursion (goto support failed); quitting...
							}
						}
						// Detected a possible infinite recursion (goto support failed); quitting...
					}
					// Detected a possible infinite recursion (goto support failed); quitting...
				}
				// 0xb22bc
				if (__asm_rlwinm_(v52, 0, 29, 29) != 0) {
					// 0xb22c4
					function_af6d0(g31, g33, g32, g35, 0, g36, 0);
					// branch -> 0xb22e4
				}
				// 0xb22e4
				v45 = 0x1000000 * g22;
				if (v45 >= 0 && (v45 || 0xffffff) >= 0x1ffffff) {
					// 0xb22ec
					v46 = v45 / 0x1000000 - 1;
					if (v46 <= 3) {
						// 0xb22fc
						v58 = g16 + 0x55ec * v46;
						v59 = g35 + *(int32_t *)(v58 + 100);
						v60 = g32 + *(int32_t *)(v58 + 96) - *(int32_t *)(v58 + 148);
						v78 = *(int32_t *)(v58 + 140);
						g13 = *(int32_t *)(v58 + 144);
						function_af18c(v46, g31, g33, v60, v59, *(int32_t *)(v58 + 124), v78, 0, g36);
						if (g17 != 0) {
							// 0xb2348
							v79 = *(int32_t *)(g30 + 152);
							if (v79 != 0) {
								// 0xb2354
								if (v79 == 2) {
									// 0xb235c
									function_b1bb0(g28 - 0x3060, g31 - 2, g33 + 1, g20, g36, g32 - 96, g35 - 16);
									// branch -> 0xb237c
								}
								// 0xb237c
								function_b1bb0(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
								// branch -> 0xb239c
							}
						}
					}
				}
				// 0xb239c
				if (v15 >= 1) {
					// 0xb23a8
					if (__asm_rlwinm_(v52, 0, 25, 25) == 0) {
						// 0xb23b0
						v80 = *(int32_t *)(g23 - 0x77ac);
						if (*(int32_t *)(g16 + 0x55ec * *(int32_t *)v80 + 460) != 0) {
							// Detected a possible infinite recursion (goto support failed); quitting...
						}
					}
					// Detected a possible infinite recursion (goto support failed); quitting...
				}
				// Detected a possible infinite recursion (goto support failed); quitting...
			}
			// 0xb1fb8
			if (v9 != 0) {
				// 0xb1fc4
				DrawObject(g31, g33, g32, g35, 1, 0, g36);
				// branch -> 0xb1fe4
			}
		}
		// 0xb1fe4
		v28 = g21;
		v41 = 0x1000000 * v28;
		v49 = v41 / 0x1000000;
		if ((v41 || 0xffffff) >= 0x1ffffff) {
			// 0xb1fec
			v42 = v49 - 1;
			g26 = v42;
			v50 = *(int32_t *)(g23 - 0x7690) + 368 * v42;
			g30 = v50;
			if (*(int32_t *)(v50 + 52) == 0) {
				// 0xb200c
				if (v28 <= 127) {
					// 0xb2014
					g34 = *(int32_t *)(v50 + 24);
					v29 = function_c9948();
					v18 = v29;
					v30 = g30;
					if (v29 == 0) {
						// 0xb2024
						function_c9acc(*(int32_t *)(v30 + 24));
						// branch -> 0xb20d0
					} else {
						// 0xb2030
						v67 = *(int32_t *)(v30 + 32);
						g11 = v67;
						v32 = v30;
						if (v67 >= 1) {
							// 0xb203c
							if (function_4d794(v29) > 50) {
								// 0xb203c
								v32 = g30;
								// branch -> 0xb2060
							} else {
								// 0xb204c
								v43 = function_4d794(v18);
								v31 = g30;
								v68 = *(int32_t *)(v31 + 32);
								g40 = v68;
								if (v68 <= v43) {
									// 0xb206c
									v51 = g32 - *(int32_t *)(v31 + 40);
									g27 = v51;
									v34 = v51;
									v35 = v31;
									if (g26 == (int32_t) * (char *)*(int32_t *)(g23 - 0x7748)) {
										// 0xb2088
										g37 = v51;
										v69 = *(int32_t *)(v31 + 36);
										g41 = v69;
										v33 = g35;
										g38 = v33;
										g13 = g36;
										g42 = 0;
										CelDecodeClr(181, v51, v33, *(int32_t *)(v31 + 24), v68, v69, 0);
										v34 = g27;
										v35 = g30;
										// branch -> 0xb20a8
									}
									// 0xb20a8
									v70 = *(int32_t *)(v35 + 32);
									v71 = *(int32_t *)(v35 + 36);
									CelDecodeHdrLightOnly(v34, g35, *(int32_t *)(v35 + 24), v70, v71, 0, g36);
									function_c9acc(*(int32_t *)(g30 + 24));
									// branch -> 0xb20d0
									// 0xb20d0
									v52 = v12;
									g29 = v52;
									if (__asm_rlwinm_(v52, 0, 26, 26) != 0) {
										// 0xb20dc
										v44 = -1 - (int32_t)v17;
										if (v44 <= 3) {
											// 0xb20f4
											v53 = g16 + 0x55ec * v44;
											v54 = g35 + *(int32_t *)(v53 + 100);
											v55 = g32 + *(int32_t *)(v53 + 96) - *(int32_t *)(v53 + 148);
											v72 = *(int32_t *)(v53 + 124);
											v73 = *(int32_t *)(v53 + 140);
											g13 = *(int32_t *)(v53 + 144);
											function_af18c(v44, g31, g33 - 1, v55, v54, v72, v73, 0, g36);
											if (g17 != 0) {
												// 0xb2140
												v74 = *(int32_t *)(g30 + 152);
												if (v74 != 0) {
													// 0xb214c
													if (v74 == 2) {
														// 0xb2154
														function_b1bb0(g28 - 0x3060, g31 - 2, g33 + 1, g20, g36, g32 - 96, g35 - 16);
														// branch -> 0xb2174
													}
													// 0xb2174
													function_b1bb0(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
													// branch -> 0xb2194
												}
											}
										}
									}
									// 0xb2194
									if (__asm_rlwinm_(v52, 0, 27, 27) != 0) {
										// 0xb219c
										if (__asm_rlwinm_(v52, 0, 25, 25) == 0) {
											// 0xb21a4
											v75 = *(int32_t *)(g23 - 0x77ac);
											if (*(int32_t *)(g16 + 0x55ec * *(int32_t *)v75 + 460) != 0) {
												// 0xb21c0
												v36 = g18;
												if (v36 <= 0xffffffff) {
													// 0xb21c8
													*(int32_t *)g25 = -1 - v36;
													v56 = *(int32_t *)g25;
													if (v56 <= 199) {
														// 0xb21e0
														v57 = *(int32_t *)(g23 - 0x7754) + 232 * v56;
														g30 = v57;
														if (*(int32_t *)(v57 + 160) % 2 == 0) {
															// 0xb21f8
															v76 = *(int32_t *)(v57 + 224);
															if (v76 != 0) {
																// 0xb2204
																g34 = v57 + 84;
																g27 = g35 + *(int32_t *)(v57 + 60);
																g26 = g32 + *(int32_t *)(v57 + 56) - *(int32_t *)(v76 + 496);
																function_c9b28();
																if (*(int32_t *)g25 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
																	// 0xb2238
																	v37 = g30;
																	v77 = *(int32_t *)(*(int32_t *)(v37 + 224) + 492);
																	g13 = g36;
																	function_50478(233, g26, g27, v37 + 84, *(int32_t *)(v37 + 104), v77, 0);
																	// branch -> 0xb2260
																}
																// 0xb2260
																function_c9b70((int32_t *)(g30 + 84));
																function_aedfc(g31, g33, g26, g27, *(int32_t *)g25, 0, g36);
																if (g17 != 0) {
																	// 0xb2290
																	if (*(int32_t *)(g30 + 108) == 0) {
																		// 0xb229c
																		function_b1bb0(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
																		// branch -> 0xb22bc
																	}
																}
															}
														}
													}
												}
											}
										} else {
											// 0xb21c0
											v36 = g18;
											if (v36 <= 0xffffffff) {
												// 0xb21c8
												*(int32_t *)g25 = -1 - v36;
												v56 = *(int32_t *)g25;
												if (v56 <= 199) {
													// 0xb21e0
													v57 = *(int32_t *)(g23 - 0x7754) + 232 * v56;
													g30 = v57;
													if (*(int32_t *)(v57 + 160) % 2 == 0) {
														// 0xb21f8
														v76 = *(int32_t *)(v57 + 224);
														if (v76 != 0) {
															// 0xb2204
															g34 = v57 + 84;
															g27 = g35 + *(int32_t *)(v57 + 60);
															g26 = g32 + *(int32_t *)(v57 + 56) - *(int32_t *)(v76 + 496);
															function_c9b28();
															if (*(int32_t *)g25 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
																// 0xb2238
																v37 = g30;
																v77 = *(int32_t *)(*(int32_t *)(v37 + 224) + 492);
																g13 = g36;
																function_50478(233, g26, g27, v37 + 84, *(int32_t *)(v37 + 104), v77, 0);
																// branch -> 0xb2260
															}
															// 0xb2260
															function_c9b70((int32_t *)(g30 + 84));
															function_aedfc(g31, g33, g26, g27, *(int32_t *)g25, 0, g36);
															if (g17 != 0) {
																// 0xb2290
																if (*(int32_t *)(g30 + 108) == 0) {
																	// 0xb229c
																	function_b1bb0(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
																	// branch -> 0xb22bc
																}
															}
														}
													}
												}
											}
										}
										// 0xb22bc
										if (__asm_rlwinm_(v52, 0, 29, 29) != 0) {
											// 0xb22c4
											function_af6d0(g31, g33, g32, g35, 0, g36, 0);
											// branch -> 0xb22e4
										}
										// 0xb22e4
										v45 = 0x1000000 * g22;
										if (v45 >= 0 && (v45 || 0xffffff) >= 0x1ffffff) {
											// 0xb22ec
											v46 = v45 / 0x1000000 - 1;
											if (v46 <= 3) {
												// 0xb22fc
												v58 = g16 + 0x55ec * v46;
												v59 = g35 + *(int32_t *)(v58 + 100);
												v60 = g32 + *(int32_t *)(v58 + 96) - *(int32_t *)(v58 + 148);
												v78 = *(int32_t *)(v58 + 140);
												g13 = *(int32_t *)(v58 + 144);
												function_af18c(v46, g31, g33, v60, v59, *(int32_t *)(v58 + 124), v78, 0, g36);
												if (g17 != 0) {
													// 0xb2348
													v79 = *(int32_t *)(g30 + 152);
													if (v79 != 0) {
														// 0xb2354
														if (v79 == 2) {
															// 0xb235c
															function_b1bb0(g28 - 0x3060, g31 - 2, g33 + 1, g20, g36, g32 - 96, g35 - 16);
															// branch -> 0xb237c
														}
														// 0xb237c
														function_b1bb0(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
														// branch -> 0xb239c
													}
												}
											}
										}
										// 0xb239c
										if (v15 >= 1) {
											// 0xb23a8
											if (__asm_rlwinm_(v52, 0, 25, 25) == 0) {
												// 0xb23b0
												v80 = *(int32_t *)(g23 - 0x77ac);
												if (*(int32_t *)(g16 + 0x55ec * *(int32_t *)v80 + 460) != 0) {
													// Detected a possible infinite recursion (goto support failed); quitting...
												}
											}
											// Detected a possible infinite recursion (goto support failed); quitting...
										}
										// Detected a possible infinite recursion (goto support failed); quitting...
									}
									// 0xb22bc
									if (__asm_rlwinm_(v52, 0, 29, 29) != 0) {
										// 0xb22c4
										function_af6d0(g31, g33, g32, g35, 0, g36, 0);
										// branch -> 0xb22e4
									}
									// 0xb22e4
									v45 = 0x1000000 * g22;
									if (v45 >= 0 && (v45 || 0xffffff) >= 0x1ffffff) {
										// 0xb22ec
										v46 = v45 / 0x1000000 - 1;
										if (v46 <= 3) {
											// 0xb22fc
											v58 = g16 + 0x55ec * v46;
											v59 = g35 + *(int32_t *)(v58 + 100);
											v60 = g32 + *(int32_t *)(v58 + 96) - *(int32_t *)(v58 + 148);
											v78 = *(int32_t *)(v58 + 140);
											g13 = *(int32_t *)(v58 + 144);
											function_af18c(v46, g31, g33, v60, v59, *(int32_t *)(v58 + 124), v78, 0, g36);
											if (g17 != 0) {
												// 0xb2348
												v79 = *(int32_t *)(g30 + 152);
												if (v79 != 0) {
													// 0xb2354
													if (v79 == 2) {
														// 0xb235c
														function_b1bb0(g28 - 0x3060, g31 - 2, g33 + 1, g20, g36, g32 - 96, g35 - 16);
														// branch -> 0xb237c
													}
													// 0xb237c
													function_b1bb0(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
													// branch -> 0xb239c
												}
											}
										}
									}
									// 0xb239c
									if (v15 >= 1) {
										// 0xb23a8
										if (__asm_rlwinm_(v52, 0, 25, 25) == 0) {
											// 0xb23b0
											v80 = *(int32_t *)(g23 - 0x77ac);
											if (*(int32_t *)(g16 + 0x55ec * *(int32_t *)v80 + 460) != 0) {
												// Detected a possible infinite recursion (goto support failed); quitting...
											}
										}
										// Detected a possible infinite recursion (goto support failed); quitting...
									}
									// Detected a possible infinite recursion (goto support failed); quitting...
								} else {
									v32 = v31;
								}
							}
							// 0xb2060
							function_c9acc(*(int32_t *)(v32 + 24));
							// branch -> 0xb20d0
							// 0xb20d0
							v52 = v12;
							g29 = v52;
							if (__asm_rlwinm_(v52, 0, 26, 26) != 0) {
								// 0xb20dc
								v44 = -1 - (int32_t)v17;
								if (v44 <= 3) {
									// 0xb20f4
									v53 = g16 + 0x55ec * v44;
									v54 = g35 + *(int32_t *)(v53 + 100);
									v55 = g32 + *(int32_t *)(v53 + 96) - *(int32_t *)(v53 + 148);
									v72 = *(int32_t *)(v53 + 124);
									v73 = *(int32_t *)(v53 + 140);
									g13 = *(int32_t *)(v53 + 144);
									function_af18c(v44, g31, g33 - 1, v55, v54, v72, v73, 0, g36);
									if (g17 != 0) {
										// 0xb2140
										v74 = *(int32_t *)(g30 + 152);
										if (v74 != 0) {
											// 0xb214c
											if (v74 == 2) {
												// 0xb2154
												function_b1bb0(g28 - 0x3060, g31 - 2, g33 + 1, g20, g36, g32 - 96, g35 - 16);
												// branch -> 0xb2174
											}
											// 0xb2174
											function_b1bb0(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
											// branch -> 0xb2194
										}
									}
								}
							}
							// 0xb2194
							if (__asm_rlwinm_(v52, 0, 27, 27) != 0) {
								// 0xb219c
								if (__asm_rlwinm_(v52, 0, 25, 25) == 0) {
									// 0xb21a4
									v75 = *(int32_t *)(g23 - 0x77ac);
									if (*(int32_t *)(g16 + 0x55ec * *(int32_t *)v75 + 460) != 0) {
										// 0xb21c0
										v36 = g18;
										if (v36 <= 0xffffffff) {
											// 0xb21c8
											*(int32_t *)g25 = -1 - v36;
											v56 = *(int32_t *)g25;
											if (v56 <= 199) {
												// 0xb21e0
												v57 = *(int32_t *)(g23 - 0x7754) + 232 * v56;
												g30 = v57;
												if (*(int32_t *)(v57 + 160) % 2 == 0) {
													// 0xb21f8
													v76 = *(int32_t *)(v57 + 224);
													if (v76 != 0) {
														// 0xb2204
														g34 = v57 + 84;
														g27 = g35 + *(int32_t *)(v57 + 60);
														g26 = g32 + *(int32_t *)(v57 + 56) - *(int32_t *)(v76 + 496);
														function_c9b28();
														if (*(int32_t *)g25 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
															// 0xb2238
															v37 = g30;
															v77 = *(int32_t *)(*(int32_t *)(v37 + 224) + 492);
															g13 = g36;
															function_50478(233, g26, g27, v37 + 84, *(int32_t *)(v37 + 104), v77, 0);
															// branch -> 0xb2260
														}
														// 0xb2260
														function_c9b70((int32_t *)(g30 + 84));
														function_aedfc(g31, g33, g26, g27, *(int32_t *)g25, 0, g36);
														if (g17 != 0) {
															// 0xb2290
															if (*(int32_t *)(g30 + 108) == 0) {
																// 0xb229c
																function_b1bb0(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
																// branch -> 0xb22bc
															}
														}
													}
												}
											}
										}
									}
								} else {
									// 0xb21c0
									v36 = g18;
									if (v36 <= 0xffffffff) {
										// 0xb21c8
										*(int32_t *)g25 = -1 - v36;
										v56 = *(int32_t *)g25;
										if (v56 <= 199) {
											// 0xb21e0
											v57 = *(int32_t *)(g23 - 0x7754) + 232 * v56;
											g30 = v57;
											if (*(int32_t *)(v57 + 160) % 2 == 0) {
												// 0xb21f8
												v76 = *(int32_t *)(v57 + 224);
												if (v76 != 0) {
													// 0xb2204
													g34 = v57 + 84;
													g27 = g35 + *(int32_t *)(v57 + 60);
													g26 = g32 + *(int32_t *)(v57 + 56) - *(int32_t *)(v76 + 496);
													function_c9b28();
													if (*(int32_t *)g25 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
														// 0xb2238
														v37 = g30;
														v77 = *(int32_t *)(*(int32_t *)(v37 + 224) + 492);
														g13 = g36;
														function_50478(233, g26, g27, v37 + 84, *(int32_t *)(v37 + 104), v77, 0);
														// branch -> 0xb2260
													}
													// 0xb2260
													function_c9b70((int32_t *)(g30 + 84));
													function_aedfc(g31, g33, g26, g27, *(int32_t *)g25, 0, g36);
													if (g17 != 0) {
														// 0xb2290
														if (*(int32_t *)(g30 + 108) == 0) {
															// 0xb229c
															function_b1bb0(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
															// branch -> 0xb22bc
														}
													}
												}
											}
										}
									}
								}
								// 0xb22bc
								if (__asm_rlwinm_(v52, 0, 29, 29) != 0) {
									// 0xb22c4
									function_af6d0(g31, g33, g32, g35, 0, g36, 0);
									// branch -> 0xb22e4
								}
								// 0xb22e4
								v45 = 0x1000000 * g22;
								if (v45 >= 0 && (v45 || 0xffffff) >= 0x1ffffff) {
									// 0xb22ec
									v46 = v45 / 0x1000000 - 1;
									if (v46 <= 3) {
										// 0xb22fc
										v58 = g16 + 0x55ec * v46;
										v59 = g35 + *(int32_t *)(v58 + 100);
										v60 = g32 + *(int32_t *)(v58 + 96) - *(int32_t *)(v58 + 148);
										v78 = *(int32_t *)(v58 + 140);
										g13 = *(int32_t *)(v58 + 144);
										function_af18c(v46, g31, g33, v60, v59, *(int32_t *)(v58 + 124), v78, 0, g36);
										if (g17 != 0) {
											// 0xb2348
											v79 = *(int32_t *)(g30 + 152);
											if (v79 != 0) {
												// 0xb2354
												if (v79 == 2) {
													// 0xb235c
													function_b1bb0(g28 - 0x3060, g31 - 2, g33 + 1, g20, g36, g32 - 96, g35 - 16);
													// branch -> 0xb237c
												}
												// 0xb237c
												function_b1bb0(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
												// branch -> 0xb239c
											}
										}
									}
								}
								// 0xb239c
								if (v15 >= 1) {
									// 0xb23a8
									if (__asm_rlwinm_(v52, 0, 25, 25) == 0) {
										// 0xb23b0
										v80 = *(int32_t *)(g23 - 0x77ac);
										if (*(int32_t *)(g16 + 0x55ec * *(int32_t *)v80 + 460) != 0) {
											// Detected a possible infinite recursion (goto support failed); quitting...
										}
									}
									// Detected a possible infinite recursion (goto support failed); quitting...
								}
								// Detected a possible infinite recursion (goto support failed); quitting...
							}
							// 0xb22bc
							if (__asm_rlwinm_(v52, 0, 29, 29) != 0) {
								// 0xb22c4
								function_af6d0(g31, g33, g32, g35, 0, g36, 0);
								// branch -> 0xb22e4
							}
							// 0xb22e4
							v45 = 0x1000000 * g22;
							if (v45 >= 0 && (v45 || 0xffffff) >= 0x1ffffff) {
								// 0xb22ec
								v46 = v45 / 0x1000000 - 1;
								if (v46 <= 3) {
									// 0xb22fc
									v58 = g16 + 0x55ec * v46;
									v59 = g35 + *(int32_t *)(v58 + 100);
									v60 = g32 + *(int32_t *)(v58 + 96) - *(int32_t *)(v58 + 148);
									v78 = *(int32_t *)(v58 + 140);
									g13 = *(int32_t *)(v58 + 144);
									function_af18c(v46, g31, g33, v60, v59, *(int32_t *)(v58 + 124), v78, 0, g36);
									if (g17 != 0) {
										// 0xb2348
										v79 = *(int32_t *)(g30 + 152);
										if (v79 != 0) {
											// 0xb2354
											if (v79 == 2) {
												// 0xb235c
												function_b1bb0(g28 - 0x3060, g31 - 2, g33 + 1, g20, g36, g32 - 96, g35 - 16);
												// branch -> 0xb237c
											}
											// 0xb237c
											function_b1bb0(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
											// branch -> 0xb239c
										}
									}
								}
							}
							// 0xb239c
							if (v15 >= 1) {
								// 0xb23a8
								if (__asm_rlwinm_(v52, 0, 25, 25) == 0) {
									// 0xb23b0
									v80 = *(int32_t *)(g23 - 0x77ac);
									if (*(int32_t *)(g16 + 0x55ec * *(int32_t *)v80 + 460) != 0) {
										// Detected a possible infinite recursion (goto support failed); quitting...
									}
								}
								// Detected a possible infinite recursion (goto support failed); quitting...
							}
							// Detected a possible infinite recursion (goto support failed); quitting...
						}
						// 0xb2060
						function_c9acc(*(int32_t *)(v32 + 24));
						// branch -> 0xb20d0
					}
					// 0xb20d0
					v52 = v12;
					g29 = v52;
					if (__asm_rlwinm_(v52, 0, 26, 26) != 0) {
						// 0xb20dc
						v44 = -1 - (int32_t)v17;
						if (v44 <= 3) {
							// 0xb20f4
							v53 = g16 + 0x55ec * v44;
							v54 = g35 + *(int32_t *)(v53 + 100);
							v55 = g32 + *(int32_t *)(v53 + 96) - *(int32_t *)(v53 + 148);
							v72 = *(int32_t *)(v53 + 124);
							v73 = *(int32_t *)(v53 + 140);
							g13 = *(int32_t *)(v53 + 144);
							function_af18c(v44, g31, g33 - 1, v55, v54, v72, v73, 0, g36);
							if (g17 != 0) {
								// 0xb2140
								v74 = *(int32_t *)(g30 + 152);
								if (v74 != 0) {
									// 0xb214c
									if (v74 == 2) {
										// 0xb2154
										function_b1bb0(g28 - 0x3060, g31 - 2, g33 + 1, g20, g36, g32 - 96, g35 - 16);
										// branch -> 0xb2174
									}
									// 0xb2174
									function_b1bb0(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
									// branch -> 0xb2194
								}
							}
						}
					}
					// 0xb2194
					if (__asm_rlwinm_(v52, 0, 27, 27) != 0) {
						// 0xb219c
						if (__asm_rlwinm_(v52, 0, 25, 25) == 0) {
							// 0xb21a4
							v75 = *(int32_t *)(g23 - 0x77ac);
							if (*(int32_t *)(g16 + 0x55ec * *(int32_t *)v75 + 460) != 0) {
								// 0xb21c0
								v36 = g18;
								if (v36 <= 0xffffffff) {
									// 0xb21c8
									*(int32_t *)g25 = -1 - v36;
									v56 = *(int32_t *)g25;
									if (v56 <= 199) {
										// 0xb21e0
										v57 = *(int32_t *)(g23 - 0x7754) + 232 * v56;
										g30 = v57;
										if (*(int32_t *)(v57 + 160) % 2 == 0) {
											// 0xb21f8
											v76 = *(int32_t *)(v57 + 224);
											if (v76 != 0) {
												// 0xb2204
												g34 = v57 + 84;
												g27 = g35 + *(int32_t *)(v57 + 60);
												g26 = g32 + *(int32_t *)(v57 + 56) - *(int32_t *)(v76 + 496);
												function_c9b28();
												if (*(int32_t *)g25 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
													// 0xb2238
													v37 = g30;
													v77 = *(int32_t *)(*(int32_t *)(v37 + 224) + 492);
													g13 = g36;
													function_50478(233, g26, g27, v37 + 84, *(int32_t *)(v37 + 104), v77, 0);
													// branch -> 0xb2260
												}
												// 0xb2260
												function_c9b70((int32_t *)(g30 + 84));
												function_aedfc(g31, g33, g26, g27, *(int32_t *)g25, 0, g36);
												if (g17 != 0) {
													// 0xb2290
													if (*(int32_t *)(g30 + 108) == 0) {
														// 0xb229c
														function_b1bb0(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
														// branch -> 0xb22bc
													}
												}
											}
										}
									}
								}
							}
						} else {
							// 0xb21c0
							v36 = g18;
							if (v36 <= 0xffffffff) {
								// 0xb21c8
								*(int32_t *)g25 = -1 - v36;
								v56 = *(int32_t *)g25;
								if (v56 <= 199) {
									// 0xb21e0
									v57 = *(int32_t *)(g23 - 0x7754) + 232 * v56;
									g30 = v57;
									if (*(int32_t *)(v57 + 160) % 2 == 0) {
										// 0xb21f8
										v76 = *(int32_t *)(v57 + 224);
										if (v76 != 0) {
											// 0xb2204
											g34 = v57 + 84;
											g27 = g35 + *(int32_t *)(v57 + 60);
											g26 = g32 + *(int32_t *)(v57 + 56) - *(int32_t *)(v76 + 496);
											function_c9b28();
											if (*(int32_t *)g25 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
												// 0xb2238
												v37 = g30;
												v77 = *(int32_t *)(*(int32_t *)(v37 + 224) + 492);
												g13 = g36;
												function_50478(233, g26, g27, v37 + 84, *(int32_t *)(v37 + 104), v77, 0);
												// branch -> 0xb2260
											}
											// 0xb2260
											function_c9b70((int32_t *)(g30 + 84));
											function_aedfc(g31, g33, g26, g27, *(int32_t *)g25, 0, g36);
											if (g17 != 0) {
												// 0xb2290
												if (*(int32_t *)(g30 + 108) == 0) {
													// 0xb229c
													function_b1bb0(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
													// branch -> 0xb22bc
												}
											}
										}
									}
								}
							}
						}
						// 0xb22bc
						if (__asm_rlwinm_(v52, 0, 29, 29) != 0) {
							// 0xb22c4
							function_af6d0(g31, g33, g32, g35, 0, g36, 0);
							// branch -> 0xb22e4
						}
						// 0xb22e4
						v45 = 0x1000000 * g22;
						if (v45 >= 0 && (v45 || 0xffffff) >= 0x1ffffff) {
							// 0xb22ec
							v46 = v45 / 0x1000000 - 1;
							if (v46 <= 3) {
								// 0xb22fc
								v58 = g16 + 0x55ec * v46;
								v59 = g35 + *(int32_t *)(v58 + 100);
								v60 = g32 + *(int32_t *)(v58 + 96) - *(int32_t *)(v58 + 148);
								v78 = *(int32_t *)(v58 + 140);
								g13 = *(int32_t *)(v58 + 144);
								function_af18c(v46, g31, g33, v60, v59, *(int32_t *)(v58 + 124), v78, 0, g36);
								if (g17 != 0) {
									// 0xb2348
									v79 = *(int32_t *)(g30 + 152);
									if (v79 != 0) {
										// 0xb2354
										if (v79 == 2) {
											// 0xb235c
											function_b1bb0(g28 - 0x3060, g31 - 2, g33 + 1, g20, g36, g32 - 96, g35 - 16);
											// branch -> 0xb237c
										}
										// 0xb237c
										function_b1bb0(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
										// branch -> 0xb239c
									}
								}
							}
						}
						// 0xb239c
						if (v15 >= 1) {
							// 0xb23a8
							if (__asm_rlwinm_(v52, 0, 25, 25) == 0) {
								// 0xb23b0
								v80 = *(int32_t *)(g23 - 0x77ac);
								if (*(int32_t *)(g16 + 0x55ec * *(int32_t *)v80 + 460) != 0) {
									// Detected a possible infinite recursion (goto support failed); quitting...
								}
							}
							// Detected a possible infinite recursion (goto support failed); quitting...
						}
						// Detected a possible infinite recursion (goto support failed); quitting...
					}
					// 0xb22bc
					if (__asm_rlwinm_(v52, 0, 29, 29) != 0) {
						// 0xb22c4
						function_af6d0(g31, g33, g32, g35, 0, g36, 0);
						// branch -> 0xb22e4
					}
					// 0xb22e4
					v45 = 0x1000000 * g22;
					if (v45 >= 0 && (v45 || 0xffffff) >= 0x1ffffff) {
						// 0xb22ec
						v46 = v45 / 0x1000000 - 1;
						if (v46 <= 3) {
							// 0xb22fc
							v58 = g16 + 0x55ec * v46;
							v59 = g35 + *(int32_t *)(v58 + 100);
							v60 = g32 + *(int32_t *)(v58 + 96) - *(int32_t *)(v58 + 148);
							v78 = *(int32_t *)(v58 + 140);
							g13 = *(int32_t *)(v58 + 144);
							function_af18c(v46, g31, g33, v60, v59, *(int32_t *)(v58 + 124), v78, 0, g36);
							if (g17 != 0) {
								// 0xb2348
								v79 = *(int32_t *)(g30 + 152);
								if (v79 != 0) {
									// 0xb2354
									if (v79 == 2) {
										// 0xb235c
										function_b1bb0(g28 - 0x3060, g31 - 2, g33 + 1, g20, g36, g32 - 96, g35 - 16);
										// branch -> 0xb237c
									}
									// 0xb237c
									function_b1bb0(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
									// branch -> 0xb239c
								}
							}
						}
					}
					// 0xb239c
					if (v15 >= 1) {
						// 0xb23a8
						if (__asm_rlwinm_(v52, 0, 25, 25) == 0) {
							// 0xb23b0
							v80 = *(int32_t *)(g23 - 0x77ac);
							if (*(int32_t *)(g16 + 0x55ec * *(int32_t *)v80 + 460) != 0) {
								// Detected a possible infinite recursion (goto support failed); quitting...
							}
						}
						// Detected a possible infinite recursion (goto support failed); quitting...
					}
					// Detected a possible infinite recursion (goto support failed); quitting...
				}
			}
		}
		// 0xb20d0
		v52 = v12;
		g29 = v52;
		if (__asm_rlwinm_(v52, 0, 26, 26) != 0) {
			// 0xb20dc
			v44 = -1 - (int32_t)v17;
			if (v44 <= 3) {
				// 0xb20f4
				v53 = g16 + 0x55ec * v44;
				v54 = g35 + *(int32_t *)(v53 + 100);
				v55 = g32 + *(int32_t *)(v53 + 96) - *(int32_t *)(v53 + 148);
				v72 = *(int32_t *)(v53 + 124);
				v73 = *(int32_t *)(v53 + 140);
				g13 = *(int32_t *)(v53 + 144);
				function_af18c(v44, g31, g33 - 1, v55, v54, v72, v73, 0, g36);
				if (g17 != 0) {
					// 0xb2140
					v74 = *(int32_t *)(g30 + 152);
					if (v74 != 0) {
						// 0xb214c
						if (v74 == 2) {
							// 0xb2154
							function_b1bb0(g28 - 0x3060, g31 - 2, g33 + 1, g20, g36, g32 - 96, g35 - 16);
							// branch -> 0xb2174
						}
						// 0xb2174
						function_b1bb0(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
						// branch -> 0xb2194
					}
				}
			}
		}
		// 0xb2194
		if (__asm_rlwinm_(v52, 0, 27, 27) != 0) {
			// 0xb219c
			if (__asm_rlwinm_(v52, 0, 25, 25) == 0) {
				// 0xb21a4
				v75 = *(int32_t *)(g23 - 0x77ac);
				if (*(int32_t *)(g16 + 0x55ec * *(int32_t *)v75 + 460) != 0) {
					// 0xb21c0
					v36 = g18;
					if (v36 <= 0xffffffff) {
						// 0xb21c8
						*(int32_t *)g25 = -1 - v36;
						v56 = *(int32_t *)g25;
						if (v56 <= 199) {
							// 0xb21e0
							v57 = *(int32_t *)(g23 - 0x7754) + 232 * v56;
							g30 = v57;
							if (*(int32_t *)(v57 + 160) % 2 == 0) {
								// 0xb21f8
								v76 = *(int32_t *)(v57 + 224);
								if (v76 != 0) {
									// 0xb2204
									g34 = v57 + 84;
									g27 = g35 + *(int32_t *)(v57 + 60);
									g26 = g32 + *(int32_t *)(v57 + 56) - *(int32_t *)(v76 + 496);
									function_c9b28();
									if (*(int32_t *)g25 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
										// 0xb2238
										v37 = g30;
										v77 = *(int32_t *)(*(int32_t *)(v37 + 224) + 492);
										g13 = g36;
										function_50478(233, g26, g27, v37 + 84, *(int32_t *)(v37 + 104), v77, 0);
										// branch -> 0xb2260
									}
									// 0xb2260
									function_c9b70((int32_t *)(g30 + 84));
									function_aedfc(g31, g33, g26, g27, *(int32_t *)g25, 0, g36);
									if (g17 != 0) {
										// 0xb2290
										if (*(int32_t *)(g30 + 108) == 0) {
											// 0xb229c
											function_b1bb0(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
											// branch -> 0xb22bc
										}
									}
								}
							}
						}
					}
				}
			} else {
				// 0xb21c0
				v36 = g18;
				if (v36 <= 0xffffffff) {
					// 0xb21c8
					*(int32_t *)g25 = -1 - v36;
					v56 = *(int32_t *)g25;
					if (v56 <= 199) {
						// 0xb21e0
						v57 = *(int32_t *)(g23 - 0x7754) + 232 * v56;
						g30 = v57;
						if (*(int32_t *)(v57 + 160) % 2 == 0) {
							// 0xb21f8
							v76 = *(int32_t *)(v57 + 224);
							if (v76 != 0) {
								// 0xb2204
								g34 = v57 + 84;
								g27 = g35 + *(int32_t *)(v57 + 60);
								g26 = g32 + *(int32_t *)(v57 + 56) - *(int32_t *)(v76 + 496);
								function_c9b28();
								if (*(int32_t *)g25 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
									// 0xb2238
									v37 = g30;
									v77 = *(int32_t *)(*(int32_t *)(v37 + 224) + 492);
									g13 = g36;
									function_50478(233, g26, g27, v37 + 84, *(int32_t *)(v37 + 104), v77, 0);
									// branch -> 0xb2260
								}
								// 0xb2260
								function_c9b70((int32_t *)(g30 + 84));
								function_aedfc(g31, g33, g26, g27, *(int32_t *)g25, 0, g36);
								if (g17 != 0) {
									// 0xb2290
									if (*(int32_t *)(g30 + 108) == 0) {
										// 0xb229c
										function_b1bb0(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
										// branch -> 0xb22bc
									}
								}
							}
						}
					}
				}
			}
			// 0xb22bc
			if (__asm_rlwinm_(v52, 0, 29, 29) != 0) {
				// 0xb22c4
				function_af6d0(g31, g33, g32, g35, 0, g36, 0);
				// branch -> 0xb22e4
			}
			// 0xb22e4
			v45 = 0x1000000 * g22;
			if (v45 >= 0 && (v45 || 0xffffff) >= 0x1ffffff) {
				// 0xb22ec
				v46 = v45 / 0x1000000 - 1;
				if (v46 <= 3) {
					// 0xb22fc
					v58 = g16 + 0x55ec * v46;
					v59 = g35 + *(int32_t *)(v58 + 100);
					v60 = g32 + *(int32_t *)(v58 + 96) - *(int32_t *)(v58 + 148);
					v78 = *(int32_t *)(v58 + 140);
					g13 = *(int32_t *)(v58 + 144);
					function_af18c(v46, g31, g33, v60, v59, *(int32_t *)(v58 + 124), v78, 0, g36);
					if (g17 != 0) {
						// 0xb2348
						v79 = *(int32_t *)(g30 + 152);
						if (v79 != 0) {
							// 0xb2354
							if (v79 == 2) {
								// 0xb235c
								function_b1bb0(g28 - 0x3060, g31 - 2, g33 + 1, g20, g36, g32 - 96, g35 - 16);
								// branch -> 0xb237c
							}
							// 0xb237c
							function_b1bb0(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
							// branch -> 0xb239c
						}
					}
				}
			}
			// 0xb239c
			if (v15 >= 1) {
				// 0xb23a8
				if (__asm_rlwinm_(v52, 0, 25, 25) == 0) {
					// 0xb23b0
					v80 = *(int32_t *)(g23 - 0x77ac);
					if (*(int32_t *)(g16 + 0x55ec * *(int32_t *)v80 + 460) != 0) {
						// Detected a possible infinite recursion (goto support failed); quitting...
					}
				}
				// Detected a possible infinite recursion (goto support failed); quitting...
			}
			// Detected a possible infinite recursion (goto support failed); quitting...
		}
		// 0xb22bc
		if (__asm_rlwinm_(v52, 0, 29, 29) != 0) {
			// 0xb22c4
			function_af6d0(g31, g33, g32, g35, 0, g36, 0);
			// branch -> 0xb22e4
		}
		// 0xb22e4
		v45 = 0x1000000 * g22;
		if (v45 >= 0 && (v45 || 0xffffff) >= 0x1ffffff) {
			// 0xb22ec
			v46 = v45 / 0x1000000 - 1;
			if (v46 <= 3) {
				// 0xb22fc
				v58 = g16 + 0x55ec * v46;
				v59 = g35 + *(int32_t *)(v58 + 100);
				v60 = g32 + *(int32_t *)(v58 + 96) - *(int32_t *)(v58 + 148);
				v78 = *(int32_t *)(v58 + 140);
				g13 = *(int32_t *)(v58 + 144);
				function_af18c(v46, g31, g33, v60, v59, *(int32_t *)(v58 + 124), v78, 0, g36);
				if (g17 != 0) {
					// 0xb2348
					v79 = *(int32_t *)(g30 + 152);
					if (v79 != 0) {
						// 0xb2354
						if (v79 == 2) {
							// 0xb235c
							function_b1bb0(g28 - 0x3060, g31 - 2, g33 + 1, g20, g36, g32 - 96, g35 - 16);
							// branch -> 0xb237c
						}
						// 0xb237c
						function_b1bb0(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
						// branch -> 0xb239c
					}
				}
			}
		}
		// 0xb239c
		if (v15 >= 1) {
			// 0xb23a8
			if (__asm_rlwinm_(v52, 0, 25, 25) == 0) {
				// 0xb23b0
				v80 = *(int32_t *)(g23 - 0x77ac);
				if (*(int32_t *)(g16 + 0x55ec * *(int32_t *)v80 + 460) != 0) {
					// Detected a possible infinite recursion (goto support failed); quitting...
				}
			}
			// Detected a possible infinite recursion (goto support failed); quitting...
		}
		// Detected a possible infinite recursion (goto support failed); quitting...
	}
	// 0xb1e84
	v19 = g23;
	v20 = v19;
	if (*(int32_t *)*(int32_t *)(v19 - 0x70e4) != 0) {
		// 0xb1e94
		if (v12 % 2 != 0) {
			// 0xb1e9c
			DrawMissile(g31, g33, g32, g35, 0, g36, 1);
			v20 = g23;
			// branch -> 0xb1ebc
		} else {
			v20 = v19;
		}
		// 0xb1ebc
		v61 = *(int32_t *)(v20 - 0x70cc);
		v62 = *(int32_t *)(v20 - 0x7290);
		if (*(int32_t *)v62 < (int32_t) * (char *)v61) {
			// 0xb1ed8
			v38 = 0x1000000 * g26;
			v47 = v38 / 0x1000000;
			if ((v38 || 0xffffff) >= 0x1ffffff) {
				// 0xb1ee0
				g30 = *(int32_t *)(v20 - 0x7614) + 80 * (v47 % 32) - 80;
				v39 = __asm_rlwinm(v47, 27, 29, 31);
				v21 = g30;
				v48 = v21 + 0x1000000 * v39 / 0x200000;
				g29 = v48;
				g34 = v48;
				g26 = g32 - *(int32_t *)(v21 + 72);
				v22 = function_c9b28();
				g27 = v22;
				if (v22 == 0) {
					// 0xb1f20
					function_c9b70((int32_t *)g29);
					// branch -> 0xb1fb8
				} else {
					// 0xb1f2c
					v63 = *(int32_t *)(g30 + 64);
					g11 = v63;
					if (v63 >= 1) {
						// 0xb1f38
						if (function_4d794(v22) <= 50) {
							// 0xb1f48
							v40 = function_4d794(g27);
							v23 = g30;
							v64 = *(int32_t *)(v23 + 64);
							if (v64 <= v40) {
								// 0xb1f68
								v65 = *(char *)(v23 + 76);
								g13 = v65;
								v66 = *(int32_t *)(v23 + 68);
								v24 = g26;
								v25 = g35;
								v26 = g29;
								v27 = g36;
								if (v65 == 0) {
									// 0xb1f94
									function_50650(v24, v25, v26, v64, v66, 0, v27);
									// branch -> 0xb1fb0
								} else {
									// 0xb1f74
									function_5053c(v24, v25, v26, v64, v66, 0, v27);
									// branch -> 0xb1fb0
								}
								// 0xb1fb0
								function_c9b70((int32_t *)g29);
								// branch -> 0xb1fb8
								// 0xb1fb8
								if (v9 != 0) {
									// 0xb1fc4
									DrawObject(g31, g33, g32, g35, 1, 0, g36);
									// branch -> 0xb1fe4
								}
								// 0xb1fe4
								v28 = g21;
								v41 = 0x1000000 * v28;
								v49 = v41 / 0x1000000;
								if ((v41 || 0xffffff) >= 0x1ffffff) {
									// 0xb1fec
									v42 = v49 - 1;
									g26 = v42;
									v50 = *(int32_t *)(g23 - 0x7690) + 368 * v42;
									g30 = v50;
									if (*(int32_t *)(v50 + 52) == 0) {
										// 0xb200c
										if (v28 <= 127) {
											// 0xb2014
											g34 = *(int32_t *)(v50 + 24);
											v29 = function_c9948();
											v18 = v29;
											v30 = g30;
											if (v29 == 0) {
												// 0xb2024
												function_c9acc(*(int32_t *)(v30 + 24));
												// branch -> 0xb20d0
											} else {
												// 0xb2030
												v67 = *(int32_t *)(v30 + 32);
												g11 = v67;
												v32 = v30;
												if (v67 >= 1) {
													// 0xb203c
													if (function_4d794(v29) > 50) {
														// 0xb203c
														v32 = g30;
														// branch -> 0xb2060
													} else {
														// 0xb204c
														v43 = function_4d794(v18);
														v31 = g30;
														v68 = *(int32_t *)(v31 + 32);
														g40 = v68;
														if (v68 <= v43) {
															// 0xb206c
															v51 = g32 - *(int32_t *)(v31 + 40);
															g27 = v51;
															v34 = v51;
															v35 = v31;
															if (g26 == (int32_t) * (char *)*(int32_t *)(g23 - 0x7748)) {
																// 0xb2088
																g37 = v51;
																v69 = *(int32_t *)(v31 + 36);
																g41 = v69;
																v33 = g35;
																g38 = v33;
																g13 = g36;
																g42 = 0;
																CelDecodeClr(181, v51, v33, *(int32_t *)(v31 + 24), v68, v69, 0);
																v34 = g27;
																v35 = g30;
																// branch -> 0xb20a8
															}
															// 0xb20a8
															v70 = *(int32_t *)(v35 + 32);
															v71 = *(int32_t *)(v35 + 36);
															CelDecodeHdrLightOnly(v34, g35, *(int32_t *)(v35 + 24), v70, v71, 0, g36);
															function_c9acc(*(int32_t *)(g30 + 24));
															// branch -> 0xb20d0
															// 0xb20d0
															v52 = v12;
															g29 = v52;
															if (__asm_rlwinm_(v52, 0, 26, 26) != 0) {
																// 0xb20dc
																v44 = -1 - (int32_t)v17;
																if (v44 <= 3) {
																	// 0xb20f4
																	v53 = g16 + 0x55ec * v44;
																	v54 = g35 + *(int32_t *)(v53 + 100);
																	v55 = g32 + *(int32_t *)(v53 + 96) - *(int32_t *)(v53 + 148);
																	v72 = *(int32_t *)(v53 + 124);
																	v73 = *(int32_t *)(v53 + 140);
																	g13 = *(int32_t *)(v53 + 144);
																	function_af18c(v44, g31, g33 - 1, v55, v54, v72, v73, 0, g36);
																	if (g17 != 0) {
																		// 0xb2140
																		v74 = *(int32_t *)(g30 + 152);
																		if (v74 != 0) {
																			// 0xb214c
																			if (v74 == 2) {
																				// 0xb2154
																				function_b1bb0(g28 - 0x3060, g31 - 2, g33 + 1, g20, g36, g32 - 96, g35 - 16);
																				// branch -> 0xb2174
																			}
																			// 0xb2174
																			function_b1bb0(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
																			// branch -> 0xb2194
																		}
																	}
																}
															}
															// 0xb2194
															if (__asm_rlwinm_(v52, 0, 27, 27) != 0) {
																// 0xb219c
																if (__asm_rlwinm_(v52, 0, 25, 25) == 0) {
																	// 0xb21a4
																	v75 = *(int32_t *)(g23 - 0x77ac);
																	if (*(int32_t *)(g16 + 0x55ec * *(int32_t *)v75 + 460) != 0) {
																		// 0xb21c0
																		v36 = g18;
																		if (v36 <= 0xffffffff) {
																			// 0xb21c8
																			*(int32_t *)g25 = -1 - v36;
																			v56 = *(int32_t *)g25;
																			if (v56 <= 199) {
																				// 0xb21e0
																				v57 = *(int32_t *)(g23 - 0x7754) + 232 * v56;
																				g30 = v57;
																				if (*(int32_t *)(v57 + 160) % 2 == 0) {
																					// 0xb21f8
																					v76 = *(int32_t *)(v57 + 224);
																					if (v76 != 0) {
																						// 0xb2204
																						g34 = v57 + 84;
																						g27 = g35 + *(int32_t *)(v57 + 60);
																						g26 = g32 + *(int32_t *)(v57 + 56) - *(int32_t *)(v76 + 496);
																						function_c9b28();
																						if (*(int32_t *)g25 == *(int32_t *)*(int32_t *)(g23 - 0x7750)) {
																							// 0xb2238
																							v37 = g30;
																							v77 = *(int32_t *)(*(int32_t *)(v37 + 224) + 492);
																							g13 = g36;
																							function_50478(233, g26, g27, v37 + 84, *(int32_t *)(v37 + 104), v77, 0);
																							// branch -> 0xb2260
																						}
																						// 0xb2260
																						function_c9b70((int32_t *)(g30 + 84));
																						function_aedfc(g31, g33, g26, g27, *(int32_t *)g25, 0, g36);
																						if (g17 != 0) {
																							// 0xb2290
																							if (*(int32_t *)(g30 + 108) == 0) {
																								// 0xb229c
																								function_b1bb0(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
																								// branch -> 0xb22bc
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
																// 0xb22bc
																if (__asm_rlwinm_(v52, 0, 29, 29) != 0) {
																	// 0xb22c4
																	function_af6d0(g31, g33, g32, g35, 0, g36, 0);
																	// branch -> 0xb22e4
																}
																// 0xb22e4
																v45 = 0x1000000 * g22;
																if (v45 >= 0 && (v45 || 0xffffff) >= 0x1ffffff) {
																	// 0xb22ec
																	v46 = v45 / 0x1000000 - 1;
																	if (v46 <= 3) {
																		// 0xb22fc
																		v58 = g16 + 0x55ec * v46;
																		v59 = g35 + *(int32_t *)(v58 + 100);
																		v60 = g32 + *(int32_t *)(v58 + 96) - *(int32_t *)(v58 + 148);
																		v78 = *(int32_t *)(v58 + 140);
																		g13 = *(int32_t *)(v58 + 144);
																		function_af18c(v46, g31, g33, v60, v59, *(int32_t *)(v58 + 124), v78, 0, g36);
																		if (g17 != 0) {
																			// 0xb2348
																			v79 = *(int32_t *)(g30 + 152);
																			if (v79 != 0) {
																				// 0xb2354
																				if (v79 == 2) {
																					// 0xb235c
																					function_b1bb0(g28 - 0x3060, g31 - 2, g33 + 1, g20, g36, g32 - 96, g35 - 16);
																					// branch -> 0xb237c
																				}
																				// 0xb237c
																				function_b1bb0(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
																				// branch -> 0xb239c
																			}
																		}
																	}
																}
																// 0xb239c
																if (v15 >= 1) {
																	// 0xb23a8
																	if (__asm_rlwinm_(v52, 0, 25, 25) == 0) {
																		// 0xb23b0
																		v80 = *(int32_t *)(g23 - 0x77ac);
																		if (*(int32_t *)(g16 + 0x55ec * *(int32_t *)v80 + 460) != 0) {
																			// Detected a possible infinite recursion (goto support failed); quitting...
																		}
																	}
																	// Detected a possible infinite recursion (goto support failed); quitting...
																}
																// Detected a possible infinite recursion (goto support failed); quitting...
															}
															// Detected a possible infinite recursion (goto support failed); quitting...
														} else {
															v32 = v31;
														}
													}
													// 0xb2060
													function_c9acc(*(int32_t *)(v32 + 24));
													// branch -> 0xb20d0
													// 0xb20d0
													v52 = v12;
													g29 = v52;
													if (__asm_rlwinm_(v52, 0, 26, 26) != 0) {
														// 0xb20dc
														v44 = -1 - (int32_t)v17;
														if (v44 <= 3) {
															// 0xb20f4
															v53 = g16 + 0x55ec * v44;
															v54 = g35 + *(int32_t *)(v53 + 100);
															v55 = g32 + *(int32_t *)(v53 + 96) - *(int32_t *)(v53 + 148);
															v72 = *(int32_t *)(v53 + 124);
															v73 = *(int32_t *)(v53 + 140);
															g13 = *(int32_t *)(v53 + 144);
															function_af18c(v44, g31, g33 - 1, v55, v54, v72, v73, 0, g36);
															if (g17 != 0) {
																// 0xb2140
																v74 = *(int32_t *)(g30 + 152);
																if (v74 != 0) {
																	// 0xb214c
																	if (v74 == 2) {
																		// 0xb2154
																		function_b1bb0(g28 - 0x3060, g31 - 2, g33 + 1, g20, g36, g32 - 96, g35 - 16);
																		// branch -> 0xb2174
																	}
																	// 0xb2174
																	function_b1bb0(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
																	// branch -> 0xb2194
																}
															}
														}
													}
													// 0xb2194
													if (__asm_rlwinm_(v52, 0, 27, 27) != 0) {
														// 0xb219c
														if (__asm_rlwinm_(v52, 0, 25, 25) == 0) {
															// 0xb21a4
															v75 = *(int32_t *)(g23 - 0x77ac);
															if (*(int32_t *)(g16 + 0x55ec * *(int32_t *)v75 + 460) != 0) {
																// Detected a possible infinite recursion (goto support failed); quitting...
															}
														}
														// Detected a possible infinite recursion (goto support failed); quitting...
													}
													// Detected a possible infinite recursion (goto support failed); quitting...
												}
												// 0xb2060
												function_c9acc(*(int32_t *)(v32 + 24));
												// branch -> 0xb20d0
											}
											// 0xb20d0
											v52 = v12;
											g29 = v52;
											if (__asm_rlwinm_(v52, 0, 26, 26) != 0) {
												// 0xb20dc
												v44 = -1 - (int32_t)v17;
												if (v44 <= 3) {
													// 0xb20f4
													v53 = g16 + 0x55ec * v44;
													v54 = g35 + *(int32_t *)(v53 + 100);
													v55 = g32 + *(int32_t *)(v53 + 96) - *(int32_t *)(v53 + 148);
													v72 = *(int32_t *)(v53 + 124);
													v73 = *(int32_t *)(v53 + 140);
													g13 = *(int32_t *)(v53 + 144);
													function_af18c(v44, g31, g33 - 1, v55, v54, v72, v73, 0, g36);
													if (g17 != 0) {
														// 0xb2140
														v74 = *(int32_t *)(g30 + 152);
														if (v74 != 0) {
															// 0xb214c
															if (v74 == 2) {
																// 0xb2154
																function_b1bb0(g28 - 0x3060, g31 - 2, g33 + 1, g20, g36, g32 - 96, g35 - 16);
																// branch -> 0xb2174
															}
															// 0xb2174
															function_b1bb0(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
															// branch -> 0xb2194
														}
													}
												}
											}
											// 0xb2194
											if (__asm_rlwinm_(v52, 0, 27, 27) != 0) {
												// 0xb219c
												if (__asm_rlwinm_(v52, 0, 25, 25) == 0) {
													// 0xb21a4
													v75 = *(int32_t *)(g23 - 0x77ac);
													if (*(int32_t *)(g16 + 0x55ec * *(int32_t *)v75 + 460) != 0) {
														// Detected a possible infinite recursion (goto support failed); quitting...
													}
												}
												// Detected a possible infinite recursion (goto support failed); quitting...
											}
											// Detected a possible infinite recursion (goto support failed); quitting...
										}
									}
								}
								// 0xb20d0
								v52 = v12;
								g29 = v52;
								if (__asm_rlwinm_(v52, 0, 26, 26) != 0) {
									// 0xb20dc
									v44 = -1 - (int32_t)v17;
									if (v44 <= 3) {
										// 0xb20f4
										v53 = g16 + 0x55ec * v44;
										v54 = g35 + *(int32_t *)(v53 + 100);
										v55 = g32 + *(int32_t *)(v53 + 96) - *(int32_t *)(v53 + 148);
										v72 = *(int32_t *)(v53 + 124);
										v73 = *(int32_t *)(v53 + 140);
										g13 = *(int32_t *)(v53 + 144);
										function_af18c(v44, g31, g33 - 1, v55, v54, v72, v73, 0, g36);
										if (g17 != 0) {
											// 0xb2140
											v74 = *(int32_t *)(g30 + 152);
											if (v74 != 0) {
												// 0xb214c
												if (v74 == 2) {
													// 0xb2154
													function_b1bb0(g28 - 0x3060, g31 - 2, g33 + 1, g20, g36, g32 - 96, g35 - 16);
													// branch -> 0xb2174
												}
												// 0xb2174
												function_b1bb0(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
												// branch -> 0xb2194
											}
										}
									}
								}
								// 0xb2194
								if (__asm_rlwinm_(v52, 0, 27, 27) != 0) {
									// 0xb219c
									if (__asm_rlwinm_(v52, 0, 25, 25) == 0) {
										// 0xb21a4
										v75 = *(int32_t *)(g23 - 0x77ac);
										if (*(int32_t *)(g16 + 0x55ec * *(int32_t *)v75 + 460) != 0) {
											// Detected a possible infinite recursion (goto support failed); quitting...
										}
									}
									// Detected a possible infinite recursion (goto support failed); quitting...
								}
								// Detected a possible infinite recursion (goto support failed); quitting...
							}
						}
					}
					// 0xb1f5c
					function_c9b70((int32_t *)g29);
					// branch -> 0xb1fb8
				}
				// 0xb1fb8
				if (v9 != 0) {
					// 0xb1fc4
					DrawObject(g31, g33, g32, g35, 1, 0, g36);
					// branch -> 0xb1fe4
				}
				// 0xb1fe4
				v28 = g21;
				v41 = 0x1000000 * v28;
				v49 = v41 / 0x1000000;
				if ((v41 || 0xffffff) >= 0x1ffffff) {
					// 0xb1fec
					v42 = v49 - 1;
					g26 = v42;
					v50 = *(int32_t *)(g23 - 0x7690) + 368 * v42;
					g30 = v50;
					if (*(int32_t *)(v50 + 52) == 0) {
						// 0xb200c
						if (v28 <= 127) {
							// 0xb2014
							g34 = *(int32_t *)(v50 + 24);
							v29 = function_c9948();
							v18 = v29;
							v30 = g30;
							if (v29 == 0) {
								// 0xb2024
								function_c9acc(*(int32_t *)(v30 + 24));
								// branch -> 0xb20d0
							} else {
								// 0xb2030
								v67 = *(int32_t *)(v30 + 32);
								g11 = v67;
								v32 = v30;
								if (v67 >= 1) {
									// 0xb203c
									if (function_4d794(v29) > 50) {
										// 0xb203c
										v32 = g30;
										// branch -> 0xb2060
									} else {
										// 0xb204c
										v43 = function_4d794(v18);
										v31 = g30;
										v68 = *(int32_t *)(v31 + 32);
										g40 = v68;
										if (v68 <= v43) {
											// 0xb206c
											v51 = g32 - *(int32_t *)(v31 + 40);
											g27 = v51;
											v34 = v51;
											v35 = v31;
											if (g26 == (int32_t) * (char *)*(int32_t *)(g23 - 0x7748)) {
												// 0xb2088
												g37 = v51;
												v69 = *(int32_t *)(v31 + 36);
												g41 = v69;
												v33 = g35;
												g38 = v33;
												g13 = g36;
												g42 = 0;
												CelDecodeClr(181, v51, v33, *(int32_t *)(v31 + 24), v68, v69, 0);
												v34 = g27;
												v35 = g30;
												// branch -> 0xb20a8
											}
											// 0xb20a8
											v70 = *(int32_t *)(v35 + 32);
											v71 = *(int32_t *)(v35 + 36);
											CelDecodeHdrLightOnly(v34, g35, *(int32_t *)(v35 + 24), v70, v71, 0, g36);
											function_c9acc(*(int32_t *)(g30 + 24));
											// branch -> 0xb20d0
											// 0xb20d0
											v52 = v12;
											g29 = v52;
											if (__asm_rlwinm_(v52, 0, 26, 26) != 0) {
												// 0xb20dc
												v44 = -1 - (int32_t)v17;
												if (v44 <= 3) {
													// 0xb20f4
													v53 = g16 + 0x55ec * v44;
													v54 = g35 + *(int32_t *)(v53 + 100);
													v55 = g32 + *(int32_t *)(v53 + 96) - *(int32_t *)(v53 + 148);
													v72 = *(int32_t *)(v53 + 124);
													v73 = *(int32_t *)(v53 + 140);
													g13 = *(int32_t *)(v53 + 144);
													function_af18c(v44, g31, g33 - 1, v55, v54, v72, v73, 0, g36);
													if (g17 != 0) {
														// 0xb2140
														v74 = *(int32_t *)(g30 + 152);
														if (v74 != 0) {
															// 0xb214c
															if (v74 == 2) {
																// 0xb2154
																function_b1bb0(g28 - 0x3060, g31 - 2, g33 + 1, g20, g36, g32 - 96, g35 - 16);
																// branch -> 0xb2174
															}
															// 0xb2174
															function_b1bb0(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
															// branch -> 0xb2194
														}
													}
												}
											}
											// 0xb2194
											if (__asm_rlwinm_(v52, 0, 27, 27) != 0) {
												// 0xb219c
												if (__asm_rlwinm_(v52, 0, 25, 25) == 0) {
													// 0xb21a4
													v75 = *(int32_t *)(g23 - 0x77ac);
													if (*(int32_t *)(g16 + 0x55ec * *(int32_t *)v75 + 460) != 0) {
														// Detected a possible infinite recursion (goto support failed); quitting...
													}
												}
												// Detected a possible infinite recursion (goto support failed); quitting...
											}
											// Detected a possible infinite recursion (goto support failed); quitting...
										} else {
											v32 = v31;
										}
									}
									// 0xb2060
									function_c9acc(*(int32_t *)(v32 + 24));
									// branch -> 0xb20d0
									// 0xb20d0
									v52 = v12;
									g29 = v52;
									if (__asm_rlwinm_(v52, 0, 26, 26) != 0) {
										// 0xb20dc
										v44 = -1 - (int32_t)v17;
										if (v44 <= 3) {
											// 0xb20f4
											v53 = g16 + 0x55ec * v44;
											v54 = g35 + *(int32_t *)(v53 + 100);
											v55 = g32 + *(int32_t *)(v53 + 96) - *(int32_t *)(v53 + 148);
											v72 = *(int32_t *)(v53 + 124);
											v73 = *(int32_t *)(v53 + 140);
											g13 = *(int32_t *)(v53 + 144);
											function_af18c(v44, g31, g33 - 1, v55, v54, v72, v73, 0, g36);
											if (g17 != 0) {
												// 0xb2140
												v74 = *(int32_t *)(g30 + 152);
												if (v74 != 0) {
													// 0xb214c
													if (v74 == 2) {
														// 0xb2154
														function_b1bb0(g28 - 0x3060, g31 - 2, g33 + 1, g20, g36, g32 - 96, g35 - 16);
														// branch -> 0xb2174
													}
													// 0xb2174
													function_b1bb0(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
													// branch -> 0xb2194
												}
											}
										}
									}
									// 0xb2194
									if (__asm_rlwinm_(v52, 0, 27, 27) != 0) {
										// 0xb219c
										if (__asm_rlwinm_(v52, 0, 25, 25) == 0) {
											// 0xb21a4
											v75 = *(int32_t *)(g23 - 0x77ac);
											if (*(int32_t *)(g16 + 0x55ec * *(int32_t *)v75 + 460) != 0) {
												// Detected a possible infinite recursion (goto support failed); quitting...
											}
										}
										// Detected a possible infinite recursion (goto support failed); quitting...
									}
									// Detected a possible infinite recursion (goto support failed); quitting...
								}
								// 0xb2060
								function_c9acc(*(int32_t *)(v32 + 24));
								// branch -> 0xb20d0
							}
							// 0xb20d0
							v52 = v12;
							g29 = v52;
							if (__asm_rlwinm_(v52, 0, 26, 26) != 0) {
								// 0xb20dc
								v44 = -1 - (int32_t)v17;
								if (v44 <= 3) {
									// 0xb20f4
									v53 = g16 + 0x55ec * v44;
									v54 = g35 + *(int32_t *)(v53 + 100);
									v55 = g32 + *(int32_t *)(v53 + 96) - *(int32_t *)(v53 + 148);
									v72 = *(int32_t *)(v53 + 124);
									v73 = *(int32_t *)(v53 + 140);
									g13 = *(int32_t *)(v53 + 144);
									function_af18c(v44, g31, g33 - 1, v55, v54, v72, v73, 0, g36);
									if (g17 != 0) {
										// 0xb2140
										v74 = *(int32_t *)(g30 + 152);
										if (v74 != 0) {
											// 0xb214c
											if (v74 == 2) {
												// 0xb2154
												function_b1bb0(g28 - 0x3060, g31 - 2, g33 + 1, g20, g36, g32 - 96, g35 - 16);
												// branch -> 0xb2174
											}
											// 0xb2174
											function_b1bb0(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
											// branch -> 0xb2194
										}
									}
								}
							}
							// 0xb2194
							if (__asm_rlwinm_(v52, 0, 27, 27) != 0) {
								// 0xb219c
								if (__asm_rlwinm_(v52, 0, 25, 25) == 0) {
									// 0xb21a4
									v75 = *(int32_t *)(g23 - 0x77ac);
									if (*(int32_t *)(g16 + 0x55ec * *(int32_t *)v75 + 460) != 0) {
										// Detected a possible infinite recursion (goto support failed); quitting...
									}
								}
								// Detected a possible infinite recursion (goto support failed); quitting...
							}
							// Detected a possible infinite recursion (goto support failed); quitting...
						}
					}
				}
				// 0xb20d0
				v52 = v12;
				g29 = v52;
				if (__asm_rlwinm_(v52, 0, 26, 26) != 0) {
					// 0xb20dc
					v44 = -1 - (int32_t)v17;
					if (v44 <= 3) {
						// 0xb20f4
						v53 = g16 + 0x55ec * v44;
						v54 = g35 + *(int32_t *)(v53 + 100);
						v55 = g32 + *(int32_t *)(v53 + 96) - *(int32_t *)(v53 + 148);
						v72 = *(int32_t *)(v53 + 124);
						v73 = *(int32_t *)(v53 + 140);
						g13 = *(int32_t *)(v53 + 144);
						function_af18c(v44, g31, g33 - 1, v55, v54, v72, v73, 0, g36);
						if (g17 != 0) {
							// 0xb2140
							v74 = *(int32_t *)(g30 + 152);
							if (v74 != 0) {
								// 0xb214c
								if (v74 == 2) {
									// 0xb2154
									function_b1bb0(g28 - 0x3060, g31 - 2, g33 + 1, g20, g36, g32 - 96, g35 - 16);
									// branch -> 0xb2174
								}
								// 0xb2174
								function_b1bb0(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
								// branch -> 0xb2194
							}
						}
					}
				}
				// 0xb2194
				if (__asm_rlwinm_(v52, 0, 27, 27) != 0) {
					// 0xb219c
					if (__asm_rlwinm_(v52, 0, 25, 25) == 0) {
						// 0xb21a4
						v75 = *(int32_t *)(g23 - 0x77ac);
						if (*(int32_t *)(g16 + 0x55ec * *(int32_t *)v75 + 460) != 0) {
							// Detected a possible infinite recursion (goto support failed); quitting...
						}
					}
					// Detected a possible infinite recursion (goto support failed); quitting...
				}
				// Detected a possible infinite recursion (goto support failed); quitting...
			}
			// 0xb1fb8
			if (v9 != 0) {
				// 0xb1fc4
				DrawObject(g31, g33, g32, g35, 1, 0, g36);
				// branch -> 0xb1fe4
			}
		}
		// 0xb1fe4
		v28 = g21;
		v41 = 0x1000000 * v28;
		v49 = v41 / 0x1000000;
		if ((v41 || 0xffffff) >= 0x1ffffff) {
			// 0xb1fec
			v42 = v49 - 1;
			g26 = v42;
			v50 = *(int32_t *)(g23 - 0x7690) + 368 * v42;
			g30 = v50;
			if (*(int32_t *)(v50 + 52) == 0) {
				// 0xb200c
				if (v28 <= 127) {
					// 0xb2014
					g34 = *(int32_t *)(v50 + 24);
					v29 = function_c9948();
					v18 = v29;
					v30 = g30;
					if (v29 == 0) {
						// 0xb2024
						function_c9acc(*(int32_t *)(v30 + 24));
						// branch -> 0xb20d0
					} else {
						// 0xb2030
						v67 = *(int32_t *)(v30 + 32);
						g11 = v67;
						v32 = v30;
						if (v67 >= 1) {
							// 0xb203c
							if (function_4d794(v29) > 50) {
								// 0xb203c
								v32 = g30;
								// branch -> 0xb2060
							} else {
								// 0xb204c
								v43 = function_4d794(v18);
								v31 = g30;
								v68 = *(int32_t *)(v31 + 32);
								g40 = v68;
								if (v68 <= v43) {
									// 0xb206c
									v51 = g32 - *(int32_t *)(v31 + 40);
									g27 = v51;
									v34 = v51;
									v35 = v31;
									if (g26 == (int32_t) * (char *)*(int32_t *)(g23 - 0x7748)) {
										// 0xb2088
										g37 = v51;
										v69 = *(int32_t *)(v31 + 36);
										g41 = v69;
										v33 = g35;
										g38 = v33;
										g13 = g36;
										g42 = 0;
										CelDecodeClr(181, v51, v33, *(int32_t *)(v31 + 24), v68, v69, 0);
										v34 = g27;
										v35 = g30;
										// branch -> 0xb20a8
									}
									// 0xb20a8
									v70 = *(int32_t *)(v35 + 32);
									v71 = *(int32_t *)(v35 + 36);
									CelDecodeHdrLightOnly(v34, g35, *(int32_t *)(v35 + 24), v70, v71, 0, g36);
									function_c9acc(*(int32_t *)(g30 + 24));
									// branch -> 0xb20d0
									// 0xb20d0
									v52 = v12;
									g29 = v52;
									if (__asm_rlwinm_(v52, 0, 26, 26) != 0) {
										// 0xb20dc
										v44 = -1 - (int32_t)v17;
										if (v44 <= 3) {
											// 0xb20f4
											v53 = g16 + 0x55ec * v44;
											v54 = g35 + *(int32_t *)(v53 + 100);
											v55 = g32 + *(int32_t *)(v53 + 96) - *(int32_t *)(v53 + 148);
											v72 = *(int32_t *)(v53 + 124);
											v73 = *(int32_t *)(v53 + 140);
											g13 = *(int32_t *)(v53 + 144);
											function_af18c(v44, g31, g33 - 1, v55, v54, v72, v73, 0, g36);
											if (g17 != 0) {
												// 0xb2140
												v74 = *(int32_t *)(g30 + 152);
												if (v74 != 0) {
													// 0xb214c
													if (v74 == 2) {
														// 0xb2154
														function_b1bb0(g28 - 0x3060, g31 - 2, g33 + 1, g20, g36, g32 - 96, g35 - 16);
														// branch -> 0xb2174
													}
													// 0xb2174
													function_b1bb0(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
													// branch -> 0xb2194
												}
											}
										}
									}
									// 0xb2194
									if (__asm_rlwinm_(v52, 0, 27, 27) != 0) {
										// 0xb219c
										if (__asm_rlwinm_(v52, 0, 25, 25) == 0) {
											// 0xb21a4
											v75 = *(int32_t *)(g23 - 0x77ac);
											if (*(int32_t *)(g16 + 0x55ec * *(int32_t *)v75 + 460) != 0) {
												// Detected a possible infinite recursion (goto support failed); quitting...
											}
										}
										// Detected a possible infinite recursion (goto support failed); quitting...
									}
									// Detected a possible infinite recursion (goto support failed); quitting...
								} else {
									v32 = v31;
								}
							}
							// 0xb2060
							function_c9acc(*(int32_t *)(v32 + 24));
							// branch -> 0xb20d0
							// 0xb20d0
							v52 = v12;
							g29 = v52;
							if (__asm_rlwinm_(v52, 0, 26, 26) != 0) {
								// 0xb20dc
								v44 = -1 - (int32_t)v17;
								if (v44 <= 3) {
									// 0xb20f4
									v53 = g16 + 0x55ec * v44;
									v54 = g35 + *(int32_t *)(v53 + 100);
									v55 = g32 + *(int32_t *)(v53 + 96) - *(int32_t *)(v53 + 148);
									v72 = *(int32_t *)(v53 + 124);
									v73 = *(int32_t *)(v53 + 140);
									g13 = *(int32_t *)(v53 + 144);
									function_af18c(v44, g31, g33 - 1, v55, v54, v72, v73, 0, g36);
									if (g17 != 0) {
										// 0xb2140
										v74 = *(int32_t *)(g30 + 152);
										if (v74 != 0) {
											// 0xb214c
											if (v74 == 2) {
												// 0xb2154
												function_b1bb0(g28 - 0x3060, g31 - 2, g33 + 1, g20, g36, g32 - 96, g35 - 16);
												// branch -> 0xb2174
											}
											// 0xb2174
											function_b1bb0(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
											// branch -> 0xb2194
										}
									}
								}
							}
							// 0xb2194
							if (__asm_rlwinm_(v52, 0, 27, 27) != 0) {
								// 0xb219c
								if (__asm_rlwinm_(v52, 0, 25, 25) == 0) {
									// 0xb21a4
									v75 = *(int32_t *)(g23 - 0x77ac);
									if (*(int32_t *)(g16 + 0x55ec * *(int32_t *)v75 + 460) != 0) {
										// Detected a possible infinite recursion (goto support failed); quitting...
									}
								}
								// Detected a possible infinite recursion (goto support failed); quitting...
							}
							// Detected a possible infinite recursion (goto support failed); quitting...
						}
						// 0xb2060
						function_c9acc(*(int32_t *)(v32 + 24));
						// branch -> 0xb20d0
					}
					// 0xb20d0
					v52 = v12;
					g29 = v52;
					if (__asm_rlwinm_(v52, 0, 26, 26) != 0) {
						// 0xb20dc
						v44 = -1 - (int32_t)v17;
						if (v44 <= 3) {
							// 0xb20f4
							v53 = g16 + 0x55ec * v44;
							v54 = g35 + *(int32_t *)(v53 + 100);
							v55 = g32 + *(int32_t *)(v53 + 96) - *(int32_t *)(v53 + 148);
							v72 = *(int32_t *)(v53 + 124);
							v73 = *(int32_t *)(v53 + 140);
							g13 = *(int32_t *)(v53 + 144);
							function_af18c(v44, g31, g33 - 1, v55, v54, v72, v73, 0, g36);
							if (g17 != 0) {
								// 0xb2140
								v74 = *(int32_t *)(g30 + 152);
								if (v74 != 0) {
									// 0xb214c
									if (v74 == 2) {
										// 0xb2154
										function_b1bb0(g28 - 0x3060, g31 - 2, g33 + 1, g20, g36, g32 - 96, g35 - 16);
										// branch -> 0xb2174
									}
									// 0xb2174
									function_b1bb0(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
									// branch -> 0xb2194
								}
							}
						}
					}
					// 0xb2194
					if (__asm_rlwinm_(v52, 0, 27, 27) != 0) {
						// 0xb219c
						if (__asm_rlwinm_(v52, 0, 25, 25) == 0) {
							// 0xb21a4
							v75 = *(int32_t *)(g23 - 0x77ac);
							if (*(int32_t *)(g16 + 0x55ec * *(int32_t *)v75 + 460) != 0) {
								// Detected a possible infinite recursion (goto support failed); quitting...
							}
						}
						// Detected a possible infinite recursion (goto support failed); quitting...
					}
					// Detected a possible infinite recursion (goto support failed); quitting...
				}
			}
		}
		// 0xb20d0
		v52 = v12;
		g29 = v52;
		if (__asm_rlwinm_(v52, 0, 26, 26) != 0) {
			// 0xb20dc
			v44 = -1 - (int32_t)v17;
			if (v44 <= 3) {
				// 0xb20f4
				v53 = g16 + 0x55ec * v44;
				v54 = g35 + *(int32_t *)(v53 + 100);
				v55 = g32 + *(int32_t *)(v53 + 96) - *(int32_t *)(v53 + 148);
				v72 = *(int32_t *)(v53 + 124);
				v73 = *(int32_t *)(v53 + 140);
				g13 = *(int32_t *)(v53 + 144);
				function_af18c(v44, g31, g33 - 1, v55, v54, v72, v73, 0, g36);
				if (g17 != 0) {
					// 0xb2140
					v74 = *(int32_t *)(g30 + 152);
					if (v74 != 0) {
						// 0xb214c
						if (v74 == 2) {
							// 0xb2154
							function_b1bb0(g28 - 0x3060, g31 - 2, g33 + 1, g20, g36, g32 - 96, g35 - 16);
							// branch -> 0xb2174
						}
						// 0xb2174
						function_b1bb0(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
						// branch -> 0xb2194
					}
				}
			}
		}
		// 0xb2194
		if (__asm_rlwinm_(v52, 0, 27, 27) != 0) {
			// 0xb219c
			if (__asm_rlwinm_(v52, 0, 25, 25) == 0) {
				// 0xb21a4
				v75 = *(int32_t *)(g23 - 0x77ac);
				if (*(int32_t *)(g16 + 0x55ec * *(int32_t *)v75 + 460) != 0) {
					// Detected a possible infinite recursion (goto support failed); quitting...
				}
			}
			// Detected a possible infinite recursion (goto support failed); quitting...
		}
		// Detected a possible infinite recursion (goto support failed); quitting...
	}
	// 0xb1ebc
	v61 = *(int32_t *)(v20 - 0x70cc);
	v62 = *(int32_t *)(v20 - 0x7290);
	if (*(int32_t *)v62 < (int32_t) * (char *)v61) {
		// 0xb1ed8
		v38 = 0x1000000 * g26;
		v47 = v38 / 0x1000000;
		if ((v38 || 0xffffff) >= 0x1ffffff) {
			// 0xb1ee0
			g30 = *(int32_t *)(v20 - 0x7614) + 80 * (v47 % 32) - 80;
			v39 = __asm_rlwinm(v47, 27, 29, 31);
			v21 = g30;
			v48 = v21 + 0x1000000 * v39 / 0x200000;
			g29 = v48;
			g34 = v48;
			g26 = g32 - *(int32_t *)(v21 + 72);
			v22 = function_c9b28();
			g27 = v22;
			if (v22 == 0) {
				// 0xb1f20
				function_c9b70((int32_t *)g29);
				// branch -> 0xb1fb8
			} else {
				// 0xb1f2c
				v63 = *(int32_t *)(g30 + 64);
				g11 = v63;
				if (v63 >= 1) {
					// 0xb1f38
					if (function_4d794(v22) <= 50) {
						// 0xb1f48
						v40 = function_4d794(g27);
						v23 = g30;
						v64 = *(int32_t *)(v23 + 64);
						if (v64 <= v40) {
							// 0xb1f68
							v65 = *(char *)(v23 + 76);
							g13 = v65;
							v66 = *(int32_t *)(v23 + 68);
							v24 = g26;
							v25 = g35;
							v26 = g29;
							v27 = g36;
							if (v65 == 0) {
								// 0xb1f94
								function_50650(v24, v25, v26, v64, v66, 0, v27);
								// branch -> 0xb1fb0
							} else {
								// 0xb1f74
								function_5053c(v24, v25, v26, v64, v66, 0, v27);
								// branch -> 0xb1fb0
							}
							// 0xb1fb0
							function_c9b70((int32_t *)g29);
							// branch -> 0xb1fb8
							// 0xb1fb8
							if (v9 != 0) {
								// 0xb1fc4
								DrawObject(g31, g33, g32, g35, 1, 0, g36);
								// branch -> 0xb1fe4
							}
							// 0xb1fe4
							v28 = g21;
							v41 = 0x1000000 * v28;
							v49 = v41 / 0x1000000;
							if ((v41 || 0xffffff) >= 0x1ffffff) {
								// 0xb1fec
								v42 = v49 - 1;
								g26 = v42;
								v50 = *(int32_t *)(g23 - 0x7690) + 368 * v42;
								g30 = v50;
								if (*(int32_t *)(v50 + 52) == 0) {
									// 0xb200c
									if (v28 <= 127) {
										// 0xb2014
										g34 = *(int32_t *)(v50 + 24);
										v29 = function_c9948();
										v18 = v29;
										v30 = g30;
										if (v29 == 0) {
											// 0xb2024
											function_c9acc(*(int32_t *)(v30 + 24));
											// branch -> 0xb20d0
										} else {
											// 0xb2030
											v67 = *(int32_t *)(v30 + 32);
											g11 = v67;
											v32 = v30;
											if (v67 >= 1) {
												// 0xb203c
												if (function_4d794(v29) > 50) {
													// 0xb203c
													v32 = g30;
													// branch -> 0xb2060
												} else {
													// 0xb204c
													v43 = function_4d794(v18);
													v31 = g30;
													v68 = *(int32_t *)(v31 + 32);
													g40 = v68;
													if (v68 <= v43) {
														// 0xb206c
														v51 = g32 - *(int32_t *)(v31 + 40);
														g27 = v51;
														v34 = v51;
														v35 = v31;
														if (g26 == (int32_t) * (char *)*(int32_t *)(g23 - 0x7748)) {
															// 0xb2088
															g37 = v51;
															v69 = *(int32_t *)(v31 + 36);
															g41 = v69;
															v33 = g35;
															g38 = v33;
															g13 = g36;
															g42 = 0;
															CelDecodeClr(181, v51, v33, *(int32_t *)(v31 + 24), v68, v69, 0);
															v34 = g27;
															v35 = g30;
															// branch -> 0xb20a8
														}
														// 0xb20a8
														v70 = *(int32_t *)(v35 + 32);
														v71 = *(int32_t *)(v35 + 36);
														CelDecodeHdrLightOnly(v34, g35, *(int32_t *)(v35 + 24), v70, v71, 0, g36);
														function_c9acc(*(int32_t *)(g30 + 24));
														// branch -> 0xb20d0
														// 0xb20d0
														v52 = v12;
														g29 = v52;
														if (__asm_rlwinm_(v52, 0, 26, 26) != 0) {
															// 0xb20dc
															v44 = -1 - (int32_t)v17;
															if (v44 <= 3) {
																// 0xb20f4
																v53 = g16 + 0x55ec * v44;
																v54 = g35 + *(int32_t *)(v53 + 100);
																v55 = g32 + *(int32_t *)(v53 + 96) - *(int32_t *)(v53 + 148);
																v72 = *(int32_t *)(v53 + 124);
																v73 = *(int32_t *)(v53 + 140);
																g13 = *(int32_t *)(v53 + 144);
																function_af18c(v44, g31, g33 - 1, v55, v54, v72, v73, 0, g36);
																if (g17 != 0) {
																	// 0xb2140
																	v74 = *(int32_t *)(g30 + 152);
																	if (v74 != 0) {
																		// 0xb214c
																		if (v74 == 2) {
																			// 0xb2154
																			function_b1bb0(g28 - 0x3060, g31 - 2, g33 + 1, g20, g36, g32 - 96, g35 - 16);
																			// branch -> 0xb2174
																		}
																		// 0xb2174
																		function_b1bb0(g28 - 64, g31 - 1, g33 + 1, g20, g36, g32 - 64, g35);
																		// branch -> 0xb2194
																	}
																}
															}
														}
														// 0xb2194
														if (__asm_rlwinm_(v52, 0, 27, 27) != 0) {
															// 0xb219c
															if (__asm_rlwinm_(v52, 0, 25, 25) == 0) {
																// 0xb21a4
																v75 = *(int32_t *)(g23 - 0x77ac);
																if (*(int32_t *)(g16 + 0x55ec * *(int32_t *)v75 + 460) != 0) {
																	// Detected a possible infinite recursion (goto support failed); quitting...
																}
															}
															// Detected a possible infinite recursion (goto support failed); quitting...
														}
														// Detected a possible infinite recursion (goto support failed); quitting...
													} else {
														v32 = v31;
													}
												}
												// 0xb2060
												function_c9acc(*(int32_t *)(v32 + 24));
												// branch -> 0xb20d0
												// Detected a possible infinite recursion (goto support failed); quitting...
											}
											// 0xb2060
											function_c9acc(*(int32_t *)(v32 + 24));
											// branch -> 0xb20d0
										}
										// Detected a possible infinite recursion (goto support failed); quitting...
									}
								}
							}
							// Detected a possible infinite recursion (goto support failed); quitting...
						}
					}
				}
				// 0xb1f5c
				function_c9b70((int32_t *)g29);
				// branch -> 0xb1fb8
			}
			// 0xb1fb8
			if (v9 != 0) {
				// 0xb1fc4
				DrawObject(g31, g33, g32, g35, 1, 0, g36);
				// branch -> 0xb1fe4
			}
			// 0xb1fe4
			v28 = g21;
			v41 = 0x1000000 * v28;
			v49 = v41 / 0x1000000;
			if ((v41 || 0xffffff) >= 0x1ffffff) {
				// 0xb1fec
				v42 = v49 - 1;
				g26 = v42;
				v50 = *(int32_t *)(g23 - 0x7690) + 368 * v42;
				g30 = v50;
				if (*(int32_t *)(v50 + 52) == 0) {
					// 0xb200c
					if (v28 <= 127) {
						// 0xb2014
						g34 = *(int32_t *)(v50 + 24);
						v29 = function_c9948();
						v18 = v29;
						v30 = g30;
						if (v29 == 0) {
							// 0xb2024
							function_c9acc(*(int32_t *)(v30 + 24));
							// branch -> 0xb20d0
						} else {
							// 0xb2030
							v67 = *(int32_t *)(v30 + 32);
							g11 = v67;
							v32 = v30;
							if (v67 >= 1) {
								// 0xb203c
								if (function_4d794(v29) > 50) {
									// 0xb203c
									v32 = g30;
									// branch -> 0xb2060
								} else {
									// 0xb204c
									v43 = function_4d794(v18);
									v31 = g30;
									v68 = *(int32_t *)(v31 + 32);
									g40 = v68;
									if (v68 <= v43) {
										// 0xb206c
										v51 = g32 - *(int32_t *)(v31 + 40);
										g27 = v51;
										v34 = v51;
										v35 = v31;
										if (g26 == (int32_t) * (char *)*(int32_t *)(g23 - 0x7748)) {
											// 0xb2088
											g37 = v51;
											v69 = *(int32_t *)(v31 + 36);
											g41 = v69;
											v33 = g35;
											g38 = v33;
											g13 = g36;
											g42 = 0;
											CelDecodeClr(181, v51, v33, *(int32_t *)(v31 + 24), v68, v69, 0);
											v34 = g27;
											v35 = g30;
											// branch -> 0xb20a8
										}
										// 0xb20a8
										v70 = *(int32_t *)(v35 + 32);
										v71 = *(int32_t *)(v35 + 36);
										CelDecodeHdrLightOnly(v34, g35, *(int32_t *)(v35 + 24), v70, v71, 0, g36);
										function_c9acc(*(int32_t *)(g30 + 24));
										// branch -> 0xb20d0
										// Detected a possible infinite recursion (goto support failed); quitting...
									} else {
										v32 = v31;
									}
								}
								// 0xb2060
								function_c9acc(*(int32_t *)(v32 + 24));
								// branch -> 0xb20d0
								// Detected a possible infinite recursion (goto support failed); quitting...
							}
							// 0xb2060
							function_c9acc(*(int32_t *)(v32 + 24));
							// branch -> 0xb20d0
						}
						// Detected a possible infinite recursion (goto support failed); quitting...
					}
				}
			}
			// Detected a possible infinite recursion (goto support failed); quitting...
		}
		// 0xb1fb8
		if (v9 != 0) {
			// 0xb1fc4
			DrawObject(g31, g33, g32, g35, 1, 0, g36);
			// branch -> 0xb1fe4
		}
		// 0xb1fe4
		v28 = g21;
		v41 = 0x1000000 * v28;
		v49 = v41 / 0x1000000;
		if ((v41 || 0xffffff) >= 0x1ffffff) {
			// 0xb1fec
			v42 = v49 - 1;
			g26 = v42;
			v50 = *(int32_t *)(g23 - 0x7690) + 368 * v42;
			g30 = v50;
			if (*(int32_t *)(v50 + 52) == 0) {
				// 0xb200c
				if (v28 <= 127) {
					// 0xb2014
					g34 = *(int32_t *)(v50 + 24);
					v29 = function_c9948();
					v18 = v29;
					v30 = g30;
					if (v29 == 0) {
						// 0xb2024
						function_c9acc(*(int32_t *)(v30 + 24));
						// branch -> 0xb20d0
					} else {
						// 0xb2030
						v67 = *(int32_t *)(v30 + 32);
						g11 = v67;
						v32 = v30;
						if (v67 >= 1) {
							// 0xb203c
							if (function_4d794(v29) > 50) {
								// 0xb203c
								v32 = g30;
								// branch -> 0xb2060
							} else {
								// 0xb204c
								v43 = function_4d794(v18);
								v31 = g30;
								v68 = *(int32_t *)(v31 + 32);
								g40 = v68;
								if (v68 <= v43) {
									// 0xb206c
									v51 = g32 - *(int32_t *)(v31 + 40);
									g27 = v51;
									v34 = v51;
									v35 = v31;
									if (g26 == (int32_t) * (char *)*(int32_t *)(g23 - 0x7748)) {
										// 0xb2088
										g37 = v51;
										v69 = *(int32_t *)(v31 + 36);
										g41 = v69;
										v33 = g35;
										g38 = v33;
										g13 = g36;
										g42 = 0;
										CelDecodeClr(181, v51, v33, *(int32_t *)(v31 + 24), v68, v69, 0);
										v34 = g27;
										v35 = g30;
										// branch -> 0xb20a8
									}
									// 0xb20a8
									v70 = *(int32_t *)(v35 + 32);
									v71 = *(int32_t *)(v35 + 36);
									CelDecodeHdrLightOnly(v34, g35, *(int32_t *)(v35 + 24), v70, v71, 0, g36);
									function_c9acc(*(int32_t *)(g30 + 24));
									// branch -> 0xb20d0
									// Detected a possible infinite recursion (goto support failed); quitting...
								} else {
									v32 = v31;
								}
							}
							// 0xb2060
							function_c9acc(*(int32_t *)(v32 + 24));
							// branch -> 0xb20d0
							// Detected a possible infinite recursion (goto support failed); quitting...
						}
						// 0xb2060
						function_c9acc(*(int32_t *)(v32 + 24));
						// branch -> 0xb20d0
					}
					// Detected a possible infinite recursion (goto support failed); quitting...
				}
			}
		}
		// Detected a possible infinite recursion (goto support failed); quitting...
	}
	// 0xb1fe4
	v28 = g21;
	v41 = 0x1000000 * v28;
	if ((v41 || 0xffffff) >= 0x1ffffff) {
		// 0xb1fec
		v42 = v41 / 0x1000000 - 1;
		g26 = v42;
		v50 = *(int32_t *)(g23 - 0x7690) + 368 * v42;
		g30 = v50;
		if (*(int32_t *)(v50 + 52) == 0) {
			// 0xb200c
			if (v28 <= 127) {
				// 0xb2014
				g34 = *(int32_t *)(v50 + 24);
				v29 = function_c9948();
				v30 = g30;
				if (v29 == 0) {
					// 0xb2024
					function_c9acc(*(int32_t *)(v30 + 24));
					// branch -> 0xb20d0
				} else {
					// 0xb2030
					v67 = *(int32_t *)(v30 + 32);
					g11 = v67;
					v32 = v30;
					if (v67 >= 1) {
						// 0xb203c
						if (function_4d794(v29) > 50) {
							// 0xb203c
							v32 = g30;
							// branch -> 0xb2060
						} else {
							// 0xb204c
							v43 = function_4d794(v29);
							v31 = g30;
							v68 = *(int32_t *)(v31 + 32);
							g40 = v68;
							if (v68 <= v43) {
								// 0xb206c
								v51 = g32 - *(int32_t *)(v31 + 40);
								g27 = v51;
								v34 = v51;
								v35 = v31;
								if (g26 == (int32_t) * (char *)*(int32_t *)(g23 - 0x7748)) {
									// 0xb2088
									g37 = v51;
									v69 = *(int32_t *)(v31 + 36);
									g41 = v69;
									v33 = g35;
									g38 = v33;
									g13 = g36;
									g42 = 0;
									CelDecodeClr(181, v51, v33, *(int32_t *)(v31 + 24), v68, v69, 0);
									v34 = g27;
									v35 = g30;
									// branch -> 0xb20a8
								}
								// 0xb20a8
								v70 = *(int32_t *)(v35 + 32);
								v71 = *(int32_t *)(v35 + 36);
								CelDecodeHdrLightOnly(v34, g35, *(int32_t *)(v35 + 24), v70, v71, 0, g36);
								function_c9acc(*(int32_t *)(g30 + 24));
								// branch -> 0xb20d0
								// Detected a possible infinite recursion (goto support failed); quitting...
							} else {
								v32 = v31;
							}
						}
						// 0xb2060
						function_c9acc(*(int32_t *)(v32 + 24));
						// branch -> 0xb20d0
						// Detected a possible infinite recursion (goto support failed); quitting...
					}
					// 0xb2060
					function_c9acc(*(int32_t *)(v32 + 24));
					// branch -> 0xb20d0
				}
				// Detected a possible infinite recursion (goto support failed); quitting...
			}
			// Detected a possible infinite recursion (goto support failed); quitting...
		}
	}
	// Detected a possible infinite recursion (goto support failed); quitting...
}

// Address range: 0xb2678 - 0xb2c20
int32_t scrollrt_draw_upper(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7)
{
	// 0xb2678
	g37 = a2;
	g34 = a1;
	int32_t v1 = g10; // 0xb267c
	g30 = *(int32_t *)(g23 - 0x7250);
	g27 = g34;
	g32 = *(int32_t *)(g23 - 0x6f50);
	g22 = *(int32_t *)(g23 - 0x6f4c);
	g29 = g37;
	g17 = *(int32_t *)(g23 - 0x6f48);
	g28 = a3;
	g21 = *(int32_t *)(g23 - 0x7698);
	g24 = *(int32_t *)(g23 - 0x7804);
	g16 = a4;
	g31 = a6;
	int32_t v2 = 2 * (g31 + 1);             // 0xb26c8
	int32_t result = 32 * function_52378(); // 0xb26d4
	g26 = *(int32_t *)*(int32_t *)(g23 - 0x7584) + result;
	int32_t v3 = v2;
	if (v2 >= 9) {
		// 0xb26e4
		v3 = 8;
		// branch -> 0xb26ec
	}
	// 0xb26ec
	int32_t v4; // r15
	int32_t v5;
	int32_t v6;        // 0xb28a8
	int32_t v7;        // 0xb28b8
	int32_t v8;        // 0xb28dc
	int32_t v9;        // 0xb28e8
	int32_t v10;       // 0xb28f0
	int32_t v11;       // 0xb2ab4
	int32_t v12;       // 0xb2ac0
	int32_t v13;       // 0xb2ac8
	int32_t v14;       // 0xb2af0
	int32_t result4;   // 0xb2c1c15
	int32_t result3;   // 0xb2c1c16
	int32_t v15;       // 0xb2c1c17
	int32_t v16;       // 0xb28a8
	int32_t v17;       // 0xb28b0
	int32_t v18;       // 0xb28b8
	int32_t v19;       // 0xb28e8
	int32_t v20;       // 0xb28f0
	int32_t v21;       // 0xb2bd4
	int32_t v22;       // 0xb2ab8
	int32_t v23;       // 0xb2acc
	int32_t v24;       // 0xb2ae4
	uint16_t v25;      // 0xb2b3c
	int32_t v26;       // 0xb2bc4
	int32_t v27;       // 0xb2bcc
	int32_t v28;       // 0xb2bfc
	int32_t v29;       // 0xb2c04
	uint16_t v30;      // 0xb2b64
	uint16_t v31;      // 0xb2b84
	uint16_t v32;      // 0xb2ba8
	int16_t v33;       // 0xb2abc
	unsigned char v34; // 0xb2ad4
	unsigned char v35; // 0xb2b08
	unsigned char v36; // 0xb2b10
	unsigned char v37; // 0xb2b20
	if (a7 == 0) {
		v5 = a5;
		v7 = g29;
		v6 = g27;
		// branch -> 0xb28a8
	} else {
		int32_t v38 = g29; // 0xb26f8
		int32_t v39;       // 0xb2890
		int32_t v40;       // 0xb2894
		int32_t v41;       // 0xb289c
		if (v38 >= 0) {
			// 0xb2700
			if (v38 <= 111) {
				int32_t v42 = g27; // 0xb2708
				if (v42 >= 0) {
					// 0xb2710
					if (v42 <= 111) {
						int32_t v43 = 224 * v42 + 2 * v38;                                        // 0xb2728
						int16_t v44 = *(int16_t *)(*(int32_t *)*(int32_t *)(g23 - 0x757c) + v43); // 0xb272c
						*(int32_t *)g17 = (int32_t)v44;
						int32_t v45 = g29 + 112 * v42;                                               // 0xb273c
						unsigned char v46 = *(char *)(*(int32_t *)*(int32_t *)(g23 - 0x758c) + v45); // 0xb2744
						*(int32_t *)*(int32_t *)(g23 - 0x7290) = (int32_t)v46;
						int32_t v47 = *(int32_t *)g17; // 0xb2754
						if (v47 == 0) {
							int32_t v48 = *(int32_t *)g24;                         // 0xb2878
							int32_t v49 = *(int32_t *)(g21 + 4 * g16) + v48 + g28; // 0xb2884
							g34 = v49;
							function_d9114(v49, v48);
							// branch -> 0xb288c
						} else {
							int32_t v50 = g21 + 4 * g16;                                                 // 0xb2770
							unsigned char v51 = *(char *)(*(int32_t *)(g23 - 0x7230) + v47);             // 0xb2778
							unsigned char v52 = *(char *)(v45 + *(int32_t *)*(int32_t *)(g23 - 0x7588)); // 0xb277c
							unsigned char v53 = *(char *)(*(int32_t *)(g23 - 0x7268) + (int32_t)v52);    // 0xb2790
							*(int32_t *)*(int32_t *)(g23 - 0x7294) = (int32_t)(v53 & v51);
							v4 = g28 + *(int32_t *)v50 + 32 + *(int32_t *)g24;
							if (g31 >= 0) {
								uint16_t v54 = *(int16_t *)(g26 + 2); // 0xb27b0
								*(int32_t *)g32 = (int32_t)v54;
								if (v54 != 0) {
									// 0xb27c0
									*(char *)g22 = 2;
									drawUpperScreen(v4);
									*(char *)g22 = 0;
									// branch -> 0xb27d8
								}
							}
							// 0xb27d8
							if (g31 >= 1) {
								uint16_t v55 = *(int16_t *)(g26 + 6); // 0xb27e0
								*(int32_t *)g32 = (int32_t)v55;
								if (v55 != 0) {
									// 0xb27f0
									drawUpperScreen(v4 - 0x6000);
									// branch -> 0xb27f8
								}
							}
							// 0xb27f8
							if (g31 >= 2) {
								uint16_t v56 = *(int16_t *)(g26 + 10); // 0xb2800
								*(int32_t *)g32 = (int32_t)v56;
								if (v56 != 0) {
									// 0xb2810
									drawUpperScreen(v4 - 0xc000);
									// branch -> 0xb281c
								}
							}
							// 0xb281c
							if (g31 >= 3) {
								uint16_t v57 = *(int16_t *)(g26 + 14); // 0xb2824
								*(int32_t *)g32 = (int32_t)v57;
								if (v57 != 0) {
									// 0xb2834
									drawUpperScreen(v4 - 0x12000);
									// branch -> 0xb2840
								}
							}
							int32_t v58 = *(int32_t *)v50; // 0xb2840
							int32_t v59 = *(int32_t *)g24; // 0xb2848
							int32_t v60 = g28;             // 0xb2850
							g13 = 0;
							scrollrt_draw_dungeon(v59 + v58 + v60, g27, g29, g31, v3, v60, g16);
							// branch -> 0xb288c
						}
						// 0xb288c
						v39 = g27 + 1;
						g27 = v39;
						v40 = g29 - 1;
						g29 = v40;
						g28 += 64;
						v41 = a5 - 1;
						g26 += 32;
						result = v41;
						v5 = v41;
						v7 = v40;
						v6 = v39;
						// branch -> 0xb28a8
						// 0xb28a8
						v16 = 224 * v6;
						g18 = v16;
						v17 = 112 * v6;
						g20 = v17;
						g25 = g21 + 4 * g16;
						v18 = 2 * v7;
						g19 = v18;
						g21 = 0;
						v12 = v6;
						v11 = v7;
						int32_t result2; // 0xb2c1c
						if (v5 <= 0) {
							// 0xb2a7c
							if (a7 == 0 || v11 < 0 || v11 > 111 || v12 < 0 || v12 > 111) {
								// 0xb2c0c
								g10 = v1;
								return result;
							}
							// 0xb2aa8
							v22 = 2 * v11 + 224 * v12;
							v33 = *(int16_t *)(*(int32_t *)*(int32_t *)(g23 - 0x757c) + v22);
							*(int32_t *)g17 = (int32_t)v33;
							v13 = g23;
							v23 = g29 + 112 * v12;
							v34 = *(char *)(*(int32_t *)*(int32_t *)(v13 - 0x758c) + v23);
							*(int32_t *)*(int32_t *)(v13 - 0x7290) = (int32_t)v34;
							v24 = *(int32_t *)g17;
							if (v24 == 0) {
								// 0xb2bf8
								v28 = *(int32_t *)g24;
								v29 = v28 + *(int32_t *)g25 + g28;
								g34 = v29;
								result2 = function_d9114(v29, v28);
								// branch -> 0xb2c0c
							} else {
								// 0xb2af0
								v14 = g23;
								v35 = *(char *)(v23 + *(int32_t *)*(int32_t *)(v14 - 0x7588));
								v36 = *(char *)(*(int32_t *)(v14 - 0x7230) + v24);
								v37 = *(char *)(*(int32_t *)(v14 - 0x7268) + (int32_t)v35);
								v4 = *(int32_t *)g24 + g28 + *(int32_t *)g25;
								*(int32_t *)*(int32_t *)(v14 - 0x7294) = (int32_t)(v37 & v36);
								*(char *)g22 = (char)1;
								if (g31 >= 0) {
									// 0xb2b3c
									v25 = *(int16_t *)g26;
									*(int32_t *)g32 = (int32_t)v25;
									if (v25 != 0) {
										// 0xb2b4c
										drawUpperScreen(v4);
										// branch -> 0xb2b54
									}
								}
								// 0xb2b54
								*(char *)g22 = 0;
								if (g31 >= 1) {
									// 0xb2b64
									v30 = *(int16_t *)(g26 + 4);
									*(int32_t *)g32 = (int32_t)v30;
									if (v30 != 0) {
										// 0xb2b74
										drawUpperScreen(v4 - 0x6000);
										// branch -> 0xb2b7c
									}
								}
								// 0xb2b7c
								if (g31 >= 2) {
									// 0xb2b84
									v31 = *(int16_t *)(g26 + 8);
									*(int32_t *)g32 = (int32_t)v31;
									if (v31 != 0) {
										// 0xb2b94
										drawUpperScreen(v4 - 0xc000);
										// branch -> 0xb2ba0
									}
								}
								// 0xb2ba0
								if (g31 >= 3) {
									// 0xb2ba8
									v32 = *(int16_t *)(g26 + 12);
									*(int32_t *)g32 = (int32_t)v32;
									if (v32 != 0) {
										// 0xb2bb8
										drawUpperScreen(v4 - 0x12000);
										// branch -> 0xb2bc4
									}
								}
								// 0xb2bc4
								v26 = *(int32_t *)g25;
								v27 = *(int32_t *)g24;
								v21 = g28;
								g13 = 0;
								result2 = scrollrt_draw_dungeon(v27 + v26 + v21, g27, g29, g31, v3, v21, g16);
								// branch -> 0xb2c0c
							}
							// 0xb2c0c
							g10 = v1;
							return result2;
						}
						v15 = result;
						v20 = v18;
						v10 = v16;
						v9 = v17;
						v8 = v6;
						v19 = v7;
						while (true) {
							// 0xb28c4
							result3 = v15;
							int32_t v61; // 0xb2a50
							int32_t v62; // 0xb2a54
							int32_t v63; // 0xb2a58
							int32_t v64; // 0xb2a5c
							int32_t v65; // 0xb2a60
							int32_t v66; // 0xb2a6c
							if (v19 >= 0) {
							lab_0xb28cc:
								// 0xb28cc
								if (v19 <= 111) {
									// 0xb28d4
									if (v8 >= 0) {
										// 0xb28dc
										if (v8 <= 111) {
											int32_t v67 = v19 + v9;                               // r0
											int32_t v68 = *(int32_t *)*(int32_t *)(g23 - 0x757c); // 0xb28ec
											*(int32_t *)g17 = (int32_t) * (int16_t *)(v68 + v10 + v20);
											int32_t v69 = *(int32_t *)*(int32_t *)(g23 - 0x758c); // 0xb2900
											char v70 = *(char *)(v67 + v69);                      // 0xb2904
											*(int32_t *)*(int32_t *)(g23 - 0x7290) = (int32_t)v70;
											int32_t v71 = *(int32_t *)g17; // 0xb2914
											if (v71 != 0) {
												int32_t v72 = *(int32_t *)*(int32_t *)(g23 - 0x7588);                     // 0xb292c
												unsigned char v73 = *(char *)(v67 + v72);                                 // 0xb2934
												unsigned char v74 = *(char *)(*(int32_t *)(g23 - 0x7230) + v71);          // 0xb2940
												unsigned char v75 = *(char *)(*(int32_t *)(g23 - 0x7268) + (int32_t)v73); // 0xb294c
												g36 = *(int32_t *)g24 + g28 + *(int32_t *)g25;
												*(int32_t *)*(int32_t *)(g23 - 0x7294) = (int32_t)(v75 & v74);
												*(char *)g22 = (char)1;
												uint16_t v76 = *(int16_t *)g26; // 0xb2964
												*(int32_t *)g32 = (int32_t)v76;
												if (v76 != 0) {
													// 0xb2974
													drawUpperScreen(g36);
													// branch -> 0xb297c
												}
												// 0xb297c
												*(char *)g22 = 2;
												uint16_t v77 = *(int16_t *)(g26 + 2); // 0xb2984
												*(int32_t *)g32 = (int32_t)v77;
												if (v77 != 0) {
													// 0xb2994
													drawUpperScreen(g36 + 32);
													// branch -> 0xb299c
												}
												// 0xb299c
												g33 = g26 + 4;
												*(char *)g22 = 0;
												int32_t v78 = 1; // 0xb29b0
												// branch -> 0xb29f4
												while (true) {
													// 0xb29f4
													g35 = v78;
													uint32_t v79 = *(int32_t *)g30; // 0xb29f4
													if (v78 < (v79 / 2 || v79 & -0x80000000) - 1) {
														// 0xb29b0
														g36 -= 0x6000;
														if (g31 >= v78) {
															uint16_t v80 = *(int16_t *)g33; // 0xb29bc
															*(int32_t *)g32 = (int32_t)v80;
															if (v80 != 0) {
																// 0xb29cc
																drawUpperScreen(g36);
																// branch -> 0xb29d4
															}
															uint16_t v81 = *(int16_t *)(g33 + 2); // 0xb29d4
															*(int32_t *)g32 = (int32_t)v81;
															if (v81 != 0) {
																// 0xb29e4
																drawUpperScreen(g36 + 32);
																// branch -> 0xb29ec
															}
														}
														// 0xb29ec
														g33 += 4;
														v78 = g35 + 1;
														// branch -> 0xb29f4
														continue;
													} else {
														int32_t v82 = *(int32_t *)g25; // 0xb2a08
														int32_t v83 = *(int32_t *)g24; // 0xb2a10
														int32_t v84 = g28;             // 0xb2a18
														g13 = 1;
														result3 = scrollrt_draw_dungeon(v83 + v82 + v84, g27, g29, g31, v3, v84, g16);
														// branch -> 0xb2a50
														// 0xb2a50
														v61 = g18 + 224;
														g18 = v61;
														v62 = g20 + 112;
														g20 = v62;
														v63 = g27 + 1;
														g27 = v63;
														v64 = g19 - 2;
														g19 = v64;
														v65 = g29 - 1;
														g29 = v65;
														g28 += 64;
														g26 += 32;
														v66 = g21 + 1;
														g21 = v66;
														if (v66 >= v5) {
															result4 = result3;
															v12 = v63;
															v11 = v65;
															// break (via goto) -> 0xb2a7c
															goto lab_0xb2a7c;
														}
														v15 = result3;
														v20 = v64;
														v10 = v61;
														v9 = v62;
														v8 = v63;
														v19 = v65;
														// continue (via goto) -> 0xb28c4
														goto lab_0xb28c4;
													}
												}
												// 0xb2a7c
												v67 = a7;
												bool v85 = a7 < 0; // cr0_lt
												if (a7 == 0) {
													result2 = result4;
													// 0xb2c0c
													v67 = v1;
													g10 = v1;
													return result2;
												}
												// 0xb2a88
												v85 = v11 < 0;
												if (v11 < 0) {
													result2 = result4;
													// 0xb2c0c
													v67 = v1;
													g10 = v1;
													return result2;
												}
												// 0xb2a90
												v85 = v11 < 112;
												if (v11 > 111) {
													result2 = result4;
													// 0xb2c0c
													v67 = v1;
													g10 = v1;
													return result2;
												}
												// 0xb2a98
												v85 = v12 < 0;
												if (v12 < 0) {
													result2 = result4;
													// 0xb2c0c
													v67 = v1;
													g10 = v1;
													return result2;
												}
												// 0xb2aa0
												v85 = v12 < 112;
												if (v12 > 111) {
													result2 = result4;
													// 0xb2c0c
													v67 = v1;
													g10 = v1;
													return result2;
												}
												int32_t v86 = g23;                        // 0xb2aa8
												int32_t v87 = *(int32_t *)(v86 - 0x757c); // 0xb2aa8
												int32_t v88 = 224 * v12;                  // 0xb2aac
												int32_t v89 = v88;                        // r4
												int32_t v90 = *(int32_t *)v87;            // 0xb2ab0
												v22 = 2 * v11 + v88;
												v67 = v22;
												v33 = *(int16_t *)(v90 + v22);
												v67 = 112 * v12;
												int32_t v91 = g17; // 0xb2ac4
												*(int32_t *)v91 = (int32_t)v33;
												v13 = g23;
												int32_t v92 = *(int32_t *)(v13 - 0x758c); // 0xb2ac8
												int32_t v93 = v67;                        // 0xb2acc
												int32_t v94 = g29;                        // 0xb2acc
												v23 = v94 + v93;
												v89 = v23;
												int32_t v95 = *(int32_t *)v92; // 0xb2ad0
												v34 = *(char *)(v95 + v23);
												v67 = v34;
												int32_t v96 = *(int32_t *)(v13 - 0x7290); // 0xb2ad8
												int32_t v97 = v34;                        // 0xb2adc
												v67 = v97;
												*(int32_t *)v96 = v97;
												int32_t v98 = g17; // 0xb2ae4
												v24 = *(int32_t *)v98;
												v67 = v24;
												v85 = v24 < 0;
												if (v24 == 0) {
													int32_t v99 = g25;              // 0xb2bf8
													int32_t v100 = *(int32_t *)v99; // 0xb2bf8
													v67 = v100;
													int32_t v101 = g24; // 0xb2bfc
													v28 = *(int32_t *)v101;
													v89 = v28;
													int32_t v102 = g28; // 0xb2c00
													v29 = v28 + v100 + v102;
													g34 = v29;
													result2 = function_d9114(v29, v28);
													// branch -> 0xb2c0c
													// 0xb2c0c
													v67 = v1;
													g10 = v1;
													return result2;
												}
												// 0xb2af0
												v14 = g23;
												int32_t v103 = *(int32_t *)(v14 - 0x7588); // 0xb2af0
												int32_t v104 = g31;                        // 0xb2af4
												v85 = v104 < 0;
												int32_t v105 = g25;              // 0xb2af8
												int32_t v106 = *(int32_t *)v105; // 0xb2af8
												int32_t v107 = 1;                // r7
												int32_t v108 = *(int32_t *)v103; // 0xb2b00
												int32_t v109 = g28;              // 0xb2b04
												int32_t v110 = v109 + v106;      // 0xb2b04
												v4 = v110;
												int32_t v111 = v89; // 0xb2b08
												v35 = *(char *)(v111 + v108);
												v89 = v35;
												int32_t v112 = *(int32_t *)(v14 - 0x7230); // 0xb2b0c
												v36 = *(char *)(v112 + v24);
												int32_t v113 = v35; // 0xb2b14
												v67 = v113;
												int32_t v114 = *(int32_t *)(v14 - 0x7268); // 0xb2b18
												int32_t v115 = g24;                        // 0xb2b1c
												int32_t v116 = *(int32_t *)v115;           // 0xb2b1c
												v89 = v116;
												v37 = *(char *)(v114 + v113);
												v67 = v37;
												int32_t v117 = *(int32_t *)(v14 - 0x7294); // 0xb2b24
												v4 = v116 + v110;
												int32_t v118 = v37 & v36; // 0xb2b2c
												v67 = v118;
												*(int32_t *)v117 = v118;
												int32_t v119 = v107; // 0xb2b34
												int32_t v120 = g22;  // 0xb2b34
												*(char *)v120 = (char)v119;
												bool v121 = v85; // 0xb2b38
												if (!v121) {
													int32_t v122 = g26; // 0xb2b3c
													v25 = *(int16_t *)v122;
													int32_t v123 = v25; // 0xb2b3c
													v67 = v123;
													v85 = false;
													int32_t v124 = g32; // 0xb2b44
													*(int32_t *)v124 = v123;
													if (v25 != 0) {
														int32_t v125 = v4; // 0xb2b4c
														drawUpperScreen(v125);
														// branch -> 0xb2b54
													}
												}
												// 0xb2b54
												v67 = 0;
												int32_t v126 = g31; // 0xb2b58
												v85 = v126 < 1;
												int32_t v127 = g22; // 0xb2b5c
												*(char *)v127 = 0;
												bool v128 = v85; // 0xb2b60
												if (!v128) {
													int32_t v129 = g26; // 0xb2b64
													v30 = *(int16_t *)(v129 + 4);
													int32_t v130 = v30; // 0xb2b64
													v67 = v130;
													v85 = false;
													int32_t v131 = g32; // 0xb2b6c
													*(int32_t *)v131 = v130;
													if (v30 != 0) {
														int32_t v132 = v4; // 0xb2b74
														drawUpperScreen(v132 - 0x6000);
														// branch -> 0xb2b7c
													}
												}
												int32_t v133 = g31; // 0xb2b7c
												v85 = v133 < 2;
												if (v133 >= 2) {
													int32_t v134 = g26; // 0xb2b84
													v31 = *(int16_t *)(v134 + 8);
													int32_t v135 = v31; // 0xb2b84
													v67 = v135;
													v85 = false;
													int32_t v136 = g32; // 0xb2b8c
													*(int32_t *)v136 = v135;
													if (v31 != 0) {
														int32_t v137 = v4; // 0xb2b94
														drawUpperScreen(v137 - 0xc000);
														// branch -> 0xb2ba0
													}
												}
												int32_t v138 = g31; // 0xb2ba0
												v85 = v138 < 3;
												int32_t v139; // 0xb2bc4
												int32_t v140; // 0xb2bc8
												int32_t v141; // 0xb2bcc
												int32_t v142; // 0xb2bd0
												int32_t v143; // 0xb2be0
												int32_t v144; // 0xb2be8
												int32_t v145; // 0xb2bf0
												if (v138 >= 3) {
													int32_t v146 = g26; // 0xb2ba8
													v32 = *(int16_t *)(v146 + 12);
													int32_t v147 = v32; // 0xb2ba8
													v67 = v147;
													v85 = false;
													int32_t v148 = g32; // 0xb2bb0
													*(int32_t *)v148 = v147;
													if (v32 != 0) {
														int32_t v149 = v4; // 0xb2bb8
														drawUpperScreen(v149 - 0x12000);
														// branch -> 0xb2bc4
														// 0xb2bc4
														v139 = g25;
														v26 = *(int32_t *)v139;
														v67 = v26;
														v140 = g27;
														v89 = v140;
														v141 = g24;
														v27 = *(int32_t *)v141;
														v142 = g29;
														v21 = g28;
														v107 = v3;
														v143 = g31;
														v144 = g16;
														g13 = 0;
														v145 = scrollrt_draw_dungeon(v27 + v26 + v21, v140, v142, v143, v3, v21, v144);
														result2 = v145;
														// branch -> 0xb2c0c
														// 0xb2c0c
														v67 = v1;
														g10 = v1;
														return result2;
													}
												}
												// 0xb2bc4
												v139 = g25;
												v26 = *(int32_t *)v139;
												v67 = v26;
												v140 = g27;
												v89 = v140;
												v141 = g24;
												v27 = *(int32_t *)v141;
												v142 = g29;
												v21 = g28;
												v107 = v3;
												v143 = g31;
												v144 = g16;
												g13 = 0;
												v145 = scrollrt_draw_dungeon(v27 + v26 + v21, v140, v142, v143, v3, v21, v144);
												result2 = v145;
												// branch -> 0xb2c0c
												// 0xb2c0c
												v67 = v1;
												g10 = v1;
												return result2;
											}
											int32_t v150 = *(int32_t *)g24 + *(int32_t *)g25 + g28; // 0xb2a48
											g34 = v150;
											result3 = function_d9114(v150, 0);
											// branch -> 0xb2a50
											// 0xb2a50
											v61 = g18 + 224;
											g18 = v61;
											v62 = g20 + 112;
											g20 = v62;
											v63 = g27 + 1;
											g27 = v63;
											v64 = g19 - 2;
											g19 = v64;
											v65 = g29 - 1;
											g29 = v65;
											g28 += 64;
											g26 += 32;
											v66 = g21 + 1;
											g21 = v66;
											if (v66 >= v5) {
												v12 = v63;
												v11 = v65;
												// break -> 0xb2a7c
												break;
											}
											v15 = result3;
											v20 = v64;
											v10 = v61;
											v9 = v62;
											v8 = v63;
											v19 = v65;
											// continue -> 0xb28c4
											continue;
										} else {
											result3 = v15;
										}
									} else {
										result3 = v15;
									}
								} else {
									result3 = v15;
								}
							}
						lab_0xb2a50:
							// 0xb2a50
							v61 = g18 + 224;
							g18 = v61;
							v62 = g20 + 112;
							g20 = v62;
							v63 = g27 + 1;
							g27 = v63;
							v64 = g19 - 2;
							g19 = v64;
							v65 = g29 - 1;
							g29 = v65;
							g28 += 64;
							g26 += 32;
							v66 = g21 + 1;
							g21 = v66;
							if (v66 >= v5) {
								v12 = v63;
								v11 = v65;
								// break -> 0xb2a7c
								break;
							}
							v15 = result3;
							v20 = v64;
							v10 = v61;
							v9 = v62;
							v8 = v63;
							v19 = v65;
							// continue -> 0xb28c4
						}
						// 0xb2a7c
						if (a7 == 0 || v11 < 0 || v11 > 111 || v12 < 0 || v12 > 111) {
							// 0xb2c0c
							g10 = v1;
							return result3;
						}
						// 0xb2aa8
						v22 = 2 * v11 + 224 * v12;
						v33 = *(int16_t *)(*(int32_t *)*(int32_t *)(g23 - 0x757c) + v22);
						*(int32_t *)g17 = (int32_t)v33;
						v13 = g23;
						v23 = g29 + 112 * v12;
						v34 = *(char *)(*(int32_t *)*(int32_t *)(v13 - 0x758c) + v23);
						*(int32_t *)*(int32_t *)(v13 - 0x7290) = (int32_t)v34;
						v24 = *(int32_t *)g17;
						if (v24 == 0) {
							// 0xb2bf8
							v28 = *(int32_t *)g24;
							v29 = v28 + *(int32_t *)g25 + g28;
							g34 = v29;
							result2 = function_d9114(v29, v28);
							// branch -> 0xb2c0c
						} else {
							// 0xb2af0
							v14 = g23;
							v35 = *(char *)(v23 + *(int32_t *)*(int32_t *)(v14 - 0x7588));
							v36 = *(char *)(*(int32_t *)(v14 - 0x7230) + v24);
							v37 = *(char *)(*(int32_t *)(v14 - 0x7268) + (int32_t)v35);
							v4 = *(int32_t *)g24 + g28 + *(int32_t *)g25;
							*(int32_t *)*(int32_t *)(v14 - 0x7294) = (int32_t)(v37 & v36);
							*(char *)g22 = (char)1;
							if (g31 >= 0) {
								// 0xb2b3c
								v25 = *(int16_t *)g26;
								*(int32_t *)g32 = (int32_t)v25;
								if (v25 != 0) {
									// 0xb2b4c
									drawUpperScreen(v4);
									// branch -> 0xb2b54
								}
							}
							// 0xb2b54
							*(char *)g22 = 0;
							if (g31 >= 1) {
								// 0xb2b64
								v30 = *(int16_t *)(g26 + 4);
								*(int32_t *)g32 = (int32_t)v30;
								if (v30 != 0) {
									// 0xb2b74
									drawUpperScreen(v4 - 0x6000);
									// branch -> 0xb2b7c
								}
							}
							// 0xb2b7c
							if (g31 >= 2) {
								// 0xb2b84
								v31 = *(int16_t *)(g26 + 8);
								*(int32_t *)g32 = (int32_t)v31;
								if (v31 != 0) {
									// 0xb2b94
									drawUpperScreen(v4 - 0xc000);
									// branch -> 0xb2ba0
								}
							}
							// 0xb2ba0
							if (g31 >= 3) {
								// 0xb2ba8
								v32 = *(int16_t *)(g26 + 12);
								*(int32_t *)g32 = (int32_t)v32;
								if (v32 != 0) {
									// 0xb2bb8
									drawUpperScreen(v4 - 0x12000);
									// branch -> 0xb2bc4
								}
							}
							// 0xb2bc4
							v26 = *(int32_t *)g25;
							v27 = *(int32_t *)g24;
							v21 = g28;
							g13 = 0;
							result2 = scrollrt_draw_dungeon(v27 + v26 + v21, g27, g29, g31, v3, v21, g16);
							// branch -> 0xb2c0c
						}
						// 0xb2c0c
						g10 = v1;
						return result2;
					}
				}
			}
		}
		// 0xb288c
		v39 = g27 + 1;
		g27 = v39;
		v40 = g29 - 1;
		g29 = v40;
		g28 += 64;
		v41 = a5 - 1;
		g26 += 32;
		result = v41;
		v5 = v41;
		v7 = v40;
		v6 = v39;
		// branch -> 0xb28a8
	}
	// 0xb28a8
	v16 = 224 * v6;
	g18 = v16;
	v17 = 112 * v6;
	g20 = v17;
	g25 = g21 + 4 * g16;
	v18 = 2 * v7;
	g19 = v18;
	g21 = 0;
	result4 = result;
	v12 = v6;
	v11 = v7;
	if (v5 > 0) {
		v15 = result;
		v20 = v18;
		v10 = v16;
		v9 = v17;
		v8 = v6;
		v19 = v7;
	lab_0xb28c4:
		while (true) {
			// 0xb28c4
			if (v19 < 0) {
				result3 = v15;
				goto lab_0xb2a50;
			}
			goto lab_0xb28cc;
		}
	}
lab_0xb2a7c:
	// 0xb2a7c
	if (a7 == 0 || v11 < 0 || v11 > 111 || v12 < 0) {
		// 0xb2c0c
		g10 = v1;
		return result4;
	}
	// 0xb2aa0
	if (v12 > 111) {
		// Detected a possible infinite recursion (goto support failed); quitting...
	}
	// 0xb2aa8
	v22 = 2 * v11 + 224 * v12;
	v33 = *(int16_t *)(*(int32_t *)*(int32_t *)(g23 - 0x757c) + v22);
	*(int32_t *)g17 = (int32_t)v33;
	v13 = g23;
	v23 = g29 + 112 * v12;
	v34 = *(char *)(*(int32_t *)*(int32_t *)(v13 - 0x758c) + v23);
	*(int32_t *)*(int32_t *)(v13 - 0x7290) = (int32_t)v34;
	v24 = *(int32_t *)g17;
	if (v24 == 0) {
		// 0xb2bf8
		v28 = *(int32_t *)g24;
		v29 = v28 + *(int32_t *)g25 + g28;
		g34 = v29;
		function_d9114(v29, v28);
		// branch -> 0xb2c0c
	} else {
		// 0xb2af0
		v14 = g23;
		v35 = *(char *)(v23 + *(int32_t *)*(int32_t *)(v14 - 0x7588));
		v36 = *(char *)(*(int32_t *)(v14 - 0x7230) + v24);
		v37 = *(char *)(*(int32_t *)(v14 - 0x7268) + (int32_t)v35);
		v4 = *(int32_t *)g24 + g28 + *(int32_t *)g25;
		*(int32_t *)*(int32_t *)(v14 - 0x7294) = (int32_t)(v37 & v36);
		*(char *)g22 = (char)1;
		if (g31 >= 0) {
			// 0xb2b3c
			v25 = *(int16_t *)g26;
			*(int32_t *)g32 = (int32_t)v25;
			if (v25 != 0) {
				// 0xb2b4c
				drawUpperScreen(v4);
				// branch -> 0xb2b54
			}
		}
		// 0xb2b54
		*(char *)g22 = 0;
		if (g31 >= 1) {
			// 0xb2b64
			v30 = *(int16_t *)(g26 + 4);
			*(int32_t *)g32 = (int32_t)v30;
			if (v30 != 0) {
				// 0xb2b74
				drawUpperScreen(v4 - 0x6000);
				// branch -> 0xb2b7c
			}
		}
		// 0xb2b7c
		if (g31 >= 2) {
			// 0xb2b84
			v31 = *(int16_t *)(g26 + 8);
			*(int32_t *)g32 = (int32_t)v31;
			if (v31 != 0) {
				// 0xb2b94
				drawUpperScreen(v4 - 0xc000);
				// branch -> 0xb2ba0
			}
		}
		// 0xb2ba0
		if (g31 >= 3) {
			// 0xb2ba8
			v32 = *(int16_t *)(g26 + 12);
			*(int32_t *)g32 = (int32_t)v32;
			if (v32 != 0) {
				// 0xb2bb8
				drawUpperScreen(v4 - 0x12000);
				// branch -> 0xb2bc4
			}
		}
		// 0xb2bc4
		v26 = *(int32_t *)g25;
		v27 = *(int32_t *)g24;
		v21 = g28;
		g13 = 0;
		scrollrt_draw_dungeon(v27 + v26 + v21, g27, g29, g31, v3, v21, g16);
		// branch -> 0xb2c0c
	}
	// Detected a possible infinite recursion (goto support failed); quitting...
}

// Address range: 0xb2c20 - 0xb2eb4
int32_t DrawGame(int32_t a1)
{
	int32_t v1 = g10;     // 0xb2c24
	int32_t v2 = a1 - 10; // r23
	g28 = g37 - 1;
	g30 = 10;
	g33 = *(int32_t *)(g23 - 0x7698);
	g35 = *(int32_t *)(g23 - 0x7808);
	g36 = *(int32_t *)(g23 - 0x7804);
	*(int32_t *)*(int32_t *)(g23 - 0x7258) = 640;
	*(int32_t *)*(int32_t *)(g23 - 0x725c) = 352;
	*(int32_t *)*(int32_t *)(g23 - 0x7260) = 10;
	*(int32_t *)*(int32_t *)(g23 - 0x7264) = 11;
	int32_t v3 = *(int32_t *)(g23 - 0x77b8); // 0xb2c80
	int32_t v4 = *(int32_t *)v3;             // 0xb2c88
	int32_t v5 = v4 + 64;                    // 0xb2c94
	g32 = v5;
	int32_t v6 = *(int32_t *)(v3 + 4) + 175; // r27
	int32_t v7;                              // 0xb2cec
	int32_t v8;                              // 0xb2cbc
	int32_t v9;                              // 0xb2dc0
	int32_t v10;                             // 0xb2dc4
	int32_t v11;                             // 0xb2dcc
	int32_t v12;                             // 0xb2e28
	int32_t v13;                             // 0xb2e2c
	int32_t v14;                             // 0xb2e30
	int32_t v15;                             // 0xb2e8c
	int32_t v16;                             // 0xb2dd4
	uint32_t v17;                            // 0xb2cf0
	int32_t result;                          // 0xb2e88
	if (*(int32_t *)*(int32_t *)(g23 - 0x77c4) == 0) {
		// 0xb2ca0
		if (*(int32_t *)*(int32_t *)(g23 - 0x77c8) != 0) {
			// 0xb2cb0
			g30 = 6;
			v2 += 2;
			g28 -= 2;
			v8 = v4 + 352;
			g32 = v8;
			v7 = v8;
			// branch -> 0xb2cc0
		} else {
			v7 = v5;
		}
		// 0xb2cc0
		if (*(int32_t *)*(int32_t *)(g23 - 0x77bc) == 0) {
			// 0xb2cd0
			if (*(int32_t *)*(int32_t *)(g23 - 0x77c0) != 0) {
				// 0xb2ce0
				g30 = 6;
				v2 += 2;
				g28 -= 2;
				g32 = v7 - 32;
				// branch -> 0xb2cf0
			}
		} else {
			// 0xb2ce0
			g30 = 6;
			v2 += 2;
			g28 -= 2;
			g32 = v7 - 32;
			// branch -> 0xb2cf0
		}
		// 0xb2cf0
		v17 = *(int32_t *)(v3 + 16);
		if (v17 <= 8) {
			// 0xb2cfc
			return *(int32_t *)(*(int32_t *)(g23 - 0x5890) + 4 * v17);
		}
		// 0xb2d68
		*(int32_t *)g35 = *(int32_t *)(g33 + 640) + *(int32_t *)g36;
		scrollrt_draw_upper(v2, g28, g32, v6, g30, 0, 0);
		scrollrt_draw_upper(g27, g28 + 1, g32 - 32, g31 + 16, g30, g26, 1);
		v9 = g26 + 1;
		v10 = g31 + 32;
		v6 = v10;
		v11 = g27 + 1;
		v2 = v11;
		// branch -> 0xb2d7c
		while (v9 < 4) {
			// 0xb2d7c
			scrollrt_draw_upper(v11, g28, g32, v10, g30, v9, 0);
			scrollrt_draw_upper(g27, g28 + 1, g32 - 32, g31 + 16, g30, g26, 1);
			v9 = g26 + 1;
			v10 = g31 + 32;
			v6 = v10;
			v11 = g27 + 1;
			v2 = v11;
			// continue -> 0xb2d7c
		}
		// 0xb2dd4
		v16 = *(int32_t *)g36;
		g36 = 0;
		*(int32_t *)g35 = *(int32_t *)(g33 + 2048) + v16;
		if (g36 >= g29) {
			// 0xb2e3c
			*(char *)*(int32_t *)(g23 - 0x6f4c) = 0;
			scrollrt_draw_lower_2(v2, g28, g32, v6, g30, 0, 0);
			result = scrollrt_draw_lower_2(g27, g28 + 1, g32 - 32, g31 + 16, g30, g29, 1);
			v15 = g29 + 1;
			// branch -> 0xb2e48
			while (v15 < 4) {
				// 0xb2e48
				scrollrt_draw_lower_2(g27 + 1, g28, g32, g31 + 32, g30, v15, 0);
				result = scrollrt_draw_lower_2(g27, g28 + 1, g32 - 32, g31 + 16, g30, g29, 1);
				v15 = g29 + 1;
				// continue -> 0xb2e48
			}
			// 0xb2ea0
			g10 = v1;
			return result;
		}
		// 0xb2dec
		scrollrt_draw_lower(v2, g28, g32, v6, g30, 0);
		scrollrt_draw_lower(g27, g28 + 1, g32 - 32, g31 + 16, g30, 1);
		v12 = g27 + 1;
		v13 = g31 + 32;
		v14 = g36 + 1;
		g36 = v14;
		// branch -> 0xb2dec
		while (v14 < g29) {
			// 0xb2dec
			scrollrt_draw_lower(v12, g28, g32, v13, g30, 0);
			scrollrt_draw_lower(g27, g28 + 1, g32 - 32, g31 + 16, g30, 1);
			v12 = g27 + 1;
			v13 = g31 + 32;
			v14 = g36 + 1;
			g36 = v14;
			// continue -> 0xb2dec
		}
		// 0xb2e3c
		*(char *)*(int32_t *)(g23 - 0x6f4c) = 0;
		scrollrt_draw_lower_2(v12, g28, g32, v13, g30, 0, 0);
		result = scrollrt_draw_lower_2(g27, g28 + 1, g32 - 32, g31 + 16, g30, g29, 1);
		v15 = g29 + 1;
		// branch -> 0xb2e48
		while (v15 < 4) {
			// 0xb2e48
			scrollrt_draw_lower_2(g27 + 1, g28, g32, g31 + 32, g30, v15, 0);
			result = scrollrt_draw_lower_2(g27, g28 + 1, g32 - 32, g31 + 16, g30, g29, 1);
			v15 = g29 + 1;
			// continue -> 0xb2e48
		}
		// 0xb2ea0
		g10 = v1;
		return result;
	}
	// 0xb2cb0
	g30 = 6;
	v2 += 2;
	g28 -= 2;
	v8 = v4 + 352;
	g32 = v8;
	v7 = v8;
	// branch -> 0xb2cc0
	// 0xb2cc0
	if (*(int32_t *)*(int32_t *)(g23 - 0x77bc) != 0) {
		// 0xb2ce0
		g30 = 6;
		g28 -= 2;
		g32 = v7 - 32;
		// branch -> 0xb2cf0
		// 0xb2cf0
		v17 = *(int32_t *)(v3 + 16);
		if (v17 <= 8) {
			// 0xb2cfc
			return *(int32_t *)(*(int32_t *)(g23 - 0x5890) + 4 * v17);
		}
		// 0xb2d68
		*(int32_t *)g35 = *(int32_t *)(g33 + 640) + *(int32_t *)g36;
		scrollrt_draw_upper(v2 + 2, g28, g32, v6, g30, 0, 0);
		scrollrt_draw_upper(g27, g28 + 1, g32 - 32, g31 + 16, g30, g26, 1);
		v9 = g26 + 1;
		v10 = g31 + 32;
		v6 = v10;
		v11 = g27 + 1;
		v2 = v11;
		// branch -> 0xb2d7c
		while (v9 < 4) {
			// 0xb2d7c
			scrollrt_draw_upper(v11, g28, g32, v10, g30, v9, 0);
			scrollrt_draw_upper(g27, g28 + 1, g32 - 32, g31 + 16, g30, g26, 1);
			v9 = g26 + 1;
			v10 = g31 + 32;
			v6 = v10;
			v11 = g27 + 1;
			v2 = v11;
			// continue -> 0xb2d7c
		}
		// 0xb2dd4
		v16 = *(int32_t *)g36;
		g36 = 0;
		*(int32_t *)g35 = *(int32_t *)(g33 + 2048) + v16;
		if (g36 >= g29) {
			// 0xb2e3c
			*(char *)*(int32_t *)(g23 - 0x6f4c) = 0;
			scrollrt_draw_lower_2(v2, g28, g32, v6, g30, 0, 0);
			result = scrollrt_draw_lower_2(g27, g28 + 1, g32 - 32, g31 + 16, g30, g29, 1);
			v15 = g29 + 1;
			// branch -> 0xb2e48
			while (v15 < 4) {
				// 0xb2e48
				scrollrt_draw_lower_2(g27 + 1, g28, g32, g31 + 32, g30, v15, 0);
				result = scrollrt_draw_lower_2(g27, g28 + 1, g32 - 32, g31 + 16, g30, g29, 1);
				v15 = g29 + 1;
				// continue -> 0xb2e48
			}
			// 0xb2ea0
			g10 = v1;
			return result;
		}
		// 0xb2dec
		scrollrt_draw_lower(v2, g28, g32, v6, g30, 0);
		scrollrt_draw_lower(g27, g28 + 1, g32 - 32, g31 + 16, g30, 1);
		v12 = g27 + 1;
		v13 = g31 + 32;
		v14 = g36 + 1;
		g36 = v14;
		// branch -> 0xb2dec
		while (v14 < g29) {
			// 0xb2dec
			scrollrt_draw_lower(v12, g28, g32, v13, g30, 0);
			scrollrt_draw_lower(g27, g28 + 1, g32 - 32, g31 + 16, g30, 1);
			v12 = g27 + 1;
			v13 = g31 + 32;
			v14 = g36 + 1;
			g36 = v14;
			// continue -> 0xb2dec
		}
		// 0xb2e3c
		*(char *)*(int32_t *)(g23 - 0x6f4c) = 0;
		scrollrt_draw_lower_2(v12, g28, g32, v13, g30, 0, 0);
		result = scrollrt_draw_lower_2(g27, g28 + 1, g32 - 32, g31 + 16, g30, g29, 1);
		v15 = g29 + 1;
		// branch -> 0xb2e48
		while (v15 < 4) {
			// 0xb2e48
			scrollrt_draw_lower_2(g27 + 1, g28, g32, g31 + 32, g30, v15, 0);
			result = scrollrt_draw_lower_2(g27, g28 + 1, g32 - 32, g31 + 16, g30, g29, 1);
			v15 = g29 + 1;
			// continue -> 0xb2e48
		}
		// 0xb2ea0
		g10 = v1;
		return result;
	}
	// 0xb2cd0
	if (*(int32_t *)*(int32_t *)(g23 - 0x77c0) != 0) {
		// 0xb2ce0
		g30 = 6;
		g28 -= 2;
		g32 = v7 - 32;
		// branch -> 0xb2cf0
	}
	// 0xb2cf0
	v17 = *(int32_t *)(v3 + 16);
	if (v17 <= 8) {
		// 0xb2cfc
		return *(int32_t *)(*(int32_t *)(g23 - 0x5890) + 4 * v17);
	}
	// 0xb2d68
	*(int32_t *)g35 = *(int32_t *)(g33 + 640) + *(int32_t *)g36;
	scrollrt_draw_upper(v2 + 2, g28, g32, v6, g30, 0, 0);
	scrollrt_draw_upper(g27, g28 + 1, g32 - 32, g31 + 16, g30, g26, 1);
	v9 = g26 + 1;
	v10 = g31 + 32;
	v6 = v10;
	v11 = g27 + 1;
	v2 = v11;
	// branch -> 0xb2d7c
	while (v9 < 4) {
		// 0xb2d7c
		scrollrt_draw_upper(v11, g28, g32, v10, g30, v9, 0);
		scrollrt_draw_upper(g27, g28 + 1, g32 - 32, g31 + 16, g30, g26, 1);
		v9 = g26 + 1;
		v10 = g31 + 32;
		v6 = v10;
		v11 = g27 + 1;
		v2 = v11;
		// continue -> 0xb2d7c
	}
	// 0xb2dd4
	v16 = *(int32_t *)g36;
	g36 = 0;
	*(int32_t *)g35 = *(int32_t *)(g33 + 2048) + v16;
	if (g36 >= g29) {
		// 0xb2e3c
		*(char *)*(int32_t *)(g23 - 0x6f4c) = 0;
		scrollrt_draw_lower_2(v2, g28, g32, v6, g30, 0, 0);
		result = scrollrt_draw_lower_2(g27, g28 + 1, g32 - 32, g31 + 16, g30, g29, 1);
		v15 = g29 + 1;
		// branch -> 0xb2e48
		while (v15 < 4) {
			// 0xb2e48
			scrollrt_draw_lower_2(g27 + 1, g28, g32, g31 + 32, g30, v15, 0);
			result = scrollrt_draw_lower_2(g27, g28 + 1, g32 - 32, g31 + 16, g30, g29, 1);
			v15 = g29 + 1;
			// continue -> 0xb2e48
		}
		// 0xb2ea0
		g10 = v1;
		return result;
	}
	// 0xb2dec
	scrollrt_draw_lower(v2, g28, g32, v6, g30, 0);
	scrollrt_draw_lower(g27, g28 + 1, g32 - 32, g31 + 16, g30, 1);
	v12 = g27 + 1;
	v13 = g31 + 32;
	v14 = g36 + 1;
	g36 = v14;
	// branch -> 0xb2dec
	while (v14 < g29) {
		// 0xb2dec
		scrollrt_draw_lower(v12, g28, g32, v13, g30, 0);
		scrollrt_draw_lower(g27, g28 + 1, g32 - 32, g31 + 16, g30, 1);
		v12 = g27 + 1;
		v13 = g31 + 32;
		v14 = g36 + 1;
		g36 = v14;
		// continue -> 0xb2dec
	}
	// 0xb2e3c
	*(char *)*(int32_t *)(g23 - 0x6f4c) = 0;
	scrollrt_draw_lower_2(v12, g28, g32, v13, g30, 0, 0);
	result = scrollrt_draw_lower_2(g27, g28 + 1, g32 - 32, g31 + 16, g30, g29, 1);
	v15 = g29 + 1;
	// branch -> 0xb2e48
	while (v15 < 4) {
		// 0xb2e48
		scrollrt_draw_lower_2(g27 + 1, g28, g32, g31 + 32, g30, v15, 0);
		result = scrollrt_draw_lower_2(g27, g28 + 1, g32 - 32, g31 + 16, g30, g29, 1);
		v15 = g29 + 1;
		// continue -> 0xb2e48
	}
	// 0xb2ea0
	g10 = v1;
	return result;
}

// Address range: 0xb2eb4 - 0xb31c4
int32_t DrawZoom(int32_t a1)
{
	// 0xb2eb4
	g29 = g37 - 1;
	int32_t v1 = *(int32_t *)(g23 - 0x7698); // 0xb2ed4
	g35 = *(int32_t *)(g23 - 0x7808);
	g31 = 6;
	g36 = *(int32_t *)(g23 - 0x7804);
	*(int32_t *)*(int32_t *)(g23 - 0x7258) = 384;
	int32_t v2 = 6; // r0
	*(int32_t *)*(int32_t *)(g23 - 0x725c) = 192;
	*(int32_t *)*(int32_t *)(g23 - 0x7260) = v2;
	*(int32_t *)*(int32_t *)(g23 - 0x7264) = v2;
	int32_t v3 = *(int32_t *)(g23 - 0x77b8); // 0xb2f10
	uint32_t v4 = *(int32_t *)(v3 + 16);     // 0xb2f10
	g33 = *(int32_t *)v3 + 64;
	if (v4 <= 8) {
		// 0xb2f2c
		return *(int32_t *)(*(int32_t *)(g23 - 0x5894) + 4 * v4);
	}
	// 0xb2f98
	*(int32_t *)g35 = *(int32_t *)(v1 + 572) + *(int32_t *)g36;
	scrollrt_draw_upper(a1 - 6, g29, g33, *(int32_t *)(v3 + 4) + 143, g31, 0, 0);
	scrollrt_draw_upper(g28, g29 + 1, g33 - 32, g32 + 16, g31, g26, 1);
	int32_t v5 = g26 + 1;  // 0xb2ff0
	int32_t v6 = g32 + 32; // 0xb2ff4
	int32_t v7 = v6;       // r28
	int32_t v8 = g28 + 1;  // 0xb2ffc
	int32_t v9 = v8;       // r24
	// branch -> 0xb2fac
	while (v5 < 4) {
		// 0xb2fac
		scrollrt_draw_upper(v8, g29, g33, v6, g31, v5, 0);
		scrollrt_draw_upper(g28, g29 + 1, g33 - 32, g32 + 16, g31, g26, 1);
		v5 = g26 + 1;
		v6 = g32 + 32;
		v7 = v6;
		v8 = g28 + 1;
		v9 = v8;
		// continue -> 0xb2fac
	}
	// 0xb3004
	*(int32_t *)g35 = *(int32_t *)(g27 + 1280) + *(int32_t *)g36;
	int32_t v10; // r3
	int32_t v11; // r4
	int32_t v12; // r6
	int32_t v13; // r7
	int32_t v14; // r8
	int32_t v15; // 0xb30d0
	int32_t v16; // 0xb3158
	int32_t v17; // 0xb3178
	int32_t v18; // 0xb317c
	int32_t v19; // 0xb30bc
	int32_t v20; // 0xb3158
	int32_t v21; // 0xb3154
	int32_t v22; // 0xb3160
	if (0 < g30) {
		// 0xb301c
		scrollrt_draw_lower(v9, g29, g33, v7, g31, 0);
		scrollrt_draw_lower(g28, g29 + 1, g33 - 32, g32 + 16, g31, 1);
		int32_t v23 = g28 + 1;  // 0xb3058
		int32_t v24 = g32 + 32; // 0xb305c
		// branch -> 0xb301c
		while (g26 + 1 < g30) {
			// 0xb301c
			scrollrt_draw_lower(v23, g29, g33, v24, g31, 0);
			scrollrt_draw_lower(g28, g29 + 1, g33 - 32, g32 + 16, g31, 1);
			v23 = g28 + 1;
			v24 = g32 + 32;
			// continue -> 0xb301c
		}
		// 0xb306c
		*(char *)*(int32_t *)(g23 - 0x6f4c) = 0;
		scrollrt_draw_lower_2(v23, g29, g33, v24, g31, 0, 0);
		scrollrt_draw_lower_2(g28, g29 + 1, g33 - 32, g32 + 16, g31, g27, 1);
		v19 = g27 + 1;
		// branch -> 0xb3078
		while (v19 < 4) {
			// 0xb3078
			scrollrt_draw_lower_2(g28 + 1, g29, g33, g32 + 32, g31, v19, 0);
			scrollrt_draw_lower_2(g28, g29 + 1, g33 - 32, g32 + 16, g31, g27, 1);
			v19 = g27 + 1;
			// continue -> 0xb3078
		}
		// 0xb30d0
		v15 = g23;
		if (*(int32_t *)*(int32_t *)(v15 - 0x77c4) == 0) {
			// 0xb30e0
			if (*(int32_t *)*(int32_t *)(v15 - 0x77c8) == 0) {
				// 0xb3108
				if (*(int32_t *)*(int32_t *)(v15 - 0x77bc) == 0) {
					// 0xb3118
					if (*(int32_t *)*(int32_t *)(v15 - 0x77c0) == 0) {
						// 0xb3140
						v12 = 320;
						v16 = 320;
						// branch -> 0xb3154
						// 0xb3154
						v21 = *(int32_t *)g36;
						v20 = v16 + 768;
						v11 = 2 * v20;
						v22 = v21 + (int32_t)&g8;
						v10 = v22;
						v13 = v22 + 768;
						v14 = 176;
						int32_t v25 = v21 + (int32_t)&g7; // 0xb317419
						int32_t v26 = v16;                // 0xb3170
						// branch -> 0xb3170
						while (true) {
							// 0xb3170
							v17 = v26;
							v18 = v25;
							// branch -> 0xb3174
						lab_0xb3174_5:
							while (true) {
								int32_t v27 = v17 - 1;                                                              // 0xb3178
								int32_t v28 = v27;                                                                  // r9
								int32_t v29 = v18 + 1;                                                              // r5
								int32_t v30 = 0x10000 * __asm_rlwimi((int32_t) * (char *)v18, 8, 16, 23) / 0x10000; // 0xb3184
								*(int16_t *)v10 = (int16_t)v30;
								v10 += 2;
								*(int16_t *)v13 = (int16_t)v30;
								int32_t v31 = v13 + 2; // 0xb3194
								v13 = v31;
								if (v27 == 0) {
									int32_t v32 = v14 - 1; // 0xb319c
									v14 = v32;
									v13 = v31 - v11;
									int32_t result = v10 - v11; // 0xb31a8
									v10 = result;
									if (v32 == 0) {
										// 0xb31b0
										return result;
									}
									// 0xb319c
									v25 = v29 - v20;
									v26 = v12;
									// branch -> 0xb3170
									break;
								} else {
									// 0xb3174
									v17 = v28;
									v18 = v29;
									// branch -> 0xb3174
									continue;
								}
							}
						}
					}
				}
				// 0xb3128
				v12 = 160;
				v16 = 160;
				// branch -> 0xb3154
				// 0xb3154
				v21 = *(int32_t *)g36;
				v20 = v16 + 768;
				v11 = 2 * v20;
				v22 = v21 + (int32_t)&g8;
				v10 = v22;
				v13 = v22 + 768;
				v14 = 176;
				// branch -> 0xb3170
				while (true) {
					// 0xb3170
					v17 = v16;
					v18 = v21 + 0x3bdb0;
					// branch -> 0xb3174
					goto lab_0xb3174_5;
				}
			}
		}
		// 0xb30f0
		v12 = 160;
		v16 = 160;
		// branch -> 0xb3154
		// 0xb3154
		v21 = *(int32_t *)g36;
		v20 = v16 + 768;
		v11 = 2 * v20;
		v22 = v21 + (int32_t) "; " - 1152;
		v10 = v22;
		v13 = v22 + 768;
		v14 = 176;
		// branch -> 0xb3170
		while (true) {
			// 0xb3170
			v17 = v16;
			v18 = v21 + 0x3bdb0;
			// branch -> 0xb3174
			goto lab_0xb3174_5;
		}
	}
	// 0xb306c
	*(char *)*(int32_t *)(g23 - 0x6f4c) = 0;
	scrollrt_draw_lower_2(v9, g29, g33, v7, g31, 0, 0);
	scrollrt_draw_lower_2(g28, g29 + 1, g33 - 32, g32 + 16, g31, g27, 1);
	v19 = g27 + 1;
	// branch -> 0xb3078
	while (v19 < 4) {
		// 0xb3078
		scrollrt_draw_lower_2(g28 + 1, g29, g33, g32 + 32, g31, v19, 0);
		scrollrt_draw_lower_2(g28, g29 + 1, g33 - 32, g32 + 16, g31, g27, 1);
		v19 = g27 + 1;
		// continue -> 0xb3078
	}
	// 0xb30d0
	v15 = g23;
	if (*(int32_t *)*(int32_t *)(v15 - 0x77c4) == 0) {
		// 0xb30e0
		if (*(int32_t *)*(int32_t *)(v15 - 0x77c8) == 0) {
			// 0xb3108
			if (*(int32_t *)*(int32_t *)(v15 - 0x77bc) == 0) {
				// 0xb3118
				if (*(int32_t *)*(int32_t *)(v15 - 0x77c0) == 0) {
					// 0xb3140
					v12 = 320;
					v16 = 320;
					// branch -> 0xb3154
					// 0xb3154
					v21 = *(int32_t *)g36;
					v20 = v16 + 768;
					v11 = 2 * v20;
					v22 = v21 + (int32_t)&g8;
					v10 = v22;
					v13 = v22 + 768;
					v14 = 176;
					// branch -> 0xb3170
					while (true) {
						// 0xb3170
						v17 = v16;
						v18 = v21 + (int32_t)&g7;
						// branch -> 0xb3174
						goto lab_0xb3174_5;
					}
				}
			}
			// 0xb3128
			v12 = 160;
			v16 = 160;
			// branch -> 0xb3154
			// 0xb3154
			v21 = *(int32_t *)g36;
			v20 = v16 + 768;
			v11 = 2 * v20;
			v22 = v21 + (int32_t)&g8;
			v10 = v22;
			v13 = v22 + 768;
			v14 = 176;
			// branch -> 0xb3170
			while (true) {
				// 0xb3170
				v17 = v16;
				v18 = v21 + 0x3bdb0;
				// branch -> 0xb3174
				goto lab_0xb3174_5;
			}
		}
	}
	// 0xb30f0
	v12 = 160;
	v16 = 160;
	// branch -> 0xb3154
	// 0xb3154
	v21 = *(int32_t *)g36;
	v20 = v16 + 768;
	v11 = 2 * v20;
	v22 = v21 + (int32_t) "; " - 1152;
	v10 = v22;
	v13 = v22 + 768;
	v14 = 176;
	// branch -> 0xb3170
	while (true) {
		// 0xb3170
		v17 = v16;
		v18 = v21 + 0x3bdb0;
		// branch -> 0xb3174
		goto lab_0xb3174_5;
	}
}

// Address range: 0xb31c4 - 0xb336c
int32_t DrawView(int32_t a1, int32_t a2)
{
	int32_t v1 = g36;                        // 0xb31c4
	int32_t v2 = g10;                        // 0xb31c8
	int32_t v3 = *(int32_t *)(g23 - 0x766c); // 0xb31cc
	if (*(int32_t *)v3 == 0) {
		// 0xb31f0
		DrawZoom(v3);
		// branch -> 0xb31f4
	} else {
		// 0xb31e8
		DrawGame(v3);
		// branch -> 0xb31f4
	}
	int32_t v4 = *(int32_t *)(g23 - 0x7778); // 0xb31f4
	int32_t v5 = g23;                        // 0xb3220
	if (*(int32_t *)v4 != 0) {
		// 0xb3204
		DrawAutomap(v4);
		v5 = g23;
		// branch -> 0xb3208
	}
	int32_t v6 = *(int32_t *)(v5 - 0x77bc); // 0xb3208
	int32_t v7;                             // 0xb3238
	int32_t v8;                             // 0xb3298
	int32_t v9;                             // 0xb32ac
	int32_t v10;                            // 0xb32d0
	int32_t v11;                            // 0xb32ec
	int32_t v12;                            // 0xb3300
	int32_t v13;                            // 0xb332c
	int32_t v14;                            // 0xb3340
	int32_t v15;                            // 0xb3344
	int32_t v16;                            // 0xb3348
	int32_t v17;                            // 0xb334c
	int32_t v18;                            // 0xb3350
	int32_t result;                         // 0xb3354
	int32_t v19;                            // 0xb3278
	int32_t v20;                            // 0xb3238
	int32_t v21;                            // 0xb3250
	int32_t v22;                            // 0xb326c
	int32_t v23;                            // 0xb3298
	int32_t v24;                            // 0xb32ec
	int32_t v25;                            // 0xb3300
	int32_t v26;                            // 0xb3314
	int32_t v27;                            // 0xb332c
	if (*(int32_t *)v6 == 0) {
		int32_t v28 = *(int32_t *)(v5 - 0x77c0); // 0xb3220
		if (*(int32_t *)v28 != 0) {
			// 0xb3230
			DrawSpellBook(v28);
			// branch -> 0xb3234
		}
		// 0xb3234
		DrawDurIcon();
		v7 = g23;
		v20 = *(int32_t *)(v7 - 0x77c4);
		if (*(int32_t *)v20 != 0) {
			// 0xb3248
			DrawChr(v20);
			// branch -> 0xb3298
			// 0xb3298
			v8 = g23;
			v23 = *(int32_t *)(v8 - 0x7674);
			v9 = v8;
			if (*(int32_t *)v23 != 0) {
				// 0xb32a8
				DrawUniqueInfo(v23);
				v9 = g23;
				// branch -> 0xb32ac
			}
			// 0xb32ac
			if (*(char *)*(int32_t *)(v9 - 0x7730) != 0) {
				// 0xb32bc
				DrawQText();
				// branch -> 0xb32c0
			}
			// 0xb32c0
			if (*(int32_t *)g36 != 0) {
				// 0xb32cc
				DrawSpellList();
				// branch -> 0xb32d0
			}
			// 0xb32d0
			v10 = g23;
			v11 = v10;
			if (*(int32_t *)*(int32_t *)(v10 - 0x7704) != 0) {
				// 0xb32e0
				DrawGoldSplit(*(int32_t *)*(int32_t *)(v10 - 0x7708));
				v11 = g23;
				// branch -> 0xb32ec
			}
			// 0xb32ec
			v24 = *(int32_t *)(v11 - 0x75d4);
			v12 = v11;
			if (*(int32_t *)v24 != 0) {
				// 0xb32fc
				DrawHelp(v24);
				v12 = g23;
				// branch -> 0xb3300
			}
			// 0xb3300
			v25 = *(int32_t *)(v12 - 0x75d8);
			v13 = v12;
			if (*(char *)v25 != 0) {
				// 0xb3310
				DrawDiabloMsg(v25);
				v13 = g23;
				// branch -> 0xb3314
			}
			// 0xb3314
			v26 = *(int32_t *)(v13 - 0x75cc);
			if (*(int32_t *)v26 == 0) {
				// 0xb332c
				v27 = *(int32_t *)(v13 - 0x75d0);
				if (*(int32_t *)v27 != 0) {
					// 0xb333c
					gmenu_draw_pause(v27);
					// branch -> 0xb3340
				}
			} else {
				// 0xb3324
				RedBack(v26);
				// branch -> 0xb3340
			}
			// 0xb3340
			v14 = DrawPlrMsg();
			v15 = gmenu_draw(v14);
			v16 = doom_draw(v15);
			v17 = DrawInfoBox(v16);
			v18 = DrawLifeFlask(v17);
			result = DrawManaFlask(v18);
			g36 = v1;
			g10 = v2;
			return result;
		}
		// 0xb3250
		v21 = *(int32_t *)(v7 - 0x77c8);
		if (*(int32_t *)v21 == 0) {
			// 0xb3268
			v22 = *(int32_t *)(v7 - 0x77a8);
			v19 = 0x55ec * *(int32_t *)*(int32_t *)(v7 - 0x77ac) + v22;
			if (*(int32_t *)(v19 + 384) != 0) {
				// 0xb3288
				if (*(int32_t *)g36 == 0) {
					// 0xb3294
					DrawLevelUpIcon(v19, v22);
					// branch -> 0xb3298
				}
			}
		} else {
			// 0xb3260
			DrawQuestLog(v21);
			// branch -> 0xb3298
		}
		// 0xb3298
		v8 = g23;
		v23 = *(int32_t *)(v8 - 0x7674);
		v9 = v8;
		if (*(int32_t *)v23 != 0) {
			// 0xb32a8
			DrawUniqueInfo(v23);
			v9 = g23;
			// branch -> 0xb32ac
		}
		// 0xb32ac
		if (*(char *)*(int32_t *)(v9 - 0x7730) != 0) {
			// 0xb32bc
			DrawQText();
			// branch -> 0xb32c0
		}
		// 0xb32c0
		if (*(int32_t *)g36 != 0) {
			// 0xb32cc
			DrawSpellList();
			// branch -> 0xb32d0
		}
		// 0xb32d0
		v10 = g23;
		v11 = v10;
		if (*(int32_t *)*(int32_t *)(v10 - 0x7704) != 0) {
			// 0xb32e0
			DrawGoldSplit(*(int32_t *)*(int32_t *)(v10 - 0x7708));
			v11 = g23;
			// branch -> 0xb32ec
		}
		// 0xb32ec
		v24 = *(int32_t *)(v11 - 0x75d4);
		v12 = v11;
		if (*(int32_t *)v24 != 0) {
			// 0xb32fc
			DrawHelp(v24);
			v12 = g23;
			// branch -> 0xb3300
		}
		// 0xb3300
		v25 = *(int32_t *)(v12 - 0x75d8);
		v13 = v12;
		if (*(char *)v25 != 0) {
			// 0xb3310
			DrawDiabloMsg(v25);
			v13 = g23;
			// branch -> 0xb3314
		}
		// 0xb3314
		v26 = *(int32_t *)(v13 - 0x75cc);
		if (*(int32_t *)v26 == 0) {
			// 0xb332c
			v27 = *(int32_t *)(v13 - 0x75d0);
			if (*(int32_t *)v27 != 0) {
				// 0xb333c
				gmenu_draw_pause(v27);
				// branch -> 0xb3340
			}
		} else {
			// 0xb3324
			RedBack(v26);
			// branch -> 0xb3340
		}
		// 0xb3340
		v14 = DrawPlrMsg();
		v15 = gmenu_draw(v14);
		v16 = doom_draw(v15);
		v17 = DrawInfoBox(v16);
		v18 = DrawLifeFlask(v17);
		result = DrawManaFlask(v18);
		g36 = v1;
		g10 = v2;
		return result;
	}
	// 0xb3218
	DrawInv(v6);
	// branch -> 0xb3234
	// 0xb3234
	DrawDurIcon();
	v7 = g23;
	v20 = *(int32_t *)(v7 - 0x77c4);
	if (*(int32_t *)v20 == 0) {
		// 0xb3250
		v21 = *(int32_t *)(v7 - 0x77c8);
		if (*(int32_t *)v21 == 0) {
			// 0xb3268
			v22 = *(int32_t *)(v7 - 0x77a8);
			v19 = 0x55ec * *(int32_t *)*(int32_t *)(v7 - 0x77ac) + v22;
			if (*(int32_t *)(v19 + 384) != 0) {
				// 0xb3288
				if (*(int32_t *)g36 == 0) {
					// 0xb3294
					DrawLevelUpIcon(v19, v22);
					// branch -> 0xb3298
				}
			}
		} else {
			// 0xb3260
			DrawQuestLog(v21);
			// branch -> 0xb3298
		}
		// 0xb3298
		v8 = g23;
		v23 = *(int32_t *)(v8 - 0x7674);
		v9 = v8;
		if (*(int32_t *)v23 != 0) {
			// 0xb32a8
			DrawUniqueInfo(v23);
			v9 = g23;
			// branch -> 0xb32ac
		}
		// 0xb32ac
		if (*(char *)*(int32_t *)(v9 - 0x7730) != 0) {
			// 0xb32bc
			DrawQText();
			// branch -> 0xb32c0
		}
		// 0xb32c0
		if (*(int32_t *)g36 != 0) {
			// 0xb32cc
			DrawSpellList();
			// branch -> 0xb32d0
		}
		// 0xb32d0
		v10 = g23;
		v11 = v10;
		if (*(int32_t *)*(int32_t *)(v10 - 0x7704) != 0) {
			// 0xb32e0
			DrawGoldSplit(*(int32_t *)*(int32_t *)(v10 - 0x7708));
			v11 = g23;
			// branch -> 0xb32ec
		}
		// 0xb32ec
		v24 = *(int32_t *)(v11 - 0x75d4);
		v12 = v11;
		if (*(int32_t *)v24 != 0) {
			// 0xb32fc
			DrawHelp(v24);
			v12 = g23;
			// branch -> 0xb3300
		}
		// 0xb3300
		v25 = *(int32_t *)(v12 - 0x75d8);
		v13 = v12;
		if (*(char *)v25 != 0) {
			// 0xb3310
			DrawDiabloMsg(v25);
			v13 = g23;
			// branch -> 0xb3314
		}
		// 0xb3314
		v26 = *(int32_t *)(v13 - 0x75cc);
		if (*(int32_t *)v26 == 0) {
			// 0xb332c
			v27 = *(int32_t *)(v13 - 0x75d0);
			if (*(int32_t *)v27 != 0) {
				// 0xb333c
				gmenu_draw_pause(v27);
				// branch -> 0xb3340
			}
		} else {
			// 0xb3324
			RedBack(v26);
			// branch -> 0xb3340
		}
		// 0xb3340
		v14 = DrawPlrMsg();
		v15 = gmenu_draw(v14);
		v16 = doom_draw(v15);
		v17 = DrawInfoBox(v16);
		v18 = DrawLifeFlask(v17);
		result = DrawManaFlask(v18);
		g36 = v1;
		g10 = v2;
		return result;
	}
	// 0xb3248
	DrawChr(v20);
	// branch -> 0xb3298
	// 0xb3298
	v8 = g23;
	v23 = *(int32_t *)(v8 - 0x7674);
	v9 = v8;
	if (*(int32_t *)v23 != 0) {
		// 0xb32a8
		DrawUniqueInfo(v23);
		v9 = g23;
		// branch -> 0xb32ac
	}
	// 0xb32ac
	if (*(char *)*(int32_t *)(v9 - 0x7730) != 0) {
		// 0xb32bc
		DrawQText();
		// branch -> 0xb32c0
	}
	// 0xb32c0
	if (*(int32_t *)g36 != 0) {
		// 0xb32cc
		DrawSpellList();
		// branch -> 0xb32d0
	}
	// 0xb32d0
	v10 = g23;
	v11 = v10;
	if (*(int32_t *)*(int32_t *)(v10 - 0x7704) != 0) {
		// 0xb32e0
		DrawGoldSplit(*(int32_t *)*(int32_t *)(v10 - 0x7708));
		v11 = g23;
		// branch -> 0xb32ec
	}
	// 0xb32ec
	v24 = *(int32_t *)(v11 - 0x75d4);
	v12 = v11;
	if (*(int32_t *)v24 != 0) {
		// 0xb32fc
		DrawHelp(v24);
		v12 = g23;
		// branch -> 0xb3300
	}
	// 0xb3300
	v25 = *(int32_t *)(v12 - 0x75d8);
	v13 = v12;
	if (*(char *)v25 != 0) {
		// 0xb3310
		DrawDiabloMsg(v25);
		v13 = g23;
		// branch -> 0xb3314
	}
	// 0xb3314
	v26 = *(int32_t *)(v13 - 0x75cc);
	if (*(int32_t *)v26 != 0) {
		// 0xb3324
		RedBack(v26);
		// branch -> 0xb3340
		// 0xb3340
		v14 = DrawPlrMsg();
		v15 = gmenu_draw(v14);
		v16 = doom_draw(v15);
		v17 = DrawInfoBox(v16);
		v18 = DrawLifeFlask(v17);
		result = DrawManaFlask(v18);
		g36 = v1;
		g10 = v2;
		return result;
	}
	// 0xb332c
	v27 = *(int32_t *)(v13 - 0x75d0);
	if (*(int32_t *)v27 != 0) {
		// 0xb333c
		gmenu_draw_pause(v27);
		// branch -> 0xb3340
	}
	// 0xb3340
	v14 = DrawPlrMsg();
	v15 = gmenu_draw(v14);
	v16 = doom_draw(v15);
	v17 = DrawInfoBox(v16);
	v18 = DrawLifeFlask(v17);
	result = DrawManaFlask(v18);
	g36 = v1;
	g10 = v2;
	return result;
}

// Address range: 0xb336c - 0xb33d0
int32_t ClearScreenBuffer(int32_t a1)
{
	// 0xb336c
	lock_buf(3);
	g37 = 480;
	int32_t v1 = 0;                                                // r0
	int32_t v2 = *(int32_t *)*(int32_t *)(g23 - 0x7804) + 0x1e040; // 0xb3394
	int32_t v3 = 0;                                                // 0xb33a08
	// branch -> 0xb3398
	while (true) {
		// 0xb3398
		*(int32_t *)v2 = v3;
		int32_t v4 = v2 + 4; // 0xb33a411
		int32_t v5 = 158;    // 0xb339c
		*(int32_t *)v4 = v1;
		int32_t v6 = v4;     // 0xb33a4
		int32_t v7 = v6 + 4; // 0xb33a4
		// branch -> 0xb339c
		while (v5 != 0) {
			// 0xb339c
			v5--;
			*(int32_t *)v7 = v1;
			v6 = v7;
			v7 = v6 + 4;
			// continue -> 0xb339c
		}
		int32_t v8 = g37 - 1; // 0xb33ac
		g37 = v8;
		if (v8 == 0) {
			int32_t result = unlock_buf(3); // 0xb33bc
			return result;
		}
		// 0xb33ac
		v3 = v1;
		v2 = v6 + 132;
		// branch -> 0xb3398
	}
}

// Address range: 0xb33d0 - 0xb35a0
int32_t DrawMain(int32_t result, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6)
{
	// 0xb33d0
	g37 = a2;
	int32_t v1 = g10; // 0xb33d4
	g30 = result;
	g31 = g37;
	g32 = a3;
	g33 = a4;
	g35 = a5;
	g36 = a6;
	if (*(int32_t *)*(int32_t *)(g23 - 0x7210) == 0) {
		// 0xb358c
		g10 = v1;
		return result;
	}
	// 0xb3408
	g34 = 1;
	Sleep(1);
	int32_t v2;                                // bp-40
	int32_t v3 = function_278f0((int32_t)&v2); // 0xb3418
	g34 = v3;
	if (v3 == 0) {
		// 0xb358c
		g10 = v1;
		return 0;
	}
	// 0xb3424
	int32_t v4; // 0xb343c
	if (v2 == 0) {
		// 0xb3434
		v4 = g30;
		// branch -> 0xb3434
	} else {
		// 0xb3430
		g30 = 480;
		v4 = 480;
		// branch -> 0xb3434
	}
	int32_t v5 = v4; // 0xb3450
	if (v4 >= 1) {
		// 0xb343c
		g34 = DoBlitScreen(0, 0, 640, v4);
		v5 = g30;
		// branch -> 0xb3450
	}
	// 0xb3450
	int32_t result2; // 0xb3584
	if (v5 > 479) {
		// 0xb357c
		function_279f8();
		g34 = 1;
		result2 = Sleep(1);
		// branch -> 0xb358c
		// 0xb358c
		g10 = v1;
		return result2;
	}
	// 0xb3458
	if (g35 != 0) {
		// 0xb3460
		g34 = DoBlitScreen(204, 357, 232, 28);
		// branch -> 0xb3474
	}
	// 0xb3474
	if (g31 != 0) {
		// 0xb347c
		g34 = DoBlitScreen(176, 398, 288, 60);
		// branch -> 0xb3490
	}
	// 0xb3490
	if (g33 != 0) {
		// 0xb3498
		DoBlitScreen(460, 352, 88, 72);
		g34 = DoBlitScreen(564, 416, 56, 56);
		// branch -> 0xb34c0
	}
	// 0xb34c0
	if (g32 != 0) {
		// 0xb34c8
		g34 = DoBlitScreen(96, 352, 88, 72);
		// branch -> 0xb34dc
	}
	// 0xb34dc
	if (g36 != 0) {
		// 0xb34e4
		DoBlitScreen(8, 357, 72, 119);
		DoBlitScreen(556, 357, 72, 48);
		int32_t v6 = *(int32_t *)(g23 - 0x77f0); // 0xb350c
		g34 = v6;
		if ((*(char *)v6 || 1) != 1) {
			// 0xb351c
			DoBlitScreen(84, 443, 36, 32);
			g34 = DoBlitScreen(524, 443, 36, 32);
			// branch -> 0xb3544
		}
	}
	int32_t v7 = *(int32_t *)(g23 - 0x4bc4); // 0xb3544
	int32_t v8 = g23;                        // 0xb3574
	if (v7 != 0) {
		int32_t v9 = *(int32_t *)(g23 - 0x4bc8); // 0xb3558
		g34 = DoBlitScreen(*(int32_t *)(g23 - 0x4bbc), *(int32_t *)(g23 - 0x4bc0), v7, v9);
		v8 = g23;
		// branch -> 0xb3560
	}
	int32_t v10 = *(int32_t *)(v8 - 0x4bb4); // 0xb3560
	if (v10 != 0) {
		int32_t v11 = *(int32_t *)(v8 - 0x4bac); // 0xb356c
		int32_t v12 = *(int32_t *)(v8 - 0x4bb8); // 0xb3574
		g34 = DoBlitScreen(v11, *(int32_t *)(v8 - 0x4bb0), v10, v12);
		// branch -> 0xb357c
	}
	// 0xb357c
	function_279f8();
	g34 = 1;
	result2 = Sleep(1);
	// branch -> 0xb358c
	// 0xb358c
	g10 = v1;
	return result2;
}

// Address range: 0xb35a0 - 0xb3648
int32_t scrollrt_draw_game_screen(int32_t a1)
{
	int32_t v1 = *(int32_t *)(g23 - 0x76bc); // 0xb35a8
	g37 = v1;
	int32_t *v2 = (int32_t *)v1; // 0xb35bc
	int32_t v3 = 0;
	if (*v2 == 255) {
		// 0xb35c8
		*v2 = 0;
		v3 = 480;
		// branch -> 0xb35dc
	}
	if (a1 != 0) {
		int32_t v4 = lock_buf(0); // 0xb35e8
		g34 = v4;
		scrollrt_draw_cursor_item(v4);
		unlock_buf(0);
		v3 = g36;
		// branch -> 0xb35f8
	}
	int32_t v5 = DrawMain(v3, 0, 0, 0, 0, 0); // 0xb3610
	int32_t result;                           // 0xb3644
	if (g35 != 0) {
		int32_t v6 = lock_buf(0); // 0xb3620
		g34 = v6;
		scrollrt_draw_cursor_back_buffer(v6);
		result = unlock_buf(0);
		// branch -> 0xb3630
	} else {
		result = v5;
	}
	// 0xb3630
	return result;
}

// Address range: 0xb3648 - 0xb37d4
int32_t DrawAndBlit(int32_t a1)
{
	int32_t v1 = g10; // 0xb364c
	g32 = *(int32_t *)(g23 - 0x7670);
	g33 = *(int32_t *)(g23 - 0x771c);
	g35 = *(int32_t *)(g23 - 0x76f4);
	int32_t v2 = *(int32_t *)(g23 - 0x76f0); // 0xb3660
	g36 = v2;
	g28 = *(int32_t *)(g23 - 0x77b0);
	g29 = *(int32_t *)(g23 - 0x77b4);
	int32_t result = *(int32_t *)(g23 - 0x76bc); // 0xb3678
	if (*(int32_t *)*(int32_t *)(g23 - 0x75a4) == 0) {
		// 0xb37c0
		g10 = v1;
		return result;
	}
	int32_t v3 = *(int32_t *)result; // 0xb3684
	int32_t v4;                      // r0
	int32_t v5;                      // 0xb3770
	int32_t v6;                      // 0xb3768
	int32_t v7;                      // 0xb379c
	int32_t result3;                 // 0xb37a8
	int32_t v8;                      // 0xb3700
	int32_t v9;                      // 0xb3704
	int32_t v10;                     // 0xb378c
	int32_t v11;                     // 0xb3790
	int32_t v12;                     // 0xb3758
	if (v3 != 255) {
		int32_t result2 = result; // 0xb37d0
		if (v3 == 1) {
			// 0xb36bc
			// branch -> 0xb36d0
			// 0xb36d0
			*(int32_t *)result = 0;
			lock_buf(0);
			v8 = *(int32_t *)g28;
			v9 = *(int32_t *)g29;
			g37 = v9;
			if (*(char *)*(int32_t *)(g23 - 0x7794) == 0) {
				// 0xb3700
				T_DrawView(v8, v9);
				// branch -> 0xb370c
			} else {
				// 0xb36f0
				DrawView(v8, v9);
				// branch -> 0xb370c
			}
			// 0xb370c
			if (g27 != 0) {
				// 0xb3714
				ClearCtrlPan();
				// branch -> 0xb3718
			}
			// 0xb3718
			if (*(int32_t *)g36 != 0) {
				// 0xb3724
				UpdateLifeFlask();
				// branch -> 0xb3728
			}
			// 0xb3728
			if (*(int32_t *)g35 != 0) {
				// 0xb3734
				UpdateManaFlask();
				// branch -> 0xb3738
			}
			// 0xb3738
			if (*(int32_t *)g33 != 0) {
				// 0xb3744
				DrawCtrlPan();
				// branch -> 0xb3748
			}
			// 0xb3748
			if (*(int32_t *)g32 != 0) {
				// 0xb3754
				DrawInvBelt();
				// branch -> 0xb3758
			}
			// 0xb3758
			v12 = *(int32_t *)(g23 - 0x76d0);
			g34 = v12;
			if (*(int32_t *)v12 != 0) {
				// 0xb3768
				v6 = DrawTalkPan(v12);
				g34 = v6;
				v5 = v6;
				// branch -> 0xb3770
			} else {
				v5 = v12;
			}
			// 0xb3770
			scrollrt_draw_cursor_item(v5);
			unlock_buf(0);
			v10 = *(int32_t *)g32;
			v11 = *(int32_t *)g33;
			DrawMain(g30, g31, *(int32_t *)g36, *(int32_t *)g35, v10, v11);
			v7 = lock_buf(0);
			g34 = v7;
			scrollrt_draw_cursor_back_buffer(v7);
			result3 = unlock_buf(0);
			v4 = 0;
			*(int32_t *)g36 = 0;
			*(int32_t *)g35 = v4;
			*(int32_t *)g33 = v4;
			*(int32_t *)g32 = v4;
			result2 = result3;
			// branch -> 0xb37c0
		}
		// 0xb37c0
		g10 = v1;
		return result2;
	}
	// 0xb3690
	v4 = 1;
	*(int32_t *)v2 = 1;
	*(int32_t *)g35 = v4;
	*(int32_t *)g33 = v4;
	*(int32_t *)g32 = v4;
	// branch -> 0xb36d0
	// 0xb36d0
	*(int32_t *)result = 0;
	lock_buf(0);
	v8 = *(int32_t *)g28;
	v9 = *(int32_t *)g29;
	g37 = v9;
	if (*(char *)*(int32_t *)(g23 - 0x7794) == 0) {
		// 0xb3700
		T_DrawView(v8, v9);
		// branch -> 0xb370c
	} else {
		// 0xb36f0
		DrawView(v8, v9);
		// branch -> 0xb370c
	}
	// 0xb370c
	if (g27 != 0) {
		// 0xb3714
		ClearCtrlPan();
		// branch -> 0xb3718
	}
	// 0xb3718
	if (*(int32_t *)g36 != 0) {
		// 0xb3724
		UpdateLifeFlask();
		// branch -> 0xb3728
	}
	// 0xb3728
	if (*(int32_t *)g35 != 0) {
		// 0xb3734
		UpdateManaFlask();
		// branch -> 0xb3738
	}
	// 0xb3738
	if (*(int32_t *)g33 != 0) {
		// 0xb3744
		function_2e744();
		// branch -> 0xb3748
	}
	// 0xb3748
	if (*(int32_t *)g32 != 0) {
		// 0xb3754
		DrawInvBelt();
		// branch -> 0xb3758
	}
	// 0xb3758
	v12 = *(int32_t *)(g23 - 0x76d0);
	g34 = v12;
	if (*(int32_t *)v12 != 0) {
		// 0xb3768
		v6 = DrawTalkPan(v12);
		g34 = v6;
		v5 = v6;
		// branch -> 0xb3770
	} else {
		v5 = v12;
	}
	// 0xb3770
	scrollrt_draw_cursor_item(v5);
	unlock_buf(0);
	v10 = *(int32_t *)g32;
	v11 = *(int32_t *)g33;
	DrawMain(g30, g31, *(int32_t *)g36, *(int32_t *)g35, v10, v11);
	v7 = lock_buf(0);
	g34 = v7;
	scrollrt_draw_cursor_back_buffer(v7);
	result3 = unlock_buf(0);
	v4 = 0;
	*(int32_t *)g36 = 0;
	*(int32_t *)g35 = v4;
	*(int32_t *)g33 = v4;
	*(int32_t *)g32 = v4;
	// branch -> 0xb37c0
	// 0xb37c0
	g10 = v1;
	return result3;
}

// Address range: 0x27ca8 - 0x27e34
int32_t DoBlitScreen(int32_t a1, int32_t a2, int32_t a3, int32_t a4)
{
	int32_t v1 = g10; // 0x27cac
	g36 = *(int32_t *)(g23 - 0x7818);
	g32 = a1;
	g29 = a2;
	g33 = a3;
	g35 = a4;
	int32_t result3; // 0x27e30
	if (*(int32_t *)(g23 - 0x5048) == 0) {
		// 0x27d84
		g34 = a3 + a1;
		int32_t v2 = a2; // bp-52
		g32 = GetTickCount();
		g30 = 0;
		// branch -> 0x27dcc
		int32_t v3; // 0x27db0
		while (true) {
			int32_t v4 = *(int32_t *)g36; // 0x27dcc
			g34 = v4;
			g15 = *(int32_t *)(v4 + 116);
			int32_t v5 = CurrentProc(); // 0x27dd4
			g34 = v5;
			if (v5 % 256 == 0) {
				int32_t v6 = *(int32_t *)g36; // 0x27de4
				g34 = v6;
				g15 = *(int32_t *)(v6 + 128);
				int32_t result = CurrentProc(); // 0x27dec
				g34 = result;
				if (result % 256 == 0) {
					// 0x27dfc
					// branch -> 0x27dfc
					// 0x27dfc
					if (g30 != 0) {
						// 0x27e20
						g10 = v1;
						return result;
					}
					// 0x27e04
					g34 = &v2;
					g15 = *(int32_t *)(*(int32_t *)g36 + 140);
					// branch -> 0x27e20
					// 0x27e20
					g10 = v1;
					return CurrentProc();
				}
			}
			// 0x27db0
			v3 = GetTickCount();
			if (g32 - v3 >= 0x1389) {
				// break -> 0x27dc4
				break;
			}
			// continue -> 0x27dcc
		}
		// 0x27dc4
		g30 = 1;
		// branch -> 0x27dfc
		result3 = v3;
	} else {
		int32_t v7 = *(int32_t *)(g23 - 0x504c); // 0x27cd8
		g36 = 768 - a3;
		g31 = v7 * a2 + a1;
		g30 = v7 - a3;
		lock_buf(6);
		int32_t v8 = g31 + *(int32_t *)(g23 - 0x5048);                                           // 0x27d08
		int32_t v9 = v8;                                                                         // r3
		int32_t v10 = *(int32_t *)*(int32_t *)(g23 - 0x7804) + (768 * g29 + 0x1e000 | 64) + g32; // 0x27d14
		g37 = v10;
		int32_t v11 = g33; // 0x27d2c
		if (v10 % 8 == v8 % 8) {
			int32_t v12 = g35; // 0x27d30
			g39 = v12;
			function_27a40((int32_t *)v8, v10, v11, v12, g30, g36);
			// branch -> 0x27d78
		} else {
			int32_t v13 = v11 / 4; // 0x27d44
			g33 = v13;
			int32_t v14 = g35; // r6
			// branch -> 0x27d4c
			while (true) {
				int32_t v15 = v13 - 1; // 0x27d5425
				int32_t v16 = v15;     // r5
				int32_t v17 = v10 + 4; // r4
				*(int32_t *)v8 = *(int32_t *)v10;
				int32_t v18 = v9 + 4; // 0x27d6030
				v9 = v18;
				int32_t v19;     // 0x27d68
				int32_t result2; // 0x27d7c
				int32_t v20;     // 0x27d6c
				int32_t v21;     // 0x27d70
				if (v15 != 0) {
					int32_t v22 = v17;
					int32_t v23 = v16 - 1; // 0x27d54
					v17 = v22 + 4;
					*(int32_t *)v18 = *(int32_t *)v22;
					int32_t v24 = v9 + 4; // 0x27d60
					while (v23 != 0) {
						// 0x27d50
						v22 = v17;
						v23--;
						v17 = v22 + 4;
						*(int32_t *)v24 = *(int32_t *)v22;
						v24 += 4;
						// continue -> 0x27d50
					}
					// 0x27d68
					v19 = v14 - 1;
					v14 = v19;
					v20 = g36 + v17;
					g37 = v20;
					v21 = g30 + v24;
					v9 = v21;
					if (v19 == 0) {
						// 0x27d78
						// branch -> 0x27d78
						// 0x27d78
						result2 = unlock_buf(6);
						// branch -> 0x27e20
						// 0x27e20
						g10 = v1;
						return result2;
					}
				lab_0x27d68:
					// 0x27d68
					v8 = v21;
					v10 = v20;
					v13 = g33;
					// branch -> 0x27d4c
					continue;
				}
				// 0x27d68
				v19 = v14 - 1;
				v14 = v19;
				v20 = g36 + v17;
				g37 = v20;
				v21 = g30 + v18;
				v9 = v21;
				if (v19 != 0) {
					goto lab_0x27d68;
				}
				// 0x27d78
				// branch -> 0x27d78
				// 0x27d78
				result2 = unlock_buf(6);
				// branch -> 0x27e20
				// 0x27e20
				g10 = v1;
				return result2;
			}
		}
		// 0x27d78
		result3 = unlock_buf(6);
		// branch -> 0x27e20
	}
	// 0x27e20
	g10 = v1;
	return result3;
}
