
// Address range: 0xb3e8c - 0xb3ed8
int32_t SHA1Init(int32_t *a1)
{
	int32_t result = (int32_t)a1;
	*a1 = 0x67452301;
	*(int32_t *)(result + 4) = -0x10325477;
	*(int32_t *)(result + 8) = -0x67452302;
	*(int32_t *)(result + 12) = 0x10325476;
	*(int32_t *)(result + 16) = -0x3c2d1e10;
	*(int32_t *)(result + 20) = 0;
	*(int32_t *)(result + 24) = 0;
	return result;
}

// Address range: 0xb3ed8 - 0xb4bcc
int32_t SHA1ProcessMessageBlock(int32_t *a1)
{
	int32_t result = (int32_t)a1; // r3
	int32_t v1 = 2;               // ctr
	int32_t v2 = result;          // r6
	int32_t v3;                   // bp-352
	int32_t v4 = &v3;             // 0xb3ef4
	int32_t v5 = v4;              // r7
	int32_t v6 = result;          // 0xb3efc
	// branch -> 0xb3efc
	while (true) {
		int32_t v7 = v6 + 28;             // 0xb3efc
		int32_t v8 = __asm_lwbrx(v7, v7); // 0xb3f00
		int32_t v9 = v2 + 32;             // 0xb3f04
		*(int32_t *)v5 = v8;
		int32_t v10 = __asm_lwbrx(v9, v9); // 0xb3f0c
		int32_t v11 = v2 + 36;             // 0xb3f10
		*(int32_t *)(v5 + 4) = v10;
		int32_t v12 = __asm_lwbrx(v11, v11); // 0xb3f18
		int32_t v13 = v2 + 40;               // 0xb3f1c
		*(int32_t *)(v5 + 8) = v12;
		int32_t v14 = __asm_lwbrx(v13, v13); // 0xb3f24
		int32_t v15 = v2 + 44;               // 0xb3f28
		*(int32_t *)(v5 + 12) = v14;
		int32_t v16 = __asm_lwbrx(v15, v15); // 0xb3f30
		int32_t v17 = v2 + 48;               // 0xb3f34
		*(int32_t *)(v5 + 16) = v16;
		int32_t v18 = __asm_lwbrx(v17, v17); // 0xb3f3c
		int32_t v19 = v2 + 52;               // 0xb3f40
		*(int32_t *)(v5 + 20) = v18;
		int32_t v20 = __asm_lwbrx(v19, v19); // 0xb3f48
		int32_t v21 = v2 + 56;               // 0xb3f4c
		*(int32_t *)(v5 + 24) = v20;
		int32_t v22 = __asm_lwbrx(v21, v21); // 0xb3f54
		v2 += 32;
		*(int32_t *)(v5 + 28) = v22;
		v5 += 32;
		int32_t v23 = v1 - 1; // 0xb3f64
		v1 = v23;
		if (v23 == 0) {
			// 0xb3f68
			int32_t v24;                          // bp-288
			int32_t v25 = &v24;                   // 0xb3f6c
			int32_t v26 = *(int32_t *)(v25 - 32); // 0xb3f78
			int32_t v27 = *(int32_t *)(v25 - 56); // 0xb3f7c
			int32_t v28 = *(int32_t *)(v25 - 64); // 0xb3f84
			*(int32_t *)v25 = v27 ^ v26 ^ *(int32_t *)(v25 - 12) ^ v28;
			int32_t v29 = v25;                    // 0xb3f94
			int32_t v30 = *(int32_t *)(v29 - 8);  // 0xb3f94
			int32_t v31 = *(int32_t *)(v29 - 28); // 0xb3f98
			int32_t v32 = *(int32_t *)(v29 - 52); // 0xb3f9c
			int32_t v33 = *(int32_t *)(v29 - 60); // 0xb3fa4
			*(int32_t *)(v29 + 4) = v32 ^ v31 ^ v30 ^ v33;
			int32_t v34 = v25;                    // 0xb3fb4
			int32_t v35 = *(int32_t *)(v34 - 4);  // 0xb3fb4
			int32_t v36 = *(int32_t *)(v34 - 24); // 0xb3fb8
			int32_t v37 = *(int32_t *)(v34 - 48); // 0xb3fbc
			int32_t v38 = *(int32_t *)(v34 - 56); // 0xb3fc4
			*(int32_t *)(v34 + 8) = v37 ^ v36 ^ v35 ^ v38;
			int32_t v39 = v25;                    // 0xb3fd4
			int32_t v40 = *(int32_t *)(v39 - 20); // 0xb3fd8
			int32_t v41 = *(int32_t *)(v39 - 44); // 0xb3fdc
			int32_t v42 = *(int32_t *)(v39 - 52); // 0xb3fe4
			*(int32_t *)(v39 + 12) = v41 ^ v40 ^ *(int32_t *)v39 ^ v42;
			int32_t v43 = v25;                    // 0xb3ff4
			int32_t v44 = *(int32_t *)(v43 + 4);  // 0xb3ff4
			int32_t v45 = *(int32_t *)(v43 - 16); // 0xb3ff8
			int32_t v46 = *(int32_t *)(v43 - 40); // 0xb3ffc
			int32_t v47 = *(int32_t *)(v43 - 48); // 0xb4004
			*(int32_t *)(v43 + 16) = v46 ^ v45 ^ v44 ^ v47;
			int32_t v48 = v25;                    // 0xb4014
			int32_t v49 = *(int32_t *)(v48 + 8);  // 0xb4014
			int32_t v50 = *(int32_t *)(v48 - 12); // 0xb4018
			int32_t v51 = *(int32_t *)(v48 - 36); // 0xb401c
			int32_t v52 = *(int32_t *)(v48 - 44); // 0xb4024
			*(int32_t *)(v48 + 20) = v51 ^ v50 ^ v49 ^ v52;
			int32_t v53 = v25;                    // 0xb4034
			int32_t v54 = *(int32_t *)(v53 + 12); // 0xb4034
			int32_t v55 = *(int32_t *)(v53 - 8);  // 0xb4038
			int32_t v56 = *(int32_t *)(v53 - 32); // 0xb403c
			int32_t v57 = *(int32_t *)(v53 - 40); // 0xb4044
			*(int32_t *)(v53 + 24) = v56 ^ v55 ^ v54 ^ v57;
			int32_t v58 = v25;                    // 0xb4054
			int32_t v59 = *(int32_t *)(v58 + 16); // 0xb4054
			int32_t v60 = *(int32_t *)(v58 - 4);  // 0xb4058
			int32_t v61 = *(int32_t *)(v58 - 28); // 0xb405c
			int32_t v62 = *(int32_t *)(v58 - 36); // 0xb4064
			*(int32_t *)(v58 + 28) = v61 ^ v60 ^ v59 ^ v62;
			int32_t v63 = 7; // 0xb4078
			// branch -> 0xb3f74
			while (v63 != 0) {
				// 0xb3f74
				v25 += 32;
				v26 = *(int32_t *)(v25 - 32);
				v27 = *(int32_t *)(v25 - 56);
				v28 = *(int32_t *)(v25 - 64);
				*(int32_t *)v25 = v27 ^ v26 ^ *(int32_t *)(v25 - 12) ^ v28;
				v29 = v25;
				v30 = *(int32_t *)(v29 - 8);
				v31 = *(int32_t *)(v29 - 28);
				v32 = *(int32_t *)(v29 - 52);
				v33 = *(int32_t *)(v29 - 60);
				*(int32_t *)(v29 + 4) = v32 ^ v31 ^ v30 ^ v33;
				v34 = v25;
				v35 = *(int32_t *)(v34 - 4);
				v36 = *(int32_t *)(v34 - 24);
				v37 = *(int32_t *)(v34 - 48);
				v38 = *(int32_t *)(v34 - 56);
				*(int32_t *)(v34 + 8) = v37 ^ v36 ^ v35 ^ v38;
				v39 = v25;
				v40 = *(int32_t *)(v39 - 20);
				v41 = *(int32_t *)(v39 - 44);
				v42 = *(int32_t *)(v39 - 52);
				*(int32_t *)(v39 + 12) = v41 ^ v40 ^ *(int32_t *)v39 ^ v42;
				v43 = v25;
				v44 = *(int32_t *)(v43 + 4);
				v45 = *(int32_t *)(v43 - 16);
				v46 = *(int32_t *)(v43 - 40);
				v47 = *(int32_t *)(v43 - 48);
				*(int32_t *)(v43 + 16) = v46 ^ v45 ^ v44 ^ v47;
				v48 = v25;
				v49 = *(int32_t *)(v48 + 8);
				v50 = *(int32_t *)(v48 - 12);
				v51 = *(int32_t *)(v48 - 36);
				v52 = *(int32_t *)(v48 - 44);
				*(int32_t *)(v48 + 20) = v51 ^ v50 ^ v49 ^ v52;
				v53 = v25;
				v54 = *(int32_t *)(v53 + 12);
				v55 = *(int32_t *)(v53 - 8);
				v56 = *(int32_t *)(v53 - 32);
				v57 = *(int32_t *)(v53 - 40);
				*(int32_t *)(v53 + 24) = v56 ^ v55 ^ v54 ^ v57;
				v58 = v25;
				v59 = *(int32_t *)(v58 + 16);
				v60 = *(int32_t *)(v58 - 4);
				v61 = *(int32_t *)(v58 - 28);
				v62 = *(int32_t *)(v58 - 36);
				*(int32_t *)(v58 + 28) = v61 ^ v60 ^ v59 ^ v62;
				v63--;
				// continue -> 0xb3f74
			}
			int32_t v64 = result;                                                                                             // 0xb411c
			int32_t v65 = *(int32_t *)(result + 16);                                                                          // 0xb40b8
			int32_t v66 = *(int32_t *)(result + 12);                                                                          // 0xb40fc
			int32_t v67 = v4;                                                                                                 // 0xb40cc
			int32_t v68 = *(int32_t *)(result + 8);                                                                           // 0xb4134
			int32_t v69 = *(int32_t *)(result + 4);                                                                           // 0xb40d8
			int32_t v70 = *(int32_t *)(v67 + 4);                                                                              // 0xb40ac
			int32_t v71 = *(int32_t *)(v67 + 8);                                                                              // 0xb40b4
			int32_t v72 = *(int32_t *)(v67 + 12);                                                                             // 0xb40bc
			int32_t v73 = (v66 & -1 - v69 | v69 & v68) + v65 + *(int32_t *)v67;                                               // 0xb40c0
			int32_t v74 = *(int32_t *)(v67 + 16);                                                                             // 0xb40c4
			int32_t v75 = *(int32_t *)(v67 + 20);                                                                             // 0xb40cc
			int32_t v76 = v64 >> 31;                                                                                          // 0xb40d0
			int32_t v77 = 0x40000000 * v69 | v69 / 4 | v69 >> 31 & -0x40000000;                                               // 0xb40e4
			uint32_t v78 = (32 * v64 | v64 / 0x8000000 | v76 & -32) + 0x5a827999 + v73;                                       // 0xb40ec
			int32_t v79 = v78 / 0x80000000;                                                                                   // 0xb4108
			uint32_t v80 = v66 + 0x5a827999 + v70 + (v77 & v64 | v68 & -1 - v64) + (32 * v78 | v78 / 0x8000000 | v79 & -32);  // 0xb4118
			int32_t v81 = 0x40000000 * v64 | v64 / 4 | v76 & -0x40000000;                                                     // 0xb4124
			int32_t v82 = v80 / 0x80000000;                                                                                   // 0xb413c
			int32_t v83 = 0x40000000 * v78 | v78 / 4 | v79 & -0x40000000;                                                     // 0xb4154
			uint32_t v84 = (v77 & -1 - v78 | v78 & v81) + 0x5a827999 + v71 + (32 * v80 | v80 / 0x8000000 | v82 & -32) + v68;  // 0xb415c
			int32_t v85 = v84 / 0x80000000;                                                                                   // 0xb4178
			int32_t v86 = v77 + 0x5a827999 + (v81 & -1 - v80 | v80 & v83) + v72 + (32 * v84 | v84 / 0x8000000 | v85 & -32);   // 0xb4188
			int32_t v87 = 0x40000000 * v80 | v80 / 4 | v82 & -0x40000000;                                                     // 0xb4194
			int32_t v88 = v86 / 0x8000000;                                                                                    // 0xb41b0
			int32_t v89 = 0x40000000 * v84 | v84 / 4 | v85 & -0x40000000;                                                     // 0xb41c4
			uint32_t v90 = v81 + 0x5a827999 + v74 + (v83 & -1 - v84 | v84 & v87) + (v88 | 32 * v86);                          // 0xb41cc
			int32_t v91 = v90 / 0x80000000;                                                                                   // 0xb41f0
			int32_t v92 = v83 + 0x5a827999 + v75 + (v87 & -1 - v86 | v86 & v89) + (32 * v90 | v90 / 0x8000000 | v91 & -32);   // 0xb41f8
			int32_t v93 = v4;                                                                                                 // 0xb4200
			int32_t v94 = *(int32_t *)(v93 + 24);                                                                             // 0xb4200
			int32_t v95 = *(int32_t *)(v93 + 28);                                                                             // 0xb4208
			int32_t v96 = v86 / 4 | 0x40000000 * v86;                                                                         // 0xb420c
			int32_t v97 = v93 + 32;                                                                                           // 0xb4210
			int32_t v98 = 0;                                                                                                  // 0xb4218
			int32_t v99 = v98 + 8;                                                                                            // 0xb4218
			int32_t v100 = v92 >> 31;                                                                                         // 0xb422c
			int32_t v101 = 0x40000000 * v90 | v90 / 4 | v91 & -0x40000000;                                                    // 0xb4244
			int32_t v102 = v87 + 0x5a827999 + v94 + (v90 & v96 | v89 & -1 - v90) + (32 * v92 | v92 / 0x8000000 | v100 & -32); // 0xb424c
			int32_t v103 = v102 / 0x8000000;                                                                                  // 0xb4268
			int32_t v104 = 32 * v102;                                                                                         // 0xb4270
			int32_t v105 = v89 + 0x5a827999 + v95 + (v96 & -1 - v92 | v92 & v101) + (v103 | v104);                            // 0xb4278
			int32_t v106 = 0x40000000 * v92 | v92 / 4 | v100 & -0x40000000;                                                   // 0xb4284
			int32_t v107 = 1;                                                                                                 // 0xb4288
			// branch -> 0xb40a0
			while (v107 != 0) {
				// 0xb40a0
				v64 = v105;
				v66 = v101;
				v67 = v97;
				v68 = v106;
				v69 = v102;
				v70 = *(int32_t *)(v67 + 4);
				v71 = *(int32_t *)(v67 + 8);
				v72 = *(int32_t *)(v67 + 12);
				v73 = (v66 & -1 - v69 | v69 & v68) + v96 + *(int32_t *)v67;
				v74 = *(int32_t *)(v67 + 16);
				v75 = *(int32_t *)(v67 + 20);
				v76 = v64 >> 31;
				v77 = 0x40000000 * v69 | v69 / 4 | v69 >> 31 & -0x40000000;
				v78 = (32 * v64 | v64 / 0x8000000 | v76 & -32) + 0x5a827999 + v73;
				v79 = v78 / 0x80000000;
				v80 = v66 + 0x5a827999 + v70 + (v77 & v64 | v68 & -1 - v64) + (32 * v78 | v78 / 0x8000000 | v79 & -32);
				v81 = 0x40000000 * v64 | v64 / 4 | v76 & -0x40000000;
				v82 = v80 / 0x80000000;
				v83 = 0x40000000 * v78 | v78 / 4 | v79 & -0x40000000;
				v84 = (v77 & -1 - v78 | v78 & v81) + 0x5a827999 + v71 + (32 * v80 | v80 / 0x8000000 | v82 & -32) + v68;
				v85 = v84 / 0x80000000;
				v86 = v77 + 0x5a827999 + (v81 & -1 - v80 | v80 & v83) + v72 + (32 * v84 | v84 / 0x8000000 | v85 & -32);
				v87 = 0x40000000 * v80 | v80 / 4 | v82 & -0x40000000;
				v88 = v86 / 0x8000000;
				v89 = 0x40000000 * v84 | v84 / 4 | v85 & -0x40000000;
				v90 = v81 + 0x5a827999 + v74 + (v83 & -1 - v84 | v84 & v87) + (v88 | 32 * v86);
				v91 = v90 / 0x80000000;
				v92 = v83 + 0x5a827999 + v75 + (v87 & -1 - v86 | v86 & v89) + (32 * v90 | v90 / 0x8000000 | v91 & -32);
				v93 = v97;
				v94 = *(int32_t *)(v93 + 24);
				v95 = *(int32_t *)(v93 + 28);
				v96 = v86 / 4 | 0x40000000 * v86;
				v97 = v93 + 32;
				v98 = v99;
				v99 = v98 + 8;
				v100 = v92 >> 31;
				v101 = 0x40000000 * v90 | v90 / 4 | v91 & -0x40000000;
				v102 = v87 + 0x5a827999 + v94 + (v90 & v96 | v89 & -1 - v90) + (32 * v92 | v92 / 0x8000000 | v100 & -32);
				v103 = v102 / 0x8000000;
				v104 = 32 * v102;
				v105 = v89 + 0x5a827999 + v95 + (v96 & -1 - v92 | v92 & v101) + (v103 | v104);
				v106 = 0x40000000 * v92 | v92 / 4 | v100 & -0x40000000;
				v107--;
				// continue -> 0xb40a0
			}
			int32_t v108 = v105; // 0xb431c25
			int32_t v109 = v96;  // 0xb431423
			int32_t v110 = v101; // 0xb430c21
			int32_t v111 = v106; // 0xb430418
			int32_t v112 = v102; // 0xb430416
			if (v99 <= 19) {
				int32_t v113 = 12 - v98;                                                                                                // 0xb42f0
				int32_t v114 = v102;                                                                                                    // 0xb42dc
				int32_t v115 = v105;                                                                                                    // 0xb42e4
				int32_t v116 = v101;                                                                                                    // 0xb42d4
				int32_t v117 = v106;                                                                                                    // 0xb42d8
				int32_t v118 = 4 * v99 + v4;                                                                                            // 0xb42ac
				int32_t v119 = v114 & v117;                                                                                             // 0xb42a0
				int32_t v120 = *(int32_t *)v118;                                                                                        // 0xb42a4
				int32_t v121 = v96 + 0x5a827999 + (32 * v115 | v115 / 0x8000000 | v115 >> 31 & -32) + (v119 | v116 & -1 - v114) + v120; // 0xb42d0
				int32_t v122 = v114 / 4 | 0x40000000 * v114;                                                                            // 0xb42ec
				while (v113 != 1) {
					// 0xb42a0
					v113--;
					v114 = v115;
					v115 = v121;
					int32_t v123 = v116; // 0xb42b4
					v116 = v117;
					v117 = v122;
					v118 += 4;
					v119 = v114 & v117;
					v120 = *(int32_t *)v118;
					v121 = v123 + 0x5a827999 + (32 * v115 | v115 / 0x8000000 | v115 >> 31 & -32) + (v119 | v116 & -1 - v114) + v120;
					v122 = v114 / 4 | 0x40000000 * v114;
					// continue -> 0xb42a0
				}
				// 0xb42f4
				v108 = v121;
				v109 = v116;
				v110 = v117;
				v111 = v122;
				v112 = v115;
				// branch -> 0xb42f4
			}
			// 0xb42f4
			int32_t v124;                                                                                                       // bp-272
			int32_t v125 = &v124;                                                                                               // 0xb42f8
			int32_t v126 = *(int32_t *)(v125 + 4);                                                                              // 0xb4310
			int32_t v127 = (v112 ^ v111 ^ v110) + v109;                                                                         // 0xb4314
			int32_t v128 = *(int32_t *)(v125 + 8);                                                                              // 0xb4318
			int32_t v129 = 0x40000000 * v112 | v112 / 4 | v112 >> 31 & -0x40000000;                                             // 0xb4334
			int32_t v130 = *(int32_t *)(v125 + 12);                                                                             // 0xb4338
			int32_t v131 = *(int32_t *)(v125 + 16);                                                                             // 0xb4340
			int32_t v132 = *(int32_t *)(v125 + 20);                                                                             // 0xb4348
			uint32_t v133 = *(int32_t *)v125 + 0x6ed9eba1 + v127 + (v108 / 0x8000000 | 32 * v108);                              // 0xb435c
			int32_t v134 = v133 / 0x80000000;                                                                                   // 0xb4364
			int32_t v135 = v110 + 0x6ed9eba1 + v126 + (v129 ^ v108 ^ v111) + (32 * v133 | v133 / 0x8000000 | v134 & -32);       // 0xb4374
			int32_t v136 = 0x40000000 * v108 | v108 / 4;                                                                        // 0xb4380
			int32_t v137 = 0x40000000 * v133 | v133 / 4 | v134 & -0x40000000;                                                   // 0xb43a8
			uint32_t v138 = v111 + 0x6ed9eba1 + (v129 ^ v136 ^ v133) + v128 + (v135 / 0x8000000 | 32 * v135);                   // 0xb43c4
			int32_t v139 = v138 / 0x80000000;                                                                                   // 0xb43cc
			int32_t v140 = v129 + 0x6ed9eba1 + (v137 ^ v136 ^ v135) + v130 + (32 * v138 | v138 / 0x8000000 | v139 & -32);       // 0xb43dc
			int32_t v141 = 0x40000000 * v135 | v135 / 4;                                                                        // 0xb43e8
			int32_t v142 = v140 / 0x8000000;                                                                                    // 0xb4400
			int32_t v143 = 0x40000000 * v138 | v138 / 4 | v139 & -0x40000000;                                                   // 0xb4410
			uint32_t v144 = v136 + 0x6ed9eba1 + (v141 ^ v137 ^ v138) + (v142 | 32 * v140) + v131;                               // 0xb442c
			int32_t v145 = v144 / 0x80000000;                                                                                   // 0xb443c
			int32_t v146 = v137 + 0x6ed9eba1 + (v143 ^ v141 ^ v140) + v132 + (32 * v144 | v144 / 0x8000000 | v145 & -32);       // 0xb4444
			int32_t v147 = v125;                                                                                                // 0xb444c
			int32_t v148 = *(int32_t *)(v147 + 24);                                                                             // 0xb444c
			int32_t v149 = *(int32_t *)(v147 + 28);                                                                             // 0xb4454
			int32_t v150 = v140 / 4 | 0x40000000 * v140;                                                                        // 0xb4458
			int32_t v151 = v147 + 32;                                                                                           // 0xb445c
			int32_t v152 = 20;                                                                                                  // 0xb4464
			int32_t v153 = v152 + 8;                                                                                            // 0xb4464
			int32_t v154 = v146 / 0x8000000;                                                                                    // 0xb4474
			int32_t v155 = 0x40000000 * v144 | v144 / 4 | v145 & -0x40000000;                                                   // 0xb4488
			int32_t v156 = v141 + 0x6ed9eba1 + (v150 ^ v143 ^ v144) + v148 + (v154 | 32 * v146);                                // 0xb44a0
			int32_t v157 = v143 + 0x6ed9eba1 + (v155 ^ v150 ^ v146) + v149 + (32 * v156 | v156 / 0x8000000 | v156 >> 31 & -32); // 0xb44bc
			int32_t v158 = 0x40000000 * v146 | v146 / 4;                                                                        // 0xb44c8
			int32_t v159 = 1;                                                                                                   // 0xb44cc
			// branch -> 0xb4304
			while (v159 != 0) {
				// 0xb4304
				v108 = v157;
				v110 = v155;
				v125 = v151;
				v111 = v158;
				v112 = v156;
				v126 = *(int32_t *)(v125 + 4);
				v127 = (v112 ^ v111 ^ v110) + v150;
				v128 = *(int32_t *)(v125 + 8);
				v129 = 0x40000000 * v112 | v112 / 4 | v112 >> 31 & -0x40000000;
				v130 = *(int32_t *)(v125 + 12);
				v131 = *(int32_t *)(v125 + 16);
				v132 = *(int32_t *)(v125 + 20);
				v133 = *(int32_t *)v125 + 0x6ed9eba1 + v127 + (v108 / 0x8000000 | 32 * v108);
				v134 = v133 / 0x80000000;
				v135 = v110 + 0x6ed9eba1 + v126 + (v129 ^ v108 ^ v111) + (32 * v133 | v133 / 0x8000000 | v134 & -32);
				v136 = 0x40000000 * v108 | v108 / 4;
				v137 = 0x40000000 * v133 | v133 / 4 | v134 & -0x40000000;
				v138 = v111 + 0x6ed9eba1 + (v129 ^ v136 ^ v133) + v128 + (v135 / 0x8000000 | 32 * v135);
				v139 = v138 / 0x80000000;
				v140 = v129 + 0x6ed9eba1 + (v137 ^ v136 ^ v135) + v130 + (32 * v138 | v138 / 0x8000000 | v139 & -32);
				v141 = 0x40000000 * v135 | v135 / 4;
				v142 = v140 / 0x8000000;
				v143 = 0x40000000 * v138 | v138 / 4 | v139 & -0x40000000;
				v144 = v136 + 0x6ed9eba1 + (v141 ^ v137 ^ v138) + (v142 | 32 * v140) + v131;
				v145 = v144 / 0x80000000;
				v146 = v137 + 0x6ed9eba1 + (v143 ^ v141 ^ v140) + v132 + (32 * v144 | v144 / 0x8000000 | v145 & -32);
				v147 = v151;
				v148 = *(int32_t *)(v147 + 24);
				v149 = *(int32_t *)(v147 + 28);
				v150 = v140 / 4 | 0x40000000 * v140;
				v151 = v147 + 32;
				v152 = v153;
				v153 = v152 + 8;
				v154 = v146 / 0x8000000;
				v155 = 0x40000000 * v144 | v144 / 4 | v145 & -0x40000000;
				v156 = v141 + 0x6ed9eba1 + (v150 ^ v143 ^ v144) + v148 + (v154 | 32 * v146);
				v157 = v143 + 0x6ed9eba1 + (v155 ^ v150 ^ v146) + v149 + (32 * v156 | v156 / 0x8000000 | v156 >> 31 & -32);
				v158 = 0x40000000 * v146 | v146 / 4;
				v159--;
				// continue -> 0xb4304
			}
			int32_t v160 = v157; // 0xb457843
			int32_t v161 = v150; // 0xb456441
			int32_t v162 = v156; // 0xb455439
			int32_t v163 = v155; // 0xb454436
			int32_t v164 = v158; // 0xb454434
			if (v153 <= 39) {
				int32_t v165 = 32 - v152;                                                                                    // 0xb4530
				int32_t v166 = v156;                                                                                         // 0xb451c
				int32_t v167 = v157;                                                                                         // 0xb4524
				int32_t v168 = v155;                                                                                         // 0xb4514
				int32_t v169 = v158;                                                                                         // 0xb4518
				int32_t v170 = 4 * v153 + v4;                                                                                // 0xb44f0
				int32_t v171 = v166 ^ v169;                                                                                  // 0xb44e4
				int32_t v172 = *(int32_t *)v170;                                                                             // 0xb44e8
				int32_t v173 = v150 + 0x6ed9eba1 + (32 * v167 | v167 / 0x8000000 | v167 >> 31 & -32) + (v171 ^ v168) + v172; // 0xb4510
				int32_t v174 = v166 / 4 | 0x40000000 * v166;                                                                 // 0xb452c
				while (v165 != 1) {
					// 0xb44e4
					v165--;
					v166 = v167;
					v167 = v173;
					int32_t v175 = v168; // 0xb44f4
					v168 = v169;
					v169 = v174;
					v170 += 4;
					v171 = v166 ^ v169;
					v172 = *(int32_t *)v170;
					v173 = v175 + 0x6ed9eba1 + (32 * v167 | v167 / 0x8000000 | v167 >> 31 & -32) + (v171 ^ v168) + v172;
					v174 = v166 / 4 | 0x40000000 * v166;
					// continue -> 0xb44e4
				}
				// 0xb4534
				v160 = v173;
				v161 = v168;
				v162 = v167;
				v163 = v169;
				v164 = v174;
				// branch -> 0xb4534
			}
			// 0xb4534
			int32_t v176;                          // bp-192
			int32_t v177 = &v176;                  // 0xb4538
			int32_t v178 = *(int32_t *)(v177 + 4); // 0xb4550
			g29 = v178;
			int32_t v179 = *(int32_t *)(v177 + 8);                                                                                         // 0xb4558
			int32_t v180 = *(int32_t *)(v177 + 12);                                                                                        // 0xb4560
			int32_t v181 = ((v164 | v163) & v162 | v164 & v163) + v161;                                                                    // 0xb4564
			int32_t v182 = *(int32_t *)(v177 + 16);                                                                                        // 0xb4568
			int32_t v183 = v181 + *(int32_t *)v177;                                                                                        // 0xb456c
			int32_t v184 = *(int32_t *)(v177 + 20);                                                                                        // 0xb4570
			int32_t v185 = v160 >> 31;                                                                                                     // 0xb4578
			int32_t v186 = 0x40000000 * v162 | v162 / 4 | v162 >> 31 & -0x40000000;                                                        // 0xb458c
			uint32_t v187 = (32 * v160 | v160 / 0x8000000 | v185 & -32) - 0x70e44324 + v183;                                               // 0xb4598
			int32_t v188 = v187 / 0x80000000;                                                                                              // 0xb45b4
			uint32_t v189 = v163 - 0x70e44324 + ((v186 | v164) & v160 | v186 & v164) + v178 + (32 * v187 | v187 / 0x8000000 | v188 & -32); // 0xb45c4
			int32_t v190 = 0x40000000 * v160 | v160 / 4 | v185 & -0x40000000;                                                              // 0xb45d0
			int32_t v191 = v189 / 0x80000000;                                                                                              // 0xb45ec
			int32_t v192 = 0x40000000 * v187 | v187 / 4 | v188 & -0x40000000;                                                              // 0xb4600
			uint32_t v193 = v179 - 0x70e44324 + (v187 & (v186 | v190) | v186 & v190) + (32 * v189 | v189 / 0x8000000 | v191 & -32) + v164; // 0xb4610
			int32_t v194 = v193 / 0x80000000;                                                                                              // 0xb462c
			int32_t v195 = v186 - 0x70e44324 + ((v192 | v190) & v189 | v192 & v190) + v180 + (32 * v193 | v193 / 0x8000000 | v194 & -32);  // 0xb463c
			int32_t v196 = 0x40000000 * v189 | v189 / 4 | v191 & -0x40000000;                                                              // 0xb4648
			int32_t v197 = 0x40000000 * v193 | v193 / 4 | v194 & -0x40000000;                                                              // 0xb4678
			uint32_t v198 = v190 - 0x70e44324 + v182 + (v193 & (v196 | v192) | v196 & v192) + (v195 / 0x8000000 | 32 * v195);              // 0xb4688
			int32_t v199 = v198 / 0x80000000;                                                                                              // 0xb46ac
			int32_t v200 = v192 - 0x70e44324 + v184 + ((v197 | v196) & v195 | v197 & v196) + (32 * v198 | v198 / 0x8000000 | v199 & -32);  // 0xb46b4
			int32_t v201 = v177;                                                                                                           // 0xb46bc
			int32_t v202 = *(int32_t *)(v201 + 24);                                                                                        // 0xb46bc
			int32_t v203 = *(int32_t *)(v201 + 28);                                                                                        // 0xb46c4
			int32_t v204 = v195 / 4 | 0x40000000 * v195;                                                                                   // 0xb46c8
			int32_t v205 = v201 + 32;                                                                                                      // 0xb46cc
			int32_t v206 = 40;                                                                                                             // 0xb46d4
			int32_t v207 = v206 + 8;                                                                                                       // 0xb46d4
			int32_t v208 = v200 >> 31;                                                                                                     // 0xb46ec
			int32_t v209 = 0x40000000 * v198 | v198 / 4 | v199 & -0x40000000;                                                              // 0xb4700
			int32_t v210 = v196 - 0x70e44324 + v202 + ((v204 | v197) & v198 | v204 & v197) + (32 * v200 | v200 / 0x8000000 | v208 & -32);  // 0xb4710
			int32_t v211 = v210 / 0x8000000;                                                                                               // 0xb472c
			int32_t v212 = v197 - 0x70e44324 + v203 + ((v209 | v204) & v200 | v209 & v204) + (v211 | 32 * v210);                           // 0xb473c
			int32_t v213 = 0x40000000 * v200 | v200 / 4 | v208 & -0x40000000;                                                              // 0xb4748
			int32_t v214 = 1;                                                                                                              // 0xb474c
			// branch -> 0xb4544
			while (v214 != 0) {
				// 0xb4544
				v160 = v212;
				v162 = v210;
				v177 = v205;
				v163 = v209;
				v164 = v213;
				v178 = *(int32_t *)(v177 + 4);
				g29 = v178;
				v179 = *(int32_t *)(v177 + 8);
				v180 = *(int32_t *)(v177 + 12);
				v181 = ((v164 | v163) & v162 | v164 & v163) + v204;
				v182 = *(int32_t *)(v177 + 16);
				v183 = v181 + *(int32_t *)v177;
				v184 = *(int32_t *)(v177 + 20);
				v185 = v160 >> 31;
				v186 = 0x40000000 * v162 | v162 / 4 | v162 >> 31 & -0x40000000;
				v187 = (32 * v160 | v160 / 0x8000000 | v185 & -32) - 0x70e44324 + v183;
				v188 = v187 / 0x80000000;
				v189 = v163 - 0x70e44324 + ((v186 | v164) & v160 | v186 & v164) + v178 + (32 * v187 | v187 / 0x8000000 | v188 & -32);
				v190 = 0x40000000 * v160 | v160 / 4 | v185 & -0x40000000;
				v191 = v189 / 0x80000000;
				v192 = 0x40000000 * v187 | v187 / 4 | v188 & -0x40000000;
				v193 = v179 - 0x70e44324 + (v187 & (v186 | v190) | v186 & v190) + (32 * v189 | v189 / 0x8000000 | v191 & -32) + v164;
				v194 = v193 / 0x80000000;
				v195 = v186 - 0x70e44324 + ((v192 | v190) & v189 | v192 & v190) + v180 + (32 * v193 | v193 / 0x8000000 | v194 & -32);
				v196 = 0x40000000 * v189 | v189 / 4 | v191 & -0x40000000;
				v197 = 0x40000000 * v193 | v193 / 4 | v194 & -0x40000000;
				v198 = v190 - 0x70e44324 + v182 + (v193 & (v196 | v192) | v196 & v192) + (v195 / 0x8000000 | 32 * v195);
				v199 = v198 / 0x80000000;
				v200 = v192 - 0x70e44324 + v184 + ((v197 | v196) & v195 | v197 & v196) + (32 * v198 | v198 / 0x8000000 | v199 & -32);
				v201 = v205;
				v202 = *(int32_t *)(v201 + 24);
				v203 = *(int32_t *)(v201 + 28);
				v204 = v195 / 4 | 0x40000000 * v195;
				v205 = v201 + 32;
				v206 = v207;
				v207 = v206 + 8;
				v208 = v200 >> 31;
				v209 = 0x40000000 * v198 | v198 / 4 | v199 & -0x40000000;
				v210 = v196 - 0x70e44324 + v202 + ((v204 | v197) & v198 | v204 & v197) + (32 * v200 | v200 / 0x8000000 | v208 & -32);
				v211 = v210 / 0x8000000;
				v212 = v197 - 0x70e44324 + v203 + ((v209 | v204) & v200 | v209 & v204) + (v211 | 32 * v210);
				v213 = 0x40000000 * v200 | v200 / 4 | v208 & -0x40000000;
				v214--;
				// continue -> 0xb4544
			}
			int32_t v215 = v212; // 0xb47e461
			int32_t v216 = v204; // 0xb47dc59
			int32_t v217 = v209; // 0xb47d457
			int32_t v218 = v213; // 0xb47cc54
			int32_t v219 = v210; // 0xb47cc52
			if (v207 <= 59) {
				int32_t v220 = 52 - v206;                                                                                                  // 0xb47b8
				int32_t v221 = v210;                                                                                                       // 0xb47a4
				int32_t v222 = v212;                                                                                                       // 0xb47ac
				int32_t v223 = v209;                                                                                                       // 0xb479c
				int32_t v224 = 4 * v207 + v4;                                                                                              // 0xb4770
				int32_t v225 = v213;                                                                                                       // 0xb47a0
				int32_t v226 = v225 | v223;                                                                                                // 0xb4764
				int32_t v227 = *(int32_t *)v224;                                                                                           // 0xb4768
				int32_t v228 = v204 - 0x70e44324 + (32 * v222 | v222 / 0x8000000 | v222 >> 31 & -32) + v227 + (v226 & v221 | v225 & v223); // 0xb4798
				int32_t v229 = v221 / 4 | 0x40000000 * v221;                                                                               // 0xb47b4
				while (v220 != 1) {
					// 0xb4764
					v220--;
					v221 = v222;
					v222 = v228;
					int32_t v230 = v223; // 0xb477c
					v223 = v225;
					v224 += 4;
					v225 = v229;
					v226 = v225 | v223;
					v227 = *(int32_t *)v224;
					v228 = v230 - 0x70e44324 + (32 * v222 | v222 / 0x8000000 | v222 >> 31 & -32) + v227 + (v226 & v221 | v225 & v223);
					v229 = v221 / 4 | 0x40000000 * v221;
					// continue -> 0xb4764
				}
				// 0xb47bc
				v215 = v228;
				v216 = v223;
				v217 = v225;
				v218 = v229;
				v219 = v222;
				// branch -> 0xb47bc
			}
			// 0xb47bc
			int32_t v231;                                                           // bp-112
			int32_t v232 = &v231;                                                   // 0xb47c0
			int32_t v233 = *(int32_t *)(v232 + 4);                                  // 0xb47d8
			int32_t v234 = (v219 ^ v218 ^ v217) + v216;                             // 0xb47dc
			int32_t v235 = *(int32_t *)(v232 + 8);                                  // 0xb47e0
			int32_t v236 = 0x40000000 * v219 | v219 / 4 | v219 >> 31 & -0x40000000; // 0xb47fc
			int32_t v237 = *(int32_t *)(v232 + 12);                                 // 0xb4800
			int32_t v238 = *(int32_t *)(v232 + 16);                                 // 0xb4808
			int32_t v239 = 32 * v215;                                               // 0xb480c
			g30 = v239;
			int32_t v240 = *(int32_t *)(v232 + 20);                                                                       // 0xb4810
			uint32_t v241 = *(int32_t *)v232 - 0x359d3e2a + v234 + (v215 / 0x8000000 | v239);                             // 0xb4820
			int32_t v242 = v241 / 0x80000000;                                                                             // 0xb482c
			int32_t v243 = v217 - 0x359d3e2a + v233 + (v236 ^ v215 ^ v218) + (32 * v241 | v241 / 0x8000000 | v242 & -32); // 0xb483c
			int32_t v244 = 0x40000000 * v215 | v215 / 4;                                                                  // 0xb4848
			int32_t v245 = v243 / 0x8000000;                                                                              // 0xb485c
			g32 = v245;
			int32_t v246 = 0x40000000 * v241 | v241 / 4 | v242 & -0x40000000; // 0xb4870
			int32_t v247 = 32 * v243;                                         // 0xb4878
			g31 = v247;
			uint32_t v248 = v218 - 0x359d3e2a + (v236 ^ v244 ^ v241) + v235 + (v245 | v247);                              // 0xb488c
			int32_t v249 = v248 / 0x80000000;                                                                             // 0xb4894
			int32_t v250 = v236 - 0x359d3e2a + (v246 ^ v244 ^ v243) + v237 + (32 * v248 | v248 / 0x8000000 | v249 & -32); // 0xb48a4
			int32_t v251 = 0x40000000 * v243 | v243 / 4;                                                                  // 0xb48b0
			int32_t v252 = 0x40000000 * v248 | v248 / 4 | v249 & -0x40000000;                                             // 0xb48d8
			uint32_t v253 = v244 - 0x359d3e2a + (v251 ^ v246 ^ v248) + (v250 / 0x8000000 | 32 * v250) + v238;             // 0xb48f4
			int32_t v254 = v253 / 0x80000000;                                                                             // 0xb4904
			int32_t v255 = v246 - 0x359d3e2a + (v252 ^ v251 ^ v250) + v240 + (32 * v253 | v253 / 0x8000000 | v254 & -32); // 0xb490c
			int32_t v256 = v232;                                                                                          // 0xb4914
			int32_t v257 = *(int32_t *)(v256 + 24);                                                                       // 0xb4914
			int32_t v258 = *(int32_t *)(v256 + 28);                                                                       // 0xb491c
			int32_t v259 = v250 / 4 | 0x40000000 * v250;                                                                  // 0xb4920
			int32_t v260 = v256 + 32;                                                                                     // 0xb4924
			int32_t v261 = 60;                                                                                            // 0xb492c
			int32_t v262 = v261 + 8;                                                                                      // 0xb492c
			int32_t v263 = v255 / 0x8000000;                                                                              // 0xb493c
			g35 = v263;
			int32_t v264 = 0x40000000 * v253 | v253 / 4 | v254 & -0x40000000; // 0xb4950
			int32_t v265 = 32 * v255;                                         // 0xb4958
			g33 = v265;
			int32_t v266 = v263 | v265; // 0xb4960
			g36 = v266;
			int32_t v267 = v251 - 0x359d3e2a + (v259 ^ v252 ^ v253) + v257 + v266;                                              // 0xb4968
			int32_t v268 = v252 - 0x359d3e2a + (v264 ^ v259 ^ v255) + v258 + (32 * v267 | v267 / 0x8000000 | v267 >> 31 & -32); // 0xb4984
			int32_t v269 = 0x40000000 * v255 | v255 / 4;                                                                        // 0xb4990
			int32_t v270 = 1;                                                                                                   // 0xb4994
			// branch -> 0xb47cc
			while (v270 != 0) {
				// 0xb47cc
				v215 = v268;
				v217 = v264;
				v232 = v260;
				v218 = v269;
				v219 = v267;
				v233 = *(int32_t *)(v232 + 4);
				v234 = (v219 ^ v218 ^ v217) + v259;
				v235 = *(int32_t *)(v232 + 8);
				v236 = 0x40000000 * v219 | v219 / 4 | v219 >> 31 & -0x40000000;
				v237 = *(int32_t *)(v232 + 12);
				v238 = *(int32_t *)(v232 + 16);
				v239 = 32 * v215;
				g30 = v239;
				v240 = *(int32_t *)(v232 + 20);
				v241 = *(int32_t *)v232 - 0x359d3e2a + v234 + (v215 / 0x8000000 | v239);
				v242 = v241 / 0x80000000;
				v243 = v217 - 0x359d3e2a + v233 + (v236 ^ v215 ^ v218) + (32 * v241 | v241 / 0x8000000 | v242 & -32);
				v244 = 0x40000000 * v215 | v215 / 4;
				v245 = v243 / 0x8000000;
				g32 = v245;
				v246 = 0x40000000 * v241 | v241 / 4 | v242 & -0x40000000;
				v247 = 32 * v243;
				g31 = v247;
				v248 = v218 - 0x359d3e2a + (v236 ^ v244 ^ v241) + v235 + (v245 | v247);
				v249 = v248 / 0x80000000;
				v250 = v236 - 0x359d3e2a + (v246 ^ v244 ^ v243) + v237 + (32 * v248 | v248 / 0x8000000 | v249 & -32);
				v251 = 0x40000000 * v243 | v243 / 4;
				v252 = 0x40000000 * v248 | v248 / 4 | v249 & -0x40000000;
				v253 = v244 - 0x359d3e2a + (v251 ^ v246 ^ v248) + (v250 / 0x8000000 | 32 * v250) + v238;
				v254 = v253 / 0x80000000;
				v255 = v246 - 0x359d3e2a + (v252 ^ v251 ^ v250) + v240 + (32 * v253 | v253 / 0x8000000 | v254 & -32);
				v256 = v260;
				v257 = *(int32_t *)(v256 + 24);
				v258 = *(int32_t *)(v256 + 28);
				v259 = v250 / 4 | 0x40000000 * v250;
				v260 = v256 + 32;
				v261 = v262;
				v262 = v261 + 8;
				v263 = v255 / 0x8000000;
				g35 = v263;
				v264 = 0x40000000 * v253 | v253 / 4 | v254 & -0x40000000;
				v265 = 32 * v255;
				g33 = v265;
				v266 = v263 | v265;
				g36 = v266;
				v267 = v251 - 0x359d3e2a + (v259 ^ v252 ^ v253) + v257 + v266;
				v268 = v252 - 0x359d3e2a + (v264 ^ v259 ^ v255) + v258 + (32 * v267 | v267 / 0x8000000 | v267 >> 31 & -32);
				v269 = 0x40000000 * v255 | v255 / 4;
				v270--;
				// continue -> 0xb47cc
			}
			// 0xb4bb0
			int32_t v271;  // 0xb49fc
			int32_t *v272; // 0xb4a0c
			int32_t *v273; // 0xb4a18
			int32_t *v274; // 0xb4a24
			int32_t *v275; // 0xb4a30
			if (v262 > 79) {
				// 0xb49fc
				v271 = result;
				*(int32_t *)v271 = v271 + v268;
				v272 = (int32_t *)(result + 4);
				*v272 = v267 + *v272;
				v273 = (int32_t *)(result + 8);
				*v273 = v269 + *v273;
				v274 = (int32_t *)(result + 12);
				*v274 = v264 + *v274;
				v275 = (int32_t *)(result + 16);
				*v275 = v259 + *v275;
				return result;
			}
			int32_t v276 = 72 - v261;                                                                                    // 0xb49f8
			int32_t v277 = v267;                                                                                         // 0xb49e4
			int32_t v278 = v268;                                                                                         // 0xb49ec
			int32_t v279 = v264;                                                                                         // 0xb49dc
			int32_t v280 = v269;                                                                                         // 0xb49e0
			int32_t v281 = 4 * v262 + v4;                                                                                // 0xb49b8
			int32_t v282 = v277 ^ v280;                                                                                  // 0xb49ac
			int32_t v283 = *(int32_t *)v281;                                                                             // 0xb49b0
			int32_t v284 = v259 - 0x359d3e2a + (32 * v278 | v278 / 0x8000000 | v278 >> 31 & -32) + (v282 ^ v279) + v283; // 0xb49d8
			int32_t v285 = v277 / 4 | 0x40000000 * v277;                                                                 // 0xb49f4
			while (v276 != 1) {
				// 0xb49ac
				v276--;
				v277 = v278;
				v278 = v284;
				int32_t v286 = v279; // 0xb49bc
				v279 = v280;
				v280 = v285;
				v281 += 4;
				v282 = v277 ^ v280;
				v283 = *(int32_t *)v281;
				v284 = v286 - 0x359d3e2a + (32 * v278 | v278 / 0x8000000 | v278 >> 31 & -32) + (v282 ^ v279) + v283;
				v285 = v277 / 4 | 0x40000000 * v277;
				// continue -> 0xb49ac
			}
			// 0xb49fc
			// branch -> 0xb49fc
			// 0xb49fc
			v271 = result;
			*(int32_t *)v271 = v271 + v284;
			v272 = (int32_t *)(result + 4);
			*v272 = v278 + *v272;
			v273 = (int32_t *)(result + 8);
			*v273 = v285 + *v273;
			v274 = (int32_t *)(result + 12);
			*v274 = v280 + *v274;
			v275 = (int32_t *)(result + 16);
			*v275 = v279 + *v275;
			return result;
		}
		// 0xb3efc
		v6 = v2;
		// branch -> 0xb3efc
	}
}

// Address range: 0xb4bcc - 0xb4c6c
int32_t SHA1Input(int32_t a1, int32_t a2)
{
	int32_t v1 = g36;                         // 0xb4bcc
	int32_t v2 = g38;                         // 0xb4bd0
	int32_t v3 = __asm_rlwinm_(v2, 3, 0, 28); // 0xb4bd8
	int32_t v4 = g35;                         // 0xb4bdc
	int32_t v5 = g33;                         // 0xb4be4
	g33 = a1;
	int32_t v6 = a1; // 0xb4c10
	if (v3 <= 0xffffffff) {
		int32_t *v7 = (int32_t *)(a1 + 24); // 0xb4bf8
		*v7 = *v7 + 1;
		v6 = g33;
		// branch -> 0xb4c04
	}
	int32_t *v8 = (int32_t *)(v6 + 20); // 0xb4c04
	*v8 = *v8 + v3;
	int32_t *v9 = (int32_t *)(g33 + 24); // 0xb4c14
	int32_t result = *v9;                // 0xb4c14
	*v9 = v2 / 0x20000000 + result;
	if (v2 <= 63) {
		// 0xb4c04
		// branch -> 0xb4c50
		// 0xb4c50
		g36 = v1;
		g35 = v4;
		g33 = v5;
		return result;
	}
	// 0xb4c24
	g34 = g33 + 28;
	memcpy();
	int32_t result2 = SHA1ProcessMessageBlock((int32_t *)g33); // 0xb4c3c
	// branch -> 0xb4c24
	while (g36 > 127) {
		// 0xb4c24
		g34 = g33 + 28;
		memcpy();
		result2 = SHA1ProcessMessageBlock((int32_t *)g33);
		// continue -> 0xb4c24
	}
	// 0xb4c50
	g36 = v1;
	g35 = v4;
	g33 = v5;
	return result2;
}

// Address range: 0xb4c6c - 0xb4c98
int32_t SHA1Clear(void)
{
	// 0xb4c6c
	g34 = *(int32_t *)(g23 - 0x582c);
	g37 = 276;
	return memset();
}

// Address range: 0xb4c98 - 0xb4d24
int32_t SHA1Result(int32_t result, int32_t a2)
{
	// 0xb4c98
	if (a2 == 0) {
		// bb
		return result;
	}
	int32_t v1 = *(int32_t *)(g23 - 0x582c) + 92 * result; // 0xb4cac
	int32_t v2 = *(int32_t *)v1;                           // 0xb4cb8
	__asm_stwbrx(v2, v2, a2);
	int32_t v3 = *(int32_t *)(v1 + 4); // 0xb4ccc
	__asm_stwbrx(v3, v3, a2 + 4);
	int32_t v4 = *(int32_t *)(v1 + 8); // 0xb4ce4
	__asm_stwbrx(v4, v4, a2 + 8);
	int32_t v5 = *(int32_t *)(v1 + 12); // 0xb4cfc
	__asm_stwbrx(v5, v5, a2 + 12);
	int32_t result2 = a2 + 16;          // 0xb4d10
	int32_t v6 = *(int32_t *)(v1 + 16); // 0xb4d14
	__asm_stwbrx(v6, v6, result2);
	return result2;
}

// Address range: 0xb4d24 - 0xb4d80
int32_t SHA1Calculate(int32_t a1, int32_t a2, int32_t a3)
{
	int32_t v1 = g36; // 0xb4d24
	g36 = a2;
	g38 = 64;
	int32_t v2 = g35; // 0xb4d34
	g35 = a1;
	int32_t v3 = SHA1Input(*(int32_t *)(g23 - 0x582c) + 92 * a1, 64); // 0xb4d50
	int32_t v4 = g36;                                                      // 0xb4d54
	int32_t result;                                                        // 0xb4d7c
	if (v4 != 0) {
		// 0xb4d5c
		result = SHA1Result(g35, v4);
		// branch -> 0xb4d68
	} else {
		result = v3;
	}
	// 0xb4d68
	g36 = v1;
	g35 = v2;
	return result;
}

// Address range: 0xb4d80 - 0xb4dac
int32_t SHA1Reset(int32_t a1)
{
	// 0xb4d80
	return SHA1Init((int32_t *)(*(int32_t *)(g23 - 0x582c) + 92 * a1));
}
